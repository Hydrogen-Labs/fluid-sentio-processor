/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
    
import { FuelAbstractProcessor, FuelContractContext, FuelProcessorConfig, TypedCall, FuelFetchConfig, FuelCall, FuelLog, addFuelProcessor, getFuelProcessor, FuelBaseProcessorTemplate } from '@sentio/sdk/fuel'
import {Option,Enum,Result} from './common.js'
import {ColorErrorInput,ColorErrorOutput,FooInput,FooOutput, CounterContract} from './CounterContract.js'

import type { BigNumberish, BN } from 'fuels';
import type { BytesLike, Bytes } from 'fuels';


namespace CounterContractNS {
  export abstract class CallWithLogs<T extends Array<any>, R> extends TypedCall<T, R> {

    getLogsOfTypeBN(): Array<BN> {
      return this.logs?.filter(l =>["1515152261580153489"].includes(l.logId) ).map(l => l.data) as Array<BN>
    }

    getLogsOfTypeFoo(): Array<FooOutput> {
      return this.logs?.filter(l =>["9006093109815063660"].includes(l.logId) ).map(l => l.data) as Array<FooOutput>
    }

    getLogsOfTypeString(): Array<string> {
      return this.logs?.filter(l =>["14631882454972838106", "8961848586872524460"].includes(l.logId) ).map(l => l.data) as Array<string>
    }

    getLogsOfTypeNumber(): Array<number> {
      return this.logs?.filter(l =>["15520703124961489725"].includes(l.logId) ).map(l => l.data) as Array<number>
    }
  }


}

type LogIdFilter<T> = T | T[]
const LogBNId = "1515152261580153489"
const LogFooId = "9006093109815063660"
const LogStringId0 = "14631882454972838106"
const LogStringId1 = "8961848586872524460"
const LogNumberId = "15520703124961489725"

export class CounterContractProcessor extends FuelAbstractProcessor<CounterContract> {
  static bind(options: Omit<FuelProcessorConfig, 'abi'>) {
    if (!options.name) {
      options.name = "CounterContract"
    }
    let processor = getFuelProcessor(options) as CounterContractProcessor
    if (!processor) {
      processor = new CounterContractProcessor(CounterContract.abi, {
        name: 'CounterContract',
        ...options,
      })
      addFuelProcessor(options, processor)
    }
    return processor
  }

   

  
  onLogBN(handler: (log: FuelLog<BN>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>) {
    return super.onLog<BN>([LogBNId], (log, ctx) => handler(log, ctx))
  }

  onLogFoo(handler: (log: FuelLog<FooOutput>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>) {
    return super.onLog<FooOutput>([LogFooId], (log, ctx) => handler(log, ctx))
  }

  onLogString(handler: (log: FuelLog<string>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>, 
               logIdFilter?: LogIdFilter<typeof LogStringId0 | typeof LogStringId1> ) {
    return super.onLog<string>(logIdFilter ?? [LogStringId0, LogStringId1], (log, ctx) => handler(log, ctx))
  }

  onLogNumber(handler: (log: FuelLog<number>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>) {
    return super.onLog<number>([LogNumberId], (log, ctx) => handler(log, ctx))
  }

}

export class CounterContractProcessorTemplate extends FuelBaseProcessorTemplate<CounterContract> {
  bindInternal(options: Omit<FuelProcessorConfig, 'abi'>) {
    return CounterContractProcessor.bind(options)
  }

  
  onLogBN(handler: (log: FuelLog<BN>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>) {
    return super.onLog<BN>([LogBNId], (log, ctx) => handler(log, ctx))
  }

  onLogFoo(handler: (log: FuelLog<FooOutput>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>) {
    return super.onLog<FooOutput>([LogFooId], (log, ctx) => handler(log, ctx))
  }

  onLogString(handler: (log: FuelLog<string>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>, 
               logIdFilter?: LogIdFilter<typeof LogStringId0 | typeof LogStringId1> ) {
    return super.onLog<string>(logIdFilter ?? [LogStringId0, LogStringId1], (log, ctx) => handler(log, ctx))
  }

  onLogNumber(handler: (log: FuelLog<number>, ctx: FuelContractContext<CounterContract>) => void | Promise<void>) {
    return super.onLog<number>([LogNumberId], (log, ctx) => handler(log, ctx))
  }
}

