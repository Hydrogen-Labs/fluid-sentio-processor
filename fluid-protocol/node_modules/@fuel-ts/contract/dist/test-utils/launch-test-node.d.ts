import type { Account } from '@fuel-ts/account';
import type { LaunchCustomProviderAndGetWalletsOptions, SetupTestProviderAndWalletsReturn } from '@fuel-ts/account/test-utils';
import type { DeployContractOptions, DeployContractResult } from '../contract-factory';
export interface DeployableContractFactory {
    deploy(wallet: Account, options?: DeployContractOptions): Promise<DeployContractResult>;
}
export interface DeployContractConfig {
    /**
     * Contract factory class outputted by `pnpm fuels typegen`.
     */
    factory: DeployableContractFactory;
    /**
     * Options for contract deployment taken from `ContractFactory`.
     */
    options?: DeployContractOptions;
    /**
     * Index of wallet to be used for deployment. Defaults to `0` (first wallet).
     */
    walletIndex?: number;
}
export interface LaunchTestNodeOptions<TContractConfigs extends DeployContractConfig[]> extends LaunchCustomProviderAndGetWalletsOptions {
    /**
     * Pass in either the path to the contract's root directory to deploy the contract or use `DeployContractConfig` for more control.
     */
    contractsConfigs: TContractConfigs;
}
export type TContracts<T extends DeployContractConfig[]> = {
    [K in keyof T]: Awaited<ReturnType<Awaited<ReturnType<T[K]['factory']['deploy']>>['waitForResult']>>['contract'];
};
export interface LaunchTestNodeReturn<TFactories extends DeployContractConfig[]> extends SetupTestProviderAndWalletsReturn {
    contracts: TContracts<TFactories>;
}
export declare function launchTestNode<const TFactories extends DeployContractConfig[]>({ providerOptions, walletsConfig, nodeOptions, contractsConfigs, }?: Partial<LaunchTestNodeOptions<TFactories>>): Promise<LaunchTestNodeReturn<TFactories>>;
//# sourceMappingURL=launch-test-node.d.ts.map