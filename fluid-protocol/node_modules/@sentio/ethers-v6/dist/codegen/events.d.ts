import { EventArgDeclaration, EventDeclaration } from 'typechain';
export declare function generateEventFilters(events: EventDeclaration[]): string;
export declare function generateEventTypeExports(events: EventDeclaration[]): string;
export declare function generateEventTypeExport(event: EventDeclaration, includeArgTypes: boolean): string;
export declare function generateInterfaceEventDescription(event: EventDeclaration): string;
export declare function generateEventSignature(event: EventDeclaration): string;
export declare function generateEventInputs(eventArgs: EventArgDeclaration[]): string;
export declare function generateEventArgType(eventArg: EventArgDeclaration): string;
export declare function generateGetEvent(event: EventDeclaration, useSignature: boolean): string;
export declare const EVENT_METHOD_OVERRIDES = "\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlock?: BlockTag,\n    toBlock?: BlockTag,\n  ): Promise<Array<TEvent>>\n";
export declare const EVENT_IMPORTS: string[];
