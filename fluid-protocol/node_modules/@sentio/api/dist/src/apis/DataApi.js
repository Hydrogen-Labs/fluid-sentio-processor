/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { AnalyticServiceAnalyticServiceExecuteSQLBodyToJSON, AnalyticServiceLogQueryResponseFromJSON, AnalyticServiceSearchServiceQueryLogBodyToJSON, AnalyticServiceSyncExecuteSQLResponseFromJSON, InsightsServiceInsightsServiceQueryBodyToJSON, InsightsServiceInsightsServiceRetentionBodyToJSON, InsightsServiceListCoinsResponseFromJSON, InsightsServiceQueryResponseFromJSON, InsightsServiceRetentionRequestToJSON, InsightsServiceRetentionResponseFromJSON, MetricsServiceGetMetricsResponseFromJSON, MetricsServiceMetricsQueryResponseFromJSON, MetricsServiceObservabilityServiceQueryBodyToJSON, MetricsServiceObservabilityServiceQueryRangeBodyToJSON, MetricsServiceQueryValueResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class DataApi extends runtime.BaseAPI {
    /**
     * Execute SQL in a project. Go to \"Data Studio\" -> \"SQL Editor\", write your query and then click \"Export as cURL\"  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(102).png)  Find more: https://docs.sentio.xyz/reference/data#sql-api
     * Execute SQL
     */
    async executeSQLRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling executeSQL().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling executeSQL().');
        }
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling executeSQL().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/analytics/{owner}/{slug}/sql/execute`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticServiceAnalyticServiceExecuteSQLBodyToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceSyncExecuteSQLResponseFromJSON(jsonValue));
    }
    /**
     * Execute SQL in a project. Go to \"Data Studio\" -> \"SQL Editor\", write your query and then click \"Export as cURL\"  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(102).png)  Find more: https://docs.sentio.xyz/reference/data#sql-api
     * Execute SQL
     */
    async executeSQL(requestParameters, initOverrides) {
        const response = await this.executeSQLRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a list of coins in a project.
     * List coins
     */
    async listCoinsRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling listCoins().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling listCoins().');
        }
        const queryParameters = {};
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }
        if (requestParameters['searchQuery'] != null) {
            queryParameters['searchQuery'] = requestParameters['searchQuery'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/insights/{owner}/{slug}/coins`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceListCoinsResponseFromJSON(jsonValue));
    }
    /**
     * Get a list of coins in a project.
     * List coins
     */
    async listCoins(requestParameters, initOverrides) {
        const response = await this.listCoinsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a list of coins in a project.
     * List coins
     */
    async listCoins2Raw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['projectOwner'] != null) {
            queryParameters['projectOwner'] = requestParameters['projectOwner'];
        }
        if (requestParameters['projectSlug'] != null) {
            queryParameters['projectSlug'] = requestParameters['projectSlug'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }
        if (requestParameters['searchQuery'] != null) {
            queryParameters['searchQuery'] = requestParameters['searchQuery'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/insights/coins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceListCoinsResponseFromJSON(jsonValue));
    }
    /**
     * Get a list of coins in a project.
     * List coins
     */
    async listCoins2(requestParameters = {}, initOverrides) {
        const response = await this.listCoins2Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a list of metrics in a project
     */
    async observabilityServiceGetMetricsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }
        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/metrics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceGetMetricsResponseFromJSON(jsonValue));
    }
    /**
     * Get a list of metrics in a project
     */
    async observabilityServiceGetMetrics(requestParameters = {}, initOverrides) {
        const response = await this.observabilityServiceGetMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Metric instant queries
     */
    async observabilityServiceQueryRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling observabilityServiceQuery().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling observabilityServiceQuery().');
        }
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling observabilityServiceQuery().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/metrics/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetricsServiceObservabilityServiceQueryBodyToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceQueryValueResponseFromJSON(jsonValue));
    }
    /**
     * Metric instant queries
     */
    async observabilityServiceQuery(requestParameters, initOverrides) {
        const response = await this.observabilityServiceQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * The easiest way to build query is through UI, you could first create an insight chart, and then **Export as cURL**.  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(101).png)
     * Metric range queries
     */
    async observabilityServiceQueryRangeRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling observabilityServiceQueryRange().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling observabilityServiceQueryRange().');
        }
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling observabilityServiceQueryRange().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/metrics/{owner}/{slug}/query_range`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetricsServiceObservabilityServiceQueryRangeBodyToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => MetricsServiceMetricsQueryResponseFromJSON(jsonValue));
    }
    /**
     * The easiest way to build query is through UI, you could first create an insight chart, and then **Export as cURL**.  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(101).png)
     * Metric range queries
     */
    async observabilityServiceQueryRange(requestParameters, initOverrides) {
        const response = await this.observabilityServiceQueryRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Query for metrics,event logs and coin prices in a project.
     * Insight Query
     */
    async queryRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling query().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling query().');
        }
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling query().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/insights/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsightsServiceInsightsServiceQueryBodyToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceQueryResponseFromJSON(jsonValue));
    }
    /**
     * Query for metrics,event logs and coin prices in a project.
     * Insight Query
     */
    async query(requestParameters, initOverrides) {
        const response = await this.queryRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Query event logs
     */
    async queryLogRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling queryLog().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling queryLog().');
        }
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling queryLog().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/eventlogs/{owner}/{slug}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnalyticServiceSearchServiceQueryLogBodyToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceLogQueryResponseFromJSON(jsonValue));
    }
    /**
     * Query event logs
     */
    async queryLog(requestParameters, initOverrides) {
        const response = await this.queryLogRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Query event logs
     */
    async queryLog2Raw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling queryLog2().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling queryLog2().');
        }
        const queryParameters = {};
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }
        if (requestParameters['timeRangeStartRelativeTimeUnit'] != null) {
            queryParameters['timeRange.start.relativeTime.unit'] = requestParameters['timeRangeStartRelativeTimeUnit'];
        }
        if (requestParameters['timeRangeStartRelativeTimeValue'] != null) {
            queryParameters['timeRange.start.relativeTime.value'] = requestParameters['timeRangeStartRelativeTimeValue'];
        }
        if (requestParameters['timeRangeStartRelativeTimeAlign'] != null) {
            queryParameters['timeRange.start.relativeTime.align'] = requestParameters['timeRangeStartRelativeTimeAlign'];
        }
        if (requestParameters['timeRangeStartAbsoluteTime'] != null) {
            queryParameters['timeRange.start.absoluteTime'] = requestParameters['timeRangeStartAbsoluteTime'];
        }
        if (requestParameters['timeRangeEndRelativeTimeUnit'] != null) {
            queryParameters['timeRange.end.relativeTime.unit'] = requestParameters['timeRangeEndRelativeTimeUnit'];
        }
        if (requestParameters['timeRangeEndRelativeTimeValue'] != null) {
            queryParameters['timeRange.end.relativeTime.value'] = requestParameters['timeRangeEndRelativeTimeValue'];
        }
        if (requestParameters['timeRangeEndRelativeTimeAlign'] != null) {
            queryParameters['timeRange.end.relativeTime.align'] = requestParameters['timeRangeEndRelativeTimeAlign'];
        }
        if (requestParameters['timeRangeEndAbsoluteTime'] != null) {
            queryParameters['timeRange.end.absoluteTime'] = requestParameters['timeRangeEndAbsoluteTime'];
        }
        if (requestParameters['timeRangeStep'] != null) {
            queryParameters['timeRange.step'] = requestParameters['timeRangeStep'];
        }
        if (requestParameters['timeRangeIntervalValue'] != null) {
            queryParameters['timeRange.interval.value'] = requestParameters['timeRangeIntervalValue'];
        }
        if (requestParameters['timeRangeIntervalUnit'] != null) {
            queryParameters['timeRange.interval.unit'] = requestParameters['timeRangeIntervalUnit'];
        }
        if (requestParameters['timeRangeTimezone'] != null) {
            queryParameters['timeRange.timezone'] = requestParameters['timeRangeTimezone'];
        }
        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }
        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }
        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/eventlogs/{owner}/{slug}/query`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AnalyticServiceLogQueryResponseFromJSON(jsonValue));
    }
    /**
     * Query event logs
     */
    async queryLog2(requestParameters, initOverrides) {
        const response = await this.queryLog2Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Query for retention.
     * Retention query
     */
    async retentionRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling retention().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling retention().');
        }
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling retention().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/insights/{owner}/{slug}/retention`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsightsServiceInsightsServiceRetentionBodyToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceRetentionResponseFromJSON(jsonValue));
    }
    /**
     * Query for retention.
     * Retention query
     */
    async retention(requestParameters, initOverrides) {
        const response = await this.retentionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Query for retention.
     * Retention query
     */
    async retention2Raw(requestParameters, initOverrides) {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling retention2().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/insights/retention`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InsightsServiceRetentionRequestToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => InsightsServiceRetentionResponseFromJSON(jsonValue));
    }
    /**
     * Query for retention.
     * Retention query
     */
    async retention2(requestParameters, initOverrides) {
        const response = await this.retention2Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=DataApi.js.map