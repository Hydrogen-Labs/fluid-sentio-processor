/* tslint:disable */
/* eslint-disable */
/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { WebServiceDashboardFromJSON, WebServiceExportDashboardResponseFromJSON, WebServiceGetDashboardResponseFromJSON, WebServiceGetProjectListResponseFromJSON, WebServiceGetProjectResponseFromJSON, WebServiceImportDashboardRequestToJSON, WebServiceImportDashboardResponseFromJSON, } from '../models/index.js';
/**
 *
 */
export class WebApi extends runtime.BaseAPI {
    /**
     * Delete a dashboard by id
     */
    async deleteDashboardRaw(requestParameters, initOverrides) {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError('dashboardId', 'Required parameter "dashboardId" was null or undefined when calling deleteDashboard().');
        }
        const queryParameters = {};
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        if (requestParameters['ownerName'] != null) {
            queryParameters['ownerName'] = requestParameters['ownerName'];
        }
        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceDashboardFromJSON(jsonValue));
    }
    /**
     * Delete a dashboard by id
     */
    async deleteDashboard(requestParameters, initOverrides) {
        const response = await this.deleteDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Export a dashboard to json
     */
    async exportDashboardRaw(requestParameters, initOverrides) {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError('dashboardId', 'Required parameter "dashboardId" was null or undefined when calling exportDashboard().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}/json`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceExportDashboardResponseFromJSON(jsonValue));
    }
    /**
     * Export a dashboard to json
     */
    async exportDashboard(requestParameters, initOverrides) {
        const response = await this.exportDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a dashboard by id
     */
    async getDashboardRaw(requestParameters, initOverrides) {
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError('dashboardId', 'Required parameter "dashboardId" was null or undefined when calling getDashboard().');
        }
        const queryParameters = {};
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        if (requestParameters['ownerName'] != null) {
            queryParameters['ownerName'] = requestParameters['ownerName'];
        }
        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/dashboards/{dashboardId}`.replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }
    /**
     * Get a dashboard by id
     */
    async getDashboard(requestParameters, initOverrides) {
        const response = await this.getDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get a dashboard by id
     */
    async getDashboard2Raw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling getDashboard2().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling getDashboard2().');
        }
        if (requestParameters['dashboardId'] == null) {
            throw new runtime.RequiredError('dashboardId', 'Required parameter "dashboardId" was null or undefined when calling getDashboard2().');
        }
        const queryParameters = {};
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/projects/{owner}/{slug}/dashboards/{dashboardId}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))).replace(`{${"dashboardId"}}`, encodeURIComponent(String(requestParameters['dashboardId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }
    /**
     * Get a dashboard by id
     */
    async getDashboard2(requestParameters, initOverrides) {
        const response = await this.getDashboard2Raw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get project details
     */
    async getProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling getProject().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling getProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/project/{owner}/{slug}`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetProjectResponseFromJSON(jsonValue));
    }
    /**
     * Get project details
     */
    async getProject(requestParameters, initOverrides) {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Get project list
     */
    async getProjectListRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }
        if (requestParameters['organizationId'] != null) {
            queryParameters['organizationId'] = requestParameters['organizationId'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetProjectListResponseFromJSON(jsonValue));
    }
    /**
     * Get project list
     */
    async getProjectList(requestParameters = {}, initOverrides) {
        const response = await this.getProjectListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Import a dashboard to another dashboard
     */
    async importDashboardRaw(requestParameters, initOverrides) {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError('body', 'Required parameter "body" was null or undefined when calling importDashboard().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/dashboards/json`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebServiceImportDashboardRequestToJSON(requestParameters['body']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceImportDashboardResponseFromJSON(jsonValue));
    }
    /**
     * Import a dashboard to another dashboard
     */
    async importDashboard(requestParameters, initOverrides) {
        const response = await this.importDashboardRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List all dashboards in a project
     */
    async listDashboardsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['dashboardId'] != null) {
            queryParameters['dashboardId'] = requestParameters['dashboardId'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        if (requestParameters['ownerName'] != null) {
            queryParameters['ownerName'] = requestParameters['ownerName'];
        }
        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/dashboards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }
    /**
     * List all dashboards in a project
     */
    async listDashboards(requestParameters = {}, initOverrides) {
        const response = await this.listDashboardsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * List all dashboards in a project
     */
    async listDashboards2Raw(requestParameters, initOverrides) {
        if (requestParameters['owner'] == null) {
            throw new runtime.RequiredError('owner', 'Required parameter "owner" was null or undefined when calling listDashboards2().');
        }
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError('slug', 'Required parameter "slug" was null or undefined when calling listDashboards2().');
        }
        const queryParameters = {};
        if (requestParameters['dashboardId'] != null) {
            queryParameters['dashboardId'] = requestParameters['dashboardId'];
        }
        if (requestParameters['projectId'] != null) {
            queryParameters['projectId'] = requestParameters['projectId'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["api-key"] = await this.configuration.apiKey("api-key"); // ApiKeyAuth authentication
        }
        const response = await this.request({
            path: `/api/v1/projects/{owner}/{slug}/dashboards`.replace(`{${"owner"}}`, encodeURIComponent(String(requestParameters['owner']))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => WebServiceGetDashboardResponseFromJSON(jsonValue));
    }
    /**
     * List all dashboards in a project
     */
    async listDashboards2(requestParameters, initOverrides) {
        const response = await this.listDashboards2Raw(requestParameters, initOverrides);
        return await response.value();
    }
}
//# sourceMappingURL=WebApi.js.map