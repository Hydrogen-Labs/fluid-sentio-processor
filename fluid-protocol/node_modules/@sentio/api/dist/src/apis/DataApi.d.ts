/**
 * Sentio API
 * Sentio Open API for query data
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import type { AnalyticServiceAnalyticServiceExecuteSQLBody, AnalyticServiceLogQueryResponse, AnalyticServiceSearchServiceQueryLogBody, AnalyticServiceSyncExecuteSQLResponse, InsightsServiceInsightsServiceQueryBody, InsightsServiceInsightsServiceRetentionBody, InsightsServiceListCoinsResponse, InsightsServiceQueryResponse, InsightsServiceRetentionRequest, InsightsServiceRetentionResponse, MetricsServiceGetMetricsResponse, MetricsServiceMetricsQueryResponse, MetricsServiceObservabilityServiceQueryBody, MetricsServiceObservabilityServiceQueryRangeBody, MetricsServiceQueryValueResponse } from '../models/index.js';
export interface ExecuteSQLRequest {
    owner: string;
    slug: string;
    body: AnalyticServiceAnalyticServiceExecuteSQLBody;
}
export interface ListCoinsRequest {
    owner: string;
    slug: string;
    projectId?: string;
    version?: number;
    limit?: number;
    offset?: number;
    searchQuery?: string;
}
export interface ListCoins2Request {
    projectOwner?: string;
    projectSlug?: string;
    projectId?: string;
    version?: number;
    limit?: number;
    offset?: number;
    searchQuery?: string;
}
export interface ObservabilityServiceGetMetricsRequest {
    projectId?: string;
    name?: string;
    version?: number;
}
export interface ObservabilityServiceQueryRequest {
    owner: string;
    slug: string;
    body: MetricsServiceObservabilityServiceQueryBody;
}
export interface ObservabilityServiceQueryRangeRequest {
    owner: string;
    slug: string;
    body: MetricsServiceObservabilityServiceQueryRangeBody;
}
export interface QueryRequest {
    owner: string;
    slug: string;
    body: InsightsServiceInsightsServiceQueryBody;
}
export interface QueryLogRequest {
    owner: string;
    slug: string;
    body: AnalyticServiceSearchServiceQueryLogBody;
}
export interface QueryLog2Request {
    owner: string;
    slug: string;
    projectId?: string;
    query?: string;
    timeRangeStartRelativeTimeUnit?: string;
    timeRangeStartRelativeTimeValue?: number;
    timeRangeStartRelativeTimeAlign?: string;
    timeRangeStartAbsoluteTime?: string;
    timeRangeEndRelativeTimeUnit?: string;
    timeRangeEndRelativeTimeValue?: number;
    timeRangeEndRelativeTimeAlign?: string;
    timeRangeEndAbsoluteTime?: string;
    timeRangeStep?: string;
    timeRangeIntervalValue?: number;
    timeRangeIntervalUnit?: string;
    timeRangeTimezone?: string;
    limit?: number;
    offset?: number;
    version?: number;
}
export interface RetentionRequest {
    owner: string;
    slug: string;
    body: InsightsServiceInsightsServiceRetentionBody;
}
export interface Retention2Request {
    body: InsightsServiceRetentionRequest;
}
/**
 *
 */
export declare class DataApi extends runtime.BaseAPI {
    /**
     * Execute SQL in a project. Go to \"Data Studio\" -> \"SQL Editor\", write your query and then click \"Export as cURL\"  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(102).png)  Find more: https://docs.sentio.xyz/reference/data#sql-api
     * Execute SQL
     */
    executeSQLRaw(requestParameters: ExecuteSQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceSyncExecuteSQLResponse>>;
    /**
     * Execute SQL in a project. Go to \"Data Studio\" -> \"SQL Editor\", write your query and then click \"Export as cURL\"  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(102).png)  Find more: https://docs.sentio.xyz/reference/data#sql-api
     * Execute SQL
     */
    executeSQL(requestParameters: ExecuteSQLRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceSyncExecuteSQLResponse>;
    /**
     * Get a list of coins in a project.
     * List coins
     */
    listCoinsRaw(requestParameters: ListCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceListCoinsResponse>>;
    /**
     * Get a list of coins in a project.
     * List coins
     */
    listCoins(requestParameters: ListCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceListCoinsResponse>;
    /**
     * Get a list of coins in a project.
     * List coins
     */
    listCoins2Raw(requestParameters: ListCoins2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceListCoinsResponse>>;
    /**
     * Get a list of coins in a project.
     * List coins
     */
    listCoins2(requestParameters?: ListCoins2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceListCoinsResponse>;
    /**
     * Get a list of metrics in a project
     */
    observabilityServiceGetMetricsRaw(requestParameters: ObservabilityServiceGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceGetMetricsResponse>>;
    /**
     * Get a list of metrics in a project
     */
    observabilityServiceGetMetrics(requestParameters?: ObservabilityServiceGetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceGetMetricsResponse>;
    /**
     * Metric instant queries
     */
    observabilityServiceQueryRaw(requestParameters: ObservabilityServiceQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceQueryValueResponse>>;
    /**
     * Metric instant queries
     */
    observabilityServiceQuery(requestParameters: ObservabilityServiceQueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceQueryValueResponse>;
    /**
     * The easiest way to build query is through UI, you could first create an insight chart, and then **Export as cURL**.  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(101).png)
     * Metric range queries
     */
    observabilityServiceQueryRangeRaw(requestParameters: ObservabilityServiceQueryRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetricsServiceMetricsQueryResponse>>;
    /**
     * The easiest way to build query is through UI, you could first create an insight chart, and then **Export as cURL**.  ![screenshot](https://raw.githubusercontent.com/sentioxyz/docs/main/.gitbook/assets/image%20(101).png)
     * Metric range queries
     */
    observabilityServiceQueryRange(requestParameters: ObservabilityServiceQueryRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetricsServiceMetricsQueryResponse>;
    /**
     * Query for metrics,event logs and coin prices in a project.
     * Insight Query
     */
    queryRaw(requestParameters: QueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceQueryResponse>>;
    /**
     * Query for metrics,event logs and coin prices in a project.
     * Insight Query
     */
    query(requestParameters: QueryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceQueryResponse>;
    /**
     * Query event logs
     */
    queryLogRaw(requestParameters: QueryLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceLogQueryResponse>>;
    /**
     * Query event logs
     */
    queryLog(requestParameters: QueryLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceLogQueryResponse>;
    /**
     * Query event logs
     */
    queryLog2Raw(requestParameters: QueryLog2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalyticServiceLogQueryResponse>>;
    /**
     * Query event logs
     */
    queryLog2(requestParameters: QueryLog2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalyticServiceLogQueryResponse>;
    /**
     * Query for retention.
     * Retention query
     */
    retentionRaw(requestParameters: RetentionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceRetentionResponse>>;
    /**
     * Query for retention.
     * Retention query
     */
    retention(requestParameters: RetentionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceRetentionResponse>;
    /**
     * Query for retention.
     * Retention query
     */
    retention2Raw(requestParameters: Retention2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InsightsServiceRetentionResponse>>;
    /**
     * Query for retention.
     * Retention query
     */
    retention2(requestParameters: Retention2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InsightsServiceRetentionResponse>;
}
