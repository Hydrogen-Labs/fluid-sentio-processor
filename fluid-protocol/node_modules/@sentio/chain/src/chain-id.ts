// copy from https://github.com/DefiLlama/chainlist/blob/main/constants/chainIds.js
// and https://besu.hyperledger.org/en/stable/Concepts/NetworkID-And-ChainID/

export enum ChainType {
  SOLANA = 'solana',
  SUI = 'sui',
  APTOS = 'aptos',
  ETH = 'evm',
  BTC = 'btc'
}

export enum EthChainId { // Any modify to this must also be modify in EthChainName
  ETHEREUM = '1',
  OPTIMISM = '10',
  CRONOS = '25',
  BINANCE = '56',
  POLYGON = '137',
  MANTA_PACIFIC = '169',
  XLAYER_TESTNET = '195',
  XLAYER_MAINNET = '196',
  B2_MAINNET = '223',
  FANTOM = '250',
  FRAXTAL = '252',
  KUCOIN = '321',
  CRONOS_ZKEVM = '388',
  ZKSYNC_ERA = '324',
  CRONOS_TESTNET = '338',
  ASTAR = '592',
  LYRA = '957',
  POLYGON_ZKEVM = '1101',
  CONFLUX = '1030',
  METIS = '1088',
  MOONBEAM = '1284',
  UNCHAIN_SEPOLIA = '1301',
  SONEIUM_TESTNET = '1946',
  BEVM = '11501',
  MERLIN_MAINNET = '4200',
  MANTLE = '5000',
  BASE = '8453',
  LUMIO_TESTNET = '9990',
  HOLESKY = '17000',
  ASTAR_ZKEVM = '3776',
  MOVEMENT_EVM_TESTNET = '30732',
  MODE = '34443',
  ARBITRUM = '42161',
  AVALANCHE = '43114',
  ZIRCUIT_TESTNET = '48899',
  ZIRCUIT_MAINNET = '48900',
  BOB = '60808',
  LINEA = '59144',
  SONIC_TESTNET = '64165',
  BLAST = '81457',
  CHILIZ = '88888',
  TAIKO = '167000',
  TAIKO_TESTNET = '167008',
  BITLAYER = '200901',
  SCROLL = '534352',
  ZKLINK_NOVA = '810180',
  SEPOLIA = '11155111',
  AURORA = '1313161554',
  BLAST_SEPOLIA = '168587773'
}

export enum AptosChainId {
  APTOS_MAINNET = 'aptos_mainnet',
  APTOS_TESTNET = 'aptos_testnet',
  // APTOS_DEVNET = 'aptos_devnet',
  APTOS_MOVEMENT_TESTNET = 'aptos_m2_testnet',
  APTOS_MOVEMENT_MAINNET = 'aptos_m2_mainnet'
}

export enum SuiChainId {
  SUI_MAINNET = 'sui_mainnet',
  SUI_TESTNET = 'sui_testnet',
  // SUI_DEVNET = 'sui_devnet',
  SUI_MOVEMENT_TESTNET = 'sui_m2_testnet',
  SUI_MOVEMENT_MAINNET = 'sui_m2_mainnet'
}

export enum SolanaChainId {
  SOLANA_MAINNET = 'sol_mainnet',
  SOLANA_DEVNET = 'sol_devnet',
  SOLANA_TESTNET = 'sol_testnet',
  SOLANA_PYTH = 'sol_pyth'
}
export enum FuelChainId {
  FUEL_MAINNET = 'fuel_mainnet',
  FUEL_TESTNET = 'fuel_testnet'
}

export enum CosmosChainId {
  INJECTIVE_MAINNET = 'injective_mainnet',
  INJECTIVE_TESTNET = 'injective_testnet'
}

export enum StarknetChainId {
  STARKNET_MAINNET = 'starknet_mainnet',
  STARKNET_SEPOLIA = 'starknet_sepolia'
}

export enum BTCChainId {
  BTC_MAINNET = 'btc_mainnet',
  BTC_TESTNET = 'btc_testnet'
}

export type ChainId =
  | EthChainId
  | AptosChainId
  | SuiChainId
  | SolanaChainId
  | FuelChainId
  | CosmosChainId
  | StarknetChainId
  | BTCChainId
export const ChainId = {
  ...EthChainId,
  ...AptosChainId,
  ...SuiChainId,
  ...SolanaChainId,
  ...FuelChainId,
  ...CosmosChainId,
  ...StarknetChainId,
  ...BTCChainId
}

export function getChainType(chainId?: string | number): ChainType {
  const id = String(chainId).toLowerCase()
  if (id.startsWith('sol')) {
    return ChainType.SOLANA
  }
  if (id.startsWith('sui')) {
    return ChainType.SUI
  }
  if (id.startsWith('apt')) {
    return ChainType.APTOS
  }
  if (id.startsWith('btc')) {
    return ChainType.BTC
  }
  return ChainType.ETH
}
