import { AptosChainId, BTCChainId, ChainId, EthChainId, SolanaChainId, SuiChainId } from './chain-id'

export enum ExplorerApiType {
  ETHERSCAN = 'etherscan',
  BLOCKSCOUT = 'blockscout',
  L2SCAN = 'l2scan',
  OKLINK = 'oklink'
}

export type ChainInfo = {
  name: string
  chainId: ChainId
  explorerUrl: string
}

export type EthChainInfo = ChainInfo & {
  mainnetChainId?: EthChainId
  chainId: EthChainId
  tokenAddress: string // native token address
  tokenSymbol: string // native token symbol
  tokenDecimals: number // native token decimals
  priceTokenAddress: string // token address for price
  wrappedTokenAddress: string // wrapped token address with contract, normally Wxxx (Wrapped xxx)

  explorerApiType?: string
  explorerApi?: string
  blockscoutUrl?: string
}

/**
 * EVM chains
 */
export const EthChainInfo: Record<EthChainId | string, EthChainInfo> = {
  [EthChainId.ETHEREUM]: {
    name: 'Ethereum',
    chainId: EthChainId.ETHEREUM,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://etherscan.io',
    explorerApi: 'https://api.etherscan.io',
    blockscoutUrl: 'https://eth.blockscout.com'
  },
  [EthChainId.SEPOLIA]: {
    name: 'Sepolia',
    chainId: EthChainId.SEPOLIA,
    mainnetChainId: EthChainId.ETHEREUM,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x1ef5f52bdbe11af2377c58ecc914a8c72ea807cf',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://sepolia.etherscan.io',
    explorerApi: 'https://api-sepolia.etherscan.io',
    blockscoutUrl: 'https://eth-sepolia.blockscout.com'
  },
  [EthChainId.HOLESKY]: {
    name: 'Holesky',
    chainId: EthChainId.HOLESKY,
    mainnetChainId: EthChainId.ETHEREUM,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x94373a4919B3240D86eA41593D5eBa789FEF3848',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://holesky.etherscan.io',
    explorerApi: 'https://api-holesky.etherscan.io',
    blockscoutUrl: 'https://eth-holesky.blockscout.com'
  },
  [EthChainId.BINANCE]: {
    name: 'Binance',
    chainId: EthChainId.BINANCE,
    priceTokenAddress: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
    tokenSymbol: 'BNB',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://bscscan.com',
    explorerApi: 'https://api.bscscan.com'
  },
  [EthChainId.POLYGON]: {
    name: 'Polygon',
    chainId: EthChainId.POLYGON,
    priceTokenAddress: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', // WMATIC
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', // WMATIC
    tokenSymbol: 'MATIC',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://polygonscan.com',
    explorerApi: 'https://api.polygonscan.com'
    // blockscoutBlockPrefix: 'https://polygon.blockscout.com/block/',
  },
  [EthChainId.ARBITRUM]: {
    name: 'Arbitrum',
    chainId: EthChainId.ARBITRUM,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://arbiscan.io',
    explorerApi: 'https://api.arbiscan.io'
  },
  [EthChainId.AVALANCHE]: {
    name: 'Avalanche',
    chainId: EthChainId.AVALANCHE,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,

    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://snowtrace.io',
    explorerApi: 'https://api.routescan.io/v2/network/mainnet/evm/43114/etherscan'
  },
  [EthChainId.POLYGON_ZKEVM]: {
    name: 'Polygon zkEVM',
    chainId: EthChainId.POLYGON_ZKEVM,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4F9A0e7FD2Bf6067db6994CF12E4495Df938E6e9',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://zkevm.polygonscan.com',
    explorerApi: 'https://api-zkevm.polygonscan.com'
  },
  [EthChainId.MOONBEAM]: {
    name: 'Moonbeam',
    chainId: EthChainId.MOONBEAM,
    priceTokenAddress: '0xacc15dc74880c9944775448304b263d191c6077f', // WGLMR
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xacc15dc74880c9944775448304b263d191c6077f',
    tokenSymbol: 'GLMR',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerUrl: 'https://moonscan.io',
    explorerApi: 'https://api-moonbeam.moonscan.io'
  },
  [EthChainId.ASTAR]: {
    name: 'Astar',
    chainId: EthChainId.ASTAR,
    priceTokenAddress: '0xaeaaf0e2c81af264101b9129c00f4440ccf0f720', // WASTR
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xaeaaf0e2c81af264101b9129c00f4440ccf0f720',
    tokenSymbol: 'ASTR',
    tokenDecimals: 18,
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerUrl: 'https://astar.blockscout.com',
    explorerApi: 'https://astar.blockscout.com'
  },
  [EthChainId.ASTAR_ZKEVM]: {
    name: 'Astar zkEVM',
    chainId: EthChainId.ASTAR_ZKEVM,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xE9CC37904875B459Fa5D0FE37680d36F1ED55e38',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://astar-zkevm.explorer.startale.com',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://astar-zkevm.explorer.startale.com'
  },
  [EthChainId.LINEA]: {
    name: 'Linea',
    chainId: EthChainId.LINEA,
    priceTokenAddress: '0xe5d7c2a44ffddf6b295a15c148167daaaf5cf34f', // WETH
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://lineascan.build',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.lineascan.build'
  },
  [EthChainId.SCROLL]: {
    name: 'Scroll',
    chainId: EthChainId.SCROLL,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x5300000000000000000000000000000000000004', // TODO questionable
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://scrollscan.com',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.scrollscan.com'
  },
  [EthChainId.TAIKO]: {
    name: 'Taiko Mainnet',
    chainId: EthChainId.TAIKO,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xA51894664A773981C6C112C43ce576f315d5b1B6',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://taikoscan.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.taikoscan.io'
  },
  [EthChainId.TAIKO_TESTNET]: {
    name: 'Taiko Testnet',
    chainId: EthChainId.TAIKO_TESTNET,
    mainnetChainId: EthChainId.TAIKO,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xae2C46ddb314B9Ba743C6dEE4878F151881333D9',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://hekla.taikoscan.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api-hekla.taikoscan.io'
  },
  [EthChainId.XLAYER_TESTNET]: {
    name: 'X Layer Testnet',
    chainId: EthChainId.XLAYER_TESTNET,
    mainnetChainId: EthChainId.XLAYER_MAINNET,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xa749ad81913cdc19881ebeb64631df72be708335',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://www.oklink.com/xlayer-test',
    explorerApiType: ExplorerApiType.OKLINK,
    explorerApi: 'https://www.oklink.com/api/v5/explorer'
  },
  [EthChainId.XLAYER_MAINNET]: {
    name: 'X Layer Mainnet',
    chainId: EthChainId.XLAYER_MAINNET,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x5a77f1443d16ee5761d310e38b62f77f726bc71c',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://www.oklink.com/xlayer',
    explorerApiType: ExplorerApiType.OKLINK,
    explorerApi: 'https://www.oklink.com/api/v5/explorer'
  },
  [EthChainId.BLAST]: {
    name: 'Blast Mainnet',
    chainId: EthChainId.BLAST,
    priceTokenAddress: '0x4300000000000000000000000000000000000004',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4300000000000000000000000000000000000004',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://blastscan.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.blastscan.io'
  },
  [EthChainId.BLAST_SEPOLIA]: {
    name: 'Blast Mainnet',
    chainId: EthChainId.BLAST_SEPOLIA,
    mainnetChainId: EthChainId.BLAST,
    priceTokenAddress: '0x4200000000000000000000000000000000000023',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000023',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://sepolia.blastscan.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api-sepolia.blastscan.io'
  },
  [EthChainId.BASE]: {
    name: 'Base',
    chainId: EthChainId.BASE,
    priceTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://basescan.org',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.basescan.org'
  },
  [EthChainId.ZKSYNC_ERA]: {
    name: 'zkSync Era',
    chainId: EthChainId.ZKSYNC_ERA,
    priceTokenAddress: '0x000000000000000000000000000000000000800A',
    tokenAddress: '0x000000000000000000000000000000000000800A',
    wrappedTokenAddress: '0x000000000000000000000000000000000000800A',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.zksync.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://block-explorer-api.mainnet.zksync.io'
  },
  [EthChainId.ZIRCUIT_TESTNET]: {
    name: 'Zircuit Testnet',
    chainId: EthChainId.ZIRCUIT_TESTNET,
    mainnetChainId: EthChainId.ZIRCUIT_MAINNET,
    priceTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.testnet.zircuit.com'
  },
  [EthChainId.ZIRCUIT_MAINNET]: {
    name: 'Zircuit Mainnet',
    chainId: EthChainId.ZIRCUIT_MAINNET,
    priceTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.zircuit.com'
  },
  [EthChainId.FANTOM]: {
    name: 'Fantom Opera',
    chainId: EthChainId.FANTOM,
    priceTokenAddress: '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83', // WFTM
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83',
    tokenSymbol: 'WFTM',
    tokenDecimals: 18,
    explorerUrl: 'https://ftmscan.com',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.ftmscan.com'
  },
  [EthChainId.OPTIMISM]: {
    name: 'Optimism Mainnet',
    chainId: EthChainId.OPTIMISM,
    priceTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://optimistic.etherscan.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api-optimistic.etherscan.io'
  },
  [EthChainId.CRONOS]: {
    name: 'Cronos Mainnet',
    chainId: EthChainId.CRONOS,
    priceTokenAddress: '0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23', // WCRO
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x5c7f8a570d578ed84e63fdfa7b1ee72deae1ae23',
    tokenSymbol: 'CRO',
    tokenDecimals: 18,
    explorerUrl: 'https://cronoscan.com',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.cronoscan.com'
  },
  [EthChainId.CRONOS_TESTNET]: {
    name: 'Cronos Testnet',
    chainId: EthChainId.CRONOS_TESTNET,
    mainnetChainId: EthChainId.CRONOS,
    priceTokenAddress: '0x6a3173618859c7cd40faf6921b5e9eb6a76f1fd4', // WCRO
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x6a3173618859c7cd40faf6921b5e9eb6a76f1fd4',
    tokenSymbol: 'CRO',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.cronos.org/testnet'
  },
  [EthChainId.BITLAYER]: {
    name: 'Bitlayer Mainnet',
    chainId: EthChainId.BITLAYER,
    priceTokenAddress: '0xff204e2681a6fa0e2c3fade68a1b28fb90e4fc5f', // WBTC
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xff204e2681a6fa0e2c3fade68a1b28fb90e4fc5f',
    tokenSymbol: 'BTC',
    tokenDecimals: 18,
    explorerUrl: 'https://www.btrscan.com',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.btrscan.com/scan'
  },
  [EthChainId.MANTA_PACIFIC]: {
    name: 'Manta Pacific',
    chainId: EthChainId.MANTA_PACIFIC,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x0Dc808adcE2099A9F62AA87D9670745AbA741746',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://pacific-explorer.manta.network',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://pacific-explorer.manta.network'
  },
  [EthChainId.MANTLE]: {
    name: 'Mantle',
    chainId: EthChainId.MANTLE,
    priceTokenAddress: '0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8', // WMNT
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x78c1b0c915c4faa5fffa6cabf0219da63d7f4cb8',
    tokenSymbol: 'MNT',
    tokenDecimals: 18,
    explorerUrl: 'https://mantlescan.xyz',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.mantlescan.xyz'
  },
  [EthChainId.B2_MAINNET]: {
    name: 'B2 Mainnet',
    chainId: EthChainId.B2_MAINNET,
    priceTokenAddress: '0x4200000000000000000000000000000000000006', // WBTC
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'BTC',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.bsquared.network',
    explorerApiType: ExplorerApiType.L2SCAN,
    explorerApi: 'https://explorer.bsquared.network/api'
  },
  [EthChainId.MODE]: {
    name: 'Mode Mainnet',
    chainId: EthChainId.MODE,
    priceTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://modescan.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.routescan.io/v2/network/mainnet/evm/34443/etherscan'
  },
  [EthChainId.BOB]: {
    name: 'Bob Mainnet',
    chainId: EthChainId.BOB,
    priceTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.gobob.xyz',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://explorer.gobob.xyz'
  },
  [EthChainId.FRAXTAL]: {
    name: 'Fraxtal Mainnet',
    chainId: EthChainId.FRAXTAL,
    priceTokenAddress: '0x0000000000000000000000000000000000000000', // wfrxETH
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xFC00000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://fraxscan.com',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.fraxscan.com'
  },
  [EthChainId.KUCOIN]: {
    name: 'KCC Mainnet',
    chainId: EthChainId.KUCOIN,
    priceTokenAddress: '0x4446Fc4eb47f2f6586f9fAAb68B3498F86C07521', // WCCS
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4446Fc4eb47f2f6586f9fAAb68B3498F86C07521',
    tokenSymbol: 'KCS',
    tokenDecimals: 18,
    explorerUrl: 'https://scan.kcc.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://scan.kcc.io'
  },
  [EthChainId.CONFLUX]: {
    name: 'Conflux eSpace',
    chainId: EthChainId.CONFLUX,
    priceTokenAddress: '0x14b2d3bc65e74dae1030eafd8ac30c533c976a9b', // WCFX
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x14b2d3bc65e74dae1030eafd8ac30c533c976a9b',
    tokenSymbol: 'CFX',
    tokenDecimals: 18,
    explorerUrl: 'https://evm.confluxscan.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://evmapi.confluxscan.io'
  },
  [EthChainId.METIS]: {
    name: 'Metis',
    chainId: EthChainId.METIS,
    priceTokenAddress: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481', // WMETIS
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',
    tokenSymbol: 'METIS',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.metis.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.routescan.io/v2/network/mainnet/evm/1088/etherscan/'
  },
  [EthChainId.BEVM]: {
    name: 'BEVM',
    chainId: EthChainId.BEVM,
    priceTokenAddress: '0xB5136FEba197f5fF4B765E5b50c74db717796dcD', // WBTC
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xB5136FEba197f5fF4B765E5b50c74db717796dcD',
    tokenSymbol: 'BTC',
    tokenDecimals: 18,
    explorerUrl: 'https://scan.bevm.io',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://scan.bevm.io'
  },
  [EthChainId.MERLIN_MAINNET]: {
    name: 'Merlin Mainnet',
    chainId: EthChainId.MERLIN_MAINNET,
    priceTokenAddress: '0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA', // WBTC
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0xF6D226f9Dc15d9bB51182815b320D3fBE324e1bA',
    tokenSymbol: 'BTC',
    tokenDecimals: 18,
    explorerUrl: 'https://scan.merlinchain.io',
    explorerApiType: ExplorerApiType.L2SCAN,
    explorerApi: 'https://scan.merlinchain.io/api'
  },
  [EthChainId.LUMIO_TESTNET]: {
    name: 'Lumio Testnet',
    chainId: EthChainId.LUMIO_TESTNET,
    priceTokenAddress: '0x1F3dBeBA2513E87642750a278649dc828d054971',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x1F3dBeBA2513E87642750a278649dc828d054971',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.testnet.imola.movementlabs.xyz',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://explorer.testnet.imola.movementlabs.xyz'
  },
  [EthChainId.MOVEMENT_EVM_TESTNET]: {
    name: 'Movement EVM Testnet',
    chainId: EthChainId.MOVEMENT_EVM_TESTNET,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x0000000000000000000000000000000000000000', // TODO
    tokenSymbol: 'MOVE',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.testnet.imola.movementlabs.xyz'
  },
  [EthChainId.CHILIZ]: {
    name: 'Chiliz',
    chainId: EthChainId.CHILIZ,
    priceTokenAddress: '0x721EF6871f1c4Efe730Dce047D40D1743B886946',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x721EF6871f1c4Efe730Dce047D40D1743B886946', // WCHZ
    tokenSymbol: 'CHZ',
    tokenDecimals: 18,
    explorerUrl: 'https://chiliscan.com',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://api.routescan.io/v2/network/mainnet/evm/88888/etherscan'
  },
  [EthChainId.ZKLINK_NOVA]: {
    name: 'zkLink Nova',
    chainId: EthChainId.ZKLINK_NOVA,
    priceTokenAddress: '0x000000000000000000000000000000000000800A',
    tokenAddress: '0x000000000000000000000000000000000000800A', //special
    wrappedTokenAddress: '0x000000000000000000000000000000000000800A',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.zklink.io',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://explorer-api.zklink.io'
  },
  [EthChainId.AURORA]: {
    name: 'Auroa',
    chainId: EthChainId.AURORA,
    priceTokenAddress: '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB',
    tokenAddress: '0x000000000000000000000000000000000000800A',
    wrappedTokenAddress: '0xC9BdeEd33CD01541e1eeD10f90519d2C06Fe3feB',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.aurora.dev',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://explorer.aurora.dev'
  },
  [EthChainId.SONIC_TESTNET]: {
    name: 'Sonic Testnet',
    chainId: EthChainId.SONIC_TESTNET,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x000000000000000000000000000000000000800A',
    tokenSymbol: 'FTM',
    tokenDecimals: 18,
    explorerUrl: 'https://testnet.soniclabs.com',
    explorerApiType: ExplorerApiType.L2SCAN,
    explorerApi: 'https://testnet.soniclabs.com'
  },
  [EthChainId.SONEIUM_TESTNET]: {
    name: 'Soneium Testnet',
    chainId: EthChainId.SONEIUM_TESTNET,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x728F2745410A56620B50a6E0592743450e08Cac6',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer-testnet.soneium.org',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://explorer-testnet.soneium.org'
  },
  [EthChainId.CRONOS_ZKEVM]: {
    name: 'Cronos zkEVM',
    chainId: EthChainId.CRONOS_ZKEVM,
    priceTokenAddress: '0x000000000000000000000000000000000000800a',
    tokenAddress: '0x000000000000000000000000000000000000800a',
    wrappedTokenAddress: '0xc1bf55ee54e16229d9b369a5502bfe5fc9f20b6d',
    tokenSymbol: 'zkCRO',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.zkevm.cronos.org',
    explorerApiType: ExplorerApiType.ETHERSCAN,
    explorerApi: 'https://explorer.zkevm.cronos.org'
  },
  [EthChainId.LYRA]: {
    name: 'Lyra',
    chainId: EthChainId.LYRA,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x15CEcd5190A43C7798dD2058308781D0662e678E',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://explorer.lyra.finance',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://explorer.lyra.finance'
  },
  [EthChainId.UNCHAIN_SEPOLIA]: {
    name: 'Unchain Sepolia',
    chainId: EthChainId.UNCHAIN_SEPOLIA,
    priceTokenAddress: '0x0000000000000000000000000000000000000000',
    tokenAddress: '0x0000000000000000000000000000000000000000',
    wrappedTokenAddress: '0x4200000000000000000000000000000000000006',
    tokenSymbol: 'ETH',
    tokenDecimals: 18,
    explorerUrl: 'https://unichain-sepolia.blockscout.com',
    explorerApiType: ExplorerApiType.BLOCKSCOUT,
    explorerApi: 'https://unichain-sepolia.blockscout.com'
  }
}

type ScanUrlSubType = 'block' | 'address' | 'tx' | 'token'

function getEVMChainScanUrl(chainId: string | number, hash: string, subtype: ScanUrlSubType) {
  // TODO l2scan address might be different
  let subtypeStr: string = subtype
  const supportedChain = EthChainInfo[chainId as ChainId]
  if (!supportedChain) {
    return
  }
  if (supportedChain.explorerApiType === ExplorerApiType.L2SCAN) {
    if (subtype === 'block') {
      subtypeStr = 'blocks'
    }
  }
  return `${supportedChain.explorerUrl}/${subtypeStr}/${hash}`
}

/**
 * BTC chains
 */
export const BTCChainInfo: Record<BTCChainId | string, ChainInfo> = {
  [BTCChainId.BTC_MAINNET]: {
    name: 'Bitcoin Mainnet',
    chainId: BTCChainId.BTC_MAINNET,
    explorerUrl: 'https://mempool.space'
  },
  [BTCChainId.BTC_TESTNET]: {
    name: 'Bitcoin Mainnet',
    chainId: BTCChainId.BTC_TESTNET,
    explorerUrl: 'https://mempool.space/testnet4'
  }
}

const BtcSubTypePaths: Record<ScanUrlSubType, string | undefined> = {
  block: 'block',
  address: 'address',
  tx: 'tx',
  token: undefined
}

function getBtcChainScanUrl(chainId: string | number, hash: string, subtype: ScanUrlSubType) {
  const hostName = BTCChainInfo[chainId]?.explorerUrl
  const subPath = BtcSubTypePaths[subtype]
  if (!hostName || !subPath) {
    return
  }
  return `${hostName}/${subPath}/${hash}`
}

/**
 * Aptos chains
 */
export const AptosChainInfo: Record<
  AptosChainId | string,
  ChainInfo & {
    suffix: string
  }
> = {
  [AptosChainId.APTOS_MAINNET]: {
    name: 'Aptos Mainnet',
    chainId: AptosChainId.APTOS_MAINNET,
    explorerUrl: 'https://explorer.aptoslabs.com',
    suffix: '?network=mainnet'
  },
  [AptosChainId.APTOS_TESTNET]: {
    name: 'Aptos Testenet',
    chainId: AptosChainId.APTOS_TESTNET,
    explorerUrl: 'https://explorer.aptoslabs.com',
    suffix: '?network=mainnet'
  },
  [AptosChainId.APTOS_MOVEMENT_MAINNET]: {
    name: 'Movement Mainnet Aptos',
    chainId: AptosChainId.APTOS_MOVEMENT_MAINNET,
    explorerUrl: 'https://explorer.aptoslabs.com',
    suffix: '?network=mainnet'
  },
  [AptosChainId.APTOS_MOVEMENT_TESTNET]: {
    name: 'Movement Testnet Aptos',
    chainId: AptosChainId.APTOS_MOVEMENT_TESTNET,
    explorerUrl: 'https://explorer.aptoslabs.com',
    suffix: '?network=mainnet'
  }
}
const AptosSubTypePaths: Record<ScanUrlSubType, string | undefined> = {
  block: 'block',
  address: 'account',
  tx: 'txn',
  token: undefined
}
function getAptosChainScanUrl(chainId: string | number, hash: string, subtype: ScanUrlSubType) {
  const { explorerUrl, suffix } = AptosChainInfo[chainId]
  const subPath = AptosSubTypePaths[subtype]
  if (!subPath) {
    return
  }
  return `${explorerUrl}/${subPath}/${hash}${suffix}`
}

/**
 * Solana
 */
export const SolanaChainInfo: Record<
  SolanaChainId | string,
  ChainInfo & {
    suffix: string
  }
> = {
  [SolanaChainId.SOLANA_MAINNET]: {
    name: 'Solana Mainnet',
    chainId: SolanaChainId.SOLANA_MAINNET,
    explorerUrl: 'https://solscan.io/',
    suffix: ''
  },
  [SolanaChainId.SOLANA_TESTNET]: {
    name: 'Solana Testnet',
    chainId: SolanaChainId.SOLANA_MAINNET,
    explorerUrl: 'https://solscan.io/',
    suffix: '?cluster=testnet'
  }
}

const SolanaSubTypePaths: Record<ScanUrlSubType, string | undefined> = {
  block: 'block',
  address: 'address',
  tx: 'tx',
  token: 'token'
}

function getSolanaChainScanUrl(chainId: string | number, hash: string, subtype: ScanUrlSubType) {
  const { explorerUrl, suffix } = SolanaChainInfo[chainId]
  const subPath = SolanaSubTypePaths[subtype]
  if (!subPath) {
    return
  }
  return `${explorerUrl}${subPath}/${hash}${suffix}`
}

/**
 * Sui
 */
const SuiChainInfo: Record<SuiChainId | string, ChainInfo> = {
  [SuiChainId.SUI_MAINNET]: {
    name: 'Sui Mainnet',
    chainId: SuiChainId.SUI_MAINNET,
    explorerUrl: 'https://suivision.xyz'
  },
  [SuiChainId.SUI_TESTNET]: {
    name: 'Sui Testnet',
    chainId: SuiChainId.SUI_TESTNET,
    explorerUrl: 'https://testnet.suivision.xyz'
  }
}
const SuibSubTypePaths: Record<ScanUrlSubType, string | undefined> = {
  block: 'checkpoint',
  address: 'account',
  tx: 'txblock',
  token: undefined
}

function getSuiChainScanUrl(chainId: string | number, hash: string, subtype: ScanUrlSubType) {
  const { explorerUrl } = SuiChainInfo[chainId]
  const subPath = SuibSubTypePaths[subtype]
  if (!subPath) {
    return
  }
  return `${explorerUrl}/${subPath}/${hash}`
}

/**
 * Generate scan url of target chain and sub types.
 * @param chainId
 * @param hash
 * @param subtype
 * @returns
 */
export function getChainExternalUrl(
  chainId?: string | number,
  hash?: string,
  subtype?: ScanUrlSubType
): string | undefined {
  if (!chainId || !hash || !subtype) {
    return
  }
  const chainIdStr = chainId.toString()
  if (Object.keys(EthChainInfo).includes(chainIdStr)) {
    // EVM
    return getEVMChainScanUrl(chainIdStr, hash, subtype)
  } else if (Object.keys(BTCChainInfo).includes(chainIdStr)) {
    // BTC
    return getBtcChainScanUrl(chainIdStr, hash, subtype)
  } else if (Object.keys(AptosChainInfo).includes(chainIdStr)) {
    // Aptos
    return getAptosChainScanUrl(chainIdStr, hash, subtype)
  } else if (Object.keys(SolanaChainInfo).includes(chainIdStr)) {
    // Solana
    return getSolanaChainScanUrl(chainIdStr, hash, subtype)
  } else if (Object.keys(SuiChainInfo).includes(chainIdStr)) {
    // Sui
    return getSuiChainScanUrl(chainIdStr, hash, subtype)
  }
  return
}

export function getChainBlockscoutUrl(
  chainId?: string | number,
  hash?: string,
  subtype?: ScanUrlSubType
): string | undefined {
  if (!chainId || !hash || !subtype) {
    return
  }
  const supportedChain = EthChainInfo[chainId as ChainId]
  if (!supportedChain) {
    return
  }
  if (!supportedChain.blockscoutUrl) {
    return
  }
  return `${supportedChain.blockscoutUrl}/${subtype}/${hash}`
}
