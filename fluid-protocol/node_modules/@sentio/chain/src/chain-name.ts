import { ChainId } from './chain-id'
import { EthChainInfo } from './chain-info'

export const CHAIN_MAP: Record<string, string> = {
  [ChainId.APTOS_MOVEMENT_MAINNET]: 'Movement Mainnet Aptos',
  [ChainId.APTOS_MOVEMENT_TESTNET]: 'Movement Testnet Aptos',
  [ChainId.SUI_MOVEMENT_MAINNET]: 'Movement Mainnet Sui',
  [ChainId.SUI_MOVEMENT_TESTNET]: 'Movement Testnet Sui',
  [ChainId.BTC_MAINNET]: 'Bitcoin Mainnet',
  [ChainId.BTC_TESTNET]: 'Bitcoin Testnet'
}

for (const [key, value] of Object.entries(ChainId)) {
  if (CHAIN_MAP[value]) {
    continue
  }

  const chainInfo = EthChainInfo[value]
  if (chainInfo) {
    CHAIN_MAP[value] = chainInfo.name
    continue
  }

  const parts = key.split('_')
  CHAIN_MAP[value] = parts
    .map((part, index) => {
      return part[0] + part.slice(1).toLowerCase()
    })
    .join(' ')
}

export function getChainName(chainId: string | number | null | undefined): string {
  if (typeof chainId === 'number') {
    chainId = chainId.toString()
  }
  if (chainId) {
    const name = CHAIN_MAP[chainId]
    if (name) {
      return name
    }
  }
  return chainId || ''
}

/**
 * @deprecated use getChainExternalUrl instead TODO(dazhan) to clean up
 * @param chainId
 * @param hash
 * @param subtype
 * @returns
 */
export function getChainScanUrl(
  chainId?: string | number,
  hash?: string,
  subtype?: 'block' | 'address' | 'transaction'
): string | undefined {
  const chainName = getChainName(chainId)
  if (chainName === 'Ethereum') {
    if (subtype === 'block') {
      return `https://etherscan.io/block/${hash}`
    } else if (subtype === 'address') {
      return `https://etherscan.io/address/${hash}`
    } else {
      return `https://etherscan.io/tx/${hash}`
    }
  }
  if (chainName === 'Polygon') {
    if (subtype === 'block') {
      return `https://polygonscan.com/block/${hash}`
    } else if (subtype === 'address') {
      return `https://polygonscan.com/address/${hash}`
    } else {
      return `https://polygonscan.com/tx/${hash}`
    }
  }
  if (chainName.startsWith('Aptos ')) {
    let suffix = '?network=mainnet'
    if (chainName.includes('Testnet')) {
      suffix = '?network=testnet'
    } else if (chainName.includes('Devnet')) {
      suffix = '?network=devnet'
    }

    if (subtype === 'block') {
      return `https://explorer.aptoslabs.com/block/${hash}/${suffix}`
    } else if (subtype === 'address') {
      return `https://explorer.aptoslabs.com/account/${hash}/${suffix}`
    } else {
      return `https://explorer.aptoslabs.com/txn/${hash}/${suffix}`
    }
  }
  if (chainName.startsWith('Solana ')) {
    if (subtype === 'block') {
      return `https://explorer.solana.com/block/${hash}`
    } else if (subtype === 'address') {
      return `https://explorer.solana.com/address/${hash}`
    } else {
      return `https://explorer.solana.io/tx/${hash}`
    }
  }
  if (chainName.startsWith('Sui ')) {
    if (subtype === 'block') {
      return `https://suivision.xyz/checkpoint/${hash}`
    } else if (subtype === 'address') {
      return `https://suivision.xyz/account/${hash}`
    } else {
      return `https://suivision.xyz/txblock/${hash}`
    }
  }
  return undefined
}
