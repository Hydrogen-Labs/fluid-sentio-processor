import { AptosChainId, BTCChainId, ChainId, EthChainId, SolanaChainId } from './chain-id';
export declare enum ExplorerApiType {
    ETHERSCAN = "etherscan",
    BLOCKSCOUT = "blockscout",
    L2SCAN = "l2scan",
    OKLINK = "oklink"
}
export type ChainInfo = {
    name: string;
    chainId: ChainId;
    explorerUrl: string;
};
export type EthChainInfo = ChainInfo & {
    mainnetChainId?: EthChainId;
    chainId: EthChainId;
    tokenAddress: string;
    tokenSymbol: string;
    tokenDecimals: number;
    priceTokenAddress: string;
    wrappedTokenAddress: string;
    explorerApiType?: string;
    explorerApi?: string;
    blockscoutUrl?: string;
};
/**
 * EVM chains
 */
export declare const EthChainInfo: Record<EthChainId | string, EthChainInfo>;
type ScanUrlSubType = 'block' | 'address' | 'tx' | 'token';
/**
 * BTC chains
 */
export declare const BTCChainInfo: Record<BTCChainId | string, ChainInfo>;
/**
 * Aptos chains
 */
export declare const AptosChainInfo: Record<AptosChainId | string, ChainInfo & {
    suffix: string;
}>;
/**
 * Solana
 */
export declare const SolanaChainInfo: Record<SolanaChainId | string, ChainInfo & {
    suffix: string;
}>;
/**
 * Generate scan url of target chain and sub types.
 * @param chainId
 * @param hash
 * @param subtype
 * @returns
 */
export declare function getChainExternalUrl(chainId?: string | number, hash?: string, subtype?: ScanUrlSubType): string | undefined;
export declare function getChainBlockscoutUrl(chainId?: string | number, hash?: string, subtype?: ScanUrlSubType): string | undefined;
export {};
//# sourceMappingURL=chain-info.d.ts.map