export declare enum ChainType {
    SOLANA = "solana",
    SUI = "sui",
    APTOS = "aptos",
    ETH = "evm",
    BTC = "btc"
}
export declare enum EthChainId {
    ETHEREUM = "1",
    OPTIMISM = "10",
    CRONOS = "25",
    BINANCE = "56",
    POLYGON = "137",
    MANTA_PACIFIC = "169",
    XLAYER_TESTNET = "195",
    XLAYER_MAINNET = "196",
    B2_MAINNET = "223",
    FANTOM = "250",
    FRAXTAL = "252",
    KUCOIN = "321",
    CRONOS_ZKEVM = "388",
    ZKSYNC_ERA = "324",
    CRONOS_TESTNET = "338",
    ASTAR = "592",
    LYRA = "957",
    POLYGON_ZKEVM = "1101",
    CONFLUX = "1030",
    METIS = "1088",
    MOONBEAM = "1284",
    UNCHAIN_SEPOLIA = "1301",
    SONEIUM_TESTNET = "1946",
    BEVM = "11501",
    MERLIN_MAINNET = "4200",
    MANTLE = "5000",
    BASE = "8453",
    LUMIO_TESTNET = "9990",
    HOLESKY = "17000",
    ASTAR_ZKEVM = "3776",
    MOVEMENT_EVM_TESTNET = "30732",
    MODE = "34443",
    ARBITRUM = "42161",
    AVALANCHE = "43114",
    ZIRCUIT_TESTNET = "48899",
    ZIRCUIT_MAINNET = "48900",
    BOB = "60808",
    LINEA = "59144",
    SONIC_TESTNET = "64165",
    BLAST = "81457",
    CHILIZ = "88888",
    TAIKO = "167000",
    TAIKO_TESTNET = "167008",
    BITLAYER = "200901",
    SCROLL = "534352",
    ZKLINK_NOVA = "810180",
    SEPOLIA = "11155111",
    AURORA = "1313161554",
    BLAST_SEPOLIA = "168587773"
}
export declare enum AptosChainId {
    APTOS_MAINNET = "aptos_mainnet",
    APTOS_TESTNET = "aptos_testnet",
    APTOS_MOVEMENT_TESTNET = "aptos_m2_testnet",
    APTOS_MOVEMENT_MAINNET = "aptos_m2_mainnet"
}
export declare enum SuiChainId {
    SUI_MAINNET = "sui_mainnet",
    SUI_TESTNET = "sui_testnet",
    SUI_MOVEMENT_TESTNET = "sui_m2_testnet",
    SUI_MOVEMENT_MAINNET = "sui_m2_mainnet"
}
export declare enum SolanaChainId {
    SOLANA_MAINNET = "sol_mainnet",
    SOLANA_DEVNET = "sol_devnet",
    SOLANA_TESTNET = "sol_testnet",
    SOLANA_PYTH = "sol_pyth"
}
export declare enum FuelChainId {
    FUEL_MAINNET = "fuel_mainnet",
    FUEL_TESTNET = "fuel_testnet"
}
export declare enum CosmosChainId {
    INJECTIVE_MAINNET = "injective_mainnet",
    INJECTIVE_TESTNET = "injective_testnet"
}
export declare enum StarknetChainId {
    STARKNET_MAINNET = "starknet_mainnet",
    STARKNET_SEPOLIA = "starknet_sepolia"
}
export declare enum BTCChainId {
    BTC_MAINNET = "btc_mainnet",
    BTC_TESTNET = "btc_testnet"
}
export type ChainId = EthChainId | AptosChainId | SuiChainId | SolanaChainId | FuelChainId | CosmosChainId | StarknetChainId | BTCChainId;
export declare const ChainId: {
    BTC_MAINNET: BTCChainId.BTC_MAINNET;
    BTC_TESTNET: BTCChainId.BTC_TESTNET;
    STARKNET_MAINNET: StarknetChainId.STARKNET_MAINNET;
    STARKNET_SEPOLIA: StarknetChainId.STARKNET_SEPOLIA;
    INJECTIVE_MAINNET: CosmosChainId.INJECTIVE_MAINNET;
    INJECTIVE_TESTNET: CosmosChainId.INJECTIVE_TESTNET;
    FUEL_MAINNET: FuelChainId.FUEL_MAINNET;
    FUEL_TESTNET: FuelChainId.FUEL_TESTNET;
    SOLANA_MAINNET: SolanaChainId.SOLANA_MAINNET;
    SOLANA_DEVNET: SolanaChainId.SOLANA_DEVNET;
    SOLANA_TESTNET: SolanaChainId.SOLANA_TESTNET;
    SOLANA_PYTH: SolanaChainId.SOLANA_PYTH;
    SUI_MAINNET: SuiChainId.SUI_MAINNET;
    SUI_TESTNET: SuiChainId.SUI_TESTNET;
    SUI_MOVEMENT_TESTNET: SuiChainId.SUI_MOVEMENT_TESTNET;
    SUI_MOVEMENT_MAINNET: SuiChainId.SUI_MOVEMENT_MAINNET;
    APTOS_MAINNET: AptosChainId.APTOS_MAINNET;
    APTOS_TESTNET: AptosChainId.APTOS_TESTNET;
    APTOS_MOVEMENT_TESTNET: AptosChainId.APTOS_MOVEMENT_TESTNET;
    APTOS_MOVEMENT_MAINNET: AptosChainId.APTOS_MOVEMENT_MAINNET;
    ETHEREUM: EthChainId.ETHEREUM;
    OPTIMISM: EthChainId.OPTIMISM;
    CRONOS: EthChainId.CRONOS;
    BINANCE: EthChainId.BINANCE;
    POLYGON: EthChainId.POLYGON;
    MANTA_PACIFIC: EthChainId.MANTA_PACIFIC;
    XLAYER_TESTNET: EthChainId.XLAYER_TESTNET;
    XLAYER_MAINNET: EthChainId.XLAYER_MAINNET;
    B2_MAINNET: EthChainId.B2_MAINNET;
    FANTOM: EthChainId.FANTOM;
    FRAXTAL: EthChainId.FRAXTAL;
    KUCOIN: EthChainId.KUCOIN;
    CRONOS_ZKEVM: EthChainId.CRONOS_ZKEVM;
    ZKSYNC_ERA: EthChainId.ZKSYNC_ERA;
    CRONOS_TESTNET: EthChainId.CRONOS_TESTNET;
    ASTAR: EthChainId.ASTAR;
    LYRA: EthChainId.LYRA;
    POLYGON_ZKEVM: EthChainId.POLYGON_ZKEVM;
    CONFLUX: EthChainId.CONFLUX;
    METIS: EthChainId.METIS;
    MOONBEAM: EthChainId.MOONBEAM;
    UNCHAIN_SEPOLIA: EthChainId.UNCHAIN_SEPOLIA;
    SONEIUM_TESTNET: EthChainId.SONEIUM_TESTNET;
    BEVM: EthChainId.BEVM;
    MERLIN_MAINNET: EthChainId.MERLIN_MAINNET;
    MANTLE: EthChainId.MANTLE;
    BASE: EthChainId.BASE;
    LUMIO_TESTNET: EthChainId.LUMIO_TESTNET;
    HOLESKY: EthChainId.HOLESKY;
    ASTAR_ZKEVM: EthChainId.ASTAR_ZKEVM;
    MOVEMENT_EVM_TESTNET: EthChainId.MOVEMENT_EVM_TESTNET;
    MODE: EthChainId.MODE;
    ARBITRUM: EthChainId.ARBITRUM;
    AVALANCHE: EthChainId.AVALANCHE;
    ZIRCUIT_TESTNET: EthChainId.ZIRCUIT_TESTNET;
    ZIRCUIT_MAINNET: EthChainId.ZIRCUIT_MAINNET;
    BOB: EthChainId.BOB;
    LINEA: EthChainId.LINEA;
    SONIC_TESTNET: EthChainId.SONIC_TESTNET;
    BLAST: EthChainId.BLAST;
    CHILIZ: EthChainId.CHILIZ;
    TAIKO: EthChainId.TAIKO;
    TAIKO_TESTNET: EthChainId.TAIKO_TESTNET;
    BITLAYER: EthChainId.BITLAYER;
    SCROLL: EthChainId.SCROLL;
    ZKLINK_NOVA: EthChainId.ZKLINK_NOVA;
    SEPOLIA: EthChainId.SEPOLIA;
    AURORA: EthChainId.AURORA;
    BLAST_SEPOLIA: EthChainId.BLAST_SEPOLIA;
};
export declare function getChainType(chainId?: string | number): ChainType;
//# sourceMappingURL=chain-id.d.ts.map