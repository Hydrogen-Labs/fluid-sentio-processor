"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChainScanUrl = exports.getChainName = exports.CHAIN_MAP = void 0;
const chain_id_1 = require("./chain-id");
const chain_info_1 = require("./chain-info");
exports.CHAIN_MAP = {
    [chain_id_1.ChainId.APTOS_MOVEMENT_MAINNET]: 'Movement Mainnet Aptos',
    [chain_id_1.ChainId.APTOS_MOVEMENT_TESTNET]: 'Movement Testnet Aptos',
    [chain_id_1.ChainId.SUI_MOVEMENT_MAINNET]: 'Movement Mainnet Sui',
    [chain_id_1.ChainId.SUI_MOVEMENT_TESTNET]: 'Movement Testnet Sui',
    [chain_id_1.ChainId.BTC_MAINNET]: 'Bitcoin Mainnet',
    [chain_id_1.ChainId.BTC_TESTNET]: 'Bitcoin Testnet'
};
for (const [key, value] of Object.entries(chain_id_1.ChainId)) {
    if (exports.CHAIN_MAP[value]) {
        continue;
    }
    const chainInfo = chain_info_1.EthChainInfo[value];
    if (chainInfo) {
        exports.CHAIN_MAP[value] = chainInfo.name;
        continue;
    }
    const parts = key.split('_');
    exports.CHAIN_MAP[value] = parts
        .map((part, index) => {
        return part[0] + part.slice(1).toLowerCase();
    })
        .join(' ');
}
function getChainName(chainId) {
    if (typeof chainId === 'number') {
        chainId = chainId.toString();
    }
    if (chainId) {
        const name = exports.CHAIN_MAP[chainId];
        if (name) {
            return name;
        }
    }
    return chainId || '';
}
exports.getChainName = getChainName;
/**
 * @deprecated use getChainExternalUrl instead TODO(dazhan) to clean up
 * @param chainId
 * @param hash
 * @param subtype
 * @returns
 */
function getChainScanUrl(chainId, hash, subtype) {
    const chainName = getChainName(chainId);
    if (chainName === 'Ethereum') {
        if (subtype === 'block') {
            return `https://etherscan.io/block/${hash}`;
        }
        else if (subtype === 'address') {
            return `https://etherscan.io/address/${hash}`;
        }
        else {
            return `https://etherscan.io/tx/${hash}`;
        }
    }
    if (chainName === 'Polygon') {
        if (subtype === 'block') {
            return `https://polygonscan.com/block/${hash}`;
        }
        else if (subtype === 'address') {
            return `https://polygonscan.com/address/${hash}`;
        }
        else {
            return `https://polygonscan.com/tx/${hash}`;
        }
    }
    if (chainName.startsWith('Aptos ')) {
        let suffix = '?network=mainnet';
        if (chainName.includes('Testnet')) {
            suffix = '?network=testnet';
        }
        else if (chainName.includes('Devnet')) {
            suffix = '?network=devnet';
        }
        if (subtype === 'block') {
            return `https://explorer.aptoslabs.com/block/${hash}/${suffix}`;
        }
        else if (subtype === 'address') {
            return `https://explorer.aptoslabs.com/account/${hash}/${suffix}`;
        }
        else {
            return `https://explorer.aptoslabs.com/txn/${hash}/${suffix}`;
        }
    }
    if (chainName.startsWith('Solana ')) {
        if (subtype === 'block') {
            return `https://explorer.solana.com/block/${hash}`;
        }
        else if (subtype === 'address') {
            return `https://explorer.solana.com/address/${hash}`;
        }
        else {
            return `https://explorer.solana.io/tx/${hash}`;
        }
    }
    if (chainName.startsWith('Sui ')) {
        if (subtype === 'block') {
            return `https://suivision.xyz/checkpoint/${hash}`;
        }
        else if (subtype === 'address') {
            return `https://suivision.xyz/account/${hash}`;
        }
        else {
            return `https://suivision.xyz/txblock/${hash}`;
        }
    }
    return undefined;
}
exports.getChainScanUrl = getChainScanUrl;
//# sourceMappingURL=chain-name.js.map