import { BaseContext, Labels } from '../core/index.js';
import { Data_BTCBlock, HandleInterval, ProcessResult, RecordMetaData } from '@sentio/protos';
import { ChainId } from '@sentio/chain';
export type Transaction = {
    txid: string;
    hash: string;
    txindex: number;
    blockhash: string;
    blockheight: number;
    blocktime: number;
    size: number;
    vsize: number;
    version: number;
    locktime: number;
    vin: Vin[];
    vout: Vout[];
};
export type Vin = {
    vin_index: number;
    coinbase?: string;
    txid?: string;
    vout?: number;
    sequence: number;
    witness?: string[];
    scriptSig: {
        asm: string;
        hex: string;
    };
    pre_vout?: Vout;
    pre_transaction?: Transaction;
};
export type Vout = {
    value: number;
    n: number;
    scriptPubKey: {
        asm: string;
        hex: string;
        reqSigs: number;
        type: string;
        address: string;
    };
};
export type BTCBlock = {
    hash: string;
    confirmations: number;
    strippedsize: number;
    size: number;
    weight: number;
    height: number;
    version: number;
    merkleroot: string;
    tx?: Transaction[];
    time: number;
    nonce: number;
    bits: string;
    difficulty: number;
    previousblockhash: string;
    nextblockhash: string;
};
export declare class BTCContext extends BaseContext {
    readonly chainId: string;
    readonly name: string;
    readonly tx: Transaction;
    readonly address: string;
    constructor(chainId: string, name: string, tx: Transaction, address: string);
    protected getMetaDataInternal(name: string, labels: Labels): RecordMetaData;
    getChainId(): ChainId;
}
export declare class BTCBlockContext extends BaseContext {
    readonly chainId: string;
    readonly name: string;
    readonly block: BTCBlock;
    readonly address?: string | undefined;
    constructor(chainId: string, name: string, block: BTCBlock, address?: string | undefined);
    protected getMetaDataInternal(name: string, labels: Labels): RecordMetaData;
    getChainId(): ChainId;
}
export type BlockHandler = {
    blockInterval?: HandleInterval;
    timeIntervalInMinutes?: HandleInterval;
    handler: (block: Data_BTCBlock) => Promise<ProcessResult>;
    fetchConfig?: BTCOnIntervalFetchConfig;
};
export type BTCOnIntervalFetchConfig = {
    getTransactions: boolean;
};
//# sourceMappingURL=types.d.ts.map