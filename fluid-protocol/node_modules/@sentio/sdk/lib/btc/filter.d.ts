import { BTCTransactionFilter } from '@sentio/protos';
import { BigDecimal } from '@sentio/bigdecimal';
import { Transaction, Vin, Vout } from './types.js';
export type TransactionFields = keyof Omit<Transaction, 'vin' | 'vout'>;
export type VinFields = keyof Omit<Vin, 'pre_vout' | 'pre_transaction' | 'scriptSig'> | 'script_asm' | 'script_hex';
export type VOutFields = keyof Omit<Vout, 'scriptPubKey'> | 'script_asm' | 'script_hex' | 'script_type' | 'script_address';
export type Filter<F extends string> = {
    [K in F]?: Condition | Comparable;
};
export type Condition = {
    eq?: Comparable;
    gt?: Comparable;
    gte?: Comparable;
    lt?: Comparable;
    lte?: Comparable;
    ne?: Comparable;
    prefix?: string;
    contains?: string;
    notContains?: string;
    length?: number;
    lengthGt?: number;
    lengthLt?: number;
    hasAny?: Array<Comparable>;
    hasAll?: Array<Comparable>;
    in?: Array<Comparable>;
};
export type Filters<T extends string> = Filter<T> | Filter<T>[];
export type VinFilter = Filter<VinFields> & {
    preVOut?: Filter<VOutFields>;
    preTransaction?: {
        filter?: Array<Filter<TransactionFields>>;
        outputFilter?: Filters<VOutFields>;
    };
};
export type VOutFilter = Filter<VOutFields>;
export type TransactionFilter = {
    inputFilter?: VinFilter | VinFilter[];
    outputFilter?: VOutFilter | VOutFilter[];
    filter?: Array<Filter<TransactionFields>>;
};
export type Comparable = number | BigDecimal | bigint | Date | string | boolean;
export type TransactionFilters = TransactionFilter | TransactionFilter[];
export declare function filters2Proto(filter: TransactionFilters): BTCTransactionFilter[];
//# sourceMappingURL=filter.d.ts.map