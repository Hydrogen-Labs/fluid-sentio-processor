import { BaseContext, Labels } from '../core/index.js';
import { FuelChainId } from '@sentio/chain';
import { RecordMetaData } from '@sentio/protos';
import type { CallResult, Contract } from 'fuels';
import { InvocationScopeLike } from 'fuels';
import { FuelBlock, FuelLog, FuelTransaction } from './types.js';
export declare class FuelCall {
    readonly args?: Record<string, any> | undefined;
    readonly logs?: FuelLog<unknown>[] | undefined;
    constructor(funcScopes: InvocationScopeLike | Array<InvocationScopeLike>, callResult: CallResult, isMultiCall: boolean, args?: Record<string, any> | undefined, logs?: FuelLog<unknown>[] | undefined);
}
export declare class FuelContext extends BaseContext {
    readonly chainId: FuelChainId;
    readonly contractAddress: string;
    readonly contractName: string;
    readonly timestamp: Date;
    readonly transaction: FuelTransaction | null;
    readonly block: FuelBlock | null;
    private logIndex;
    constructor(chainId: FuelChainId, contractAddress: string, contractName: string, timestamp: Date, transaction: FuelTransaction | null, block: FuelBlock | null);
    getChainId(): FuelChainId;
    setLogIndex(logIndex: number): void;
    protected getMetaDataInternal(name: string, labels: Labels): RecordMetaData;
}
export declare class FuelContractContext<TContract extends Contract> extends FuelContext {
    readonly chainId: FuelChainId;
    readonly contract: TContract;
    readonly contractAddress: string;
    readonly contractName: string;
    readonly timestamp: Date;
    readonly transaction: FuelTransaction | null;
    readonly block: FuelBlock | null;
    constructor(chainId: FuelChainId, contract: TContract, contractAddress: string, contractName: string, timestamp: Date, transaction: FuelTransaction | null, block: FuelBlock | null);
    get provider(): import("fuels").Provider;
}
//# sourceMappingURL=context.d.ts.map