import { FuelProcessorState } from './types.js';
import { getProvider } from './network.js';
import { decodeFuelTransaction, DEFAULT_FUEL_FETCH_CONFIG } from './transaction.js';
import { FuelContext } from './context.js';
import { getOptionsSignature } from './fuel-processor.js';
import { mergeProcessResults } from '@sentio/runtime';
export class FuelGlobalProcessor {
    config;
    callHandlers = [];
    blockHandlers = [];
    provider;
    static bind(config) {
        const processor = new FuelGlobalProcessor(config);
        const sig = 'global_' +
            getOptionsSignature({
                ...config,
                address: '*'
            });
        FuelProcessorState.INSTANCE.getOrSetValue(sig, processor);
        return processor;
    }
    constructor(config) {
        this.config = config;
    }
    async configure() {
        this.provider = await getProvider(this.config.chainId);
    }
    onTransaction(handler, config = DEFAULT_FUEL_FETCH_CONFIG) {
        const callHandler = {
            handler: async (call) => {
                let tx;
                try {
                    tx = decodeFuelTransaction(call.transaction, this.provider);
                }
                catch (e) {
                    console.error('error decoding transaction', e);
                    return mergeProcessResults([]);
                }
                const ctx = new FuelContext(this.config.chainId, '*', this.config.name ?? '*', call.timestamp || new Date(0), tx, null);
                await handler(tx, ctx);
                return ctx.stopAndGetResult();
            },
            fetchConfig: {
                filters: [],
                ...config
            }
        };
        this.callHandlers.push(callHandler);
        return this;
    }
}
//# sourceMappingURL=global-processor.js.map