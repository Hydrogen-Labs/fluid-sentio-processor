import { BaseContext, normalizeLabels } from '../core/index.js';
export class FuelCall {
    args;
    logs;
    constructor(funcScopes, callResult, isMultiCall, args, logs) {
        this.args = args;
        this.logs = logs;
        // super(funcScopes, callResult, isMultiCall)
    }
}
export class FuelContext extends BaseContext {
    chainId;
    contractAddress;
    contractName;
    timestamp;
    transaction;
    block;
    logIndex = -1;
    constructor(chainId, contractAddress, contractName, timestamp, transaction, block) {
        super({});
        this.chainId = chainId;
        this.contractAddress = contractAddress;
        this.contractName = contractName;
        this.timestamp = timestamp;
        this.transaction = transaction;
        this.block = block;
    }
    getChainId() {
        return this.chainId;
    }
    setLogIndex(logIndex) {
        this.logIndex = logIndex;
    }
    getMetaDataInternal(name, labels) {
        return {
            address: this.contractAddress,
            contractName: this.contractName,
            blockNumber: BigInt(this.block?.height?.toString() ?? (this.transaction?.blockNumber || 0)),
            transactionIndex: 0,
            transactionHash: this.transaction?.id || '', // TODO
            chainId: this.getChainId(),
            name: name,
            logIndex: this.logIndex,
            labels: normalizeLabels(labels)
        };
    }
}
export class FuelContractContext extends FuelContext {
    chainId;
    contract;
    contractAddress;
    contractName;
    timestamp;
    transaction;
    block;
    constructor(chainId, contract, contractAddress, contractName, timestamp, transaction, block) {
        super(chainId, contractAddress, contractName, timestamp, transaction, block);
        this.chainId = chainId;
        this.contract = contract;
        this.contractAddress = contractAddress;
        this.contractName = contractName;
        this.timestamp = timestamp;
        this.transaction = transaction;
        this.block = block;
    }
    get provider() {
        return this.contract.provider;
    }
}
//# sourceMappingURL=context.js.map