import { CallHandler, FuelBaseProcessor } from './types.js';
import { Data_FuelCall } from '@sentio/protos';
import { FuelNetwork } from './network.js';
import { FuelContext } from './context.js';
export declare class FuelAssetProcessor implements FuelBaseProcessor<FuelAssetProcessorConfig> {
    readonly config: FuelAssetProcessorConfig;
    callHandlers: CallHandler<Data_FuelCall>[];
    blockHandlers: never[];
    private provider;
    static bind(config: FuelAssetProcessorConfig): FuelAssetProcessor;
    constructor(config: FuelAssetProcessorConfig);
    configure(): Promise<void>;
    onTransfer(filter: TransferFilter, handler: (transfers: FuelTransfer, ctx: FuelContext) => void | Promise<void>): this;
}
export type FuelAssetProcessorConfig = {
    name?: string;
    chainId: FuelNetwork;
    startBlock?: bigint;
    endBlock?: bigint;
};
export type TransferFilter = {
    from?: string | string[];
    to?: string | string[];
    assetId?: string | string[];
};
export type FuelTransfer = {
    from: {
        assetId: string;
        address: string;
    }[];
    to: {
        address: string;
        amount: bigint;
        assetId: string;
    }[];
};
//# sourceMappingURL=asset-processor.d.ts.map