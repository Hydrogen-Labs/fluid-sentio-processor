import { Data_FuelCall, HandleInterval } from '@sentio/protos';
import { FuelContractContext } from './context.js';
import { Contract, JsonAbi } from 'fuels';
import { FuelNetwork } from './network.js';
import { FuelFetchConfig } from './transaction.js';
import { BlockHandler, CallHandler, FuelBaseProcessor, FuelBlock, FuelLog, FuelTransaction } from './types.js';
import { PromiseOrVoid } from '../core/index.js';
export declare class FuelProcessor<TContract extends Contract> implements FuelBaseProcessor<FuelProcessorConfig> {
    readonly config: FuelProcessorConfig;
    callHandlers: CallHandler<Data_FuelCall>[];
    blockHandlers: BlockHandler[];
    private provider;
    private contract;
    static bind(config: FuelProcessorConfig): FuelProcessor<any>;
    constructor(config: FuelProcessorConfig);
    latestGasPrice: string | undefined;
    configure(): Promise<void>;
    onTransaction(handler: (transaction: FuelTransaction, ctx: FuelContractContext<TContract>) => PromiseOrVoid, config?: FuelFetchConfig): this;
    private onCall;
    onLog<T>(logIdFilter: string | string[], handler: (logs: FuelLog<T>, ctx: FuelContractContext<TContract>) => PromiseOrVoid): this;
    onInterval(handler: (block: FuelBlock, ctx: FuelContractContext<TContract>) => PromiseOrVoid, timeInterval: HandleInterval | undefined, blockInterval: HandleInterval | undefined): this;
    onBlockInterval(handler: (block: FuelBlock, ctx: FuelContractContext<TContract>) => PromiseOrVoid, blockInterval?: number, backfillBlockInterval?: number): this;
    onTimeInterval(handler: (block: FuelBlock, ctx: FuelContractContext<TContract>) => PromiseOrVoid, timeIntervalInMinutes?: number, backfillTimeIntervalInMinutes?: number): this;
}
export type FuelProcessorConfig = {
    address: string;
    name?: string;
    chainId: FuelNetwork;
    startBlock?: bigint;
    endBlock?: bigint;
    abi: JsonAbi;
};
export declare function getOptionsSignature(opts: Omit<FuelProcessorConfig, 'abi'>): string;
export declare function getFuelProcessor(opts: Omit<FuelProcessorConfig, 'abi'>): FuelBaseProcessor<any> | undefined;
export declare function addFuelProcessor(opts: Omit<FuelProcessorConfig, 'abi'>, processor: FuelBaseProcessor<any>): void;
//# sourceMappingURL=fuel-processor.d.ts.map