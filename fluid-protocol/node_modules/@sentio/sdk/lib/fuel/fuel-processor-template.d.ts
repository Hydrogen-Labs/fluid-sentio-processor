import { FuelContext, FuelContractContext } from './context.js';
import { HandleInterval } from '@sentio/protos';
import { PromiseOrVoid } from '../core/promises.js';
import { ListStateStorage } from '@sentio/runtime';
import { Contract } from 'fuels';
import { FuelBlock, FuelLog, FuelTransaction } from './types.js';
import { FuelFetchConfig } from './transaction.js';
import { FuelProcessor, FuelProcessorConfig } from './fuel-processor.js';
export declare class FuelProcessorTemplateProcessorState extends ListStateStorage<FuelBaseProcessorTemplate<Contract>> {
    static INSTANCE: FuelProcessorTemplateProcessorState;
}
export declare abstract class FuelBaseProcessorTemplate<TContract extends Contract> {
    id: number;
    binds: Set<string>;
    blockHandlers: {
        handler: (block: FuelBlock, ctx: FuelContractContext<TContract>) => PromiseOrVoid;
        blockInterval?: HandleInterval;
        timeIntervalInMinutes?: HandleInterval;
    }[];
    logHandlers: {
        logIdFilter: string | string[];
        handler: (logs: FuelLog<any>, ctx: FuelContractContext<TContract>) => PromiseOrVoid;
    }[];
    transactionHandlers: {
        handler: (transaction: FuelTransaction, ctx: FuelContractContext<TContract>) => PromiseOrVoid;
        fetchConfig: FuelFetchConfig;
    }[];
    constructor();
    /**
     * Bind template using {@param options}, using {@param ctx}'s network value if not provided in the option
     * @param options
     * @param ctx
     */
    bind(options: Omit<Omit<FuelProcessorConfig, 'chainId'>, 'abi'>, ctx: FuelContext): void;
    protected onLog<T>(logIdFilter: string | string[], handler: (logs: FuelLog<T>, ctx: FuelContractContext<TContract>) => PromiseOrVoid): this;
    onBlockInterval(handler: (block: FuelBlock, ctx: FuelContractContext<TContract>) => PromiseOrVoid, blockInterval?: number, backfillBlockInterval?: number): this;
    onTimeInterval(handler: (block: FuelBlock, ctx: FuelContractContext<TContract>) => PromiseOrVoid, timeIntervalInMinutes?: number, backfillBlockInterval?: number): this;
    onInterval(handler: (block: FuelBlock, ctx: FuelContractContext<TContract>) => PromiseOrVoid, timeInterval: HandleInterval | undefined, blockInterval: HandleInterval | undefined): this;
    protected onTransaction(handler: (transaction: FuelTransaction, ctx: FuelContractContext<TContract>) => PromiseOrVoid, config?: FuelFetchConfig): this;
    protected abstract bindInternal(options: Omit<FuelProcessorConfig, 'abi'>): FuelProcessor<TContract>;
}
//# sourceMappingURL=fuel-processor-template.d.ts.map