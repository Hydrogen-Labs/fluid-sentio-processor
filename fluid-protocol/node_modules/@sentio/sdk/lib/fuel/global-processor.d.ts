import { CallHandler, FuelBaseProcessor, FuelTransaction } from './types.js';
import { Data_FuelCall } from '@sentio/protos';
import { FuelFetchConfig } from './transaction.js';
import { FuelContext } from './context.js';
import { FuelProcessorConfig } from './fuel-processor.js';
type GlobalFuelProcessorConfig = Omit<FuelProcessorConfig, 'address' | 'abi'>;
export declare class FuelGlobalProcessor implements FuelBaseProcessor<GlobalFuelProcessorConfig> {
    readonly config: GlobalFuelProcessorConfig;
    callHandlers: CallHandler<Data_FuelCall>[];
    blockHandlers: never[];
    private provider;
    static bind(config: GlobalFuelProcessorConfig): FuelGlobalProcessor;
    constructor(config: GlobalFuelProcessorConfig);
    configure(): Promise<void>;
    onTransaction(handler: (transaction: FuelTransaction, ctx: FuelContext) => void | Promise<void>, config?: FuelFetchConfig): this;
}
export {};
//# sourceMappingURL=global-processor.d.ts.map