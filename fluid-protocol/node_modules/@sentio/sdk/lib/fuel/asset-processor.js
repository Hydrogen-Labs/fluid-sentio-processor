import { FuelProcessorState } from './types.js';
import { getProvider } from './network.js';
import { FuelContext } from './context.js';
import { decodeFuelTransaction } from './transaction.js';
import { InputType, OutputType } from 'fuels';
import { getOptionsSignature } from './fuel-processor.js';
export class FuelAssetProcessor {
    config;
    callHandlers = [];
    blockHandlers = [];
    provider;
    static bind(config) {
        const processor = new FuelAssetProcessor(config);
        const sig = 'assets_' +
            getOptionsSignature({
                ...config,
                address: '*'
            });
        FuelProcessorState.INSTANCE.getOrSetValue(sig, processor);
        return processor;
    }
    constructor(config) {
        this.config = config;
    }
    async configure() {
        this.provider = await getProvider(this.config.chainId);
    }
    onTransfer(filter, handler) {
        const filters = [];
        const assetIds = arrayify(filter.assetId);
        const froms = arrayify(filter.from);
        const tos = arrayify(filter.to);
        for (const assetId of assetIds) {
            for (const from of froms) {
                for (const to of tos) {
                    filters.push({
                        assetId: assetId,
                        fromAddress: from,
                        toAddress: to
                    });
                }
            }
        }
        const callHandler = {
            handler: async (call) => {
                const gqlTransaction = call.transaction;
                const tx = decodeFuelTransaction(gqlTransaction, this.provider);
                const transfer = {
                    from: [],
                    to: []
                };
                for (const input of tx.transaction.inputs || []) {
                    if (input.type == InputType.Coin) {
                        transfer.from.push({
                            address: input.owner,
                            assetId: input.assetId
                        });
                    }
                }
                for (const output of tx.transaction.outputs || []) {
                    if (output.type == OutputType.Coin) {
                        const value = output.amount.toString(10);
                        transfer.to.push({
                            address: output.to,
                            amount: BigInt(value),
                            assetId: output.assetId
                        });
                    }
                }
                const assetId = transfer.from[0].assetId || '';
                const ctx = new FuelContext(this.config.chainId, assetId, this.config.name ?? '', call.timestamp || new Date(0), tx, null);
                await handler(transfer, ctx);
                return ctx.stopAndGetResult();
            },
            assetConfig: {
                filters
            }
        };
        this.callHandlers.push(callHandler);
        return this;
    }
}
function arrayify(value) {
    if (value) {
        if (Array.isArray(value)) {
            return value.length > 0 ? value : [undefined];
        }
        return [value];
    }
    return [undefined];
}
//# sourceMappingURL=asset-processor.js.map