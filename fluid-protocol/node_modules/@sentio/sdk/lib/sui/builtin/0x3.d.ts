import { TypeDescriptor } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";
import { CallFilter, MoveFetchConfig } from "@sentio/sdk/move";
import { SuiBindOptions, SuiBaseProcessor, TypedFunctionPayload, SuiContext } from "@sentio/sdk/sui";
import * as _0x1 from "./0x1.js";
import * as _0x2 from "./0x2.js";
export declare class genesis extends SuiBaseProcessor {
    constructor(options: SuiBindOptions);
    static DEFAULT_OPTIONS: SuiBindOptions;
    static bind(options?: Partial<SuiBindOptions>): genesis;
    onEventGenesisChainParameters(func: (event: genesis.GenesisChainParametersInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): genesis;
    onEventGenesisValidatorMetadata(func: (event: genesis.GenesisValidatorMetadataInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): genesis;
}
export declare namespace genesis {
    interface GenesisChainParameters {
        protocol_version: bigint;
        chain_start_timestamp_ms: bigint;
        epoch_duration_ms: bigint;
        stake_subsidy_start_epoch: bigint;
        stake_subsidy_initial_distribution_amount: bigint;
        stake_subsidy_period_length: bigint;
        stake_subsidy_decrease_rate: number;
        max_validator_count: bigint;
        min_validator_joining_stake: bigint;
        validator_low_stake_threshold: bigint;
        validator_very_low_stake_threshold: bigint;
        validator_low_stake_grace_period: bigint;
    }
    namespace GenesisChainParameters {
        const TYPE_QNAME = "0x3::genesis::GenesisChainParameters";
        function type(): TypeDescriptor<GenesisChainParameters>;
    }
    interface GenesisChainParametersInstance extends TypedEventInstance<GenesisChainParameters> {
        data_decoded: GenesisChainParameters;
        type_arguments: [];
    }
    interface GenesisValidatorMetadata {
        name: number[];
        description: number[];
        image_url: number[];
        project_url: number[];
        sui_address: string;
        gas_price: bigint;
        commission_rate: bigint;
        protocol_public_key: number[];
        proof_of_possession: number[];
        network_public_key: number[];
        worker_public_key: number[];
        network_address: number[];
        p2p_address: number[];
        primary_address: number[];
        worker_address: number[];
    }
    namespace GenesisValidatorMetadata {
        const TYPE_QNAME = "0x3::genesis::GenesisValidatorMetadata";
        function type(): TypeDescriptor<GenesisValidatorMetadata>;
    }
    interface GenesisValidatorMetadataInstance extends TypedEventInstance<GenesisValidatorMetadata> {
        data_decoded: GenesisValidatorMetadata;
        type_arguments: [];
    }
    interface TokenAllocation {
        recipient_address: string;
        amount_mist: bigint;
        staked_with_validator: _0x1.option.Option<string>;
    }
    namespace TokenAllocation {
        const TYPE_QNAME = "0x3::genesis::TokenAllocation";
        function type(): TypeDescriptor<TokenAllocation>;
    }
    interface TokenDistributionSchedule {
        stake_subsidy_fund_mist: bigint;
        allocations: genesis.TokenAllocation[];
    }
    namespace TokenDistributionSchedule {
        const TYPE_QNAME = "0x3::genesis::TokenDistributionSchedule";
        function type(): TypeDescriptor<TokenDistributionSchedule>;
    }
}
export declare namespace stake_subsidy {
    interface StakeSubsidy {
        balance: _0x2.balance.Balance<_0x2.sui.SUI>;
        distribution_counter: bigint;
        current_distribution_amount: bigint;
        stake_subsidy_period_length: bigint;
        stake_subsidy_decrease_rate: number;
        extra_fields: _0x2.bag.Bag;
    }
    namespace StakeSubsidy {
        const TYPE_QNAME = "0x3::stake_subsidy::StakeSubsidy";
        function type(): TypeDescriptor<StakeSubsidy>;
    }
}
export declare class staking_pool extends SuiBaseProcessor {
    constructor(options: SuiBindOptions);
    static DEFAULT_OPTIONS: SuiBindOptions;
    static bind(options?: Partial<SuiBindOptions>): staking_pool;
    onEntryJoinStakedSui(func: (call: staking_pool.JoinStakedSuiPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): staking_pool;
    onEntrySplitStakedSui(func: (call: staking_pool.SplitStakedSuiPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): staking_pool;
    onEventPoolTokenExchangeRate(func: (event: staking_pool.PoolTokenExchangeRateInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): staking_pool;
}
export declare namespace staking_pool {
    interface PoolTokenExchangeRate {
        sui_amount: bigint;
        pool_token_amount: bigint;
    }
    namespace PoolTokenExchangeRate {
        const TYPE_QNAME = "0x3::staking_pool::PoolTokenExchangeRate";
        function type(): TypeDescriptor<PoolTokenExchangeRate>;
    }
    interface PoolTokenExchangeRateInstance extends TypedEventInstance<PoolTokenExchangeRate> {
        data_decoded: PoolTokenExchangeRate;
        type_arguments: [];
    }
    interface StakedSui {
        id: _0x2.object_.UID;
        pool_id: _0x2.object_.ID;
        stake_activation_epoch: bigint;
        principal: _0x2.balance.Balance<_0x2.sui.SUI>;
    }
    namespace StakedSui {
        const TYPE_QNAME = "0x3::staking_pool::StakedSui";
        function type(): TypeDescriptor<StakedSui>;
    }
    interface StakingPool {
        id: _0x2.object_.UID;
        activation_epoch: _0x1.option.Option<bigint>;
        deactivation_epoch: _0x1.option.Option<bigint>;
        sui_balance: bigint;
        rewards_pool: _0x2.balance.Balance<_0x2.sui.SUI>;
        pool_token_balance: bigint;
        exchange_rates: _0x2.table.Table<bigint, staking_pool.PoolTokenExchangeRate>;
        pending_stake: bigint;
        pending_total_sui_withdraw: bigint;
        pending_pool_token_withdraw: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace StakingPool {
        const TYPE_QNAME = "0x3::staking_pool::StakingPool";
        function type(): TypeDescriptor<StakingPool>;
    }
    interface JoinStakedSuiPayload extends TypedFunctionPayload<[string, staking_pool.StakedSui]> {
        arguments_decoded: [string, staking_pool.StakedSui];
        type_arguments: [];
    }
    interface SplitStakedSuiPayload extends TypedFunctionPayload<[string, bigint, string]> {
        arguments_decoded: [string, bigint, string];
        type_arguments: [];
    }
}
export declare namespace storage_fund {
    interface StorageFund {
        total_object_storage_rebates: _0x2.balance.Balance<_0x2.sui.SUI>;
        non_refundable_balance: _0x2.balance.Balance<_0x2.sui.SUI>;
    }
    namespace StorageFund {
        const TYPE_QNAME = "0x3::storage_fund::StorageFund";
        function type(): TypeDescriptor<StorageFund>;
    }
}
export declare class sui_system extends SuiBaseProcessor {
    constructor(options: SuiBindOptions);
    static DEFAULT_OPTIONS: SuiBindOptions;
    static bind(options?: Partial<SuiBindOptions>): sui_system;
    onEntryReportValidator(func: (call: sui_system.ReportValidatorPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestAddStake(func: (call: sui_system.RequestAddStakePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestAddStakeMulCoin(func: (call: sui_system.RequestAddStakeMulCoinPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestAddValidator(func: (call: sui_system.RequestAddValidatorPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestAddValidatorCandidate(func: (call: sui_system.RequestAddValidatorCandidatePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestRemoveValidator(func: (call: sui_system.RequestRemoveValidatorPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestRemoveValidatorCandidate(func: (call: sui_system.RequestRemoveValidatorCandidatePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestSetCommissionRate(func: (call: sui_system.RequestSetCommissionRatePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestSetGasPrice(func: (call: sui_system.RequestSetGasPricePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRequestWithdrawStake(func: (call: sui_system.RequestWithdrawStakePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryRotateOperationCap(func: (call: sui_system.RotateOperationCapPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntrySetCandidateValidatorCommissionRate(func: (call: sui_system.SetCandidateValidatorCommissionRatePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntrySetCandidateValidatorGasPrice(func: (call: sui_system.SetCandidateValidatorGasPricePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUndoReportValidator(func: (call: sui_system.UndoReportValidatorPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateCandidateValidatorNetworkAddress(func: (call: sui_system.UpdateCandidateValidatorNetworkAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateCandidateValidatorNetworkPubkey(func: (call: sui_system.UpdateCandidateValidatorNetworkPubkeyPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateCandidateValidatorP2pAddress(func: (call: sui_system.UpdateCandidateValidatorP2pAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateCandidateValidatorPrimaryAddress(func: (call: sui_system.UpdateCandidateValidatorPrimaryAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateCandidateValidatorProtocolPubkey(func: (call: sui_system.UpdateCandidateValidatorProtocolPubkeyPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateCandidateValidatorWorkerAddress(func: (call: sui_system.UpdateCandidateValidatorWorkerAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateCandidateValidatorWorkerPubkey(func: (call: sui_system.UpdateCandidateValidatorWorkerPubkeyPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorDescription(func: (call: sui_system.UpdateValidatorDescriptionPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorImageUrl(func: (call: sui_system.UpdateValidatorImageUrlPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorName(func: (call: sui_system.UpdateValidatorNamePayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorNextEpochNetworkAddress(func: (call: sui_system.UpdateValidatorNextEpochNetworkAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorNextEpochNetworkPubkey(func: (call: sui_system.UpdateValidatorNextEpochNetworkPubkeyPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorNextEpochP2pAddress(func: (call: sui_system.UpdateValidatorNextEpochP2pAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorNextEpochPrimaryAddress(func: (call: sui_system.UpdateValidatorNextEpochPrimaryAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorNextEpochProtocolPubkey(func: (call: sui_system.UpdateValidatorNextEpochProtocolPubkeyPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorNextEpochWorkerAddress(func: (call: sui_system.UpdateValidatorNextEpochWorkerAddressPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorNextEpochWorkerPubkey(func: (call: sui_system.UpdateValidatorNextEpochWorkerPubkeyPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
    onEntryUpdateValidatorProjectUrl(func: (call: sui_system.UpdateValidatorProjectUrlPayload, ctx: SuiContext) => void, filter?: CallFilter, fetchConfig?: Partial<MoveFetchConfig>): sui_system;
}
export declare namespace sui_system {
    interface SuiSystemState {
        id: _0x2.object_.UID;
        version: bigint;
    }
    namespace SuiSystemState {
        const TYPE_QNAME = "0x3::sui_system::SuiSystemState";
        function type(): TypeDescriptor<SuiSystemState>;
    }
    interface ReportValidatorPayload extends TypedFunctionPayload<[string, string, string]> {
        arguments_decoded: [string, string, string];
        type_arguments: [];
    }
    interface RequestAddStakePayload extends TypedFunctionPayload<[
        string,
        _0x2.coin.Coin<_0x2.sui.SUI>,
        string,
        string
    ]> {
        arguments_decoded: [string, _0x2.coin.Coin<_0x2.sui.SUI>, string, string];
        type_arguments: [];
    }
    interface RequestAddStakeMulCoinPayload extends TypedFunctionPayload<[
        string,
        _0x2.coin.Coin<_0x2.sui.SUI>[],
        _0x1.option.Option<bigint>,
        string,
        string
    ]> {
        arguments_decoded: [
            string,
            _0x2.coin.Coin<_0x2.sui.SUI>[],
            _0x1.option.Option<bigint>,
            string,
            string
        ];
        type_arguments: [];
    }
    interface RequestAddValidatorPayload extends TypedFunctionPayload<[string, string]> {
        arguments_decoded: [string, string];
        type_arguments: [];
    }
    interface RequestAddValidatorCandidatePayload extends TypedFunctionPayload<[
        string,
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        number[],
        bigint,
        bigint,
        string
    ]> {
        arguments_decoded: [
            string,
            number[],
            number[],
            number[],
            number[],
            number[],
            number[],
            number[],
            number[],
            number[],
            number[],
            number[],
            number[],
            bigint,
            bigint,
            string
        ];
        type_arguments: [];
    }
    interface RequestRemoveValidatorPayload extends TypedFunctionPayload<[string, string]> {
        arguments_decoded: [string, string];
        type_arguments: [];
    }
    interface RequestRemoveValidatorCandidatePayload extends TypedFunctionPayload<[string, string]> {
        arguments_decoded: [string, string];
        type_arguments: [];
    }
    interface RequestSetCommissionRatePayload extends TypedFunctionPayload<[string, bigint, string]> {
        arguments_decoded: [string, bigint, string];
        type_arguments: [];
    }
    interface RequestSetGasPricePayload extends TypedFunctionPayload<[string, string, bigint]> {
        arguments_decoded: [string, string, bigint];
        type_arguments: [];
    }
    interface RequestWithdrawStakePayload extends TypedFunctionPayload<[string, staking_pool.StakedSui, string]> {
        arguments_decoded: [string, staking_pool.StakedSui, string];
        type_arguments: [];
    }
    interface RotateOperationCapPayload extends TypedFunctionPayload<[string, string]> {
        arguments_decoded: [string, string];
        type_arguments: [];
    }
    interface SetCandidateValidatorCommissionRatePayload extends TypedFunctionPayload<[string, bigint, string]> {
        arguments_decoded: [string, bigint, string];
        type_arguments: [];
    }
    interface SetCandidateValidatorGasPricePayload extends TypedFunctionPayload<[string, string, bigint]> {
        arguments_decoded: [string, string, bigint];
        type_arguments: [];
    }
    interface UndoReportValidatorPayload extends TypedFunctionPayload<[string, string, string]> {
        arguments_decoded: [string, string, string];
        type_arguments: [];
    }
    interface UpdateCandidateValidatorNetworkAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateCandidateValidatorNetworkPubkeyPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateCandidateValidatorP2pAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateCandidateValidatorPrimaryAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateCandidateValidatorProtocolPubkeyPayload extends TypedFunctionPayload<[string, number[], number[], string]> {
        arguments_decoded: [string, number[], number[], string];
        type_arguments: [];
    }
    interface UpdateCandidateValidatorWorkerAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateCandidateValidatorWorkerPubkeyPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorDescriptionPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorImageUrlPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNamePayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNextEpochNetworkAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNextEpochNetworkPubkeyPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNextEpochP2pAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNextEpochPrimaryAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNextEpochProtocolPubkeyPayload extends TypedFunctionPayload<[string, number[], number[], string]> {
        arguments_decoded: [string, number[], number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNextEpochWorkerAddressPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorNextEpochWorkerPubkeyPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
    interface UpdateValidatorProjectUrlPayload extends TypedFunctionPayload<[string, number[], string]> {
        arguments_decoded: [string, number[], string];
        type_arguments: [];
    }
}
export declare class sui_system_state_inner extends SuiBaseProcessor {
    constructor(options: SuiBindOptions);
    static DEFAULT_OPTIONS: SuiBindOptions;
    static bind(options?: Partial<SuiBindOptions>): sui_system_state_inner;
    onEventSystemEpochInfoEvent(func: (event: sui_system_state_inner.SystemEpochInfoEventInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): sui_system_state_inner;
}
export declare namespace sui_system_state_inner {
    interface SuiSystemStateInner {
        epoch: bigint;
        protocol_version: bigint;
        system_state_version: bigint;
        validators: validator_set.ValidatorSet;
        storage_fund: storage_fund.StorageFund;
        parameters: sui_system_state_inner.SystemParameters;
        reference_gas_price: bigint;
        validator_report_records: _0x2.vec_map.VecMap<string, _0x2.vec_set.VecSet<string>>;
        stake_subsidy: stake_subsidy.StakeSubsidy;
        safe_mode: Boolean;
        safe_mode_storage_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_computation_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_storage_rebates: bigint;
        safe_mode_non_refundable_storage_fee: bigint;
        epoch_start_timestamp_ms: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SuiSystemStateInner {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SuiSystemStateInner";
        function type(): TypeDescriptor<SuiSystemStateInner>;
    }
    interface SuiSystemStateInnerV2 {
        epoch: bigint;
        protocol_version: bigint;
        system_state_version: bigint;
        validators: validator_set.ValidatorSet;
        storage_fund: storage_fund.StorageFund;
        parameters: sui_system_state_inner.SystemParametersV2;
        reference_gas_price: bigint;
        validator_report_records: _0x2.vec_map.VecMap<string, _0x2.vec_set.VecSet<string>>;
        stake_subsidy: stake_subsidy.StakeSubsidy;
        safe_mode: Boolean;
        safe_mode_storage_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_computation_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_storage_rebates: bigint;
        safe_mode_non_refundable_storage_fee: bigint;
        epoch_start_timestamp_ms: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SuiSystemStateInnerV2 {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SuiSystemStateInnerV2";
        function type(): TypeDescriptor<SuiSystemStateInnerV2>;
    }
    interface SystemEpochInfoEvent {
        epoch: bigint;
        protocol_version: bigint;
        reference_gas_price: bigint;
        total_stake: bigint;
        storage_fund_reinvestment: bigint;
        storage_charge: bigint;
        storage_rebate: bigint;
        storage_fund_balance: bigint;
        stake_subsidy_amount: bigint;
        total_gas_fees: bigint;
        total_stake_rewards_distributed: bigint;
        leftover_storage_fund_inflow: bigint;
    }
    namespace SystemEpochInfoEvent {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SystemEpochInfoEvent";
        function type(): TypeDescriptor<SystemEpochInfoEvent>;
    }
    interface SystemEpochInfoEventInstance extends TypedEventInstance<SystemEpochInfoEvent> {
        data_decoded: SystemEpochInfoEvent;
        type_arguments: [];
    }
    interface SystemParameters {
        epoch_duration_ms: bigint;
        stake_subsidy_start_epoch: bigint;
        max_validator_count: bigint;
        min_validator_joining_stake: bigint;
        validator_low_stake_threshold: bigint;
        validator_very_low_stake_threshold: bigint;
        validator_low_stake_grace_period: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SystemParameters {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SystemParameters";
        function type(): TypeDescriptor<SystemParameters>;
    }
    interface SystemParametersV2 {
        epoch_duration_ms: bigint;
        stake_subsidy_start_epoch: bigint;
        min_validator_count: bigint;
        max_validator_count: bigint;
        min_validator_joining_stake: bigint;
        validator_low_stake_threshold: bigint;
        validator_very_low_stake_threshold: bigint;
        validator_low_stake_grace_period: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SystemParametersV2 {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SystemParametersV2";
        function type(): TypeDescriptor<SystemParametersV2>;
    }
}
export declare class validator extends SuiBaseProcessor {
    constructor(options: SuiBindOptions);
    static DEFAULT_OPTIONS: SuiBindOptions;
    static bind(options?: Partial<SuiBindOptions>): validator;
    onEventStakingRequestEvent(func: (event: validator.StakingRequestEventInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): validator;
    onEventUnstakingRequestEvent(func: (event: validator.UnstakingRequestEventInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): validator;
}
export declare namespace validator {
    interface StakingRequestEvent {
        pool_id: _0x2.object_.ID;
        validator_address: string;
        staker_address: string;
        epoch: bigint;
        amount: bigint;
    }
    namespace StakingRequestEvent {
        const TYPE_QNAME = "0x3::validator::StakingRequestEvent";
        function type(): TypeDescriptor<StakingRequestEvent>;
    }
    interface StakingRequestEventInstance extends TypedEventInstance<StakingRequestEvent> {
        data_decoded: StakingRequestEvent;
        type_arguments: [];
    }
    interface UnstakingRequestEvent {
        pool_id: _0x2.object_.ID;
        validator_address: string;
        staker_address: string;
        stake_activation_epoch: bigint;
        unstaking_epoch: bigint;
        principal_amount: bigint;
        reward_amount: bigint;
    }
    namespace UnstakingRequestEvent {
        const TYPE_QNAME = "0x3::validator::UnstakingRequestEvent";
        function type(): TypeDescriptor<UnstakingRequestEvent>;
    }
    interface UnstakingRequestEventInstance extends TypedEventInstance<UnstakingRequestEvent> {
        data_decoded: UnstakingRequestEvent;
        type_arguments: [];
    }
    interface Validator {
        metadata: validator.ValidatorMetadata;
        voting_power: bigint;
        operation_cap_id: _0x2.object_.ID;
        gas_price: bigint;
        staking_pool: staking_pool.StakingPool;
        commission_rate: bigint;
        next_epoch_stake: bigint;
        next_epoch_gas_price: bigint;
        next_epoch_commission_rate: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace Validator {
        const TYPE_QNAME = "0x3::validator::Validator";
        function type(): TypeDescriptor<Validator>;
    }
    interface ValidatorMetadata {
        sui_address: string;
        protocol_pubkey_bytes: number[];
        network_pubkey_bytes: number[];
        worker_pubkey_bytes: number[];
        proof_of_possession: number[];
        name: string;
        description: string;
        image_url: _0x2.url.Url;
        project_url: _0x2.url.Url;
        net_address: string;
        p2p_address: string;
        primary_address: string;
        worker_address: string;
        next_epoch_protocol_pubkey_bytes: _0x1.option.Option<number[]>;
        next_epoch_proof_of_possession: _0x1.option.Option<number[]>;
        next_epoch_network_pubkey_bytes: _0x1.option.Option<number[]>;
        next_epoch_worker_pubkey_bytes: _0x1.option.Option<number[]>;
        next_epoch_net_address: _0x1.option.Option<string>;
        next_epoch_p2p_address: _0x1.option.Option<string>;
        next_epoch_primary_address: _0x1.option.Option<string>;
        next_epoch_worker_address: _0x1.option.Option<string>;
        extra_fields: _0x2.bag.Bag;
    }
    namespace ValidatorMetadata {
        const TYPE_QNAME = "0x3::validator::ValidatorMetadata";
        function type(): TypeDescriptor<ValidatorMetadata>;
    }
}
export declare namespace validator_cap {
    interface UnverifiedValidatorOperationCap {
        id: _0x2.object_.UID;
        authorizer_validator_address: string;
    }
    namespace UnverifiedValidatorOperationCap {
        const TYPE_QNAME = "0x3::validator_cap::UnverifiedValidatorOperationCap";
        function type(): TypeDescriptor<UnverifiedValidatorOperationCap>;
    }
    interface ValidatorOperationCap {
        authorizer_validator_address: string;
    }
    namespace ValidatorOperationCap {
        const TYPE_QNAME = "0x3::validator_cap::ValidatorOperationCap";
        function type(): TypeDescriptor<ValidatorOperationCap>;
    }
}
export declare class validator_set extends SuiBaseProcessor {
    constructor(options: SuiBindOptions);
    static DEFAULT_OPTIONS: SuiBindOptions;
    static bind(options?: Partial<SuiBindOptions>): validator_set;
    onEventValidatorEpochInfoEvent(func: (event: validator_set.ValidatorEpochInfoEventInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): validator_set;
    onEventValidatorEpochInfoEventV2(func: (event: validator_set.ValidatorEpochInfoEventV2Instance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): validator_set;
    onEventValidatorJoinEvent(func: (event: validator_set.ValidatorJoinEventInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): validator_set;
    onEventValidatorLeaveEvent(func: (event: validator_set.ValidatorLeaveEventInstance, ctx: SuiContext) => void, fetchConfig?: Partial<MoveFetchConfig>): validator_set;
}
export declare namespace validator_set {
    interface ValidatorEpochInfoEvent {
        epoch: bigint;
        validator_address: string;
        reference_gas_survey_quote: bigint;
        stake: bigint;
        commission_rate: bigint;
        pool_staking_reward: bigint;
        storage_fund_staking_reward: bigint;
        pool_token_exchange_rate: staking_pool.PoolTokenExchangeRate;
        tallying_rule_reporters: string[];
        tallying_rule_global_score: bigint;
    }
    namespace ValidatorEpochInfoEvent {
        const TYPE_QNAME = "0x3::validator_set::ValidatorEpochInfoEvent";
        function type(): TypeDescriptor<ValidatorEpochInfoEvent>;
    }
    interface ValidatorEpochInfoEventInstance extends TypedEventInstance<ValidatorEpochInfoEvent> {
        data_decoded: ValidatorEpochInfoEvent;
        type_arguments: [];
    }
    interface ValidatorEpochInfoEventV2 {
        epoch: bigint;
        validator_address: string;
        reference_gas_survey_quote: bigint;
        stake: bigint;
        voting_power: bigint;
        commission_rate: bigint;
        pool_staking_reward: bigint;
        storage_fund_staking_reward: bigint;
        pool_token_exchange_rate: staking_pool.PoolTokenExchangeRate;
        tallying_rule_reporters: string[];
        tallying_rule_global_score: bigint;
    }
    namespace ValidatorEpochInfoEventV2 {
        const TYPE_QNAME = "0x3::validator_set::ValidatorEpochInfoEventV2";
        function type(): TypeDescriptor<ValidatorEpochInfoEventV2>;
    }
    interface ValidatorEpochInfoEventV2Instance extends TypedEventInstance<ValidatorEpochInfoEventV2> {
        data_decoded: ValidatorEpochInfoEventV2;
        type_arguments: [];
    }
    interface ValidatorJoinEvent {
        epoch: bigint;
        validator_address: string;
        staking_pool_id: _0x2.object_.ID;
    }
    namespace ValidatorJoinEvent {
        const TYPE_QNAME = "0x3::validator_set::ValidatorJoinEvent";
        function type(): TypeDescriptor<ValidatorJoinEvent>;
    }
    interface ValidatorJoinEventInstance extends TypedEventInstance<ValidatorJoinEvent> {
        data_decoded: ValidatorJoinEvent;
        type_arguments: [];
    }
    interface ValidatorLeaveEvent {
        epoch: bigint;
        validator_address: string;
        staking_pool_id: _0x2.object_.ID;
        is_voluntary: Boolean;
    }
    namespace ValidatorLeaveEvent {
        const TYPE_QNAME = "0x3::validator_set::ValidatorLeaveEvent";
        function type(): TypeDescriptor<ValidatorLeaveEvent>;
    }
    interface ValidatorLeaveEventInstance extends TypedEventInstance<ValidatorLeaveEvent> {
        data_decoded: ValidatorLeaveEvent;
        type_arguments: [];
    }
    interface ValidatorSet {
        total_stake: bigint;
        active_validators: validator.Validator[];
        pending_active_validators: _0x2.table_vec.TableVec<validator.Validator>;
        pending_removals: bigint[];
        staking_pool_mappings: _0x2.table.Table<_0x2.object_.ID, string>;
        inactive_validators: _0x2.table.Table<_0x2.object_.ID, validator_wrapper.ValidatorWrapper>;
        validator_candidates: _0x2.table.Table<string, validator_wrapper.ValidatorWrapper>;
        at_risk_validators: _0x2.vec_map.VecMap<string, bigint>;
        extra_fields: _0x2.bag.Bag;
    }
    namespace ValidatorSet {
        const TYPE_QNAME = "0x3::validator_set::ValidatorSet";
        function type(): TypeDescriptor<ValidatorSet>;
    }
}
export declare namespace validator_wrapper {
    interface ValidatorWrapper {
        inner: _0x2.versioned.Versioned;
    }
    namespace ValidatorWrapper {
        const TYPE_QNAME = "0x3::validator_wrapper::ValidatorWrapper";
        function type(): TypeDescriptor<ValidatorWrapper>;
    }
}
export declare namespace voting_power {
    interface VotingPowerInfo {
        validator_index: bigint;
        voting_power: bigint;
    }
    namespace VotingPowerInfo {
        const TYPE_QNAME = "0x3::voting_power::VotingPowerInfo";
        function type(): TypeDescriptor<VotingPowerInfo>;
    }
    interface VotingPowerInfoV2 {
        validator_index: bigint;
        voting_power: bigint;
        stake: bigint;
    }
    namespace VotingPowerInfoV2 {
        const TYPE_QNAME = "0x3::voting_power::VotingPowerInfoV2";
        function type(): TypeDescriptor<VotingPowerInfoV2>;
    }
}
export declare function loadAllTypes(coder: MoveCoder): void;
//# sourceMappingURL=0x3.d.ts.map