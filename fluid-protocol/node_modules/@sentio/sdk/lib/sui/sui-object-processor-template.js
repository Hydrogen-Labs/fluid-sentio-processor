import { ListStateStorage } from '@sentio/runtime';
import { DEFAULT_ACCOUNT_FETCH_CONFIG, SuiAccountProcessorState, SuiAddressProcessor, SuiObjectProcessor, SuiWrappedObjectProcessor } from './sui-object-processor.js';
import { TemplateInstanceState } from '../core/template.js';
import { accountAddressString } from '../move/index.js';
import { ServerError, Status } from 'nice-grpc';
class ObjectHandler {
    type;
    checkpointInterval;
    timeIntervalInMinutes;
    handler;
    fetchConfig;
}
export class SuiAccountProcessorTemplateState extends ListStateStorage {
    static INSTANCE = new SuiAccountProcessorTemplateState();
}
export class SuiObjectOrAddressProcessorTemplate {
    id;
    objectHandlers = [];
    binds = new Set();
    constructor() {
        this.id = SuiAccountProcessorTemplateState.INSTANCE.getValues().length;
        SuiAccountProcessorTemplateState.INSTANCE.addValue(this);
    }
    bind(options, ctx) {
        options.network = options.network || ctx.network;
        options.startCheckpoint = options.startCheckpoint || ctx.checkpoint;
        let id = options.objectId || options.address;
        if (id === '*') {
            throw new ServerError(Status.INVALID_ARGUMENT, "can't bind template instance with *");
        }
        id = accountAddressString(id);
        const sig = [options.network, id].join('_');
        if (this.binds.has(sig)) {
            console.log(`Same object id can be bind to one template only once, ignore duplicate bind: ${sig}`);
            return;
        }
        this.binds.add(sig);
        const processor = this.createProcessor(options);
        for (const h of this.objectHandlers) {
            processor.onInterval(h.handler, h.timeIntervalInMinutes, h.checkpointInterval, h.type, h.fetchConfig);
        }
        const config = processor.config;
        ctx.update({
            states: {
                configUpdated: true
            }
        });
        TemplateInstanceState.INSTANCE.addValue({
            templateId: this.id,
            contract: {
                name: '',
                chainId: config.network,
                address: config.address,
                abi: ''
            },
            startBlock: config.startCheckpoint,
            endBlock: 0n,
            baseLabels: config.baseLabels
        });
        console.log(`successfully bind template ${sig}`);
    }
    unbind(options, ctx) {
        options.network = options.network || ctx.network;
        options.startCheckpoint = options.startCheckpoint || ctx.checkpoint;
        let id = options.objectId || options.address;
        if (id === '*') {
            throw new ServerError(Status.INVALID_ARGUMENT, "can't delete template instance bind with *");
        }
        id = accountAddressString(id);
        const sig = [options.network, id].join('_');
        if (!this.binds.has(sig)) {
            console.log(`the template instance ${sig} not existed or already unbind`);
            return;
        }
        this.binds.delete(sig);
        let deleted = 0;
        const oldTemplateInstances = TemplateInstanceState.INSTANCE.unregister();
        for (const templateInstance of oldTemplateInstances) {
            if (templateInstance.contract?.chainId === options.network && templateInstance.contract.address == id) {
                deleted++;
                continue;
            }
            TemplateInstanceState.INSTANCE.addValue(templateInstance);
        }
        if (deleted !== 1) {
            throw new ServerError(Status.INVALID_ARGUMENT, `Failed to delete template instance ${sig}, deleted ${deleted} times`);
        }
        const oldProcessors = SuiAccountProcessorState.INSTANCE.unregister();
        deleted = 0;
        for (const processor of oldProcessors) {
            if (processor.templateId === this.id) {
                if (processor.config.network == options.network && processor.config.address === id) {
                    deleted++;
                    continue;
                }
            }
            SuiAccountProcessorState.INSTANCE.addValue(processor);
        }
        if (deleted !== 1) {
            throw new ServerError(Status.INVALID_ARGUMENT, `Failed to delete processor for template ${this.id}, ${sig}. deleted ${deleted} times`);
        }
        console.log(`successfully unbind template ${sig}`);
        ctx.update({
            states: {
                configUpdated: true
            }
        });
    }
    onInterval(handler, timeInterval, checkpointInterval, type, fetchConfig) {
        this.objectHandlers.push({
            handler: handler,
            timeIntervalInMinutes: timeInterval,
            checkpointInterval: checkpointInterval,
            type,
            fetchConfig: { ...DEFAULT_ACCOUNT_FETCH_CONFIG, ...fetchConfig }
        });
        return this;
    }
    onTimeInterval(handler, timeIntervalInMinutes = 60, backfillTimeIntervalInMinutes = 240, type, fetchConfig) {
        return this.onInterval(handler, {
            recentInterval: timeIntervalInMinutes,
            backfillInterval: backfillTimeIntervalInMinutes
        }, undefined, type, fetchConfig);
    }
    onCheckpointInterval(handler, checkpointInterval = 100000, backfillCheckpointInterval = 400000, type, fetchConfig) {
        return this.onInterval(handler, undefined, { recentInterval: checkpointInterval, backfillInterval: backfillCheckpointInterval }, type, fetchConfig);
    }
}
class AddressTransactionHandler {
    handler;
    filter;
    fetchConfig;
}
export class SuiAddressProcessorTemplate extends SuiObjectOrAddressProcessorTemplate {
    handlers = [];
    createProcessor(options) {
        const p = SuiAddressProcessor.bind(options);
        for (const handler of this.handlers) {
            p.onTransactionBlock(handler.handler, handler.filter, handler.fetchConfig);
        }
        p.templateId = this.id;
        return p;
    }
    onTransactionBlock(handler, filter, fetchConfig) {
        this.handlers.push({
            handler,
            filter,
            fetchConfig
        });
        return this;
    }
}
export class SuiObjectProcessorTemplate extends SuiObjectOrAddressProcessorTemplate {
    createProcessor(options) {
        const p = SuiObjectProcessor.bind(options);
        p.templateId = this.id;
        return p;
    }
}
export class SuiWrappedObjectProcessorTemplate extends SuiObjectOrAddressProcessorTemplate {
    createProcessor(options) {
        const p = SuiWrappedObjectProcessor.bind(options);
        p.templateId = this.id;
        return p;
    }
}
//# sourceMappingURL=sui-object-processor-template.js.map