import { Plugin } from '@sentio/runtime';
import { Data_SuiCall, Data_SuiEvent, Data_SuiObject, Data_SuiObjectChange, DataBinding, HandlerType, ProcessConfigResponse, ProcessResult, StartRequest } from '@sentio/protos';
interface Handlers {
    suiEventHandlers: ((event: Data_SuiEvent) => Promise<ProcessResult>)[];
    suiCallHandlers: ((func: Data_SuiCall) => Promise<ProcessResult>)[];
    suiObjectHandlers: ((object: Data_SuiObject) => Promise<ProcessResult>)[];
    suiObjectChangeHandlers: ((object: Data_SuiObjectChange) => Promise<ProcessResult>)[];
}
export declare class SuiPlugin extends Plugin {
    name: string;
    handlers: Handlers;
    start(request: StartRequest): Promise<void>;
    configure(config: ProcessConfigResponse): Promise<void>;
    processSuiEvent(binding: DataBinding): Promise<ProcessResult>;
    processSuiFunctionCall(binding: DataBinding): Promise<ProcessResult>;
    processSuiObject(binding: DataBinding): Promise<ProcessResult>;
    processSuiObjectChange(binding: DataBinding): Promise<ProcessResult>;
    supportedHandlers: HandlerType[];
    processBinding(request: DataBinding): Promise<ProcessResult>;
}
export {};
//# sourceMappingURL=sui-plugin.d.ts.map