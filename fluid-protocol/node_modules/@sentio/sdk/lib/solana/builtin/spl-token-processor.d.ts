import { SolanaBaseProcessor, SolanaContext, SolanaBindOptions } from "../index.js";
import { Instruction } from '@project-serum/anchor';
import { AmountToUiAmount, Approve, ApproveChecked, Burn, BurnChecked, CloseAccount, CreateNativeMint, DefaultAccountStateExtension, FreezeAccount, GetAccountDataSize, InitializeAccount, InitializeAccount2, InitializeAccount3, InitializeImmutableOwner, InitializeMint, InitializeMintCloseAuthority, InitializeMultisig, MemoTransferExtension, MintTo, MintToChecked, Reallocate, Revoke, SyncNative, ThawAccount, Transfer, TransferChecked, TransferFeeExtension, UiAmountToAmount } from './types.js';
export declare class SPLTokenProcessor extends SolanaBaseProcessor {
    static bind(options: SolanaBindOptions): SPLTokenProcessor;
    fromParsedInstruction: (instruction: {
        type: string;
        info: any;
    }) => Instruction | null;
    onInitializeMint(handler: (data: InitializeMint, ctx: SolanaContext) => void): SPLTokenProcessor;
    onInitializeAccount(hanlder: (data: InitializeAccount, ctx: SolanaContext) => void): SPLTokenProcessor;
    onInitializeAccount2(hanlder: (data: InitializeAccount2, ctx: SolanaContext) => void): SPLTokenProcessor;
    onInitializeAccount3(hanlder: (data: InitializeAccount3, ctx: SolanaContext) => void): SPLTokenProcessor;
    onInitializeMultisig(handler: (data: InitializeMultisig, ctx: SolanaContext) => void): SPLTokenProcessor;
    onTransfer(handler: (data: Transfer, ctx: SolanaContext) => void): SPLTokenProcessor;
    onApprovend(handler: (data: Approve, ctx: SolanaContext) => void): SPLTokenProcessor;
    onRevoke(handler: (data: Revoke, ctx: SolanaContext) => void): SPLTokenProcessor;
    onSetAuthority(handler: (data: any, ctx: SolanaContext) => void): SPLTokenProcessor;
    onMintTo(handler: (data: MintTo, ctx: SolanaContext) => void): SPLTokenProcessor;
    onBurn(handler: (data: Burn, ctx: SolanaContext) => void): SPLTokenProcessor;
    onCloseAccount(handler: (data: CloseAccount, ctx: SolanaContext) => void): SPLTokenProcessor;
    onFreezeAccount(handler: (data: FreezeAccount, ctx: SolanaContext) => void): SPLTokenProcessor;
    onThawAccount(handler: (data: ThawAccount, ctx: SolanaContext) => void): SPLTokenProcessor;
    onTransferChecked(handler: (data: TransferChecked, ctx: SolanaContext) => void): SPLTokenProcessor;
    onApproveChecked(handler: (data: ApproveChecked, ctx: SolanaContext) => void): SPLTokenProcessor;
    onMintToChecked(handler: (data: MintToChecked, ctx: SolanaContext) => void): SPLTokenProcessor;
    onBurnChecked(handler: (data: BurnChecked, ctx: SolanaContext) => void): SPLTokenProcessor;
    onSyncNative(handler: (data: SyncNative, ctx: SolanaContext) => void): SPLTokenProcessor;
    onGetAccountDataSize(handler: (data: GetAccountDataSize, ctx: SolanaContext) => void): SPLTokenProcessor;
    onInitializeImmutableOwner(handler: (data: InitializeImmutableOwner, ctx: SolanaContext) => void): SPLTokenProcessor;
    onAmountToUiAmount(handler: (data: AmountToUiAmount, ctx: SolanaContext) => void): SPLTokenProcessor;
    onUiAmountToAmount(handler: (data: UiAmountToAmount, ctx: SolanaContext) => void): SPLTokenProcessor;
    onInitializeMintCloseAuthority(handler: (data: InitializeMintCloseAuthority, ctx: SolanaContext) => void): SPLTokenProcessor;
    onTransferFeeExtension(handler: (data: TransferFeeExtension, ctx: SolanaContext) => void): SPLTokenProcessor;
    onDefaultAccountStateExtension(handler: (data: DefaultAccountStateExtension, ctx: SolanaContext) => void): SPLTokenProcessor;
    onReallocate(handler: (data: Reallocate, ctx: SolanaContext) => void): SPLTokenProcessor;
    onMemoTransferExtension(handler: (data: MemoTransferExtension, ctx: SolanaContext) => void): SPLTokenProcessor;
    onCreateNativeMint(handler: (data: CreateNativeMint, ctx: SolanaContext) => void): SPLTokenProcessor;
}
//# sourceMappingURL=spl-token-processor.d.ts.map