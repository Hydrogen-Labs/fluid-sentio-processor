/* eslint-disable @typescript-eslint/no-redeclare */
// copy from https://github.com/solana-labs/solana/blob/master/explorer/src/components/instruction/token/types.ts
// https://github.com/solana-labs/explorer/blob/411b42439553262ef9036985d287a7249acaad77/src/components/instruction/token/types.ts
import { enums, type, number, string, optional, array, nullable, union, coerce, instance, } from "superstruct_solana";
// Replace with string
export const PublicKeyFromString = coerce(instance(String), string(), (value) => (value));
export const TokenAmountUi = type({
    amount: string(),
    decimals: number(),
    uiAmountString: string(),
});
const InitializeMint = type({
    mint: PublicKeyFromString,
    decimals: number(),
    mintAuthority: PublicKeyFromString,
    rentSysvar: PublicKeyFromString,
    freezeAuthority: optional(PublicKeyFromString),
});
const InitializeAccount = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    owner: PublicKeyFromString,
    rentSysvar: PublicKeyFromString,
});
const InitializeAccount2 = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    rentSysvar: PublicKeyFromString,
    owner: PublicKeyFromString,
});
const InitializeAccount3 = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    owner: PublicKeyFromString,
});
const InitializeMultisig = type({
    multisig: PublicKeyFromString,
    rentSysvar: PublicKeyFromString,
    signers: array(PublicKeyFromString),
    m: number(),
});
export const Transfer = type({
    source: PublicKeyFromString,
    destination: PublicKeyFromString,
    amount: union([string(), number()]),
    authority: optional(PublicKeyFromString),
    multisigAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const Approve = type({
    source: PublicKeyFromString,
    delegate: PublicKeyFromString,
    amount: union([string(), number()]),
    owner: optional(PublicKeyFromString),
    multisigOwner: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const Revoke = type({
    source: PublicKeyFromString,
    owner: optional(PublicKeyFromString),
    multisigOwner: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const AuthorityType = enums([
    "mintTokens",
    "freezeAccount",
    "accountOwner",
    "closeAccount",
]);
const SetAuthority = type({
    mint: optional(PublicKeyFromString),
    account: optional(PublicKeyFromString),
    authorityType: AuthorityType,
    newAuthority: nullable(PublicKeyFromString),
    authority: optional(PublicKeyFromString),
    multisigAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const MintTo = type({
    mint: PublicKeyFromString,
    account: PublicKeyFromString,
    amount: union([string(), number()]),
    mintAuthority: optional(PublicKeyFromString),
    multisigMintAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const Burn = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    amount: union([string(), number()]),
    authority: optional(PublicKeyFromString),
    multisigAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const CloseAccount = type({
    account: PublicKeyFromString,
    destination: PublicKeyFromString,
    owner: optional(PublicKeyFromString),
    multisigOwner: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const FreezeAccount = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    freezeAuthority: optional(PublicKeyFromString),
    multisigFreezeAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const ThawAccount = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    freezeAuthority: optional(PublicKeyFromString),
    multisigFreezeAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
export const TransferChecked = type({
    source: PublicKeyFromString,
    mint: PublicKeyFromString,
    destination: PublicKeyFromString,
    authority: optional(PublicKeyFromString),
    multisigAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
    tokenAmount: TokenAmountUi,
});
const ApproveChecked = type({
    source: PublicKeyFromString,
    mint: PublicKeyFromString,
    delegate: PublicKeyFromString,
    owner: optional(PublicKeyFromString),
    multisigOwner: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
    tokenAmount: TokenAmountUi,
});
const MintToChecked = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    mintAuthority: optional(PublicKeyFromString),
    multisigMintAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
    tokenAmount: TokenAmountUi,
});
const BurnChecked = type({
    account: PublicKeyFromString,
    mint: PublicKeyFromString,
    authority: optional(PublicKeyFromString),
    multisigAuthority: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
    tokenAmount: TokenAmountUi,
});
const SyncNative = type({
    account: PublicKeyFromString,
});
const GetAccountDataSize = type({
    mint: PublicKeyFromString,
    extensionTypes: optional(array(string())),
});
const InitializeImmutableOwner = type({
    account: PublicKeyFromString,
});
const AmountToUiAmount = type({
    mint: PublicKeyFromString,
    amount: union([string(), number()]),
});
const UiAmountToAmount = type({
    mint: PublicKeyFromString,
    uiAmount: string(),
});
const InitializeMintCloseAuthority = type({
    mint: PublicKeyFromString,
    newAuthority: PublicKeyFromString,
});
const TransferFeeExtension = type({
    mint: PublicKeyFromString,
    transferFeeConfigAuthority: PublicKeyFromString,
    withdrawWitheldAuthority: PublicKeyFromString,
    transferFeeBasisPoints: number(),
    maximumFee: number(),
});
const DefaultAccountStateExtension = type({
    mint: PublicKeyFromString,
    accountState: string(),
    freezeAuthority: optional(PublicKeyFromString),
});
const Reallocate = type({
    account: PublicKeyFromString,
    payer: PublicKeyFromString,
    systemProgram: PublicKeyFromString,
    extensionTypes: array(string()),
});
const MemoTransferExtension = type({
    account: PublicKeyFromString,
    owner: optional(PublicKeyFromString),
    multisigOwner: optional(PublicKeyFromString),
    signers: optional(array(PublicKeyFromString)),
});
const CreateNativeMint = type({
    payer: PublicKeyFromString,
    nativeMint: PublicKeyFromString,
    systemProgram: PublicKeyFromString,
});
//# sourceMappingURL=types.js.map