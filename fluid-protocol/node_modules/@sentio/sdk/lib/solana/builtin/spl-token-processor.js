import { SolanaBaseProcessor } from "../index.js";
export class SPLTokenProcessor extends SolanaBaseProcessor {
    static bind(options) {
        if (options && !options.name) {
            options.name = 'SPL Token Program';
        }
        return new SPLTokenProcessor(options);
    }
    fromParsedInstruction = (instruction) => {
        const instructionType = instruction.type;
        if (!instructionType) {
            return null;
        }
        return {
            name: instruction.type,
            data: {
                ...instruction.info,
            },
        };
    };
    onInitializeMint(handler) {
        this.onInstruction('initializeMint', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onInitializeAccount(hanlder) {
        this.onInstruction('initializeAccount', (ins, ctx) => {
            if (ins) {
                hanlder(ins.data, ctx);
            }
        });
        return this;
    }
    onInitializeAccount2(hanlder) {
        this.onInstruction('initializeAccount2', (ins, ctx) => {
            if (ins) {
                hanlder(ins.data, ctx);
            }
        });
        return this;
    }
    onInitializeAccount3(hanlder) {
        this.onInstruction('initializeAccount3', (ins, ctx) => {
            if (ins) {
                hanlder(ins.data, ctx);
            }
        });
        return this;
    }
    onInitializeMultisig(handler) {
        this.onInstruction('initializeMultisig', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onTransfer(handler) {
        this.onInstruction('transfer', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onApprovend(handler) {
        this.onInstruction('approve', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onRevoke(handler) {
        this.onInstruction('revoke', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onSetAuthority(handler) {
        this.onInstruction('setAuthority', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onMintTo(handler) {
        this.onInstruction('mintTo', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onBurn(handler) {
        this.onInstruction('burn', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onCloseAccount(handler) {
        this.onInstruction('closeAccount', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onFreezeAccount(handler) {
        this.onInstruction('freezeAccount', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onThawAccount(handler) {
        this.onInstruction('thawAccount', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onTransferChecked(handler) {
        this.onInstruction('transferChecked', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onApproveChecked(handler) {
        this.onInstruction('approveChecked', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onMintToChecked(handler) {
        this.onInstruction('mintToChecked', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onBurnChecked(handler) {
        this.onInstruction('burnChecked', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onSyncNative(handler) {
        this.onInstruction('syncNative', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onGetAccountDataSize(handler) {
        this.onInstruction('getAccountDataSize', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onInitializeImmutableOwner(handler) {
        this.onInstruction('initializeImmutableOwner', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onAmountToUiAmount(handler) {
        this.onInstruction('amountToUiAmount', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onUiAmountToAmount(handler) {
        this.onInstruction('uiAmountToAmount', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onInitializeMintCloseAuthority(handler) {
        this.onInstruction('initializeMintCloseAuthority', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onTransferFeeExtension(handler) {
        this.onInstruction('transferFeeExtension', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onDefaultAccountStateExtension(handler) {
        this.onInstruction('defaultAccountStateExtension', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onReallocate(handler) {
        this.onInstruction('reallocate', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onMemoTransferExtension(handler) {
        this.onInstruction('memoTransferExtension', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
    onCreateNativeMint(handler) {
        this.onInstruction('createNativeMint', (ins, ctx) => {
            if (ins) {
                handler(ins.data, ctx);
            }
        });
        return this;
    }
}
//# sourceMappingURL=spl-token-processor.js.map