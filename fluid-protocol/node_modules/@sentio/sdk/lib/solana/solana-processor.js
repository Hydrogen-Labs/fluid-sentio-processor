import { SolanaContext } from './solana-context.js';
import { ListStateStorage } from '@sentio/runtime';
import { SolanaChainId } from '@sentio/chain';
export class SolanaProcessorState extends ListStateStorage {
    static INSTANCE = new SolanaProcessorState();
}
export class SolanaBaseProcessor {
    instructionHandlerMap = new Map();
    address;
    endpoint;
    contractName;
    baseLabels;
    network;
    processInnerInstruction;
    config = { startSlot: 0n };
    instructionCoder;
    decodeInstruction(rawInstruction) {
        if (this.instructionCoder) {
            return this.instructionCoder.decode(rawInstruction, 'base58');
        }
        return null;
    }
    fromParsedInstruction;
    constructor(options) {
        this.address = options.address;
        this.contractName = options.name || '';
        this.processInnerInstruction = options.processInnerInstruction || false;
        this.network = options.network || SolanaChainId.SOLANA_MAINNET;
        if (options.instructionCoder) {
            this.instructionCoder = options.instructionCoder;
        }
        if (options.startBlock) {
            this.startSlot(options.startBlock);
        }
        if (options.endBlock) {
            this.endBlock(options.endBlock);
        }
        this.endpoint = options.network || 'https://api.mainnet-beta.solana.com';
        this.baseLabels = options.baseLabels;
        SolanaProcessorState.INSTANCE.addValue(this);
    }
    onInstruction(instructionName, handler) {
        this.instructionHandlerMap.set(instructionName, handler);
        return this;
    }
    getParsedInstruction(ins) {
        if (ins) {
            if (ins.info) {
                return this.fromParsedInstruction ? this.fromParsedInstruction(ins) : null;
            }
            if (this.decodeInstruction != null) {
                return this.decodeInstruction(ins);
            }
        }
        return null;
    }
    getInstructionHandler(parsedInstruction) {
        return this.instructionHandlerMap.get(parsedInstruction.name);
    }
    async handleInstruction(parsedInstruction, accounts, handler, slot) {
        const ctx = new SolanaContext(this.contractName, this.network, this.address, slot, this.baseLabels);
        await handler(parsedInstruction, ctx, accounts);
        return ctx.stopAndGetResult();
    }
    startSlot(startSlot) {
        this.config.startSlot = BigInt(startSlot);
        return this;
    }
    endBlock(endBlock) {
        this.config.endSlot = BigInt(endBlock);
        return this;
    }
}
//# sourceMappingURL=solana-processor.js.map