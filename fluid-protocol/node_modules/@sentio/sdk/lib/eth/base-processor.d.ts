import { BaseContract, DeferredTopicFilter, TransactionResponseParams } from 'ethers';
import { BoundContractView, ContractContext, ContractView, GlobalContext } from './context.js';
import { AddressType, Data_EthBlock, Data_EthLog, Data_EthTrace, Data_EthTransaction, EthFetchConfig, HandleInterval, PreprocessResult, ProcessResult } from '@sentio/protos';
import { BindOptions } from './bind-options.js';
import { PromiseOrVoid } from '../core/promises.js';
import { RichBlock, Trace, TypedCallTrace, TypedEvent } from './eth.js';
import { ListStateStorage } from '@sentio/runtime';
import { EthChainId } from '@sentio/chain';
export interface AddressOrTypeEventFilter extends DeferredTopicFilter {
    addressType?: AddressType;
    address?: string;
}
export declare const defaultPreprocessHandler: () => any;
export declare class EventsHandler {
    filters: AddressOrTypeEventFilter[];
    handler: (event: Data_EthLog) => Promise<ProcessResult>;
    preprocessHandler?: (event: Data_EthLog, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>;
    fetchConfig: EthFetchConfig;
}
export declare class TraceHandler {
    signatures: string[];
    handler: (trace: Data_EthTrace) => Promise<ProcessResult>;
    preprocessHandler?: (event: Data_EthTrace, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>;
    fetchConfig: EthFetchConfig;
}
export declare class BlockHandler {
    blockInterval?: HandleInterval;
    timeIntervalInMinutes?: HandleInterval;
    handler: (block: Data_EthBlock) => Promise<ProcessResult>;
    preprocessHandler?: (event: Data_EthBlock, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>;
    fetchConfig: EthFetchConfig;
}
export declare class TransactionHandler {
    handler: (block: Data_EthTransaction) => Promise<ProcessResult>;
    preprocessHandler?: (event: Data_EthTransaction, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>;
    fetchConfig: EthFetchConfig;
}
declare class BindInternalOptions {
    address: string;
    network: EthChainId;
    name: string;
    startBlock: bigint;
    endBlock?: bigint;
    baseLabels?: {
        [key: string]: string;
    };
}
export declare class GlobalProcessorState extends ListStateStorage<GlobalProcessor> {
    static INSTANCE: GlobalProcessorState;
}
export declare class GlobalProcessor {
    config: BindInternalOptions;
    blockHandlers: BlockHandler[];
    transactionHandler: TransactionHandler[];
    traceHandlers: TraceHandler[];
    static bind(config: Omit<BindOptions, 'address'>): GlobalProcessor;
    constructor(config: Omit<BindOptions, 'address'>);
    onBlockInterval(handler: (block: RichBlock, ctx: GlobalContext) => PromiseOrVoid, blockInterval?: number, backfillBlockInterval?: number, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (block: RichBlock, ctx: GlobalContext, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onTimeInterval(handler: (block: RichBlock, ctx: GlobalContext) => PromiseOrVoid, timeIntervalInMinutes?: number, backfillTimeIntervalInMinutes?: number, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (block: RichBlock, ctx: GlobalContext, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    getChainId(): EthChainId;
    onInterval(handler: (block: RichBlock, ctx: GlobalContext) => PromiseOrVoid, timeInterval: HandleInterval | undefined, blockInterval: HandleInterval | undefined, fetchConfig: Partial<EthFetchConfig> | undefined, preprocessHandler?: (block: RichBlock, ctx: GlobalContext, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onTransaction(handler: (transaction: TransactionResponseParams, ctx: GlobalContext) => PromiseOrVoid, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (transaction: TransactionResponseParams, ctx: GlobalContext, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onTrace(signatures: string | string[], handler: (trace: Trace, ctx: GlobalContext) => PromiseOrVoid, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (trace: Trace, ctx: GlobalContext, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
}
export declare abstract class BaseProcessor<TContract extends BaseContract, TBoundContractView extends BoundContractView<TContract, ContractView<TContract>>> {
    blockHandlers: BlockHandler[];
    eventHandlers: EventsHandler[];
    traceHandlers: TraceHandler[];
    config: BindInternalOptions;
    constructor(config: BindOptions);
    protected abstract CreateBoundContractView(): TBoundContractView;
    getChainId(): EthChainId;
    onEvent(handler: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    protected onEthEvent(handler: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, filter: DeferredTopicFilter | DeferredTopicFilter[], fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onBlockInterval(handler: (block: RichBlock, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, blockInterval?: number, backfillBlockInterval?: number, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (block: RichBlock, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onTimeInterval(handler: (block: RichBlock, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, timeIntervalInMinutes?: number, backfillTimeIntervalInMinutes?: number, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (block: RichBlock, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onInterval(handler: (block: RichBlock, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, timeInterval: HandleInterval | undefined, blockInterval: HandleInterval | undefined, fetchConfig: Partial<EthFetchConfig> | undefined, preprocessHandler?: (block: RichBlock, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    protected onEthTrace(signatures: string | string[], handler: (trace: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (trace: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onTrace(handler: (event: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (trace: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
}
export {};
//# sourceMappingURL=base-processor.d.ts.map