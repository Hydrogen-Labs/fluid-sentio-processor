import { defaultPreprocessHandler } from './base-processor.js';
import { getOptionsSignature } from './bind-options.js';
import { EthFetchConfig } from '@sentio/protos';
import { ListStateStorage } from '@sentio/runtime';
import { TemplateInstanceState } from '../core/template.js';
export class ProcessorTemplateProcessorState extends ListStateStorage {
    static INSTANCE = new ProcessorTemplateProcessorState();
}
export class BaseProcessorTemplate {
    id;
    binds = new Set();
    blockHandlers = [];
    traceHandlers = [];
    eventHandlers = [];
    constructor() {
        this.id = ProcessorTemplateProcessorState.INSTANCE.getValues().length;
        ProcessorTemplateProcessorState.INSTANCE.addValue(this);
    }
    /**
     * Bind template using {@param options}, using {@param ctx}'s network value if not provided in the option
     * @param options
     * @param ctx
     */
    bind(options, ctx) {
        const sig = getOptionsSignature({
            address: options.address,
            network: ctx.chainId
        });
        if (this.binds.has(sig)) {
            console.log(`Same address can be bind to one template only once, ignore duplicate bind: ${sig}`);
            return;
        }
        this.binds.add(sig);
        const processor = this.bindInternal({ ...options, network: ctx.chainId });
        for (const eh of this.eventHandlers) {
            // @ts-ignore friendly
            processor.onEthEvent(eh.handler, eh.filter, eh.fetchConfig, eh.preprocessHandler);
        }
        for (const th of this.traceHandlers) {
            // @ts-ignore friendly
            processor.onEthTrace(th.signature, th.handler, th.fetchConfig, th.preprocessHandler);
        }
        for (const bh of this.blockHandlers) {
            processor.onInterval(bh.handler, bh.timeIntervalInMinutes, bh.blockInterval, bh.fetchConfig, bh.preprocessHandler);
        }
        const instance = {
            templateId: this.id,
            contract: {
                address: options.address,
                name: options.name || '',
                chainId: ctx.chainId,
                abi: ''
            },
            startBlock: BigInt(options.startBlock || 0),
            endBlock: BigInt(options.endBlock || 0),
            baseLabels: options.baseLabels
        };
        TemplateInstanceState.INSTANCE.addValue(instance);
        ctx.update({
            states: {
                configUpdated: true
            }
        });
    }
    onEthEvent(handler, filter, fetchConfig, preprocessHandler = defaultPreprocessHandler) {
        this.eventHandlers.push({
            handler: handler,
            preprocessHandler,
            filter: filter,
            fetchConfig: EthFetchConfig.fromPartial(fetchConfig || {})
        });
        return this;
    }
    onBlockInterval(handler, blockInterval = 1000, backfillBlockInterval = 4000, fetchConfig, preprocessHandler = defaultPreprocessHandler) {
        return this.onInterval(handler, undefined, {
            recentInterval: blockInterval,
            backfillInterval: backfillBlockInterval
        }, fetchConfig, preprocessHandler);
    }
    onTimeInterval(handler, timeIntervalInMinutes = 60, backfillBlockInterval = 240, fetchConfig, preprocessHandler = defaultPreprocessHandler) {
        return this.onInterval(handler, { recentInterval: timeIntervalInMinutes, backfillInterval: backfillBlockInterval }, undefined, fetchConfig, preprocessHandler);
    }
    onInterval(handler, timeInterval, blockInterval, fetchConfig, preprocessHandler = defaultPreprocessHandler) {
        this.blockHandlers.push({
            handler,
            preprocessHandler,
            timeIntervalInMinutes: timeInterval,
            blockInterval,
            fetchConfig
        });
        return this;
    }
    onTrace(signature, handler, fetchConfig, preprocessHandler = defaultPreprocessHandler) {
        this.traceHandlers.push({
            signature,
            handler,
            preprocessHandler,
            fetchConfig: EthFetchConfig.fromPartial(fetchConfig || {})
        });
        return this;
    }
}
//# sourceMappingURL=base-processor-template.js.map