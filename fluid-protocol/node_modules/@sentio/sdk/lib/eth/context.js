import { normalizeLabels } from '../core/index.js';
import { BaseContext } from '../core/base-context.js';
export class EthContext extends BaseContext {
    chainId;
    address;
    log;
    block;
    trace;
    blockNumber;
    transactionHash;
    transaction;
    transactionReceipt;
    timestamp;
    preparedData;
    constructor(chainId, address, timestamp, block, log, trace, transaction, transactionReceipt, baseLabels, preparedData) {
        super(baseLabels);
        this.chainId = chainId;
        this.log = log;
        this.block = block;
        this.trace = trace;
        this.address = address.toLowerCase();
        this.transaction = transaction;
        this.transactionReceipt = transactionReceipt;
        this.timestamp = timestamp || new Date(0);
        this.preparedData = preparedData;
        if (log) {
            this.blockNumber = log.blockNumber;
            this.transactionHash = log.transactionHash;
        }
        else if (block) {
            this.blockNumber = block.number;
        }
        else if (trace) {
            this.blockNumber = trace.blockNumber;
            this.transactionHash = trace.transactionHash;
        }
    }
    getChainId() {
        return this.chainId;
    }
    getMetaDataInternal(name, labels) {
        if (this.log) {
            return {
                address: this.address,
                contractName: this.getContractName(),
                blockNumber: BigInt(this.blockNumber),
                transactionIndex: this.log.transactionIndex,
                transactionHash: this.transactionHash || '',
                logIndex: this.log.index,
                chainId: this.chainId,
                name: name,
                labels: normalizeLabels(labels)
            };
        }
        if (this.trace) {
            return {
                address: this.address,
                contractName: this.getContractName(),
                blockNumber: BigInt(this.blockNumber),
                transactionIndex: this.trace.transactionPosition,
                transactionHash: this.transactionHash || '',
                logIndex: -1,
                chainId: this.chainId.toString(),
                name: name,
                labels: normalizeLabels(labels)
            };
        }
        if (this.transaction) {
            return {
                address: this.address,
                contractName: this.getContractName(),
                blockNumber: BigInt(this.blockNumber),
                transactionIndex: this.transaction.index || 0,
                transactionHash: this.transaction.hash || '',
                logIndex: -1,
                chainId: this.chainId.toString(),
                name: name,
                labels: normalizeLabels(labels)
            };
        }
        if (this.block) {
            return {
                address: this.address,
                contractName: this.getContractName(),
                blockNumber: BigInt(this.blockNumber),
                transactionIndex: -1,
                transactionHash: '',
                logIndex: -1,
                chainId: this.chainId.toString(),
                name: name,
                labels: normalizeLabels(labels)
            };
        }
        throw new Error("Invaid ctx argument can't happen");
    }
}
export class AccountContext extends EthContext {
    // constructor(chainId: number, address: string, block?: Block, log?: Log, trace?: Trace) {
    //   super(chainId, address, new Date(0), block, log, trace)
    // }
    getContractName() {
        return 'account';
    }
}
export class GlobalContext extends EthContext {
    constructor(chainId, address, timestamp, block, log, trace, transaction, transactionReceipt, baseLabels, preparedData) {
        super(chainId, address, timestamp, block, log, trace, transaction, transactionReceipt, baseLabels, preparedData);
    }
    getContractName() {
        return '*';
    }
    getMetaDataInternal(name, labels) {
        const address = this.address;
        this.address = '*';
        const res = super.getMetaDataInternal(name, labels);
        this.address = address;
        return res;
    }
}
export class ContractContext extends EthContext {
    contract;
    contractName;
    constructor(contractName, view, chainId, timestamp, block, log, trace, transaction, transactionReceipt, baseLabels, preparedData) {
        super(chainId, view.address, timestamp, block, log, trace, transaction, transactionReceipt, baseLabels, preparedData);
        view.context = this;
        if (view.callStatic) {
            view.callStatic.context = this;
        }
        if (view.encodeCall) {
            view.encodeCall.context = this;
        }
        this.contractName = contractName;
        this.contract = view;
    }
    getContractName() {
        return this.contractName;
    }
}
export class ContractView {
    contract;
    constructor(contract) {
        this.contract = contract;
    }
    get rawContract() {
        return this.contract;
    }
    get provider() {
        if (this.contract.runner?.provider) {
            return this.contract.runner.provider;
        }
        throw Error("Can't find provider for contract" + this.contract.toString());
    }
}
export class BoundContractView {
    view;
    address;
    // context will be set right after context creation (in context's constructor)
    // context: ContractContext<TContract, BoundContractView<TContract, TContractView>>
    context;
    callStatic;
    encodeCall;
    constructor(address, view) {
        this.address = address;
        this.view = view;
    }
    get rawContract() {
        return this.view.rawContract;
    }
    get provider() {
        return this.view.provider;
    }
    get filters() {
        return this.view.rawContract.filters;
    }
}
//# sourceMappingURL=context.js.map