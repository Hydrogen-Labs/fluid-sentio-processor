import { Plugin } from '@sentio/runtime';
import { Data_EthBlock, Data_EthLog, Data_EthTrace, Data_EthTransaction, DataBinding, HandlerType, PreparedData, PreprocessResult, ProcessConfigResponse, ProcessResult, StartRequest } from '@sentio/protos';
interface Handlers {
    eventHandlers: ((event: Data_EthLog, preparedData?: PreparedData) => Promise<ProcessResult>)[];
    traceHandlers: ((trace: Data_EthTrace, preparedData?: PreparedData) => Promise<ProcessResult>)[];
    blockHandlers: ((block: Data_EthBlock, preparedData?: PreparedData) => Promise<ProcessResult>)[];
    transactionHandlers: ((trace: Data_EthTransaction, preparedData?: PreparedData) => Promise<ProcessResult>)[];
}
interface PreprocessHandlers {
    eventHandlers: ((event: Data_EthLog, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>)[];
    traceHandlers: ((trace: Data_EthTrace, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>)[];
    blockHandlers: ((block: Data_EthBlock, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>)[];
    transactionHandlers: ((txn: Data_EthTransaction, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>)[];
}
export declare class EthPlugin extends Plugin {
    name: string;
    handlers: Handlers;
    preprocessHandlers: PreprocessHandlers;
    configure(config: ProcessConfigResponse): Promise<void>;
    supportedHandlers: HandlerType[];
    processBinding(request: DataBinding, preparedData: PreparedData | undefined): Promise<ProcessResult>;
    preprocessBinding(request: DataBinding, preprocessStore: {
        [k: string]: any;
    }): Promise<PreprocessResult>;
    start(request: StartRequest): Promise<void>;
    stateDiff(config: ProcessConfigResponse): boolean;
    preprocessLog(request: DataBinding, preprocessStore: {
        [k: string]: any;
    }): Promise<PreprocessResult>;
    preprocessTrace(binding: DataBinding, preprocessStore: {
        [k: string]: any;
    }): Promise<PreprocessResult>;
    preprocessBlock(binding: DataBinding, preprocessStore: {
        [k: string]: any;
    }): Promise<PreprocessResult>;
    preprocessTransaction(binding: DataBinding, preprocessStore: {
        [k: string]: any;
    }): Promise<PreprocessResult>;
    processLog(request: DataBinding, preparedData: PreparedData | undefined): Promise<ProcessResult>;
    processTrace(binding: DataBinding, preparedData: PreparedData | undefined): Promise<ProcessResult>;
    processBlock(binding: DataBinding, preparedData: PreparedData | undefined): Promise<ProcessResult>;
    processTransaction(binding: DataBinding, preparedData: PreparedData | undefined): Promise<ProcessResult>;
}
export {};
//# sourceMappingURL=eth-plugin.d.ts.map