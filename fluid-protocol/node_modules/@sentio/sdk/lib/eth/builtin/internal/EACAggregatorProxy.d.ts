import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent } from "./common.js";
export interface EACAggregatorProxyInterface extends Interface {
}
export interface AnswerUpdatedEventObject {
    current: bigint;
    roundId: bigint;
    updatedAt: bigint;
}
export type AnswerUpdatedEvent = TypedEvent<[
    bigint,
    bigint,
    bigint
], AnswerUpdatedEventObject>;
export type AnswerUpdatedEventFilter = TypedEventFilter<AnswerUpdatedEvent>;
export interface NewRoundEventObject {
    roundId: bigint;
    startedBy: string;
    startedAt: bigint;
}
export type NewRoundEvent = TypedEvent<[
    bigint,
    string,
    bigint
], NewRoundEventObject>;
export type NewRoundEventFilter = TypedEventFilter<NewRoundEvent>;
export interface OwnershipTransferRequestedEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferRequestedEvent = TypedEvent<[
    string,
    string
], OwnershipTransferRequestedEventObject>;
export type OwnershipTransferRequestedEventFilter = TypedEventFilter<OwnershipTransferRequestedEvent>;
export interface OwnershipTransferredEventObject {
    from: string;
    to: string;
}
export type OwnershipTransferredEvent = TypedEvent<[
    string,
    string
], OwnershipTransferredEventObject>;
export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;
export interface EACAggregatorProxy extends BaseContract {
    connect(runner: null | ContractRunner): this;
    interface: EACAggregatorProxyInterface;
}
//# sourceMappingURL=EACAggregatorProxy.d.ts.map