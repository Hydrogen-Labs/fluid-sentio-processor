import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent } from "./common.js";
export interface ERC1155Interface extends Interface {
}
export interface ApprovalForAllEventObject {
    account: string;
    operator: string;
    approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject>;
export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
export interface TransferBatchEventObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
}
export type TransferBatchEvent = TypedEvent<[
    string,
    string,
    string,
    bigint[],
    bigint[]
], TransferBatchEventObject>;
export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;
export interface TransferSingleEventObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
}
export type TransferSingleEvent = TypedEvent<[
    string,
    string,
    string,
    bigint,
    bigint
], TransferSingleEventObject>;
export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;
export interface URIEventObject {
    value: string;
    id: bigint;
}
export type URIEvent = TypedEvent<[string, bigint], URIEventObject>;
export type URIEventFilter = TypedEventFilter<URIEvent>;
export interface ERC1155 extends BaseContract {
    connect(runner: null | ContractRunner): this;
    interface: ERC1155Interface;
}
//# sourceMappingURL=ERC1155.d.ts.map