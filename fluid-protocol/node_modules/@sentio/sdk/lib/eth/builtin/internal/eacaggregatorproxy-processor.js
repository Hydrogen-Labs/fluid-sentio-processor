/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Interface } from "ethers";
import { addContractByABI, getContractByABI, addProcessor, getProcessor, getProvider, transformEtherError, BaseProcessor, BaseProcessorTemplate, BoundContractView, ContractView, DummyProvider, } from "@sentio/sdk/eth";
import { EACAggregatorProxy__factory } from "./index.js";
const templateContract = EACAggregatorProxy__factory.connect("0x0", DummyProvider);
const iface = new Interface([
    "function acceptOwnership() returns ()",
    "function accessController() view returns (address)",
    "function aggregator() view returns (address)",
    "function confirmAggregator(address _aggregator) returns ()",
    "function decimals() view returns (uint8)",
    "function description() view returns (string)",
    "function getAnswer(uint256 _roundId) view returns (int256)",
    "function getRoundData(uint80 _roundId) view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)",
    "function getTimestamp(uint256 _roundId) view returns (uint256)",
    "function latestAnswer() view returns (int256)",
    "function latestRound() view returns (uint256)",
    "function latestRoundData() view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)",
    "function latestTimestamp() view returns (uint256)",
    "function owner() view returns (address)",
    "function phaseAggregators(uint16) view returns (address)",
    "function phaseId() view returns (uint16)",
    "function proposeAggregator(address _aggregator) returns ()",
    "function proposedAggregator() view returns (address)",
    "function proposedGetRoundData(uint80 _roundId) view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)",
    "function proposedLatestRoundData() view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)",
    "function setController(address _accessController) returns ()",
    "function transferOwnership(address _to) returns ()",
    "function version() view returns (uint256)",
]);
export class EACAggregatorProxyContractView extends ContractView {
    constructor(contract) {
        super(contract);
        this.callStatic.contract = contract;
    }
    async accessController(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("accessController()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async aggregator(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("aggregator()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async decimals(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("decimals()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async description(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("description()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async getAnswer(_roundId, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("getAnswer(uint256)")(_roundId, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async getRoundData(_roundId, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("getRoundData(uint80)")(_roundId, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async getTimestamp(_roundId, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("getTimestamp(uint256)")(_roundId, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async latestAnswer(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("latestAnswer()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async latestRound(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("latestRound()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async latestRoundData(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("latestRoundData()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async latestTimestamp(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("latestTimestamp()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async owner(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("owner()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async phaseAggregators(arg0, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("phaseAggregators(uint16)")(arg0, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async phaseId(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("phaseId()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async proposedAggregator(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("proposedAggregator()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async proposedGetRoundData(_roundId, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("proposedGetRoundData(uint80)")(_roundId, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async proposedLatestRoundData(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("proposedLatestRoundData()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async version(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("version()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    callStatic = {
        contract: this.contract,
        async acceptOwnership(overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("acceptOwnership()")
                    .staticCall(overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async confirmAggregator(_aggregator, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("confirmAggregator(address)")
                    .staticCall(_aggregator, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async proposeAggregator(_aggregator, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("proposeAggregator(address)")
                    .staticCall(_aggregator, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async setController(_accessController, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("setController(address)")
                    .staticCall(_accessController, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async transferOwnership(_to, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("transferOwnership(address)")
                    .staticCall(_to, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
    };
    encodeCall = {
        acceptOwnership(ethCallContext) {
            try {
                const iface = new Interface(["function acceptOwnership()"]);
                const calldata = iface.encodeFunctionData("acceptOwnership", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        accessController(ethCallContext) {
            try {
                const iface = new Interface(["function accessController()"]);
                const calldata = iface.encodeFunctionData("accessController", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        aggregator(ethCallContext) {
            try {
                const iface = new Interface(["function aggregator()"]);
                const calldata = iface.encodeFunctionData("aggregator", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        confirmAggregator(_aggregator, ethCallContext) {
            try {
                const iface = new Interface(["function confirmAggregator(address)"]);
                const calldata = iface.encodeFunctionData("confirmAggregator", [
                    _aggregator,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        decimals(ethCallContext) {
            try {
                const iface = new Interface(["function decimals()"]);
                const calldata = iface.encodeFunctionData("decimals", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        description(ethCallContext) {
            try {
                const iface = new Interface(["function description()"]);
                const calldata = iface.encodeFunctionData("description", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        getAnswer(_roundId, ethCallContext) {
            try {
                const iface = new Interface(["function getAnswer(uint256)"]);
                const calldata = iface.encodeFunctionData("getAnswer", [_roundId]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        getRoundData(_roundId, ethCallContext) {
            try {
                const iface = new Interface(["function getRoundData(uint80)"]);
                const calldata = iface.encodeFunctionData("getRoundData", [_roundId]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        getTimestamp(_roundId, ethCallContext) {
            try {
                const iface = new Interface(["function getTimestamp(uint256)"]);
                const calldata = iface.encodeFunctionData("getTimestamp", [_roundId]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        latestAnswer(ethCallContext) {
            try {
                const iface = new Interface(["function latestAnswer()"]);
                const calldata = iface.encodeFunctionData("latestAnswer", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        latestRound(ethCallContext) {
            try {
                const iface = new Interface(["function latestRound()"]);
                const calldata = iface.encodeFunctionData("latestRound", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        latestRoundData(ethCallContext) {
            try {
                const iface = new Interface(["function latestRoundData()"]);
                const calldata = iface.encodeFunctionData("latestRoundData", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        latestTimestamp(ethCallContext) {
            try {
                const iface = new Interface(["function latestTimestamp()"]);
                const calldata = iface.encodeFunctionData("latestTimestamp", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        owner(ethCallContext) {
            try {
                const iface = new Interface(["function owner()"]);
                const calldata = iface.encodeFunctionData("owner", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        phaseAggregators(arg0, ethCallContext) {
            try {
                const iface = new Interface(["function phaseAggregators(uint16)"]);
                const calldata = iface.encodeFunctionData("phaseAggregators", [arg0]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        phaseId(ethCallContext) {
            try {
                const iface = new Interface(["function phaseId()"]);
                const calldata = iface.encodeFunctionData("phaseId", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        proposeAggregator(_aggregator, ethCallContext) {
            try {
                const iface = new Interface(["function proposeAggregator(address)"]);
                const calldata = iface.encodeFunctionData("proposeAggregator", [
                    _aggregator,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        proposedAggregator(ethCallContext) {
            try {
                const iface = new Interface(["function proposedAggregator()"]);
                const calldata = iface.encodeFunctionData("proposedAggregator", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        proposedGetRoundData(_roundId, ethCallContext) {
            try {
                const iface = new Interface(["function proposedGetRoundData(uint80)"]);
                const calldata = iface.encodeFunctionData("proposedGetRoundData", [
                    _roundId,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        proposedLatestRoundData(ethCallContext) {
            try {
                const iface = new Interface(["function proposedLatestRoundData()"]);
                const calldata = iface.encodeFunctionData("proposedLatestRoundData", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        setController(_accessController, ethCallContext) {
            try {
                const iface = new Interface(["function setController(address)"]);
                const calldata = iface.encodeFunctionData("setController", [
                    _accessController,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        transferOwnership(_to, ethCallContext) {
            try {
                const iface = new Interface(["function transferOwnership(address)"]);
                const calldata = iface.encodeFunctionData("transferOwnership", [_to]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        version(ethCallContext) {
            try {
                const iface = new Interface(["function version()"]);
                const calldata = iface.encodeFunctionData("version", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
    };
}
export class EACAggregatorProxyBoundContractView extends BoundContractView {
    async accessController(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.accessController({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async aggregator(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.aggregator({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async decimals(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.decimals({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async description(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.description({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async getAnswer(_roundId, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.getAnswer(_roundId, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async getRoundData(_roundId, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.getRoundData(_roundId, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async getTimestamp(_roundId, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.getTimestamp(_roundId, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async latestAnswer(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.latestAnswer({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async latestRound(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.latestRound({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async latestRoundData(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.latestRoundData({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async latestTimestamp(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.latestTimestamp({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async owner(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.owner({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async phaseAggregators(arg0, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.phaseAggregators(arg0, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async phaseId(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.phaseId({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async proposedAggregator(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.proposedAggregator({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async proposedGetRoundData(_roundId, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.proposedGetRoundData(_roundId, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async proposedLatestRoundData(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.proposedLatestRoundData({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async version(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.version({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    callStatic = {
        view: this.view,
        context: this.context,
        async acceptOwnership(overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.acceptOwnership({
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async confirmAggregator(_aggregator, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.confirmAggregator(_aggregator, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async proposeAggregator(_aggregator, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.proposeAggregator(_aggregator, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async setController(_accessController, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.setController(_accessController, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async transferOwnership(_to, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.transferOwnership(_to, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
    };
    encodeCall = {
        view: this.view,
        context: this.context,
        acceptOwnership(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.acceptOwnership({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        accessController(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.accessController({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        aggregator(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.aggregator({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        confirmAggregator(_aggregator, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.confirmAggregator(_aggregator, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        decimals(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.decimals({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        description(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.description({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        getAnswer(_roundId, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.getAnswer(_roundId, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        getRoundData(_roundId, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.getRoundData(_roundId, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        getTimestamp(_roundId, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.getTimestamp(_roundId, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        latestAnswer(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.latestAnswer({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        latestRound(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.latestRound({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        latestRoundData(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.latestRoundData({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        latestTimestamp(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.latestTimestamp({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        owner(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.owner({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        phaseAggregators(arg0, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.phaseAggregators(arg0, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        phaseId(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.phaseId({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        proposeAggregator(_aggregator, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.proposeAggregator(_aggregator, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        proposedAggregator(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.proposedAggregator({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        proposedGetRoundData(_roundId, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.proposedGetRoundData(_roundId, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        proposedLatestRoundData(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.proposedLatestRoundData({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        setController(_accessController, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.setController(_accessController, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        transferOwnership(_to, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.transferOwnership(_to, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        version(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.version({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
    };
}
export class EACAggregatorProxyProcessor extends BaseProcessor {
    onEventAnswerUpdated(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["AnswerUpdated(int256,uint256,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventNewRound(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["NewRound(uint256,address,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventOwnershipTransferRequested(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["OwnershipTransferRequested(address,address)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventOwnershipTransferred(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["OwnershipTransferred(address,address)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onCallAcceptOwnership(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x79ba5097", handler, fetchConfig, preprocessHandler);
    }
    onCallAccessController(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xbc43cbaf", handler, fetchConfig, preprocessHandler);
    }
    onCallAggregator(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x245a7bfc", handler, fetchConfig, preprocessHandler);
    }
    onCallConfirmAggregator(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xa928c096", handler, fetchConfig, preprocessHandler);
    }
    onCallDecimals(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x313ce567", handler, fetchConfig, preprocessHandler);
    }
    onCallDescription(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x7284e416", handler, fetchConfig, preprocessHandler);
    }
    onCallGetAnswer(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xb5ab58dc", handler, fetchConfig, preprocessHandler);
    }
    onCallGetRoundData(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x9a6fc8f5", handler, fetchConfig, preprocessHandler);
    }
    onCallGetTimestamp(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xb633620c", handler, fetchConfig, preprocessHandler);
    }
    onCallLatestAnswer(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x50d25bcd", handler, fetchConfig, preprocessHandler);
    }
    onCallLatestRound(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x668a0f02", handler, fetchConfig, preprocessHandler);
    }
    onCallLatestRoundData(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xfeaf968c", handler, fetchConfig, preprocessHandler);
    }
    onCallLatestTimestamp(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x8205bf6a", handler, fetchConfig, preprocessHandler);
    }
    onCallOwner(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x8da5cb5b", handler, fetchConfig, preprocessHandler);
    }
    onCallPhaseAggregators(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xc1597304", handler, fetchConfig, preprocessHandler);
    }
    onCallPhaseId(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x58303b10", handler, fetchConfig, preprocessHandler);
    }
    onCallProposeAggregator(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xf8a2abd3", handler, fetchConfig, preprocessHandler);
    }
    onCallProposedAggregator(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xe8c4be30", handler, fetchConfig, preprocessHandler);
    }
    onCallProposedGetRoundData(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x6001ac53", handler, fetchConfig, preprocessHandler);
    }
    onCallProposedLatestRoundData(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x8f6b4d91", handler, fetchConfig, preprocessHandler);
    }
    onCallSetController(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x92eefe9b", handler, fetchConfig, preprocessHandler);
    }
    onCallTransferOwnership(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xf2fde38b", handler, fetchConfig, preprocessHandler);
    }
    onCallVersion(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x54fd4d50", handler, fetchConfig, preprocessHandler);
    }
    static filters = {
        AnswerUpdated(current, roundId, updatedAt) {
            return templateContract.filters["AnswerUpdated(int256,uint256,uint256)"](current, roundId, updatedAt);
        },
        NewRound(roundId, startedBy, startedAt) {
            return templateContract.filters["NewRound(uint256,address,uint256)"](roundId, startedBy, startedAt);
        },
        OwnershipTransferRequested(from, to) {
            return templateContract.filters["OwnershipTransferRequested(address,address)"](from, to);
        },
        OwnershipTransferred(from, to) {
            return templateContract.filters["OwnershipTransferred(address,address)"](from, to);
        },
    };
    CreateBoundContractView() {
        const view = getEACAggregatorProxyContract(this.config.network, this.config.address);
        return new EACAggregatorProxyBoundContractView(this.config.address, view);
    }
    static bind(options) {
        if (!options.name) {
            options.name = "EACAggregatorProxy";
        }
        let processor = getProcessor(options);
        if (!processor) {
            processor = new EACAggregatorProxyProcessor(options);
            addProcessor(options, processor);
        }
        return processor;
    }
}
export class EACAggregatorProxyProcessorTemplate extends BaseProcessorTemplate {
    bindInternal(options) {
        if (!options.name) {
            options.name = "EACAggregatorProxy";
        }
        let processor = getProcessor(options);
        if (!processor) {
            processor = new EACAggregatorProxyProcessor(options);
            addProcessor(options, processor);
        }
        return processor;
    }
    onEventAnswerUpdated(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["AnswerUpdated(int256,uint256,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventNewRound(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["NewRound(uint256,address,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventOwnershipTransferRequested(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["OwnershipTransferRequested(address,address)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventOwnershipTransferred(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["OwnershipTransferred(address,address)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
}
export function getEACAggregatorProxyContract(chainId, address) {
    let contract = getContractByABI("EACAggregatorProxy", address, chainId);
    if (!contract) {
        const rawContract = EACAggregatorProxy__factory.connect(address, getProvider(chainId));
        contract = new EACAggregatorProxyContractView(rawContract);
        addContractByABI("EACAggregatorProxy", address, chainId, contract);
    }
    return contract;
}
export function getEACAggregatorProxyContractOnContext(context, address) {
    const view = getEACAggregatorProxyContract(context.getChainId(), address);
    const boundView = new EACAggregatorProxyBoundContractView(address, view);
    boundView.context = context;
    if (boundView.callStatic) {
        boundView.callStatic.context = context;
    }
    return boundView;
}
//# sourceMappingURL=eacaggregatorproxy-processor.js.map