import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent } from "./common.js";
export interface WETH9Interface extends Interface {
}
export interface ApprovalEventObject {
    src: string;
    guy: string;
    wad: bigint;
}
export type ApprovalEvent = TypedEvent<[
    string,
    string,
    bigint
], ApprovalEventObject>;
export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
export interface TransferEventObject {
    src: string;
    dst: string;
    wad: bigint;
}
export type TransferEvent = TypedEvent<[
    string,
    string,
    bigint
], TransferEventObject>;
export type TransferEventFilter = TypedEventFilter<TransferEvent>;
export interface DepositEventObject {
    dst: string;
    wad: bigint;
}
export type DepositEvent = TypedEvent<[string, bigint], DepositEventObject>;
export type DepositEventFilter = TypedEventFilter<DepositEvent>;
export interface WithdrawalEventObject {
    src: string;
    wad: bigint;
}
export type WithdrawalEvent = TypedEvent<[
    string,
    bigint
], WithdrawalEventObject>;
export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;
export interface WETH9 extends BaseContract {
    connect(runner: null | ContractRunner): this;
    interface: WETH9Interface;
}
//# sourceMappingURL=WETH9.d.ts.map