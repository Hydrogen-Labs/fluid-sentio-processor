import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent } from "./common.js";
export interface ERC721Interface extends Interface {
}
export interface ApprovalEventObject {
    owner: string;
    approved: string;
    tokenId: bigint;
}
export type ApprovalEvent = TypedEvent<[
    string,
    string,
    bigint
], ApprovalEventObject>;
export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
export interface ApprovalForAllEventObject {
    owner: string;
    operator: string;
    approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<[
    string,
    string,
    boolean
], ApprovalForAllEventObject>;
export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
export interface TransferEventObject {
    from: string;
    to: string;
    tokenId: bigint;
}
export type TransferEvent = TypedEvent<[
    string,
    string,
    bigint
], TransferEventObject>;
export type TransferEventFilter = TypedEventFilter<TransferEvent>;
export interface ERC721 extends BaseContract {
    connect(runner: null | ContractRunner): this;
    interface: ERC721Interface;
}
//# sourceMappingURL=ERC721.d.ts.map