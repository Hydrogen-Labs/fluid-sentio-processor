import { EthChainId } from "@sentio/sdk/eth";
import { getEACAggregatorProxyContract } from "./eacaggregatorproxy-processor.js";
const mockField = {
    blockHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
    blockNumber: 0,
    logIndex: 0,
    removed: false,
    transactionHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
    transactionIndex: 0,
};
export function mockAnswerUpdatedLog(contractAddress, event) {
    const contract = getEACAggregatorProxyContract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("AnswerUpdated(int256,uint256,uint256)", [event.current, event.roundId, event.updatedAt]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
export function mockNewRoundLog(contractAddress, event) {
    const contract = getEACAggregatorProxyContract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("NewRound(uint256,address,uint256)", [event.roundId, event.startedBy, event.startedAt]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
export function mockOwnershipTransferRequestedLog(contractAddress, event) {
    const contract = getEACAggregatorProxyContract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("OwnershipTransferRequested(address,address)", [event.from, event.to]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
export function mockOwnershipTransferredLog(contractAddress, event) {
    const contract = getEACAggregatorProxyContract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("OwnershipTransferred(address,address)", [event.from, event.to]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
//# sourceMappingURL=eacaggregatorproxy-test-utils.js.map