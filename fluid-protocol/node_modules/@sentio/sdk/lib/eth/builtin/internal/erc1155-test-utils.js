import { EthChainId } from "@sentio/sdk/eth";
import { getERC1155Contract } from "./erc1155-processor.js";
const mockField = {
    blockHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
    blockNumber: 0,
    logIndex: 0,
    removed: false,
    transactionHash: "0x0000000000000000000000000000000000000000000000000000000000000000",
    transactionIndex: 0,
};
export function mockApprovalForAllLog(contractAddress, event) {
    const contract = getERC1155Contract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("ApprovalForAll(address,address,bool)", [event.account, event.operator, event.approved]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
export function mockTransferBatchLog(contractAddress, event) {
    const contract = getERC1155Contract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("TransferBatch(address,address,address,uint256[],uint256[])", [event.operator, event.from, event.to, event.ids, event.values]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
export function mockTransferSingleLog(contractAddress, event) {
    const contract = getERC1155Contract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("TransferSingle(address,address,address,uint256,uint256)", [event.operator, event.from, event.to, event.id, event.value]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
export function mockURILog(contractAddress, event) {
    const contract = getERC1155Contract(EthChainId.ETHEREUM, contractAddress);
    const encodedLog = contract.rawContract.interface.encodeEventLog("URI(string,uint256)", [event.value, event.id]);
    return {
        ...mockField,
        index: 0,
        address: contractAddress,
        data: encodedLog.data,
        topics: encodedLog.topics,
    };
}
//# sourceMappingURL=erc1155-test-utils.js.map