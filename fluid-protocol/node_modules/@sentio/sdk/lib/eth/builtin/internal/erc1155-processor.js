/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Interface } from "ethers";
import { addContractByABI, getContractByABI, addProcessor, getProcessor, getProvider, transformEtherError, BaseProcessor, BaseProcessorTemplate, BoundContractView, ContractView, DummyProvider, } from "@sentio/sdk/eth";
import { ERC1155__factory } from "./index.js";
const templateContract = ERC1155__factory.connect("0x0", DummyProvider);
const iface = new Interface([
    "function balanceOf(address account, uint256 id) view returns (uint256)",
    "function balanceOfBatch(address[] accounts, uint256[] ids) view returns (uint256[])",
    "function isApprovedForAll(address account, address operator) view returns (bool)",
    "function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns ()",
    "function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns ()",
    "function setApprovalForAll(address operator, bool approved) returns ()",
    "function supportsInterface(bytes4 interfaceId) view returns (bool)",
    "function uri(uint256 id) view returns (string)",
]);
export class ERC1155ContractView extends ContractView {
    constructor(contract) {
        super(contract);
        this.callStatic.contract = contract;
    }
    async balanceOf(account, id, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("balanceOf(address,uint256)")(account, id, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async balanceOfBatch(accounts, ids, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("balanceOfBatch(address[],uint256[])")(accounts, ids, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async isApprovedForAll(account, operator, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("isApprovedForAll(address,address)")(account, operator, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async supportsInterface(interfaceId, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("supportsInterface(bytes4)")(interfaceId, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async uri(id, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("uri(uint256)")(id, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    callStatic = {
        contract: this.contract,
        async safeBatchTransferFrom(from, to, ids, amounts, data, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)")
                    .staticCall(from, to, ids, amounts, data, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async safeTransferFrom(from, to, id, amount, data, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("safeTransferFrom(address,address,uint256,uint256,bytes)")
                    .staticCall(from, to, id, amount, data, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async setApprovalForAll(operator, approved, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("setApprovalForAll(address,bool)")
                    .staticCall(operator, approved, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
    };
    encodeCall = {
        balanceOf(account, id, ethCallContext) {
            try {
                const iface = new Interface(["function balanceOf(address,uint256)"]);
                const calldata = iface.encodeFunctionData("balanceOf", [account, id]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        balanceOfBatch(accounts, ids, ethCallContext) {
            try {
                const iface = new Interface([
                    "function balanceOfBatch(address[],uint256[])",
                ]);
                const calldata = iface.encodeFunctionData("balanceOfBatch", [
                    accounts,
                    ids,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        isApprovedForAll(account, operator, ethCallContext) {
            try {
                const iface = new Interface([
                    "function isApprovedForAll(address,address)",
                ]);
                const calldata = iface.encodeFunctionData("isApprovedForAll", [
                    account,
                    operator,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        safeBatchTransferFrom(from, to, ids, amounts, data, ethCallContext) {
            try {
                const iface = new Interface([
                    "function safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
                ]);
                const calldata = iface.encodeFunctionData("safeBatchTransferFrom", [
                    from,
                    to,
                    ids,
                    amounts,
                    data,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        safeTransferFrom(from, to, id, amount, data, ethCallContext) {
            try {
                const iface = new Interface([
                    "function safeTransferFrom(address,address,uint256,uint256,bytes)",
                ]);
                const calldata = iface.encodeFunctionData("safeTransferFrom", [
                    from,
                    to,
                    id,
                    amount,
                    data,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        setApprovalForAll(operator, approved, ethCallContext) {
            try {
                const iface = new Interface([
                    "function setApprovalForAll(address,bool)",
                ]);
                const calldata = iface.encodeFunctionData("setApprovalForAll", [
                    operator,
                    approved,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        supportsInterface(interfaceId, ethCallContext) {
            try {
                const iface = new Interface(["function supportsInterface(bytes4)"]);
                const calldata = iface.encodeFunctionData("supportsInterface", [
                    interfaceId,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        uri(id, ethCallContext) {
            try {
                const iface = new Interface(["function uri(uint256)"]);
                const calldata = iface.encodeFunctionData("uri", [id]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
    };
}
export class ERC1155BoundContractView extends BoundContractView {
    async balanceOf(account, id, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.balanceOf(account, id, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async balanceOfBatch(accounts, ids, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.balanceOfBatch(accounts, ids, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async isApprovedForAll(account, operator, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.isApprovedForAll(account, operator, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async supportsInterface(interfaceId, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.supportsInterface(interfaceId, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async uri(id, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.uri(id, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    callStatic = {
        view: this.view,
        context: this.context,
        async safeBatchTransferFrom(from, to, ids, amounts, data, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.safeBatchTransferFrom(from, to, ids, amounts, data, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async safeTransferFrom(from, to, id, amount, data, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.safeTransferFrom(from, to, id, amount, data, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async setApprovalForAll(operator, approved, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.setApprovalForAll(operator, approved, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
    };
    encodeCall = {
        view: this.view,
        context: this.context,
        balanceOf(account, id, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.balanceOf(account, id, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        balanceOfBatch(accounts, ids, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.balanceOfBatch(accounts, ids, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        isApprovedForAll(account, operator, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.isApprovedForAll(account, operator, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        safeBatchTransferFrom(from, to, ids, amounts, data, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.safeBatchTransferFrom(from, to, ids, amounts, data, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        safeTransferFrom(from, to, id, amount, data, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.safeTransferFrom(from, to, id, amount, data, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        setApprovalForAll(operator, approved, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.setApprovalForAll(operator, approved, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        supportsInterface(interfaceId, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.supportsInterface(interfaceId, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        uri(id, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.uri(id, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
    };
}
export class ERC1155Processor extends BaseProcessor {
    onEventApprovalForAll(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["ApprovalForAll(address,address,bool)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventTransferBatch(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["TransferBatch(address,address,address,uint256[],uint256[])"](null, null, null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventTransferSingle(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["TransferSingle(address,address,address,uint256,uint256)"](null, null, null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventURI(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["URI(string,uint256)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onCallBalanceOf(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x00fdd58e", handler, fetchConfig, preprocessHandler);
    }
    onCallBalanceOfBatch(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x4e1273f4", handler, fetchConfig, preprocessHandler);
    }
    onCallIsApprovedForAll(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xe985e9c5", handler, fetchConfig, preprocessHandler);
    }
    onCallSafeBatchTransferFrom(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x2eb2c2d6", handler, fetchConfig, preprocessHandler);
    }
    onCallSafeTransferFrom(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xf242432a", handler, fetchConfig, preprocessHandler);
    }
    onCallSetApprovalForAll(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xa22cb465", handler, fetchConfig, preprocessHandler);
    }
    onCallSupportsInterface(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x01ffc9a7", handler, fetchConfig, preprocessHandler);
    }
    onCallUri(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x0e89341c", handler, fetchConfig, preprocessHandler);
    }
    static filters = {
        ApprovalForAll(account, operator, approved) {
            return templateContract.filters["ApprovalForAll(address,address,bool)"](account, operator, approved);
        },
        TransferBatch(operator, from, to, ids, values) {
            return templateContract.filters["TransferBatch(address,address,address,uint256[],uint256[])"](operator, from, to, ids, values);
        },
        TransferSingle(operator, from, to, id, value) {
            return templateContract.filters["TransferSingle(address,address,address,uint256,uint256)"](operator, from, to, id, value);
        },
        URI(value, id) {
            return templateContract.filters["URI(string,uint256)"](value, id);
        },
    };
    CreateBoundContractView() {
        const view = getERC1155Contract(this.config.network, this.config.address);
        return new ERC1155BoundContractView(this.config.address, view);
    }
    static bind(options) {
        if (!options.name) {
            options.name = "ERC1155";
        }
        let processor = getProcessor(options);
        if (!processor) {
            processor = new ERC1155Processor(options);
            addProcessor(options, processor);
        }
        return processor;
    }
}
export class ERC1155ProcessorTemplate extends BaseProcessorTemplate {
    bindInternal(options) {
        if (!options.name) {
            options.name = "ERC1155";
        }
        let processor = getProcessor(options);
        if (!processor) {
            processor = new ERC1155Processor(options);
            addProcessor(options, processor);
        }
        return processor;
    }
    onEventApprovalForAll(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["ApprovalForAll(address,address,bool)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventTransferBatch(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["TransferBatch(address,address,address,uint256[],uint256[])"](null, null, null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventTransferSingle(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["TransferSingle(address,address,address,uint256,uint256)"](null, null, null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventURI(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["URI(string,uint256)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
}
export function getERC1155Contract(chainId, address) {
    let contract = getContractByABI("ERC1155", address, chainId);
    if (!contract) {
        const rawContract = ERC1155__factory.connect(address, getProvider(chainId));
        contract = new ERC1155ContractView(rawContract);
        addContractByABI("ERC1155", address, chainId, contract);
    }
    return contract;
}
export function getERC1155ContractOnContext(context, address) {
    const view = getERC1155Contract(context.getChainId(), address);
    const boundView = new ERC1155BoundContractView(address, view);
    boundView.context = context;
    if (boundView.callStatic) {
        boundView.callStatic.context = context;
    }
    return boundView;
}
//# sourceMappingURL=erc1155-processor.js.map