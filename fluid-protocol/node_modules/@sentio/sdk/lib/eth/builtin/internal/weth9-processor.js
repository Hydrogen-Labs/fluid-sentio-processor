/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Interface } from "ethers";
import { addContractByABI, getContractByABI, addProcessor, getProcessor, getProvider, transformEtherError, BaseProcessor, BaseProcessorTemplate, BoundContractView, ContractView, DummyProvider, } from "@sentio/sdk/eth";
import { WETH9__factory } from "./index.js";
const templateContract = WETH9__factory.connect("0x0", DummyProvider);
const iface = new Interface([
    "function name() view returns (string)",
    "function approve(address guy, uint256 wad) returns (bool)",
    "function totalSupply() view returns (uint256)",
    "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
    "function withdraw(uint256 wad) returns ()",
    "function decimals() view returns (uint8)",
    "function balanceOf(address) view returns (uint256)",
    "function symbol() view returns (string)",
    "function transfer(address dst, uint256 wad) returns (bool)",
    "function deposit() payable returns ()",
    "function allowance(address, address) view returns (uint256)",
]);
export class WETH9ContractView extends ContractView {
    constructor(contract) {
        super(contract);
        this.callStatic.contract = contract;
    }
    async name(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("name()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async totalSupply(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("totalSupply()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async decimals(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("decimals()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async balanceOf(arg0, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("balanceOf(address)")(arg0, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async symbol(overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("symbol()")(overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    async allowance(arg0, arg1, overrides, preparedData, ethCallContext) {
        try {
            return await this.contract.getFunction("allowance(address,address)")(arg0, arg1, overrides || {});
        }
        catch (e) {
            const stack = new Error().stack;
            throw transformEtherError(e, undefined, stack);
        }
    }
    callStatic = {
        contract: this.contract,
        async approve(guy, wad, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("approve(address,uint256)")
                    .staticCall(guy, wad, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async transferFrom(src, dst, wad, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("transferFrom(address,address,uint256)")
                    .staticCall(src, dst, wad, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async withdraw(wad, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("withdraw(uint256)")
                    .staticCall(wad, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async transfer(dst, wad, overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("transfer(address,uint256)")
                    .staticCall(dst, wad, overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        async deposit(overrides, preparedData, ethCallContext) {
            try {
                return await this.contract
                    .getFunction("deposit()")
                    .staticCall(overrides || {});
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
    };
    encodeCall = {
        name(ethCallContext) {
            try {
                const iface = new Interface(["function name()"]);
                const calldata = iface.encodeFunctionData("name", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        approve(guy, wad, ethCallContext) {
            try {
                const iface = new Interface(["function approve(address,uint256)"]);
                const calldata = iface.encodeFunctionData("approve", [guy, wad]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        totalSupply(ethCallContext) {
            try {
                const iface = new Interface(["function totalSupply()"]);
                const calldata = iface.encodeFunctionData("totalSupply", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        transferFrom(src, dst, wad, ethCallContext) {
            try {
                const iface = new Interface([
                    "function transferFrom(address,address,uint256)",
                ]);
                const calldata = iface.encodeFunctionData("transferFrom", [
                    src,
                    dst,
                    wad,
                ]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        withdraw(wad, ethCallContext) {
            try {
                const iface = new Interface(["function withdraw(uint256)"]);
                const calldata = iface.encodeFunctionData("withdraw", [wad]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        decimals(ethCallContext) {
            try {
                const iface = new Interface(["function decimals()"]);
                const calldata = iface.encodeFunctionData("decimals", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        balanceOf(arg0, ethCallContext) {
            try {
                const iface = new Interface(["function balanceOf(address)"]);
                const calldata = iface.encodeFunctionData("balanceOf", [arg0]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        symbol(ethCallContext) {
            try {
                const iface = new Interface(["function symbol()"]);
                const calldata = iface.encodeFunctionData("symbol", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        transfer(dst, wad, ethCallContext) {
            try {
                const iface = new Interface(["function transfer(address,uint256)"]);
                const calldata = iface.encodeFunctionData("transfer", [dst, wad]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        deposit(ethCallContext) {
            try {
                const iface = new Interface(["function deposit()"]);
                const calldata = iface.encodeFunctionData("deposit", []);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
        allowance(arg0, arg1, ethCallContext) {
            try {
                const iface = new Interface(["function allowance(address,address)"]);
                const calldata = iface.encodeFunctionData("allowance", [arg0, arg1]);
                return {
                    context: ethCallContext,
                    calldata,
                };
            }
            catch (e) {
                const stack = new Error().stack;
                throw transformEtherError(e, undefined, stack);
            }
        },
    };
}
export class WETH9BoundContractView extends BoundContractView {
    async name(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.name({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async totalSupply(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.totalSupply({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async decimals(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.decimals({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async balanceOf(arg0, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.balanceOf(arg0, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async symbol(overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.symbol({
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    async allowance(arg0, arg1, overrides) {
        const ethCallContext = {
            chainId: this.context.chainId,
            blockTag: "0x" + this.context.blockNumber.toString(16),
            address: this.context.address,
        };
        return await this.view.allowance(arg0, arg1, {
            blockTag: this.context.blockNumber,
            ...overrides,
        }, this.context.preparedData, ethCallContext);
    }
    callStatic = {
        view: this.view,
        context: this.context,
        async approve(guy, wad, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.approve(guy, wad, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async transferFrom(src, dst, wad, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.transferFrom(src, dst, wad, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async withdraw(wad, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.withdraw(wad, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async transfer(dst, wad, overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.transfer(dst, wad, {
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
        async deposit(overrides) {
            const ethCallContext = {
                chainId: this.context.chainId,
                blockTag: "0x" + this.context.blockNumber.toString(16),
                address: this.context.address,
            };
            return await this.view.callStatic.deposit({
                blockTag: this.context.blockNumber,
                ...overrides,
            }, this.context.preparedData, ethCallContext);
        },
    };
    encodeCall = {
        view: this.view,
        context: this.context,
        name(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.name({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        approve(guy, wad, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.approve(guy, wad, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        totalSupply(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.totalSupply({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        transferFrom(src, dst, wad, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.transferFrom(src, dst, wad, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        withdraw(wad, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.withdraw(wad, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        decimals(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.decimals({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        balanceOf(arg0, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.balanceOf(arg0, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        symbol(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.symbol({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        transfer(dst, wad, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.transfer(dst, wad, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        deposit(overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.deposit({
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
        allowance(arg0, arg1, overrides) {
            let blockTagWithOverride = "0x" + this.context.blockNumber.toString(16);
            if (overrides?.blockTag) {
                blockTagWithOverride =
                    typeof overrides.blockTag == "string"
                        ? overrides.blockTag
                        : "0x" + overrides.blockTag.toString(16);
            }
            return this.view.encodeCall.allowance(arg0, arg1, {
                chainId: this.context.chainId.toString(),
                address: this.context.address,
                blockTag: blockTagWithOverride,
            });
        },
    };
}
export class WETH9Processor extends BaseProcessor {
    onEventApproval(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Approval(address,address,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventTransfer(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Transfer(address,address,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventDeposit(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Deposit(address,uint256)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventWithdrawal(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Withdrawal(address,uint256)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onCallName(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x06fdde03", handler, fetchConfig, preprocessHandler);
    }
    onCallApprove(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x095ea7b3", handler, fetchConfig, preprocessHandler);
    }
    onCallTotalSupply(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x18160ddd", handler, fetchConfig, preprocessHandler);
    }
    onCallTransferFrom(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x23b872dd", handler, fetchConfig, preprocessHandler);
    }
    onCallWithdraw(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x2e1a7d4d", handler, fetchConfig, preprocessHandler);
    }
    onCallDecimals(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x313ce567", handler, fetchConfig, preprocessHandler);
    }
    onCallBalanceOf(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x70a08231", handler, fetchConfig, preprocessHandler);
    }
    onCallSymbol(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0x95d89b41", handler, fetchConfig, preprocessHandler);
    }
    onCallTransfer(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xa9059cbb", handler, fetchConfig, preprocessHandler);
    }
    onCallDeposit(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xd0e30db0", handler, fetchConfig, preprocessHandler);
    }
    onCallAllowance(handler, fetchConfig, preprocessHandler) {
        return super.onEthTrace("0xdd62ed3e", handler, fetchConfig, preprocessHandler);
    }
    static filters = {
        Approval(src, guy, wad) {
            return templateContract.filters["Approval(address,address,uint256)"](src, guy, wad);
        },
        Transfer(src, dst, wad) {
            return templateContract.filters["Transfer(address,address,uint256)"](src, dst, wad);
        },
        Deposit(dst, wad) {
            return templateContract.filters["Deposit(address,uint256)"](dst, wad);
        },
        Withdrawal(src, wad) {
            return templateContract.filters["Withdrawal(address,uint256)"](src, wad);
        },
    };
    CreateBoundContractView() {
        const view = getWETH9Contract(this.config.network, this.config.address);
        return new WETH9BoundContractView(this.config.address, view);
    }
    static bind(options) {
        if (!options.name) {
            options.name = "WETH9";
        }
        let processor = getProcessor(options);
        if (!processor) {
            processor = new WETH9Processor(options);
            addProcessor(options, processor);
        }
        return processor;
    }
}
export class WETH9ProcessorTemplate extends BaseProcessorTemplate {
    bindInternal(options) {
        if (!options.name) {
            options.name = "WETH9";
        }
        let processor = getProcessor(options);
        if (!processor) {
            processor = new WETH9Processor(options);
            addProcessor(options, processor);
        }
        return processor;
    }
    onEventApproval(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Approval(address,address,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventTransfer(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Transfer(address,address,uint256)"](null, null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventDeposit(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Deposit(address,uint256)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
    onEventWithdrawal(handler, filter, fetchConfig, preprocessHandler) {
        if (!filter) {
            filter = templateContract.filters["Withdrawal(address,uint256)"](null, null);
        }
        return super.onEthEvent(handler, filter, fetchConfig, preprocessHandler);
    }
}
export function getWETH9Contract(chainId, address) {
    let contract = getContractByABI("WETH9", address, chainId);
    if (!contract) {
        const rawContract = WETH9__factory.connect(address, getProvider(chainId));
        contract = new WETH9ContractView(rawContract);
        addContractByABI("WETH9", address, chainId, contract);
    }
    return contract;
}
export function getWETH9ContractOnContext(context, address) {
    const view = getWETH9Contract(context.getChainId(), address);
    const boundView = new WETH9BoundContractView(address, view);
    boundView.context = context;
    if (boundView.callStatic) {
        boundView.callStatic.context = context;
    }
    return boundView;
}
//# sourceMappingURL=weth9-processor.js.map