import { LogParams, TransactionReceiptParams } from 'ethers/providers';
import { LogDescription, Result, DeferredTopicFilter, BlockParams } from 'ethers';
import { ContractContext } from './context.js';
export interface IResult {
    /**
     *  Returns the Result as a normal Array.
     */
    toArray(): Array<any>;
    /**
     *  Returns the Result as an Object with each name-value pair.
     */
    toObject(): Record<string, any>;
}
export interface TypedEvent<TArgsArray extends Array<any> = any, TArgsObject = any> extends LogParams {
    args: TArgsObject & IResult;
    name: string;
}
export type TypedEventFilter<_TEvent extends TypedEvent> = DeferredTopicFilter;
export interface RichBlock extends BlockParams {
    traces?: Trace[];
    transactionReceipts?: TransactionReceiptParams[];
}
export declare class SimpleEthersError extends Error {
    e: Error;
    constructor(message: string, e: Error, stack?: string);
    toString(): string;
}
export declare function transformEtherError(e: Error, ctx: ContractContext<any, any> | undefined, stack?: string): Error;
export declare function fixEmptyKey(result: LogDescription): Result;
export declare function formatEthData(data: {
    log?: any;
    block?: any;
    trace?: any;
    transaction?: any;
    transactionReceipt?: any;
}): {
    log: LogParams | undefined;
    block: RichBlock | undefined;
    trace: Trace | undefined;
    transaction: import("ethers").TransactionResponseParams | undefined;
    transactionReceipt: TransactionReceiptParams | undefined;
};
export declare function formatRichBlock(block: RichBlock): RichBlock;
export interface TypedCallTrace<TArgsArray extends Array<any> = any, TArgsObject = any> extends Trace {
    args: TArgsObject & IResult;
    name: string;
    functionSignature: string;
}
export interface Trace {
    action: TraceAction;
    blockHash: string;
    blockNumber: number;
    result: TraceResult;
    subtraces: number;
    traceAddress: number[];
    transactionHash: string;
    transactionPosition: number;
    type: string;
    error?: string;
}
export interface TraceAction {
    from: string;
    to?: string;
    value: number;
    gas: number;
    input?: string;
    callType?: string;
    init?: string;
    address?: string;
    balance?: string;
    refundAddress?: string;
}
export interface TraceResult {
    gasUsed: number;
    output?: string;
    address?: string;
    code?: string;
}
export declare function isNullAddress(address: string): boolean;
export declare function validateAndNormalizeAddress(address: string): string;
//# sourceMappingURL=eth.d.ts.map