import { BaseContract } from 'ethers';
import { BoundContractView, ContractView } from './context.js';
import { BaseProcessor } from './base-processor.js';
import { getProvider } from '@sentio/runtime';
import { addProcessor } from './binds.js';
export class GenericProcessor extends BaseProcessor {
    eventABI;
    constructor(eventABI, options) {
        super(options);
        this.eventABI = eventABI;
    }
    CreateBoundContractView() {
        const contract = new BaseContract(this.config.address, this.eventABI, getProvider(this.config.network));
        return new BoundContractView(this.config.address, new ContractView(contract));
    }
    static bind(eventABI, options) {
        if (!Array.isArray(eventABI)) {
            eventABI = [eventABI];
        }
        if (!options.name) {
            options.name = 'Generic';
        }
        const processor = new GenericProcessor(eventABI, options);
        addProcessor(options, processor);
        return processor;
    }
}
//# sourceMappingURL=generic-processor.js.map