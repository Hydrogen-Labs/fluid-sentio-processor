import { BoundContractView, ContractContext, ContractView, EthContext } from './context.js';
import { BaseContract } from 'ethers';
import { BaseProcessor } from './base-processor.js';
import { BindOptions } from './bind-options.js';
import { EthFetchConfig, HandleInterval, PreprocessResult } from '@sentio/protos';
import { PromiseOrVoid } from '../core/promises.js';
import { ListStateStorage } from '@sentio/runtime';
import { BlockParams } from 'ethers/providers';
import { DeferredTopicFilter } from 'ethers/contract';
import { TypedEvent, TypedCallTrace } from './eth.js';
export declare class ProcessorTemplateProcessorState extends ListStateStorage<BaseProcessorTemplate<BaseContract, BoundContractView<BaseContract, any>>> {
    static INSTANCE: ProcessorTemplateProcessorState;
}
export declare abstract class BaseProcessorTemplate<TContract extends BaseContract, TBoundContractView extends BoundContractView<TContract, ContractView<TContract>>> {
    id: number;
    binds: Set<string>;
    blockHandlers: {
        handler: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid;
        preprocessHandler: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
            [k: string]: any;
        }) => Promise<PreprocessResult>;
        blockInterval?: HandleInterval;
        timeIntervalInMinutes?: HandleInterval;
        fetchConfig?: EthFetchConfig;
    }[];
    traceHandlers: {
        signature: string;
        handler: (trace: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid;
        preprocessHandler: (trace: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
            [k: string]: any;
        }) => Promise<PreprocessResult>;
        fetchConfig?: EthFetchConfig;
    }[];
    eventHandlers: {
        handler: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid;
        preprocessHandler: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
            [k: string]: any;
        }) => Promise<PreprocessResult>;
        filter: DeferredTopicFilter | DeferredTopicFilter[];
        fetchConfig?: EthFetchConfig;
    }[];
    constructor();
    /**
     * Bind template using {@param options}, using {@param ctx}'s network value if not provided in the option
     * @param options
     * @param ctx
     */
    bind(options: Omit<BindOptions, 'network'>, ctx: EthContext): void;
    protected onEthEvent(handler: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, filter: DeferredTopicFilter | DeferredTopicFilter[], fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (event: TypedEvent, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onBlockInterval(handler: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, blockInterval?: number, backfillBlockInterval?: number, fetchConfig?: EthFetchConfig, preprocessHandler?: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onTimeInterval(handler: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, timeIntervalInMinutes?: number, backfillBlockInterval?: number, fetchConfig?: EthFetchConfig, preprocessHandler?: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onInterval(handler: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, timeInterval: HandleInterval | undefined, blockInterval: HandleInterval | undefined, fetchConfig: EthFetchConfig | undefined, preprocessHandler?: (block: BlockParams, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    onTrace(signature: string, handler: (trace: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>) => PromiseOrVoid, fetchConfig?: Partial<EthFetchConfig>, preprocessHandler?: (trace: TypedCallTrace, ctx: ContractContext<TContract, TBoundContractView>, preprocessStore: {
        [k: string]: any;
    }) => Promise<PreprocessResult>): this;
    protected abstract bindInternal(options: BindOptions): BaseProcessor<TContract, TBoundContractView>;
}
//# sourceMappingURL=base-processor-template.d.ts.map