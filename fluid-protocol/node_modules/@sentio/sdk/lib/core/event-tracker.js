import { LogLevel } from '@sentio/protos';
import { MapStateStorage } from '@sentio/runtime';
import { NamedResultDescriptor } from './metadata.js';
import { normalizeAttribute } from './normalization.js';
/** @deprecated */
// eslint-disable-next-line deprecation/deprecation
export class EventTrackerState extends MapStateStorage {
    // eslint-disable-next-line deprecation/deprecation
    static INSTANCE = new EventTrackerState();
}
// Track Event with an identity associate with it
/** @deprecated */
export class EventTracker extends NamedResultDescriptor {
    static DEFAULT_OPTIONS = {
        totalByDay: true,
        unique: true,
    };
    static register(eventName, options) {
        // eslint-disable-next-line deprecation/deprecation
        const tracker = new EventTracker(eventName, { ...EventTracker.DEFAULT_OPTIONS, ...options });
        // eslint-disable-next-line deprecation/deprecation
        return EventTrackerState.INSTANCE.getOrSetValue(eventName, tracker);
    }
    options;
    constructor(eventName, options) {
        super(eventName);
        this.options = options;
    }
    trackEvent(ctx, event) {
        const { distinctId, message, severity, ...payload } = event;
        const res = {
            message: message || '',
            severity: severity || LogLevel.INFO,
            metadata: ctx.getMetaData(this.name, {}),
            distinctEntityId: distinctId || '',
            attributes: normalizeAttribute(payload),
            runtimeInfo: undefined,
            noMetric: false,
        };
        ctx.update({ events: [res] });
    }
}
/** @deprecated */
// eslint-disable-next-line deprecation/deprecation
export class AccountEventTracker extends EventTracker {
    static DEFAULT_OPTIONS = {
        totalByDay: true,
        unique: true,
        distinctByDays: [1, 7, 30],
    };
    static register(eventName, options) {
        if (eventName) {
            eventName = ['user', eventName].join('_');
        }
        else {
            eventName = 'user';
        }
        // eslint-disable-next-line deprecation/deprecation
        const tracker = new AccountEventTracker(eventName, { ...AccountEventTracker.DEFAULT_OPTIONS, ...options });
        // eslint-disable-next-line deprecation/deprecation
        return EventTrackerState.INSTANCE.getOrSetValue(eventName, tracker);
    }
}
//# sourceMappingURL=event-tracker.js.map