import { BaseContext } from './base-context.js';
import { CoinID, EventLogConfig, EventLogConfig_BasicFieldType, EventLogConfig_Field, LogLevel } from '@sentio/protos';
import { MapStateStorage } from '@sentio/runtime';
import { BN } from 'fuels';
import { BigDecimal } from '@sentio/bigdecimal';
export interface Attribute<T> {
    [key: string]: Exclude<T | number | bigint | string | boolean | LogLevel | Attribute<T> | BN | BigDecimal | undefined, Promise<any>>;
}
export interface Event<T> extends Attribute<T> {
    distinctId?: string;
    severity?: LogLevel;
    message?: string;
}
export declare class EventLoggerState extends MapStateStorage<EventLogger> {
    static INSTANCE: EventLoggerState;
}
export declare class EventLoggerBinding {
    private readonly ctx;
    constructor(ctx: BaseContext);
    emit<T>(eventName: string, event: Event<T>): void;
}
export type BasicFieldType = EventLogConfig_BasicFieldType;
export declare const BasicFieldType: typeof EventLogConfig_BasicFieldType;
export type FieldType = CoinID | BasicFieldType | Fields;
export type Fields = {
    [key: string]: FieldType;
};
export interface EventLogOptions {
    fields: Fields;
}
export declare function fieldsToProtos(fields: Fields): EventLogConfig_Field[];
export declare class EventLogger {
    private readonly eventName;
    config: EventLogConfig;
    private constructor();
    static register(eventName: string, options?: EventLogOptions): EventLogger;
    emit<T>(ctx: BaseContext, event: Event<T>): void;
}
//# sourceMappingURL=event-logger.d.ts.map