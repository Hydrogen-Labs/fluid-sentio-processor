import { ProcessResult } from '@sentio/protos';
import { EventLoggerBinding } from './event-logger.js';
import { Meter } from './meter.js';
import { mergeProcessResults, PluginManager } from '@sentio/runtime';
import { ServerError, Status } from 'nice-grpc';
import { Store } from '../store/store.js';
export class BaseContext {
    meter;
    eventLogger;
    _store;
    baseLabels;
    active;
    _res = {
        counters: [],
        events: [],
        exports: [],
        gauges: [],
        states: {
            configUpdated: false
        }
    };
    update(res) {
        if (this.active) {
            this._res = mergeProcessResults([this._res, ProcessResult.fromPartial(res)]);
        }
        else {
            throw new ServerError(Status.INTERNAL, 'context not active, possible async function invoke without await');
        }
    }
    constructor(baseLabels) {
        this.meter = new Meter(this);
        this.eventLogger = new EventLoggerBinding(this);
        this.baseLabels = baseLabels || {};
        this.active = true;
        this.initStore();
    }
    stopAndGetResult() {
        if (this.active) {
            this.active = false;
            return this._res;
        }
        else {
            throw new ServerError(Status.INTERNAL, "Can't get result from same context twice");
        }
    }
    metadataCache = new Map();
    getMetaData(name, labels) {
        if (Object.keys(labels).length === 0) {
            let metadata = this.metadataCache.get(name);
            if (!metadata) {
                metadata = {
                    ...this.baseLabels,
                    ...this.getMetaDataInternal(name, labels)
                };
                this.metadataCache.set(name, metadata);
            }
            return metadata;
        }
        return {
            ...this.baseLabels,
            ...this.getMetaDataInternal(name, labels)
        };
    }
    get store() {
        if (this._store == null) {
            console.warn('Store is not set, please initialize the processor with your database schema first.');
        }
        return this._store;
    }
    // this method must be called within the dbContextLocalStorage scope
    initStore() {
        const dbContext = PluginManager.INSTANCE.dbContextLocalStorage.getStore();
        if (dbContext) {
            this._store = new Store(dbContext);
        }
    }
}
//# sourceMappingURL=base-context.js.map