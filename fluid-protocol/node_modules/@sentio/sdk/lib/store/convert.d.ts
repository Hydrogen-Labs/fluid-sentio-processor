import { RichValue } from '@sentio/protos';
import type { String, Int, Float, ID, Bytes, Timestamp, Boolean } from './types.js';
import { BigDecimal } from '@sentio/bigdecimal';
export interface ValueConverter<T> {
    from: (value: T) => RichValue;
    to: (value: RichValue) => T;
    required?: boolean;
    isArray?: boolean;
    isRelation?: boolean;
    relationName?: string;
}
export declare const ValueRequiredError: Error;
export declare function required_<T>(converter: ValueConverter<T | undefined>): ValueConverter<T>;
export declare function array_<T>(converter: ValueConverter<T>): ValueConverter<T[]>;
export declare function enumerate_<T extends string | number>(values: Record<T, string>): ValueConverter<T>;
export declare function objectId_<T>(entityName: string): ValueConverter<T | ID>;
export declare const StringConverter: ValueConverter<String | undefined>;
export declare const IntConverter: ValueConverter<Int | undefined>;
export declare const FloatConverter: ValueConverter<Float | undefined>;
export declare const BooleanConverter: ValueConverter<Boolean | undefined>;
export declare const TimestampConverter: ValueConverter<Timestamp | undefined>;
export declare const BytesConverter: ValueConverter<Bytes | undefined>;
export declare const IDConverter: ValueConverter<ID | undefined>;
export declare const BigDecimalConverter: ValueConverter<BigDecimal | undefined>;
export declare const BigIntConverter: ValueConverter<bigint | undefined>;
export declare function bytesToBigInt(bytes: Uint8Array): bigint;
export declare function toBigInteger(a: bigint): {
    negative: boolean;
    data: Uint8Array;
};
export declare const TypeConverters: Record<string, ValueConverter<any>>;
//# sourceMappingURL=convert.d.ts.map