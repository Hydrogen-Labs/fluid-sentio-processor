import { BigDecimalConverter, BigIntConverter } from './convert.js';
import { getEntityName } from './store.js';
export class AbstractEntity {
    _data;
    toJSON() {
        const obj = {};
        for (const [field, value] of Object.entries(this._data.fields)) {
            obj[field] = toJSValue(value);
        }
        return obj;
    }
    toString() {
        const obj = this.toJSON();
        return `${getEntityName(this)} ${JSON.stringify(obj)}`;
    }
}
function toJSValue(value) {
    if (value.nullValue) {
        return null;
    }
    if (value.bytesValue) {
        return value.bytesValue;
    }
    if (value.stringValue) {
        return value.stringValue;
    }
    if (value.bigdecimalValue) {
        return BigDecimalConverter.to(value);
    }
    if (value.bigintValue) {
        return BigIntConverter.to(value);
    }
    if (value.boolValue != undefined) {
        return value.boolValue;
    }
    if (value.timestampValue) {
        return value.timestampValue;
    }
    if (value.floatValue) {
        return value.floatValue;
    }
    if (value.intValue) {
        return value.intValue;
    }
    if (value.listValue) {
        return value.listValue.values.map(toJSValue);
    }
    throw new Error('Unknown value type:' + JSON.stringify(value));
}
//# sourceMappingURL=types.js.map