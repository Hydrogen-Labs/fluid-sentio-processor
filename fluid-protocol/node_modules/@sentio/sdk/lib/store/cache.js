export class LocalCache {
    cache = new Map();
    getKey(entity, id) {
        return `${entity}-${id}`;
    }
    has(entity, id) {
        return this.cache.has(this.getKey(entity, id));
    }
    get(entity, id) {
        return this.cache.get(this.getKey(entity, id));
    }
    set(entity) {
        const id = entity.data?.fields['id'].stringValue;
        if (id) {
            const key = this.getKey(entity.entity, id);
            let fields = entity.data?.fields || {};
            if (this.cache.has(key)) {
                const existFields = this.cache.get(key)?.data?.fields || {};
                fields = Object.assign(existFields, fields);
            }
            this.cache.set(key, {
                ...entity,
                data: {
                    fields
                }
            });
        }
    }
    delete(entityName, id) {
        if (id) {
            this.cache.delete(this.getKey(entityName, id));
        }
    }
}
//# sourceMappingURL=cache.js.map