import { Endpoints, ProcessorServiceImpl, State } from '@sentio/runtime';
import { CHAIN_MAP } from '@sentio/chain';
import { AptosFacet } from './aptos-facet.js';
import { SolanaFacet } from './solana-facet.js';
import { EthFacet } from './eth-facet.js';
import { SuiFacet } from './sui-facet.js';
import { FuelFacet } from './fuel-facet.js';
import { CosmosFacet } from './cosmos-facet.js';
import { StarknetFacet } from './starknet-facet.js';
import { BTCFacet } from './btc-facet.js';
export const TEST_CONTEXT = {};
export function cleanTest() {
    State.reset();
}
export class TestProcessorServer {
    service;
    contractConfigs;
    accountConfigs;
    aptos;
    eth;
    solana;
    sui;
    fuel;
    cosmos;
    starknet;
    btc;
    constructor(loader, httpEndpoints = {}) {
        cleanTest();
        this.service = new ProcessorServiceImpl(loader);
        this.aptos = new AptosFacet(this);
        this.solana = new SolanaFacet(this);
        this.eth = new EthFacet(this);
        this.sui = new SuiFacet(this);
        this.fuel = new FuelFacet(this);
        this.cosmos = new CosmosFacet(this);
        this.starknet = new StarknetFacet(this);
        this.btc = new BTCFacet(this);
        for (const k in CHAIN_MAP) {
            const http = httpEndpoints[k] || '';
            Endpoints.INSTANCE.chainServer.set(k, http);
        }
    }
    async start(request = { templateInstances: [] }, context = TEST_CONTEXT) {
        const res = await this.service.start(request, context);
        const config = await this.getConfig({});
        this.contractConfigs = config.contractConfigs;
        this.accountConfigs = config.accountConfigs;
        return res;
    }
    stop(request, context = TEST_CONTEXT) {
        return this.service.stop(request, context);
    }
    getConfig(request, context = TEST_CONTEXT) {
        return this.service.getConfig(request, context);
    }
    processBindings(request, context = TEST_CONTEXT) {
        return this.service.processBindings(request, context);
    }
    processBinding(request, context = TEST_CONTEXT) {
        return this.service.processBindings({ bindings: [request] }, context);
    }
    processBindingsStream(requests, context) {
        throw new Error('Method not implemented.');
    }
    preprocessBindingsStream(requests, context) {
        throw new Error('Method not implemented.');
    }
}
//# sourceMappingURL=test-processor-server.js.map