import { HandlerType } from '@sentio/protos';
import { FuelNetwork } from '../fuel/index.js';
export class FuelFacet {
    server;
    constructor(server) {
        this.server = server;
    }
    testOnTransaction(transaction, network = FuelNetwork.TEST_NET) {
        const bindings = this.buildBinding(transaction, network);
        if (!bindings) {
            throw Error('Invalid test transaction: ' + JSON.stringify(transaction));
        }
        return this.server.processBindings({
            bindings
        });
    }
    buildBinding(transaction, network) {
        const res = [];
        for (const config of this.server.contractConfigs) {
            if (config.contract?.chainId !== network) {
                continue;
            }
            for (const callConfig of config.fuelCallConfigs) {
                const binding = {
                    data: {
                        fuelCall: {
                            transaction,
                            timestamp: new Date()
                        }
                    },
                    handlerIds: [callConfig.handlerId],
                    handlerType: HandlerType.FUEL_CALL
                };
                const filter = callConfig.filters[0]?.function;
                if (filter) {
                    // filter out by tx receipt
                    for (const receipt of transaction.status.receipts || []) {
                        if (receipt.receiptType == 'CALL' && receipt.param1 == filter) {
                            res.push(binding);
                        }
                    }
                }
                else {
                    res.push(binding);
                }
            }
            for (const logConfig of config.fuelLogConfigs) {
                const binding = {
                    data: {
                        fuelCall: {
                            transaction,
                            timestamp: new Date()
                        }
                    },
                    handlerIds: [logConfig.handlerId],
                    handlerType: HandlerType.FUEL_CALL
                };
                const logIds = logConfig.logIds;
                for (const receipt of transaction.status.receipts || []) {
                    if ((receipt.receiptType == 'LOG' || receipt.receiptType == 'LOG_DATA') && logIds.includes(receipt.rb)) {
                        res.push(binding);
                        break;
                    }
                }
            }
            for (const assetConfig of config.assetConfigs) {
                const binding = {
                    data: {
                        fuelCall: {
                            transaction,
                            timestamp: new Date()
                        }
                    },
                    handlerIds: [assetConfig.handlerId],
                    handlerType: HandlerType.FUEL_CALL
                };
                res.push(binding);
            }
        }
        return res;
    }
}
//# sourceMappingURL=fuel-facet.js.map