import { HandlerType } from '@sentio/protos';
import { CosmosNetwork } from '../cosmos/network.js';
export class CosmosFacet {
    server;
    constructor(server) {
        this.server = server;
    }
    testOnTransaction(transaction, network = CosmosNetwork.INJECTIVE_TESTNET) {
        const bindings = this.buildBinding(transaction, network);
        if (!bindings) {
            throw Error('Invalid test transaction: ' + JSON.stringify(transaction));
        }
        return this.server.processBindings({
            bindings
        });
    }
    buildBinding(transaction, network) {
        const res = [];
        for (const config of this.server.contractConfigs) {
            if (config.contract?.chainId !== network) {
                continue;
            }
            for (const logConfig of config.cosmosLogConfigs) {
                const binding = {
                    data: {
                        cosmosCall: {
                            transaction,
                            timestamp: new Date()
                        }
                    },
                    handlerIds: [logConfig.handlerId],
                    handlerType: HandlerType.COSMOS_CALL
                };
                const logFilters = logConfig.logFilters;
                for (const log of transaction.logs || []) {
                    if (log.events.find((e) => logFilters.includes(e.type))) {
                        res.push(binding);
                        break;
                    }
                }
            }
        }
        return res;
    }
}
//# sourceMappingURL=cosmos-facet.js.map