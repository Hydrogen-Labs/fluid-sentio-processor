import { TestProcessorServer } from './test-processor-server.js';
import { DataBinding, ProcessBindingResponse } from '@sentio/protos';
import { Trace } from '../eth/eth.js';
import { BlockParams, LogParams } from 'ethers/providers';
import { ChainId, EthChainId } from '@sentio/chain';
export declare class EthFacet {
    server: TestProcessorServer;
    constructor(server: TestProcessorServer);
    testTrace(trace: Trace, network?: EthChainId): Promise<ProcessBindingResponse>;
    testTraces(traces: Trace[], network?: EthChainId): Promise<ProcessBindingResponse>;
    buildTraceBinding(trace: Trace, network?: ChainId): DataBinding | undefined;
    testLog(log: LogParams, network?: EthChainId): Promise<ProcessBindingResponse>;
    testLogs(logs: LogParams[], network?: EthChainId): Promise<ProcessBindingResponse>;
    buildLogBinding(log: LogParams, network?: EthChainId): DataBinding | undefined;
    testAccountLog(address: string, log: LogParams, network?: EthChainId): Promise<ProcessBindingResponse>;
    testAccountLogs(address: string, logs: LogParams[], network?: EthChainId): Promise<ProcessBindingResponse>;
    buildAccountLogBinding(address: string, log: LogParams, network?: EthChainId): DataBinding | undefined;
    testBlock(block: Partial<BlockParams> & {
        number: number;
    }, network?: EthChainId): Promise<ProcessBindingResponse>;
    testBlocks(blocks: (Partial<BlockParams> & {
        number: number;
    })[], network?: EthChainId): Promise<ProcessBindingResponse>;
    buildBlockBinding(block: Partial<BlockParams> & {
        number: number;
    }, network?: EthChainId): DataBinding;
}
//# sourceMappingURL=eth-facet.d.ts.map