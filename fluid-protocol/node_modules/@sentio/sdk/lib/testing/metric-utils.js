import { BigDecimal } from '../core/index.js';
import { bytesToBigInt } from '../utils/conversion.js';
export function MetricValueToNumber(v) {
    if (v === undefined) {
        return undefined;
    }
    if (v.doubleValue !== undefined) {
        return v.doubleValue;
    }
    if (v.bigInteger !== undefined) {
        let intValue = bytesToBigInt(v.bigInteger.data);
        if (v.bigInteger.negative) {
            intValue = -intValue;
        }
        return intValue;
    }
    if (v.bigDecimal !== undefined) {
        return new BigDecimal(v.bigDecimal);
    }
    return undefined;
}
export function firstCounterValue(result, name) {
    if (!result) {
        return undefined;
    }
    for (const counter of result.counters) {
        if (counter.metadata?.name === name) {
            return MetricValueToNumber(counter.metricValue);
        }
    }
    return undefined;
}
export function firstGaugeValue(result, name) {
    if (!result) {
        return undefined;
    }
    for (const gauge of result.gauges) {
        if (gauge.metadata?.name === name) {
            return MetricValueToNumber(gauge.metricValue);
        }
    }
    return undefined;
}
//# sourceMappingURL=metric-utils.js.map