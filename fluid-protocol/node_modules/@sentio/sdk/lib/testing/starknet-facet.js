import { HandlerType } from '@sentio/protos';
import { StarknetChainId } from '@sentio/chain';
export class StarknetFacet {
    server;
    constructor(server) {
        this.server = server;
    }
    testOnEvents(events, network = StarknetChainId.STARKNET_SEPOLIA) {
        const bindings = this.buildBinding(events, network);
        if (!bindings) {
            throw Error('Invalid test : ' + JSON.stringify(events));
        }
        return this.server.processBindings({
            bindings
        });
    }
    buildBinding(events, network) {
        const res = [];
        const data = Array.isArray(events) ? events : [events];
        for (const event of data) {
            for (const config of this.server.contractConfigs) {
                if (config.contract?.chainId !== network) {
                    continue;
                }
                for (const logConfig of config.starknetEventConfigs) {
                    const binding = {
                        data: {
                            starknetEvents: {
                                result: event,
                                timestamp: new Date()
                            }
                        },
                        handlerIds: [logConfig.handlerId],
                        handlerType: HandlerType.STARKNET_EVENT
                    };
                    const logFilters = logConfig.filters;
                    const keys = event.keys;
                    for (const key of keys) {
                        for (const logFilter of logFilters) {
                            if (logFilter.keys.includes(key)) {
                                res.push(binding);
                                return res;
                            }
                        }
                    }
                }
            }
        }
        return res;
    }
}
//# sourceMappingURL=starknet-facet.js.map