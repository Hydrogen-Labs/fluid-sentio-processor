import { AccountConfig, ContractConfig, DataBinding, DeepPartial, Empty, PreprocessStreamRequest, PreprocessStreamResponse, ProcessBindingResponse, ProcessBindingsRequest, ProcessConfigRequest, ProcessConfigResponse, ProcessorServiceImplementation, ProcessStreamRequest, ProcessStreamResponse, ServerStreamingMethodResult, StartRequest } from '@sentio/protos';
import { CallContext } from 'nice-grpc-common';
import { ProcessorServiceImpl } from '@sentio/runtime';
import { AptosFacet } from './aptos-facet.js';
import { SolanaFacet } from './solana-facet.js';
import { EthFacet } from './eth-facet.js';
import { SuiFacet } from './sui-facet.js';
import { FuelFacet } from './fuel-facet.js';
import { CosmosFacet } from './cosmos-facet.js';
import { StarknetFacet } from './starknet-facet.js';
import { BTCFacet } from './btc-facet.js';
export declare const TEST_CONTEXT: CallContext;
export declare function cleanTest(): void;
export declare class TestProcessorServer implements ProcessorServiceImplementation {
    service: ProcessorServiceImpl;
    contractConfigs: ContractConfig[];
    accountConfigs: AccountConfig[];
    aptos: AptosFacet;
    eth: EthFacet;
    solana: SolanaFacet;
    sui: SuiFacet;
    fuel: FuelFacet;
    cosmos: CosmosFacet;
    starknet: StarknetFacet;
    btc: BTCFacet;
    constructor(loader: () => Promise<any>, httpEndpoints?: Record<string, string>);
    start(request?: StartRequest, context?: CallContext): Promise<Empty>;
    stop(request: Empty, context?: CallContext): Promise<Empty>;
    getConfig(request: ProcessConfigRequest, context?: CallContext): Promise<ProcessConfigResponse>;
    processBindings(request: ProcessBindingsRequest, context?: CallContext): Promise<ProcessBindingResponse>;
    processBinding(request: DataBinding, context?: CallContext): Promise<ProcessBindingResponse>;
    processBindingsStream(requests: AsyncIterable<ProcessStreamRequest>, context: CallContext): ServerStreamingMethodResult<DeepPartial<ProcessStreamResponse>>;
    preprocessBindingsStream(requests: AsyncIterable<PreprocessStreamRequest>, context: CallContext): ServerStreamingMethodResult<DeepPartial<PreprocessStreamResponse>>;
}
//# sourceMappingURL=test-processor-server.d.ts.map