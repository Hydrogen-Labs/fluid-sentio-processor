import * as fs from 'fs';
import chalk from 'chalk';
import path, { join } from 'path';
import { AptosCodegen as BaseAptosCodegen } from '@typemove/aptos/codegen';
import { AptosNetwork, getRpcEndpoint } from '../network.js';
import { SharedNetworkCodegen } from '../../move/shared-network-codegen.js';
export async function codegen(abisDir, outDir = join('src', 'types', 'aptos'), genExample = false, builtin = false) {
    if (!fs.existsSync(abisDir)) {
        return;
    }
    const gen = new AptosCodegen();
    const numFiles = await gen.generate(abisDir, outDir, builtin);
    console.log(chalk.green(`Generated ${numFiles} for Aptos`));
}
class AptosNetworkCodegen extends BaseAptosCodegen {
    moduleGenerator;
    constructor(network) {
        const endpoint = getRpcEndpoint(network);
        super(endpoint);
        this.moduleGenerator = new (class extends SharedNetworkCodegen {
            ADDRESS_TYPE = 'MoveAddressType';
            PREFIX = 'Aptos';
            SYSTEM_PACKAGE = '@typemove/aptos';
            generateNetworkOption(network) {
                switch (network) {
                    case AptosNetwork.MAIN_NET:
                        return 'MAIN_NET';
                    case AptosNetwork.MOVEMENT_MAIN_NET:
                        return 'MOVEMENT_MAIN_NET';
                    case AptosNetwork.MOVEMENT_TEST_NET:
                        return 'MOVEMENT_TEST_NET';
                    default:
                        return 'TEST_NET';
                }
            }
        })(network, this.chainAdapter);
    }
    generateModule(module, allEventStructs) {
        return this.moduleGenerator.generateModule(module, allEventStructs);
    }
    generateImports() {
        return (this.moduleGenerator.generateImports() +
            `import { Aptos, Account as AptosAccount, MoveAddressType, PendingTransactionResponse, InputGenerateTransactionOptions, MoveStructId } from '@aptos-labs/ts-sdk'`);
    }
    generateLoadAll(isSystem) {
        return this.moduleGenerator.generateLoadAll(isSystem);
    }
}
const MAINNET_CODEGEN = new AptosNetworkCodegen(AptosNetwork.MAIN_NET);
const TESTNET_CODEGEN = new AptosNetworkCodegen(AptosNetwork.TEST_NET);
const M2_MAINNET_CODEGEN = new AptosNetworkCodegen(AptosNetwork.MOVEMENT_MAIN_NET);
const M2_TESTNET_CODEGEN = new AptosNetworkCodegen(AptosNetwork.MOVEMENT_TEST_NET);
class AptosCodegen {
    async generate(srcDir, outputDir, builtin = false) {
        const num1 = await MAINNET_CODEGEN.generate(srcDir, outputDir, builtin);
        const num2 = await TESTNET_CODEGEN.generate(path.join(srcDir, 'testnet'), path.join(outputDir, 'testnet'), builtin);
        const num3 = await M2_MAINNET_CODEGEN.generate(path.join(srcDir, 'm2-mainnet'), path.join(outputDir, 'm2-mainnet'), builtin);
        const num4 = await M2_TESTNET_CODEGEN.generate(path.join(srcDir, 'm2-testnet'), path.join(outputDir, 'm2-testnet'), builtin);
        return num1 + num2 + num3 + num4;
    }
}
//# sourceMappingURL=codegen.js.map