import { ListStateStorage } from '@sentio/runtime';
import { AptosResourcesContext } from './context.js';
import { AptosBindOptions } from './network.js';
import { AptosResourcesProcessor } from './aptos-processor.js';
import { HandleInterval, MoveAccountFetchConfig } from '@sentio/protos';
import { MoveResource } from '@aptos-labs/ts-sdk';
import { PromiseOrVoid } from '../core/index.js';
export declare class AptosResourceProcessorTemplateState extends ListStateStorage<AptosResourceProcessorTemplate> {
    static INSTANCE: AptosResourceProcessorTemplateState;
}
declare class Handler {
    type?: string;
    checkpointInterval?: HandleInterval;
    timeIntervalInMinutes?: HandleInterval;
    handler: (resources: MoveResource[], ctx: AptosResourcesContext) => PromiseOrVoid;
    fetchConfig: MoveAccountFetchConfig;
}
export declare class AptosResourceProcessorTemplate {
    id: number;
    binds: Set<string>;
    handlers: Handler[];
    constructor();
    createProcessor(options: AptosBindOptions): AptosResourcesProcessor;
    bind(options: AptosBindOptions, ctx: AptosResourcesContext): void;
    protected onInterval(handler: (resources: MoveResource[], ctx: AptosResourcesContext) => PromiseOrVoid, timeInterval: HandleInterval | undefined, checkpointInterval: HandleInterval | undefined, type: string | undefined, fetchConfig: Partial<MoveAccountFetchConfig> | undefined): this;
    onTimeInterval(handler: (resources: MoveResource[], ctx: AptosResourcesContext) => PromiseOrVoid, timeIntervalInMinutes?: number, backfillTimeIntervalInMinutes?: number, type?: string, fetchConfig?: Partial<MoveAccountFetchConfig>): this;
    onVersionInterval(handler: (resources: MoveResource[], ctx: AptosResourcesContext) => PromiseOrVoid, checkpointInterval?: number, backfillCheckpointInterval?: number, type?: string, fetchConfig?: Partial<MoveAccountFetchConfig>): this;
}
export {};
//# sourceMappingURL=aptos-resource-processor-template.d.ts.map