import { MoveCoder } from './index.js';
import { Event, WriteSetChangeWriteResource, MoveResource, UserTransactionResponse, EntryFunctionPayloadResponse, WriteSetChangeDeleteResource } from '@aptos-labs/ts-sdk';
import { AptosBindOptions, AptosNetwork } from './network.js';
import { AptosContext, AptosResourcesContext } from './context.js';
import { ListStateStorage } from '@sentio/runtime';
import { MoveFetchConfig, Data_AptResource, HandleInterval, ProcessResult, Data_AptEvent, Data_AptCall, MoveAccountFetchConfig } from '@sentio/protos';
import { CallHandler, EventFilter, EventHandler, FunctionNameAndCallFilter, ResourceChangeHandler } from '../move/index.js';
import { Labels, PromiseOrVoid } from '../core/index.js';
export declare const DEFAULT_RESOURCE_FETCH_CONFIG: MoveAccountFetchConfig;
export type ResourceChange = WriteSetChangeWriteResource | WriteSetChangeDeleteResource;
type IndexConfigure = {
    address: string;
    network: AptosNetwork;
    startVersion: bigint;
    baseLabels?: Labels;
};
declare class ResourceHandlder {
    type?: string;
    versionInterval?: HandleInterval;
    timeIntervalInMinutes?: HandleInterval;
    handler: (resource: Data_AptResource) => Promise<ProcessResult>;
    fetchConfig: MoveAccountFetchConfig;
}
export declare class AptosProcessorState extends ListStateStorage<AptosBaseProcessor> {
    static INSTANCE: AptosProcessorState;
}
export declare class AptosBaseProcessor {
    readonly moduleName: string;
    config: IndexConfigure;
    eventHandlers: EventHandler<Data_AptEvent>[];
    callHandlers: CallHandler<Data_AptCall>[];
    resourceHandlers: ResourceChangeHandler<Data_AptResource>[];
    coder: MoveCoder;
    constructor(moduleName: string, options: AptosBindOptions);
    protected onMoveEvent(handler: (event: Event, ctx: AptosContext) => void, filter: EventFilter | EventFilter[], fetchConfig?: Partial<MoveFetchConfig>): this;
    protected onEntryFunctionCall(handler: (call: EntryFunctionPayloadResponse, ctx: AptosContext) => PromiseOrVoid, filter: FunctionNameAndCallFilter | FunctionNameAndCallFilter[], fetchConfig?: Partial<MoveFetchConfig>): this;
    onTransaction(handler: (transaction: UserTransactionResponse, ctx: AptosContext) => PromiseOrVoid, includedFailed?: boolean, fetchConfig?: Partial<MoveFetchConfig>): this;
    onEvent(handler: (event: Event, ctx: AptosContext) => void, fetchConfig?: Partial<MoveFetchConfig>): this;
    onResourceChange(handler: (changes: ResourceChange[], ctx: AptosResourcesContext) => PromiseOrVoid, type: string): this;
    getChainId(): string;
}
export declare class AptosModulesProcessor extends AptosBaseProcessor {
    private constructor();
    static bind(options: AptosBindOptions): AptosModulesProcessor;
}
export declare class AptosResourceProcessorState extends ListStateStorage<AptosResourcesProcessor> {
    static INSTANCE: AptosResourceProcessorState;
}
export declare class AptosResourcesProcessor {
    config: IndexConfigure;
    resourcesHandlers: ResourceHandlder[];
    static bind(options: AptosBindOptions): AptosResourcesProcessor;
    protected constructor(options: AptosBindOptions);
    getChainId(): string;
    onInterval(handler: (resources: MoveResource[], ctx: AptosResourcesContext) => PromiseOrVoid, timeInterval: HandleInterval | undefined, versionInterval: HandleInterval | undefined, type: string | undefined, fetchConfig: Partial<MoveAccountFetchConfig> | undefined): this;
    onTimeInterval(handler: (resources: MoveResource[], ctx: AptosResourcesContext) => PromiseOrVoid, timeIntervalInMinutes?: number, backfillTimeIntervalInMinutes?: number, type?: string, fetchConfig?: Partial<MoveAccountFetchConfig>): this;
    onVersionInterval(handler: (resources: MoveResource[], ctx: AptosResourcesContext) => PromiseOrVoid, versionInterval?: number, backfillVersionInterval?: number, typePrefix?: string, fetchConfig?: Partial<MoveAccountFetchConfig>): this;
    onResourceChange(handler: (changes: ResourceChange[], ctx: AptosResourcesContext) => PromiseOrVoid, typeOrPrefix: string): this;
}
export {};
//# sourceMappingURL=aptos-processor.d.ts.map