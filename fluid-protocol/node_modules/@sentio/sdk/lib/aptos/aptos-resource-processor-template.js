import { ListStateStorage } from '@sentio/runtime';
import { TemplateInstanceState } from '../core/template.js';
import { AptosResourcesProcessor, DEFAULT_RESOURCE_FETCH_CONFIG } from './aptos-processor.js';
export class AptosResourceProcessorTemplateState extends ListStateStorage {
    static INSTANCE = new AptosResourceProcessorTemplateState();
}
class Handler {
    type;
    checkpointInterval;
    timeIntervalInMinutes;
    handler;
    fetchConfig;
}
export class AptosResourceProcessorTemplate {
    id;
    binds = new Set();
    handlers = [];
    constructor() {
        this.id = AptosResourceProcessorTemplateState.INSTANCE.getValues().length;
        AptosResourceProcessorTemplateState.INSTANCE.addValue(this);
    }
    createProcessor(options) {
        return AptosResourcesProcessor.bind(options);
    }
    bind(options, ctx) {
        options.network = options.network || ctx.network;
        options.startVersion = options.startVersion || ctx.version;
        const id = options.address;
        const sig = [options.network, id].join('_');
        if (this.binds.has(sig)) {
            console.log(`Same object id can be bind to one template only once, ignore duplicate bind: ${sig}`);
            return;
        }
        this.binds.add(sig);
        const processor = this.createProcessor(options);
        for (const h of this.handlers) {
            processor.onInterval(h.handler, h.timeIntervalInMinutes, h.checkpointInterval, h.type, h.fetchConfig);
        }
        const config = processor.config;
        ctx.update({
            states: {
                configUpdated: true
            }
        });
        TemplateInstanceState.INSTANCE.addValue({
            templateId: this.id,
            contract: {
                name: '',
                chainId: config.network,
                address: config.address,
                abi: ''
            },
            startBlock: config.startVersion,
            endBlock: 0n,
            baseLabels: config.baseLabels
        });
    }
    onInterval(handler, timeInterval, checkpointInterval, type, fetchConfig) {
        this.handlers.push({
            handler: handler,
            timeIntervalInMinutes: timeInterval,
            checkpointInterval: checkpointInterval,
            type,
            fetchConfig: { ...DEFAULT_RESOURCE_FETCH_CONFIG, ...fetchConfig }
        });
        return this;
    }
    onTimeInterval(handler, timeIntervalInMinutes = 60, backfillTimeIntervalInMinutes = 240, type, fetchConfig) {
        return this.onInterval(handler, {
            recentInterval: timeIntervalInMinutes,
            backfillInterval: backfillTimeIntervalInMinutes
        }, undefined, type, fetchConfig);
    }
    onVersionInterval(handler, checkpointInterval = 100000, backfillCheckpointInterval = 400000, type, fetchConfig) {
        return this.onInterval(handler, undefined, { recentInterval: checkpointInterval, backfillInterval: backfillCheckpointInterval }, type, fetchConfig);
    }
}
//# sourceMappingURL=aptos-resource-processor-template.js.map