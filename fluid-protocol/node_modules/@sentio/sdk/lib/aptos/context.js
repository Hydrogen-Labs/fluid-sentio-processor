import { normalizeLabels } from '../index.js';
import { Aptos, AptosConfig } from '@aptos-labs/ts-sdk';
import { defaultMoveCoder } from './move-coder.js';
import { Endpoints } from '@sentio/runtime';
import { ServerError, Status } from 'nice-grpc';
import { MoveAccountContext, MoveContext } from '../move/index.js';
export class AptosContext extends MoveContext {
    moduleName;
    version;
    transaction;
    eventIndex;
    coder;
    constructor(moduleName, network, address, version, transaction, eventIndex, baseLabels) {
        super(baseLabels);
        this.address = address.toLowerCase();
        this.network = network;
        this.moduleName = moduleName;
        this.version = version;
        this.eventIndex = eventIndex;
        this.coder = defaultMoveCoder(network);
        if (transaction) {
            this.transaction = transaction;
        }
    }
    getChainId() {
        return this.network;
    }
    getTimestamp() {
        return parseInt(this.transaction.timestamp);
    }
    getMetaDataInternal(name, labels) {
        return {
            address: this.address,
            contractName: this.moduleName,
            blockNumber: this.version,
            transactionIndex: 0,
            transactionHash: this.transaction?.hash || '', // TODO
            logIndex: this.eventIndex,
            chainId: this.getChainId(),
            name: name,
            labels: normalizeLabels(labels)
        };
    }
    getClient() {
        let chainServer = Endpoints.INSTANCE.chainServer.get(this.network);
        if (!chainServer) {
            throw new ServerError(Status.INTERNAL, 'RPC endpoint not provided');
        }
        chainServer = chainServer + '/v1';
        return new Aptos(new AptosConfig({ fullnode: chainServer }));
    }
}
export class AptosResourcesContext extends MoveAccountContext {
    version;
    timestampInMicros;
    coder;
    constructor(network, address, version, timestampInMicros, baseLabels) {
        super(baseLabels);
        this.address = address;
        this.network = network;
        this.version = version;
        this.timestampInMicros = timestampInMicros;
        this.coder = defaultMoveCoder(network);
    }
    getChainId() {
        return this.network;
    }
    getTimestamp() {
        return this.timestampInMicros;
    }
    getMetaDataInternal(name, labels) {
        return {
            address: this.address,
            contractName: 'resources',
            blockNumber: this.version,
            transactionIndex: 0,
            transactionHash: '',
            logIndex: 0,
            chainId: this.getChainId(),
            name: name,
            labels: normalizeLabels(labels)
        };
    }
    getClient() {
        let chainServer = Endpoints.INSTANCE.chainServer.get(this.network);
        if (!chainServer) {
            throw new ServerError(Status.INTERNAL, 'RPC endpoint not provided');
        }
        chainServer = chainServer + '/v1';
        return new Aptos(new AptosConfig({ fullnode: chainServer }));
    }
}
//# sourceMappingURL=context.js.map