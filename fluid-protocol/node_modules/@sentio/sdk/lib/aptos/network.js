import { AptosChainId } from '@sentio/chain';
import { Aptos, AptosConfig } from '@aptos-labs/ts-sdk';
import { Endpoints } from '@sentio/runtime';
export const AptosNetwork = {
    MAIN_NET: AptosChainId.APTOS_MAINNET,
    TEST_NET: AptosChainId.APTOS_TESTNET,
    // DEV_NET: AptosChainId.APTOS_DEVNET,
    MOVEMENT_MAIN_NET: AptosChainId.APTOS_MOVEMENT_MAINNET,
    MOVEMENT_TEST_NET: AptosChainId.APTOS_MOVEMENT_TESTNET
};
export class AptosBindOptions {
    address;
    network = AptosNetwork.MAIN_NET;
    client;
    startVersion;
    baseLabels;
}
export function getRpcEndpoint(network) {
    switch (network) {
        case AptosNetwork.TEST_NET:
            return 'https://testnet.aptoslabs.com/v1';
        case AptosNetwork.MOVEMENT_TEST_NET:
            return 'https://aptos.testnet.suzuka.movementlabs.xyz/v1';
        case AptosNetwork.MOVEMENT_MAIN_NET:
            return 'https://mainnet.m1.movementlabs.xyz/v1';
    }
    return 'https://mainnet.aptoslabs.com/v1';
}
export function getClient(network) {
    let chainServer = Endpoints.INSTANCE.chainServer.get(network);
    if (!chainServer) {
        chainServer = getRpcEndpoint(network);
        // throw new ServerError(Status.INTERNAL, 'RPC endpoint not provided')
    }
    else {
        chainServer = chainServer + '/v1';
    }
    return new Aptos(new AptosConfig({ fullnode: chainServer }));
}
//# sourceMappingURL=network.js.map