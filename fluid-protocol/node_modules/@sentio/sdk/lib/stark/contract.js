import { Contract, CallData, splitArgsAndOptions } from 'starknet';
export class StarknetContractView {
    abi;
    address;
    provider;
    blockNumber;
    _contract;
    constructor(abi, address, provider, blockNumber) {
        this.abi = abi;
        this.address = address;
        this.provider = provider;
        this.blockNumber = blockNumber;
        this._contract = new Contract(abi, address, provider);
        const callData = new CallData(abi);
        for (const fn of callData.abi) {
            if (fn.type == 'function' && fn.state_mutability == 'view') {
                const signature = fn.name;
                Object.defineProperty(this, signature, {
                    enumerable: true,
                    writable: false,
                    value: buildCall(this, signature)
                });
            }
        }
    }
    call(method, args, callOptions) {
        return this._contract.call(method, args, {
            ...callOptions,
            blockIdentifier: this.blockNumber
        });
    }
}
function buildCall(contract, name) {
    return async function (...args) {
        const params = splitArgsAndOptions(args);
        return contract.call(name, params.args, {
            parseRequest: true,
            parseResponse: true,
            ...params.options
        });
    };
}
//# sourceMappingURL=contract.js.map