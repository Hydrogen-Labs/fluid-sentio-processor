import { Data_StarknetEvent, ProcessResult } from '@sentio/protos';
import { ParsedEvent } from 'starknet';
import { StarknetContext } from './context.js';
import { StarknetEvent } from './event.js';
import { ListStateStorage } from '@sentio/runtime';
import { StarknetProcessorConfig } from './types.js';
import { StarknetContractView } from './contract.js';
export declare class StarknetProcessor {
    readonly config: StarknetProcessorConfig;
    callHandlers: CallHandler<Data_StarknetEvent>[];
    private provider;
    static bind(config: StarknetProcessorConfig): StarknetProcessor;
    classHash: string;
    constructor(config: StarknetProcessorConfig);
    configure(): Promise<void>;
    onEvent(event: string | string[], handler: (events: StarknetEvent<ParsedEvent>, ctx: StarknetContext<StarknetContractView>) => void | Promise<void>): this;
}
export type CallHandler<T> = {
    handler: (call: T) => Promise<ProcessResult>;
    eventFilter?: string[];
};
export declare class StarknetProcessorState extends ListStateStorage<StarknetProcessor> {
    static INSTANCE: StarknetProcessorState;
}
export declare abstract class AbstractStarknetProcessor {
    readonly abi: any;
    readonly config: StarknetProcessorConfig;
    private readonly processor;
    protected constructor(abi: any, config: StarknetProcessorConfig);
    onEvent<T, C>(eventName: string, structName: string, handler: (event: StarknetEvent<T>, ctx: StarknetContext<C>) => Promise<void>): this;
}
//# sourceMappingURL=starknet-processor.d.ts.map