import { BaseContext, normalizeLabels } from '../core/index.js';
import { StarknetContractView } from './contract.js';
class AbstractContext extends BaseContext {
    provider;
    contractAddress;
    chainId;
    blockNumber;
    blockHash;
    transactionHash;
    logIndex;
    contractName;
    abi;
    constructor(provider, contractAddress, chainId, blockNumber, blockHash, transactionHash, logIndex = -1, contractName = '', abi) {
        super({});
        this.provider = provider;
        this.contractAddress = contractAddress;
        this.chainId = chainId;
        this.blockNumber = blockNumber;
        this.blockHash = blockHash;
        this.transactionHash = transactionHash;
        this.logIndex = logIndex;
        this.contractName = contractName;
        this.abi = abi;
    }
    getMetaDataInternal(name, labels) {
        return {
            address: this.contractAddress,
            contractName: '',
            blockNumber: BigInt(this.blockNumber),
            transactionIndex: 0,
            transactionHash: this.transactionHash,
            chainId: this.getChainId(),
            name: name,
            logIndex: this.logIndex,
            labels: normalizeLabels(labels)
        };
    }
    getChainId() {
        return this.chainId;
    }
}
export class StarknetContext extends AbstractContext {
    classHash;
    _contract;
    constructor(config, provider, blockNumber, blockHash, transaction_hash, logIndex, classHash) {
        super(provider, config.address, config.chainId, blockNumber, blockHash, transaction_hash, logIndex, config.name ?? classHash.slice(0, 8), config.abi);
        this.classHash = classHash;
    }
    getContract() {
        if (!this.abi) {
            throw new Error('abi not found');
        }
        if (!this._contract) {
            this._contract = new StarknetContractView(this.abi, this.contractAddress, this.provider, this.blockNumber);
        }
        return this._contract;
    }
}
//# sourceMappingURL=context.js.map