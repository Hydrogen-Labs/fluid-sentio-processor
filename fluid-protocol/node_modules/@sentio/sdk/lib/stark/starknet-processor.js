import { StarknetChainId } from '@sentio/chain';
import { CallData, constants, events, RpcProvider } from 'starknet';
import { StarknetContext } from './context.js';
import { StarknetEvent } from './event.js';
import { ListStateStorage, mergeProcessResults } from '@sentio/runtime';
export class StarknetProcessor {
    config;
    callHandlers = [];
    provider;
    static bind(config) {
        const processor = new StarknetProcessor(config);
        StarknetProcessorState.INSTANCE.addValue(processor);
        return processor;
    }
    classHash;
    constructor(config) {
        this.config = config;
    }
    async configure() {
        this.provider = new RpcProvider({
            nodeUrl: getRpcEndpoint(this.config.chainId)
        });
        const classHash = await this.provider.getClassHashAt(this.config.address);
        if (!classHash) {
            throw new Error("can't find the class hash defined at " + this.config.address);
        }
        this.classHash = classHash;
        if (!this.config.abi) {
            const clazz = await this.provider.getClass(classHash, 'latest');
            this.config.abi = clazz.abi;
        }
    }
    onEvent(event, handler) {
        const eventFilter = Array.isArray(event) ? event : [event];
        if (!this.config.abi) {
            throw new Error('abi not found');
        }
        const abi = this.config.abi;
        const callHandler = {
            handler: async (call) => {
                try {
                    const eventData = [call.result];
                    const abiEvents = events.getAbiEvents(abi);
                    const abiStructs = CallData.getAbiStruct(abi);
                    const abiEnums = CallData.getAbiEnum(abi);
                    const parsedEvents = events.parseEvents(eventData, abiEvents, abiStructs, abiEnums);
                    const results = [];
                    const { block_hash, block_number, transaction_hash, from_address } = call.result;
                    for (let i = 0; i < parsedEvents.length; i++) {
                        const ctx = new StarknetContext(this.config, this.provider, block_number, block_hash, transaction_hash, i, this.classHash);
                        const e = new StarknetEvent(from_address, transaction_hash, parsedEvents[i]);
                        try {
                            await handler(e, ctx);
                        }
                        catch (e) {
                            console.error(e);
                        }
                        results.push(ctx.stopAndGetResult());
                    }
                    return mergeProcessResults(results);
                }
                catch (e) {
                    console.error(e);
                    return {
                        gauges: [],
                        counters: [],
                        events: [],
                        exports: [],
                        states: {
                            configUpdated: false
                        }
                    };
                }
            },
            eventFilter
        };
        this.callHandlers.push(callHandler);
        return this;
    }
}
function getRpcEndpoint(chainId) {
    switch (chainId) {
        case StarknetChainId.STARKNET_MAINNET:
            return constants.NetworkName.SN_MAIN;
        default:
            return constants.NetworkName.SN_SEPOLIA;
    }
}
export class StarknetProcessorState extends ListStateStorage {
    static INSTANCE = new StarknetProcessorState();
}
export class AbstractStarknetProcessor {
    abi;
    config;
    processor;
    constructor(abi, config) {
        this.abi = abi;
        this.config = config;
        this.processor = new StarknetProcessor(config);
        StarknetProcessorState.INSTANCE.addValue(this.processor);
    }
    onEvent(eventName, structName, handler) {
        this.processor.onEvent(eventName, async (events, ctx) => {
            const eventData = events.data[structName];
            const e = new StarknetEvent(events.caller, events.transactionHash, eventData);
            await handler(e, ctx);
        });
        return this;
    }
}
//# sourceMappingURL=starknet-processor.js.map