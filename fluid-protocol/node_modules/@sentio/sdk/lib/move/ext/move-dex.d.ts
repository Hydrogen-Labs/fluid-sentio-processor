import { DecodedStruct, TypeDescriptor } from '@typemove/move';
import { BigDecimal } from '@sentio/bigdecimal';
import { Gauge } from '../../core/index.js';
import { MoveAccountContext, MoveContext } from '../move-context.js';
import { MoveCoinList } from './coin-list.js';
export interface SimpleCoinInfo {
    token_type: {
        type: string;
        account_address: string;
    };
    symbol: string;
    hippo_symbol?: string;
    decimals: number;
    bridge: string;
}
export interface MovePoolAdaptor<StructType, T> {
    getXReserve(pool: T): bigint;
    getYReserve(pool: T): bigint;
    getExtraPoolTags(pool: DecodedStruct<StructType, T>): any;
    poolType: TypeDescriptor<T>;
}
export declare class MoveDex<Network, ModuleType, StructType, EventType, ContextType extends MoveContext<Network, ModuleType, StructType | EventType>, AccountContextType extends MoveAccountContext<Network, ModuleType, StructType | EventType>, T> {
    coinList: MoveCoinList<Network>;
    poolAdaptor: MovePoolAdaptor<StructType, T>;
    volume: Gauge;
    volumeByCoin: Gauge;
    tvlAll: Gauge;
    tvlByPool: Gauge;
    tvlByCoin: Gauge;
    constructor(volume: Gauge, volumeByCoin: Gauge, tvlAll: Gauge, tvlByCoin: Gauge, tvlByPool: Gauge, poolAdaptor: MovePoolAdaptor<StructType, T>);
    recordTradingVolume(ctx: ContextType, coinx: string, coiny: string, coinXAmount: bigint, coinYAmount: bigint, extraLabels?: any): Promise<BigDecimal>;
    syncPools(resources: StructType[], ctx: AccountContextType, poolsHandler?: (pools: DecodedStruct<StructType, T>[]) => Promise<void> | void): Promise<void>;
    getPair(coinx: string, coiny: string): Promise<string>;
}
export declare function moveGetPairValue<Network, ContextType extends MoveAccountContext<Network, any, any>>(coinList: MoveCoinList<Network>, ctx: ContextType, coinx: string, coiny: string, coinXAmount: bigint, coinYAmount: bigint): Promise<BigDecimal>;
//# sourceMappingURL=move-dex.d.ts.map