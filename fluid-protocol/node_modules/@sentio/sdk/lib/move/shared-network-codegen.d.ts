import { AbstractCodegen, ChainAdapter, InternalMoveFunction, InternalMoveModule, InternalMoveStruct } from '@typemove/move';
export declare abstract class SharedNetworkCodegen<NetworkType, ModuleTypes, StructType> extends AbstractCodegen<ModuleTypes, StructType> {
    network: NetworkType;
    constructor(network: NetworkType, chainAdapter: ChainAdapter<ModuleTypes, StructType>);
    generateModule(module: InternalMoveModule, allEventStructs: Map<string, InternalMoveStruct>): string;
    abstract generateNetworkOption(network: NetworkType): string;
    generateForEntryFunctions(module: InternalMoveModule, func: InternalMoveFunction): string;
    generateForOnEvents(module: InternalMoveModule, struct: InternalMoveStruct): string;
    generateImports(): string;
    protected defaultCoderPackage(): string;
    generateLoadAll(isSystem: boolean): string;
    generateCallArgsStructs(module: InternalMoveModule, func: InternalMoveFunction): string;
}
//# sourceMappingURL=shared-network-codegen.d.ts.map