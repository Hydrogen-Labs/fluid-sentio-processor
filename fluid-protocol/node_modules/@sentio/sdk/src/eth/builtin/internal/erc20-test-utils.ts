/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { LogParams } from "ethers/providers";
import { EthChainId } from "@sentio/sdk/eth";
import {
  ApprovalEventObject,
  OwnershipTransferredEventObject,
  TransferEventObject,
} from "./ERC20.js";
import { getERC20Contract } from "./erc20-processor.js";
const mockField = {
  blockHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  blockNumber: 0,
  logIndex: 0,
  removed: false,
  transactionHash:
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  transactionIndex: 0,
};

export function mockApprovalLog(
  contractAddress: string,
  event: ApprovalEventObject
): LogParams {
  const contract = getERC20Contract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Approval(address,address,uint256)",
    [event.owner, event.spender, event.value]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockOwnershipTransferredLog(
  contractAddress: string,
  event: OwnershipTransferredEventObject
): LogParams {
  const contract = getERC20Contract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "OwnershipTransferred(address,address)",
    [event.previousOwner, event.newOwner]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}

export function mockTransferLog(
  contractAddress: string,
  event: TransferEventObject
): LogParams {
  const contract = getERC20Contract(EthChainId.ETHEREUM, contractAddress);
  const encodedLog = contract.rawContract.interface.encodeEventLog(
    "Transfer(address,address,uint256)",
    [event.from, event.to, event.value]
  );
  return {
    ...mockField,
    index: 0,
    address: contractAddress,
    data: encodedLog.data,
    topics: encodedLog.topics,
  };
}
