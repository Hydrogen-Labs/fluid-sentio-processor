/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Interface } from "ethers";
import type { ContractRunner } from "ethers/providers";
import type { TypedEventFilter, TypedEvent, PromiseOrValue } from "./common.js";

export interface ERC20Interface extends Interface {}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: bigint;
}
export type ApprovalEvent = TypedEvent<
  [string, string, bigint],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: bigint;
}
export type TransferEvent = TypedEvent<
  [string, string, bigint],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ERC20 extends BaseContract {
  connect(runner: null | ContractRunner): this;

  interface: ERC20Interface;
}
