{"version":3,"sources":["../../../node_modules/.pnpm/universalify@2.0.1/node_modules/universalify/index.js","../../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js","../../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js","../../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js","../../../node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/fs/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/utils.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/make-dir.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/path-exists/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/util/utimes.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/util/stat.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy-sync.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/remove/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/empty/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/file.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/link.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-paths.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-type.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/index.js","../../../node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/utils.js","../../../node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/jsonfile.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/output-file/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json-sync.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move-sync.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/index.js","../../../node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/index.js","../../../node_modules/.pnpm/command-line-args@5.2.1/node_modules/command-line-args/dist/index.js","../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/src/internal/utils.ts","../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/src/trace/SemanticAttributes.ts","../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/src/trace/index.ts","../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/src/resource/SemanticResourceAttributes.ts","../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/src/resource/index.ts","../../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.25.1/node_modules/@opentelemetry/semantic-conventions/src/index.ts","../../../node_modules/.pnpm/ipaddr.js@2.2.0/node_modules/ipaddr.js/lib/ipaddr.js","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/attributes.ts","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/propagation.ts","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/version.ts","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/traces.ts","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/utils/bindAsyncGenerator.ts","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/server.ts","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/client.ts","../../../node_modules/.pnpm/nice-grpc-opentelemetry@0.1.15/node_modules/nice-grpc-opentelemetry/src/index.ts","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/format.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/styles.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/system/has-flag.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/system/supports-colors.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/custom/trap.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/custom/zalgo.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/america.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/zebra.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/rainbow.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/random.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/colors.js","../../../node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/safe.js","../../../node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/cli.js","../../../node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/npm.js","../../../node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/syslog.js","../../../node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/index.js","../../../node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/index.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/colorize.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/levels.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/align.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/errors.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/pad-levels.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/cli.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/combine.js","../../../node_modules/.pnpm/safe-stable-stringify@2.4.3/node_modules/safe-stable-stringify/index.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/json.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/label.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/logstash.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/metadata.js","../../../node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/ms.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/pretty-print.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/printf.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/simple.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/splat.js","../../../node_modules/.pnpm/fecha@4.2.3/node_modules/fecha/src/fecha.ts","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/timestamp.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/uncolorize.js","../../../node_modules/.pnpm/logform@2.6.0/node_modules/logform/index.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/common.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/package.json","../../../node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/node.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/stream.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/destroy.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/state.js","../../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js","../../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js","../../../node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js","../../../node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/async_iterator.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/from.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_readable.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_writable.js","../../../node_modules/.pnpm/winston-transport@4.7.0/node_modules/winston-transport/modern.js","../../../node_modules/.pnpm/winston-transport@4.7.0/node_modules/winston-transport/legacy.js","../../../node_modules/.pnpm/winston-transport@4.7.0/node_modules/winston-transport/index.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/transports/console.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/isArrayLike.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/initialParams.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/setImmediate.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/asyncify.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/wrapAsync.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/awaitify.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/parallel.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/once.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/getIterator.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/iterator.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/onlyOnce.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/breakLoop.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/asyncEachOfLimit.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/eachOfLimit.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/eachOfLimit.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/eachOfSeries.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/series.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_transform.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_passthrough.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/pipeline.js","../../../node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/readable.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/diagnostics.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/production.js","../../../node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js","../../../node_modules/.pnpm/is-arrayish@0.3.2/node_modules/is-arrayish/index.js","../../../node_modules/.pnpm/simple-swizzle@0.2.2/node_modules/simple-swizzle/index.js","../../../node_modules/.pnpm/color-string@1.9.1/node_modules/color-string/index.js","../../../node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js","../../../node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js","../../../node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js","../../../node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js","../../../node_modules/.pnpm/color@3.2.1/node_modules/color/index.js","../../../node_modules/.pnpm/text-hex@1.0.0/node_modules/text-hex/index.js","../../../node_modules/.pnpm/colorspace@1.1.4/node_modules/colorspace/index.js","../../../node_modules/.pnpm/kuler@2.0.0/node_modules/kuler/index.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js","../../../node_modules/.pnpm/enabled@2.0.0/node_modules/enabled/index.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/adapters/index.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/adapters/process.env.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/logger/console.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/development.js","../../../node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/index.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/tail-file.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/transports/file.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/transports/http.js","../../../node_modules/.pnpm/is-stream@2.0.1/node_modules/is-stream/index.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/transports/stream.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/transports/index.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/config/index.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/eachOf.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/internal/withoutIndex.js","../../../node_modules/.pnpm/async@3.2.5/node_modules/async/forEach.js","../../../node_modules/.pnpm/fn.name@1.1.0/node_modules/fn.name/index.js","../../../node_modules/.pnpm/one-time@1.0.0/node_modules/one-time/index.js","../../../node_modules/.pnpm/stack-trace@0.0.10/node_modules/stack-trace/lib/stack-trace.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/exception-stream.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/exception-handler.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/rejection-stream.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/rejection-handler.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/profiler.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/logger.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/create-logger.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston/container.js","../../../node_modules/.pnpm/winston@3.13.0/node_modules/winston/lib/winston.js","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/suppress-tracing.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/constants.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/utils.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/baggage/propagation/W3CBaggagePropagator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/anchored-clock.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/attributes.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/logging-error-handler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/global-error-handler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/sampling.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/environment.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/environment.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/globalThis.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/hex-to-binary.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/hex-to-base64.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/RandomIdGenerator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/performance.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/version.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/sdk-info.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/timer-util.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/node/index.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/time.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/common/types.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/ExportResult.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/propagation/composite.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/internal/validators.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/TraceState.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/W3CTraceContextPropagator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/IdGenerator.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/rpc-metadata.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOffSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/AlwaysOnSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/ParentBasedSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/trace/sampler/TraceIdRatioBasedSampler.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/lodash.merge.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/merge.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/timeout.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/url.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/wrap.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/promise.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/utils/callback.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/internal/exporter.ts","../../../node_modules/.pnpm/@opentelemetry+core@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/default-service-name.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/node/index.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/Resource.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetectorSync.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/EnvDetector.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/detectors/index.ts","../../../node_modules/.pnpm/@opentelemetry+resources@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/resources/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationTemporality.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricData.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/utils.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/types.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Drop.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/InstrumentDescriptor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Histogram.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/Buckets.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ieee754.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/util.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/types.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/ExponentMapping.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/LogarithmMapping.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/exponential-histogram/mapping/getMapping.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/ExponentialHistogram.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/LastValue.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/Sum.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/aggregator/index.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/Aggregation.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/AggregationSelector.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/MetricReader.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/PeriodicExportingMetricReader.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/InMemoryMetricExporter.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/export/ConsoleMetricExporter.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/ViewRegistry.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/Instruments.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/Meter.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorage.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/HashMap.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/DeltaMetricProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/TemporalMetricProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/AsyncMetricStorage.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/RegistrationConflicts.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricStorageRegistry.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MultiWritableMetricStorage.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/ObservableResult.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/ObservableRegistry.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/SyncMetricStorage.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/AttributesProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterSharedState.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MeterProviderSharedState.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/state/MetricCollector.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/MeterProvider.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/Predicate.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/InstrumentSelector.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/MeterSelector.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/view/View.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-metrics@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-metrics/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/OTLPMetricExporterOptions.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/OTLPMetricExporterBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/util.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/OTLPExporterBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/types.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/types.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/util.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/OTLPExporterNodeBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/node/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/util.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/OTLPExporterBrowserBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/browser/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-exporter-base/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/common/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/trace/types.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/common/internal.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/trace/internal.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/resource/internal.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/trace/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/metrics/internal.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/metrics/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/logs/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/generated/root.js","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/protobuf/serializers.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/json/serializers.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-transformer@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-transformer/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/version.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/platform/node/OTLPMetricExporter.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/platform/node/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-http@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-http/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-grpc-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-grpc-exporter-base/src/create-service-client-constructor.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-grpc-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-grpc-exporter-base/src/grpc-exporter-transport.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-grpc-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-grpc-exporter-base/src/util.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-grpc-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-grpc-exporter-base/src/OTLPGRPCExporterNodeBase.ts","../../../node_modules/.pnpm/@opentelemetry+otlp-grpc-exporter-base@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/otlp-grpc-exporter-base/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-grpc@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-grpc/src/version.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-grpc@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-grpc/src/OTLPMetricExporter.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-metrics-otlp-grpc@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-metrics-otlp-grpc/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-prometheus@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-prometheus/src/PrometheusSerializer.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-prometheus@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-prometheus/src/PrometheusExporter.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-prometheus@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-prometheus/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AbstractAsyncHooksContextManager.ts","../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AsyncHooksContextManager.ts","../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/AsyncLocalStorageContextManager.ts","../../../node_modules/.pnpm/@opentelemetry+context-async-hooks@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/common.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/constants.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/B3MultiPropagator.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/B3SinglePropagator.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/types.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/B3Propagator.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-b3@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-b3/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/enums.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Span.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Sampler.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOffSampler.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/AlwaysOnSampler.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/ParentBasedSampler.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/config.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/utility.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/BatchSpanProcessorBase.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/export/BatchSpanProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/RandomIdGenerator.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/node/index.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/platform/index.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/Tracer.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/MultiSpanProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/NoopSpanProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/BasicTracerProvider.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/ConsoleSpanExporter.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/InMemorySpanExporter.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/ReadableSpan.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/SimpleSpanProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/export/SpanExporter.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/SpanProcessor.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/TimedEvent.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/types.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/IdGenerator.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-base@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-base/src/index.ts","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/internal/constants.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/internal/debug.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/internal/re.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/internal/parse-options.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/internal/identifiers.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/classes/semver.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/parse.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/valid.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/clean.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/inc.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/diff.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/major.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/minor.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/patch.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/prerelease.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/compare.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/rcompare.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/compare-loose.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/compare-build.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/sort.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/rsort.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/gt.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/lt.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/eq.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/neq.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/gte.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/lte.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/cmp.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/coerce.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/internal/lrucache.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/classes/range.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/classes/comparator.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/functions/satisfies.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/to-comparators.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/max-satisfying.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/min-satisfying.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/min-version.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/valid.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/outside.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/gtr.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/ltr.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/intersects.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/simplify.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/ranges/subset.js","../../../node_modules/.pnpm/semver@7.6.2/node_modules/semver/index.js","../../../node_modules/.pnpm/@opentelemetry+propagator-jaeger@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-jaeger/src/JaegerPropagator.ts","../../../node_modules/.pnpm/@opentelemetry+propagator-jaeger@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/propagator-jaeger/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-node@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-node/src/NodeTracerProvider.ts","../../../node_modules/.pnpm/@opentelemetry+sdk-trace-node@1.25.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/sdk-trace-node/src/index.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-grpc@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-grpc/src/version.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-grpc@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-grpc/src/OTLPTraceExporter.ts","../../../node_modules/.pnpm/@opentelemetry+exporter-trace-otlp-grpc@0.52.1_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/exporter-trace-otlp-grpc/src/index.ts","../src/processor-runner.ts","../src/full-service.ts","../src/logger.ts","../src/otlp.ts"],"sourcesContent":["'use strict'\n\nexports.fromCallback = function (fn) {\n  return Object.defineProperty(function (...args) {\n    if (typeof args[args.length - 1] === 'function') fn.apply(this, args)\n    else {\n      return new Promise((resolve, reject) => {\n        args.push((err, res) => (err != null) ? reject(err) : resolve(res))\n        fn.apply(this, args)\n      })\n    }\n  }, 'name', { value: fn.name })\n}\n\nexports.fromPromise = function (fn) {\n  return Object.defineProperty(function (...args) {\n    const cb = args[args.length - 1]\n    if (typeof cb !== 'function') return fn.apply(this, args)\n    else {\n      args.pop()\n      fn.apply(this, args).then(r => cb(null, r), cb)\n    }\n  }, 'name', { value: fn.name })\n}\n","var constants = require('constants')\n\nvar origCwd = process.cwd\nvar cwd = null\n\nvar platform = process.env.GRACEFUL_FS_PLATFORM || process.platform\n\nprocess.cwd = function() {\n  if (!cwd)\n    cwd = origCwd.call(process)\n  return cwd\n}\ntry {\n  process.cwd()\n} catch (er) {}\n\n// This check is needed until node.js 12 is required\nif (typeof process.chdir === 'function') {\n  var chdir = process.chdir\n  process.chdir = function (d) {\n    cwd = null\n    chdir.call(process, d)\n  }\n  if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir)\n}\n\nmodule.exports = patch\n\nfunction patch (fs) {\n  // (re-)implement some things that are known busted or missing.\n\n  // lchmod, broken prior to 0.6.2\n  // back-port the fix here.\n  if (constants.hasOwnProperty('O_SYMLINK') &&\n      process.version.match(/^v0\\.6\\.[0-2]|^v0\\.5\\./)) {\n    patchLchmod(fs)\n  }\n\n  // lutimes implementation, or no-op\n  if (!fs.lutimes) {\n    patchLutimes(fs)\n  }\n\n  // https://github.com/isaacs/node-graceful-fs/issues/4\n  // Chown should not fail on einval or eperm if non-root.\n  // It should not fail on enosys ever, as this just indicates\n  // that a fs doesn't support the intended operation.\n\n  fs.chown = chownFix(fs.chown)\n  fs.fchown = chownFix(fs.fchown)\n  fs.lchown = chownFix(fs.lchown)\n\n  fs.chmod = chmodFix(fs.chmod)\n  fs.fchmod = chmodFix(fs.fchmod)\n  fs.lchmod = chmodFix(fs.lchmod)\n\n  fs.chownSync = chownFixSync(fs.chownSync)\n  fs.fchownSync = chownFixSync(fs.fchownSync)\n  fs.lchownSync = chownFixSync(fs.lchownSync)\n\n  fs.chmodSync = chmodFixSync(fs.chmodSync)\n  fs.fchmodSync = chmodFixSync(fs.fchmodSync)\n  fs.lchmodSync = chmodFixSync(fs.lchmodSync)\n\n  fs.stat = statFix(fs.stat)\n  fs.fstat = statFix(fs.fstat)\n  fs.lstat = statFix(fs.lstat)\n\n  fs.statSync = statFixSync(fs.statSync)\n  fs.fstatSync = statFixSync(fs.fstatSync)\n  fs.lstatSync = statFixSync(fs.lstatSync)\n\n  // if lchmod/lchown do not exist, then make them no-ops\n  if (fs.chmod && !fs.lchmod) {\n    fs.lchmod = function (path, mode, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchmodSync = function () {}\n  }\n  if (fs.chown && !fs.lchown) {\n    fs.lchown = function (path, uid, gid, cb) {\n      if (cb) process.nextTick(cb)\n    }\n    fs.lchownSync = function () {}\n  }\n\n  // on Windows, A/V software can lock the directory, causing this\n  // to fail with an EACCES or EPERM if the directory contains newly\n  // created files.  Try again on failure, for up to 60 seconds.\n\n  // Set the timeout this long because some Windows Anti-Virus, such as Parity\n  // bit9, may lock files for up to a minute, causing npm package install\n  // failures. Also, take care to yield the scheduler. Windows scheduling gives\n  // CPU to a busy looping process, which can cause the program causing the lock\n  // contention to be starved of CPU by node, so the contention doesn't resolve.\n  if (platform === \"win32\") {\n    fs.rename = typeof fs.rename !== 'function' ? fs.rename\n    : (function (fs$rename) {\n      function rename (from, to, cb) {\n        var start = Date.now()\n        var backoff = 0;\n        fs$rename(from, to, function CB (er) {\n          if (er\n              && (er.code === \"EACCES\" || er.code === \"EPERM\" || er.code === \"EBUSY\")\n              && Date.now() - start < 60000) {\n            setTimeout(function() {\n              fs.stat(to, function (stater, st) {\n                if (stater && stater.code === \"ENOENT\")\n                  fs$rename(from, to, CB);\n                else\n                  cb(er)\n              })\n            }, backoff)\n            if (backoff < 100)\n              backoff += 10;\n            return;\n          }\n          if (cb) cb(er)\n        })\n      }\n      if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename)\n      return rename\n    })(fs.rename)\n  }\n\n  // if read() returns EAGAIN, then just try it again.\n  fs.read = typeof fs.read !== 'function' ? fs.read\n  : (function (fs$read) {\n    function read (fd, buffer, offset, length, position, callback_) {\n      var callback\n      if (callback_ && typeof callback_ === 'function') {\n        var eagCounter = 0\n        callback = function (er, _, __) {\n          if (er && er.code === 'EAGAIN' && eagCounter < 10) {\n            eagCounter ++\n            return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n          }\n          callback_.apply(this, arguments)\n        }\n      }\n      return fs$read.call(fs, fd, buffer, offset, length, position, callback)\n    }\n\n    // This ensures `util.promisify` works as it does for native `fs.read`.\n    if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read)\n    return read\n  })(fs.read)\n\n  fs.readSync = typeof fs.readSync !== 'function' ? fs.readSync\n  : (function (fs$readSync) { return function (fd, buffer, offset, length, position) {\n    var eagCounter = 0\n    while (true) {\n      try {\n        return fs$readSync.call(fs, fd, buffer, offset, length, position)\n      } catch (er) {\n        if (er.code === 'EAGAIN' && eagCounter < 10) {\n          eagCounter ++\n          continue\n        }\n        throw er\n      }\n    }\n  }})(fs.readSync)\n\n  function patchLchmod (fs) {\n    fs.lchmod = function (path, mode, callback) {\n      fs.open( path\n             , constants.O_WRONLY | constants.O_SYMLINK\n             , mode\n             , function (err, fd) {\n        if (err) {\n          if (callback) callback(err)\n          return\n        }\n        // prefer to return the chmod error, if one occurs,\n        // but still try to close, and report closing errors if they occur.\n        fs.fchmod(fd, mode, function (err) {\n          fs.close(fd, function(err2) {\n            if (callback) callback(err || err2)\n          })\n        })\n      })\n    }\n\n    fs.lchmodSync = function (path, mode) {\n      var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)\n\n      // prefer to return the chmod error, if one occurs,\n      // but still try to close, and report closing errors if they occur.\n      var threw = true\n      var ret\n      try {\n        ret = fs.fchmodSync(fd, mode)\n        threw = false\n      } finally {\n        if (threw) {\n          try {\n            fs.closeSync(fd)\n          } catch (er) {}\n        } else {\n          fs.closeSync(fd)\n        }\n      }\n      return ret\n    }\n  }\n\n  function patchLutimes (fs) {\n    if (constants.hasOwnProperty(\"O_SYMLINK\") && fs.futimes) {\n      fs.lutimes = function (path, at, mt, cb) {\n        fs.open(path, constants.O_SYMLINK, function (er, fd) {\n          if (er) {\n            if (cb) cb(er)\n            return\n          }\n          fs.futimes(fd, at, mt, function (er) {\n            fs.close(fd, function (er2) {\n              if (cb) cb(er || er2)\n            })\n          })\n        })\n      }\n\n      fs.lutimesSync = function (path, at, mt) {\n        var fd = fs.openSync(path, constants.O_SYMLINK)\n        var ret\n        var threw = true\n        try {\n          ret = fs.futimesSync(fd, at, mt)\n          threw = false\n        } finally {\n          if (threw) {\n            try {\n              fs.closeSync(fd)\n            } catch (er) {}\n          } else {\n            fs.closeSync(fd)\n          }\n        }\n        return ret\n      }\n\n    } else if (fs.futimes) {\n      fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }\n      fs.lutimesSync = function () {}\n    }\n  }\n\n  function chmodFix (orig) {\n    if (!orig) return orig\n    return function (target, mode, cb) {\n      return orig.call(fs, target, mode, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chmodFixSync (orig) {\n    if (!orig) return orig\n    return function (target, mode) {\n      try {\n        return orig.call(fs, target, mode)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n\n  function chownFix (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid, cb) {\n      return orig.call(fs, target, uid, gid, function (er) {\n        if (chownErOk(er)) er = null\n        if (cb) cb.apply(this, arguments)\n      })\n    }\n  }\n\n  function chownFixSync (orig) {\n    if (!orig) return orig\n    return function (target, uid, gid) {\n      try {\n        return orig.call(fs, target, uid, gid)\n      } catch (er) {\n        if (!chownErOk(er)) throw er\n      }\n    }\n  }\n\n  function statFix (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options, cb) {\n      if (typeof options === 'function') {\n        cb = options\n        options = null\n      }\n      function callback (er, stats) {\n        if (stats) {\n          if (stats.uid < 0) stats.uid += 0x100000000\n          if (stats.gid < 0) stats.gid += 0x100000000\n        }\n        if (cb) cb.apply(this, arguments)\n      }\n      return options ? orig.call(fs, target, options, callback)\n        : orig.call(fs, target, callback)\n    }\n  }\n\n  function statFixSync (orig) {\n    if (!orig) return orig\n    // Older versions of Node erroneously returned signed integers for\n    // uid + gid.\n    return function (target, options) {\n      var stats = options ? orig.call(fs, target, options)\n        : orig.call(fs, target)\n      if (stats) {\n        if (stats.uid < 0) stats.uid += 0x100000000\n        if (stats.gid < 0) stats.gid += 0x100000000\n      }\n      return stats;\n    }\n  }\n\n  // ENOSYS means that the fs doesn't support the op. Just ignore\n  // that, because it doesn't matter.\n  //\n  // if there's no getuid, or if getuid() is something other\n  // than 0, and the error is EINVAL or EPERM, then just ignore\n  // it.\n  //\n  // This specific case is a silent failure in cp, install, tar,\n  // and most other unix tools that manage permissions.\n  //\n  // When running as root, or if other types of errors are\n  // encountered, then it's strict.\n  function chownErOk (er) {\n    if (!er)\n      return true\n\n    if (er.code === \"ENOSYS\")\n      return true\n\n    var nonroot = !process.getuid || process.getuid() !== 0\n    if (nonroot) {\n      if (er.code === \"EINVAL\" || er.code === \"EPERM\")\n        return true\n    }\n\n    return false\n  }\n}\n","var Stream = require('stream').Stream\n\nmodule.exports = legacy\n\nfunction legacy (fs) {\n  return {\n    ReadStream: ReadStream,\n    WriteStream: WriteStream\n  }\n\n  function ReadStream (path, options) {\n    if (!(this instanceof ReadStream)) return new ReadStream(path, options);\n\n    Stream.call(this);\n\n    var self = this;\n\n    this.path = path;\n    this.fd = null;\n    this.readable = true;\n    this.paused = false;\n\n    this.flags = 'r';\n    this.mode = 438; /*=0666*/\n    this.bufferSize = 64 * 1024;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.encoding) this.setEncoding(this.encoding);\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.end === undefined) {\n        this.end = Infinity;\n      } else if ('number' !== typeof this.end) {\n        throw TypeError('end must be a Number');\n      }\n\n      if (this.start > this.end) {\n        throw new Error('start must be <= end');\n      }\n\n      this.pos = this.start;\n    }\n\n    if (this.fd !== null) {\n      process.nextTick(function() {\n        self._read();\n      });\n      return;\n    }\n\n    fs.open(this.path, this.flags, this.mode, function (err, fd) {\n      if (err) {\n        self.emit('error', err);\n        self.readable = false;\n        return;\n      }\n\n      self.fd = fd;\n      self.emit('open', fd);\n      self._read();\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (!(this instanceof WriteStream)) return new WriteStream(path, options);\n\n    Stream.call(this);\n\n    this.path = path;\n    this.fd = null;\n    this.writable = true;\n\n    this.flags = 'w';\n    this.encoding = 'binary';\n    this.mode = 438; /*=0666*/\n    this.bytesWritten = 0;\n\n    options = options || {};\n\n    // Mixin options into this\n    var keys = Object.keys(options);\n    for (var index = 0, length = keys.length; index < length; index++) {\n      var key = keys[index];\n      this[key] = options[key];\n    }\n\n    if (this.start !== undefined) {\n      if ('number' !== typeof this.start) {\n        throw TypeError('start must be a Number');\n      }\n      if (this.start < 0) {\n        throw new Error('start must be >= zero');\n      }\n\n      this.pos = this.start;\n    }\n\n    this.busy = false;\n    this._queue = [];\n\n    if (this.fd === null) {\n      this._open = fs.open;\n      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);\n      this.flush();\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = clone\n\nvar getPrototypeOf = Object.getPrototypeOf || function (obj) {\n  return obj.__proto__\n}\n\nfunction clone (obj) {\n  if (obj === null || typeof obj !== 'object')\n    return obj\n\n  if (obj instanceof Object)\n    var copy = { __proto__: getPrototypeOf(obj) }\n  else\n    var copy = Object.create(null)\n\n  Object.getOwnPropertyNames(obj).forEach(function (key) {\n    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))\n  })\n\n  return copy\n}\n","var fs = require('fs')\nvar polyfills = require('./polyfills.js')\nvar legacy = require('./legacy-streams.js')\nvar clone = require('./clone.js')\n\nvar util = require('util')\n\n/* istanbul ignore next - node 0.x polyfill */\nvar gracefulQueue\nvar previousSymbol\n\n/* istanbul ignore else - node 0.x polyfill */\nif (typeof Symbol === 'function' && typeof Symbol.for === 'function') {\n  gracefulQueue = Symbol.for('graceful-fs.queue')\n  // This is used in testing by future versions\n  previousSymbol = Symbol.for('graceful-fs.previous')\n} else {\n  gracefulQueue = '___graceful-fs.queue'\n  previousSymbol = '___graceful-fs.previous'\n}\n\nfunction noop () {}\n\nfunction publishQueue(context, queue) {\n  Object.defineProperty(context, gracefulQueue, {\n    get: function() {\n      return queue\n    }\n  })\n}\n\nvar debug = noop\nif (util.debuglog)\n  debug = util.debuglog('gfs4')\nelse if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || ''))\n  debug = function() {\n    var m = util.format.apply(util, arguments)\n    m = 'GFS4: ' + m.split(/\\n/).join('\\nGFS4: ')\n    console.error(m)\n  }\n\n// Once time initialization\nif (!fs[gracefulQueue]) {\n  // This queue can be shared by multiple loaded instances\n  var queue = global[gracefulQueue] || []\n  publishQueue(fs, queue)\n\n  // Patch fs.close/closeSync to shared queue version, because we need\n  // to retry() whenever a close happens *anywhere* in the program.\n  // This is essential when multiple graceful-fs instances are\n  // in play at the same time.\n  fs.close = (function (fs$close) {\n    function close (fd, cb) {\n      return fs$close.call(fs, fd, function (err) {\n        // This function uses the graceful-fs shared queue\n        if (!err) {\n          resetQueue()\n        }\n\n        if (typeof cb === 'function')\n          cb.apply(this, arguments)\n      })\n    }\n\n    Object.defineProperty(close, previousSymbol, {\n      value: fs$close\n    })\n    return close\n  })(fs.close)\n\n  fs.closeSync = (function (fs$closeSync) {\n    function closeSync (fd) {\n      // This function uses the graceful-fs shared queue\n      fs$closeSync.apply(fs, arguments)\n      resetQueue()\n    }\n\n    Object.defineProperty(closeSync, previousSymbol, {\n      value: fs$closeSync\n    })\n    return closeSync\n  })(fs.closeSync)\n\n  if (/\\bgfs4\\b/i.test(process.env.NODE_DEBUG || '')) {\n    process.on('exit', function() {\n      debug(fs[gracefulQueue])\n      require('assert').equal(fs[gracefulQueue].length, 0)\n    })\n  }\n}\n\nif (!global[gracefulQueue]) {\n  publishQueue(global, fs[gracefulQueue]);\n}\n\nmodule.exports = patch(clone(fs))\nif (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {\n    module.exports = patch(fs)\n    fs.__patched = true;\n}\n\nfunction patch (fs) {\n  // Everything that references the open() function needs to be in here\n  polyfills(fs)\n  fs.gracefulify = patch\n\n  fs.createReadStream = createReadStream\n  fs.createWriteStream = createWriteStream\n  var fs$readFile = fs.readFile\n  fs.readFile = readFile\n  function readFile (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$readFile(path, options, cb)\n\n    function go$readFile (path, options, cb, startTime) {\n      return fs$readFile(path, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$writeFile = fs.writeFile\n  fs.writeFile = writeFile\n  function writeFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$writeFile(path, data, options, cb)\n\n    function go$writeFile (path, data, options, cb, startTime) {\n      return fs$writeFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$appendFile = fs.appendFile\n  if (fs$appendFile)\n    fs.appendFile = appendFile\n  function appendFile (path, data, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    return go$appendFile(path, data, options, cb)\n\n    function go$appendFile (path, data, options, cb, startTime) {\n      return fs$appendFile(path, data, options, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$copyFile = fs.copyFile\n  if (fs$copyFile)\n    fs.copyFile = copyFile\n  function copyFile (src, dest, flags, cb) {\n    if (typeof flags === 'function') {\n      cb = flags\n      flags = 0\n    }\n    return go$copyFile(src, dest, flags, cb)\n\n    function go$copyFile (src, dest, flags, cb, startTime) {\n      return fs$copyFile(src, dest, flags, function (err) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  var fs$readdir = fs.readdir\n  fs.readdir = readdir\n  var noReaddirOptionVersions = /^v[0-5]\\./\n  function readdir (path, options, cb) {\n    if (typeof options === 'function')\n      cb = options, options = null\n\n    var go$readdir = noReaddirOptionVersions.test(process.version)\n      ? function go$readdir (path, options, cb, startTime) {\n        return fs$readdir(path, fs$readdirCallback(\n          path, options, cb, startTime\n        ))\n      }\n      : function go$readdir (path, options, cb, startTime) {\n        return fs$readdir(path, options, fs$readdirCallback(\n          path, options, cb, startTime\n        ))\n      }\n\n    return go$readdir(path, options, cb)\n\n    function fs$readdirCallback (path, options, cb, startTime) {\n      return function (err, files) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([\n            go$readdir,\n            [path, options, cb],\n            err,\n            startTime || Date.now(),\n            Date.now()\n          ])\n        else {\n          if (files && files.sort)\n            files.sort()\n\n          if (typeof cb === 'function')\n            cb.call(this, err, files)\n        }\n      }\n    }\n  }\n\n  if (process.version.substr(0, 4) === 'v0.8') {\n    var legStreams = legacy(fs)\n    ReadStream = legStreams.ReadStream\n    WriteStream = legStreams.WriteStream\n  }\n\n  var fs$ReadStream = fs.ReadStream\n  if (fs$ReadStream) {\n    ReadStream.prototype = Object.create(fs$ReadStream.prototype)\n    ReadStream.prototype.open = ReadStream$open\n  }\n\n  var fs$WriteStream = fs.WriteStream\n  if (fs$WriteStream) {\n    WriteStream.prototype = Object.create(fs$WriteStream.prototype)\n    WriteStream.prototype.open = WriteStream$open\n  }\n\n  Object.defineProperty(fs, 'ReadStream', {\n    get: function () {\n      return ReadStream\n    },\n    set: function (val) {\n      ReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  Object.defineProperty(fs, 'WriteStream', {\n    get: function () {\n      return WriteStream\n    },\n    set: function (val) {\n      WriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  // legacy names\n  var FileReadStream = ReadStream\n  Object.defineProperty(fs, 'FileReadStream', {\n    get: function () {\n      return FileReadStream\n    },\n    set: function (val) {\n      FileReadStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n  var FileWriteStream = WriteStream\n  Object.defineProperty(fs, 'FileWriteStream', {\n    get: function () {\n      return FileWriteStream\n    },\n    set: function (val) {\n      FileWriteStream = val\n    },\n    enumerable: true,\n    configurable: true\n  })\n\n  function ReadStream (path, options) {\n    if (this instanceof ReadStream)\n      return fs$ReadStream.apply(this, arguments), this\n    else\n      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)\n  }\n\n  function ReadStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        if (that.autoClose)\n          that.destroy()\n\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n        that.read()\n      }\n    })\n  }\n\n  function WriteStream (path, options) {\n    if (this instanceof WriteStream)\n      return fs$WriteStream.apply(this, arguments), this\n    else\n      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)\n  }\n\n  function WriteStream$open () {\n    var that = this\n    open(that.path, that.flags, that.mode, function (err, fd) {\n      if (err) {\n        that.destroy()\n        that.emit('error', err)\n      } else {\n        that.fd = fd\n        that.emit('open', fd)\n      }\n    })\n  }\n\n  function createReadStream (path, options) {\n    return new fs.ReadStream(path, options)\n  }\n\n  function createWriteStream (path, options) {\n    return new fs.WriteStream(path, options)\n  }\n\n  var fs$open = fs.open\n  fs.open = open\n  function open (path, flags, mode, cb) {\n    if (typeof mode === 'function')\n      cb = mode, mode = null\n\n    return go$open(path, flags, mode, cb)\n\n    function go$open (path, flags, mode, cb, startTime) {\n      return fs$open(path, flags, mode, function (err, fd) {\n        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))\n          enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()])\n        else {\n          if (typeof cb === 'function')\n            cb.apply(this, arguments)\n        }\n      })\n    }\n  }\n\n  return fs\n}\n\nfunction enqueue (elem) {\n  debug('ENQUEUE', elem[0].name, elem[1])\n  fs[gracefulQueue].push(elem)\n  retry()\n}\n\n// keep track of the timeout between retry() calls\nvar retryTimer\n\n// reset the startTime and lastTime to now\n// this resets the start of the 60 second overall timeout as well as the\n// delay between attempts so that we'll retry these jobs sooner\nfunction resetQueue () {\n  var now = Date.now()\n  for (var i = 0; i < fs[gracefulQueue].length; ++i) {\n    // entries that are only a length of 2 are from an older version, don't\n    // bother modifying those since they'll be retried anyway.\n    if (fs[gracefulQueue][i].length > 2) {\n      fs[gracefulQueue][i][3] = now // startTime\n      fs[gracefulQueue][i][4] = now // lastTime\n    }\n  }\n  // call retry to make sure we're actively processing the queue\n  retry()\n}\n\nfunction retry () {\n  // clear the timer and remove it to help prevent unintended concurrency\n  clearTimeout(retryTimer)\n  retryTimer = undefined\n\n  if (fs[gracefulQueue].length === 0)\n    return\n\n  var elem = fs[gracefulQueue].shift()\n  var fn = elem[0]\n  var args = elem[1]\n  // these items may be unset if they were added by an older graceful-fs\n  var err = elem[2]\n  var startTime = elem[3]\n  var lastTime = elem[4]\n\n  // if we don't have a startTime we have no way of knowing if we've waited\n  // long enough, so go ahead and retry this item now\n  if (startTime === undefined) {\n    debug('RETRY', fn.name, args)\n    fn.apply(null, args)\n  } else if (Date.now() - startTime >= 60000) {\n    // it's been more than 60 seconds total, bail now\n    debug('TIMEOUT', fn.name, args)\n    var cb = args.pop()\n    if (typeof cb === 'function')\n      cb.call(null, err)\n  } else {\n    // the amount of time between the last attempt and right now\n    var sinceAttempt = Date.now() - lastTime\n    // the amount of time between when we first tried, and when we last tried\n    // rounded up to at least 1\n    var sinceStart = Math.max(lastTime - startTime, 1)\n    // backoff. wait longer than the total time we've been retrying, but only\n    // up to a maximum of 100ms\n    var desiredDelay = Math.min(sinceStart * 1.2, 100)\n    // it's been long enough since the last retry, do it again\n    if (sinceAttempt >= desiredDelay) {\n      debug('RETRY', fn.name, args)\n      fn.apply(null, args.concat([startTime]))\n    } else {\n      // if we can't do this job yet, push it to the end of the queue\n      // and let the next iteration check again\n      fs[gracefulQueue].push(elem)\n    }\n  }\n\n  // schedule our next run if one isn't already scheduled\n  if (retryTimer === undefined) {\n    retryTimer = setTimeout(retry, 0)\n  }\n}\n","'use strict'\n// This is adapted from https://github.com/normalize/mz\n// Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors\nconst u = require('universalify').fromCallback\nconst fs = require('graceful-fs')\n\nconst api = [\n  'access',\n  'appendFile',\n  'chmod',\n  'chown',\n  'close',\n  'copyFile',\n  'fchmod',\n  'fchown',\n  'fdatasync',\n  'fstat',\n  'fsync',\n  'ftruncate',\n  'futimes',\n  'lchmod',\n  'lchown',\n  'link',\n  'lstat',\n  'mkdir',\n  'mkdtemp',\n  'open',\n  'opendir',\n  'readdir',\n  'readFile',\n  'readlink',\n  'realpath',\n  'rename',\n  'rm',\n  'rmdir',\n  'stat',\n  'symlink',\n  'truncate',\n  'unlink',\n  'utimes',\n  'writeFile'\n].filter(key => {\n  // Some commands are not available on some systems. Ex:\n  // fs.cp was added in Node.js v16.7.0\n  // fs.lchown is not available on at least some Linux\n  return typeof fs[key] === 'function'\n})\n\n// Export cloned fs:\nObject.assign(exports, fs)\n\n// Universalify async methods:\napi.forEach(method => {\n  exports[method] = u(fs[method])\n})\n\n// We differ from mz/fs in that we still ship the old, broken, fs.exists()\n// since we are a drop-in replacement for the native module\nexports.exists = function (filename, callback) {\n  if (typeof callback === 'function') {\n    return fs.exists(filename, callback)\n  }\n  return new Promise(resolve => {\n    return fs.exists(filename, resolve)\n  })\n}\n\n// fs.read(), fs.write(), fs.readv(), & fs.writev() need special treatment due to multiple callback args\n\nexports.read = function (fd, buffer, offset, length, position, callback) {\n  if (typeof callback === 'function') {\n    return fs.read(fd, buffer, offset, length, position, callback)\n  }\n  return new Promise((resolve, reject) => {\n    fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesRead, buffer })\n    })\n  })\n}\n\n// Function signature can be\n// fs.write(fd, buffer[, offset[, length[, position]]], callback)\n// OR\n// fs.write(fd, string[, position[, encoding]], callback)\n// We need to handle both cases, so we use ...args\nexports.write = function (fd, buffer, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.write(fd, buffer, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.write(fd, buffer, ...args, (err, bytesWritten, buffer) => {\n      if (err) return reject(err)\n      resolve({ bytesWritten, buffer })\n    })\n  })\n}\n\n// Function signature is\n// s.readv(fd, buffers[, position], callback)\n// We need to handle the optional arg, so we use ...args\nexports.readv = function (fd, buffers, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.readv(fd, buffers, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.readv(fd, buffers, ...args, (err, bytesRead, buffers) => {\n      if (err) return reject(err)\n      resolve({ bytesRead, buffers })\n    })\n  })\n}\n\n// Function signature is\n// s.writev(fd, buffers[, position], callback)\n// We need to handle the optional arg, so we use ...args\nexports.writev = function (fd, buffers, ...args) {\n  if (typeof args[args.length - 1] === 'function') {\n    return fs.writev(fd, buffers, ...args)\n  }\n\n  return new Promise((resolve, reject) => {\n    fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers) => {\n      if (err) return reject(err)\n      resolve({ bytesWritten, buffers })\n    })\n  })\n}\n\n// fs.realpath.native sometimes not available if fs is monkey-patched\nif (typeof fs.realpath.native === 'function') {\n  exports.realpath.native = u(fs.realpath.native)\n} else {\n  process.emitWarning(\n    'fs.realpath.native is not a function. Is fs being monkey-patched?',\n    'Warning', 'fs-extra-WARN0003'\n  )\n}\n","// Adapted from https://github.com/sindresorhus/make-dir\n// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict'\nconst path = require('path')\n\n// https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\nmodule.exports.checkPath = function checkPath (pth) {\n  if (process.platform === 'win32') {\n    const pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''))\n\n    if (pathHasInvalidWinCharacters) {\n      const error = new Error(`Path contains invalid characters: ${pth}`)\n      error.code = 'EINVAL'\n      throw error\n    }\n  }\n}\n","'use strict'\nconst fs = require('../fs')\nconst { checkPath } = require('./utils')\n\nconst getMode = options => {\n  const defaults = { mode: 0o777 }\n  if (typeof options === 'number') return options\n  return ({ ...defaults, ...options }).mode\n}\n\nmodule.exports.makeDir = async (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdir(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n\nmodule.exports.makeDirSync = (dir, options) => {\n  checkPath(dir)\n\n  return fs.mkdirSync(dir, {\n    mode: getMode(options),\n    recursive: true\n  })\n}\n","'use strict'\nconst u = require('universalify').fromPromise\nconst { makeDir: _makeDir, makeDirSync } = require('./make-dir')\nconst makeDir = u(_makeDir)\n\nmodule.exports = {\n  mkdirs: makeDir,\n  mkdirsSync: makeDirSync,\n  // alias\n  mkdirp: makeDir,\n  mkdirpSync: makeDirSync,\n  ensureDir: makeDir,\n  ensureDirSync: makeDirSync\n}\n","'use strict'\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\n\nfunction pathExists (path) {\n  return fs.access(path).then(() => true).catch(() => false)\n}\n\nmodule.exports = {\n  pathExists: u(pathExists),\n  pathExistsSync: fs.existsSync\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst u = require('universalify').fromPromise\n\nasync function utimesMillis (path, atime, mtime) {\n  // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)\n  const fd = await fs.open(path, 'r+')\n\n  let closeErr = null\n\n  try {\n    await fs.futimes(fd, atime, mtime)\n  } finally {\n    try {\n      await fs.close(fd)\n    } catch (e) {\n      closeErr = e\n    }\n  }\n\n  if (closeErr) {\n    throw closeErr\n  }\n}\n\nfunction utimesMillisSync (path, atime, mtime) {\n  const fd = fs.openSync(path, 'r+')\n  fs.futimesSync(fd, atime, mtime)\n  return fs.closeSync(fd)\n}\n\nmodule.exports = {\n  utimesMillis: u(utimesMillis),\n  utimesMillisSync\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst u = require('universalify').fromPromise\n\nfunction getStats (src, dest, opts) {\n  const statFunc = opts.dereference\n    ? (file) => fs.stat(file, { bigint: true })\n    : (file) => fs.lstat(file, { bigint: true })\n  return Promise.all([\n    statFunc(src),\n    statFunc(dest).catch(err => {\n      if (err.code === 'ENOENT') return null\n      throw err\n    })\n  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))\n}\n\nfunction getStatsSync (src, dest, opts) {\n  let destStat\n  const statFunc = opts.dereference\n    ? (file) => fs.statSync(file, { bigint: true })\n    : (file) => fs.lstatSync(file, { bigint: true })\n  const srcStat = statFunc(src)\n  try {\n    destStat = statFunc(dest)\n  } catch (err) {\n    if (err.code === 'ENOENT') return { srcStat, destStat: null }\n    throw err\n  }\n  return { srcStat, destStat }\n}\n\nasync function checkPaths (src, dest, funcName, opts) {\n  const { srcStat, destStat } = await getStats(src, dest, opts)\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return { srcStat, destStat }\n}\n\nfunction checkPathsSync (src, dest, funcName, opts) {\n  const { srcStat, destStat } = getStatsSync(src, dest, opts)\n\n  if (destStat) {\n    if (areIdentical(srcStat, destStat)) {\n      const srcBaseName = path.basename(src)\n      const destBaseName = path.basename(dest)\n      if (funcName === 'move' &&\n        srcBaseName !== destBaseName &&\n        srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {\n        return { srcStat, destStat, isChangingCase: true }\n      }\n      throw new Error('Source and destination must not be the same.')\n    }\n    if (srcStat.isDirectory() && !destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)\n    }\n    if (!srcStat.isDirectory() && destStat.isDirectory()) {\n      throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)\n    }\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return { srcStat, destStat }\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nasync function checkParentPaths (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n\n  let destStat\n  try {\n    destStat = await fs.stat(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n\n  return checkParentPaths(src, srcStat, destParent, funcName)\n}\n\nfunction checkParentPathsSync (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n  let destStat\n  try {\n    destStat = fs.statSync(destParent, { bigint: true })\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName)\n}\n\nfunction areIdentical (srcStat, destStat) {\n  return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir (src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i)\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i)\n  return srcArr.every((cur, i) => destArr[i] === cur)\n}\n\nfunction errMsg (src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`\n}\n\nmodule.exports = {\n  // checkPaths\n  checkPaths: u(checkPaths),\n  checkPathsSync,\n  // checkParent\n  checkParentPaths: u(checkParentPaths),\n  checkParentPathsSync,\n  // Misc\n  isSrcSubdir,\n  areIdentical\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { mkdirs } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst { utimesMillis } = require('../util/utimes')\nconst stat = require('../util/stat')\n\nasync function copy (src, dest, opts = {}) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0001'\n    )\n  }\n\n  const { srcStat, destStat } = await stat.checkPaths(src, dest, 'copy', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'copy')\n\n  const include = await runFilter(src, dest, opts)\n\n  if (!include) return\n\n  // check if the parent of dest exists, and create it if it doesn't exist\n  const destParent = path.dirname(dest)\n  const dirExists = await pathExists(destParent)\n  if (!dirExists) {\n    await mkdirs(destParent)\n  }\n\n  await getStatsAndPerformCopy(destStat, src, dest, opts)\n}\n\nasync function runFilter (src, dest, opts) {\n  if (!opts.filter) return true\n  return opts.filter(src, dest)\n}\n\nasync function getStatsAndPerformCopy (destStat, src, dest, opts) {\n  const statFn = opts.dereference ? fs.stat : fs.lstat\n  const srcStat = await statFn(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n\n  if (\n    srcStat.isFile() ||\n    srcStat.isCharacterDevice() ||\n    srcStat.isBlockDevice()\n  ) return onFile(srcStat, destStat, src, dest, opts)\n\n  if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nasync function onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n\n  if (opts.overwrite) {\n    await fs.unlink(dest)\n    return copyFile(srcStat, src, dest, opts)\n  }\n  if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nasync function copyFile (srcStat, src, dest, opts) {\n  await fs.copyFile(src, dest)\n  if (opts.preserveTimestamps) {\n    // Make sure the file is writable before setting the timestamp\n    // otherwise open fails with EPERM when invoked with 'r+'\n    // (through utimes call)\n    if (fileIsNotWritable(srcStat.mode)) {\n      await makeFileWritable(dest, srcStat.mode)\n    }\n\n    // Set timestamps and mode correspondingly\n\n    // Note that The initial srcStat.atime cannot be trusted\n    // because it is modified by the read(2) system call\n    // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n    const updatedSrcStat = await fs.stat(src)\n    await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n  }\n\n  return fs.chmod(dest, srcStat.mode)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return fs.chmod(dest, srcMode | 0o200)\n}\n\nasync function onDir (srcStat, destStat, src, dest, opts) {\n  // the dest directory might not exist, create it\n  if (!destStat) {\n    await fs.mkdir(dest)\n  }\n\n  const items = await fs.readdir(src)\n\n  // loop through the files in the current directory to copy everything\n  await Promise.all(items.map(async item => {\n    const srcItem = path.join(src, item)\n    const destItem = path.join(dest, item)\n\n    // skip the item if it is matches by the filter function\n    const include = await runFilter(srcItem, destItem, opts)\n    if (!include) return\n\n    const { destStat } = await stat.checkPaths(srcItem, destItem, 'copy', opts)\n\n    // If the item is a copyable file, `getStatsAndPerformCopy` will copy it\n    // If the item is a directory, `getStatsAndPerformCopy` will call `onDir` recursively\n    return getStatsAndPerformCopy(destStat, srcItem, destItem, opts)\n  }))\n\n  if (!destStat) {\n    await fs.chmod(dest, srcStat.mode)\n  }\n}\n\nasync function onLink (destStat, src, dest, opts) {\n  let resolvedSrc = await fs.readlink(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n  if (!destStat) {\n    return fs.symlink(resolvedSrc, dest)\n  }\n\n  let resolvedDest = null\n  try {\n    resolvedDest = await fs.readlink(dest)\n  } catch (e) {\n    // dest exists and is a regular file or directory,\n    // Windows may throw UNKNOWN error. If dest already exists,\n    // fs throws error anyway, so no need to guard against it here.\n    if (e.code === 'EINVAL' || e.code === 'UNKNOWN') return fs.symlink(resolvedSrc, dest)\n    throw e\n  }\n  if (opts.dereference) {\n    resolvedDest = path.resolve(process.cwd(), resolvedDest)\n  }\n  if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n    throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n  }\n\n  // do not copy if src is a subdir of dest since unlinking\n  // dest in this case would result in removing src contents\n  // and therefore a broken symlink would be created.\n  if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n  }\n\n  // copy the link\n  await fs.unlink(dest)\n  return fs.symlink(resolvedSrc, dest)\n}\n\nmodule.exports = copy\n","'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst mkdirsSync = require('../mkdirs').mkdirsSync\nconst utimesMillisSync = require('../util/utimes').utimesMillisSync\nconst stat = require('../util/stat')\n\nfunction copySync (src, dest, opts) {\n  if (typeof opts === 'function') {\n    opts = { filter: opts }\n  }\n\n  opts = opts || {}\n  opts.clobber = 'clobber' in opts ? !!opts.clobber : true // default to true for now\n  opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber // overwrite falls back to clobber\n\n  // Warn about using preserveTimestamps on 32-bit node\n  if (opts.preserveTimestamps && process.arch === 'ia32') {\n    process.emitWarning(\n      'Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n' +\n      '\\tsee https://github.com/jprichardson/node-fs-extra/issues/269',\n      'Warning', 'fs-extra-WARN0002'\n    )\n  }\n\n  const { srcStat, destStat } = stat.checkPathsSync(src, dest, 'copy', opts)\n  stat.checkParentPathsSync(src, srcStat, dest, 'copy')\n  if (opts.filter && !opts.filter(src, dest)) return\n  const destParent = path.dirname(dest)\n  if (!fs.existsSync(destParent)) mkdirsSync(destParent)\n  return getStats(destStat, src, dest, opts)\n}\n\nfunction getStats (destStat, src, dest, opts) {\n  const statSync = opts.dereference ? fs.statSync : fs.lstatSync\n  const srcStat = statSync(src)\n\n  if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isFile() ||\n           srcStat.isCharacterDevice() ||\n           srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts)\n  else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts)\n  else if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)\n  else if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)\n  throw new Error(`Unknown file: ${src}`)\n}\n\nfunction onFile (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return copyFile(srcStat, src, dest, opts)\n  return mayCopyFile(srcStat, src, dest, opts)\n}\n\nfunction mayCopyFile (srcStat, src, dest, opts) {\n  if (opts.overwrite) {\n    fs.unlinkSync(dest)\n    return copyFile(srcStat, src, dest, opts)\n  } else if (opts.errorOnExist) {\n    throw new Error(`'${dest}' already exists`)\n  }\n}\n\nfunction copyFile (srcStat, src, dest, opts) {\n  fs.copyFileSync(src, dest)\n  if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest)\n  return setDestMode(dest, srcStat.mode)\n}\n\nfunction handleTimestamps (srcMode, src, dest) {\n  // Make sure the file is writable before setting the timestamp\n  // otherwise open fails with EPERM when invoked with 'r+'\n  // (through utimes call)\n  if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode)\n  return setDestTimestamps(src, dest)\n}\n\nfunction fileIsNotWritable (srcMode) {\n  return (srcMode & 0o200) === 0\n}\n\nfunction makeFileWritable (dest, srcMode) {\n  return setDestMode(dest, srcMode | 0o200)\n}\n\nfunction setDestMode (dest, srcMode) {\n  return fs.chmodSync(dest, srcMode)\n}\n\nfunction setDestTimestamps (src, dest) {\n  // The initial srcStat.atime cannot be trusted\n  // because it is modified by the read(2) system call\n  // (See https://nodejs.org/api/fs.html#fs_stat_time_values)\n  const updatedSrcStat = fs.statSync(src)\n  return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime)\n}\n\nfunction onDir (srcStat, destStat, src, dest, opts) {\n  if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts)\n  return copyDir(src, dest, opts)\n}\n\nfunction mkDirAndCopy (srcMode, src, dest, opts) {\n  fs.mkdirSync(dest)\n  copyDir(src, dest, opts)\n  return setDestMode(dest, srcMode)\n}\n\nfunction copyDir (src, dest, opts) {\n  fs.readdirSync(src).forEach(item => copyDirItem(item, src, dest, opts))\n}\n\nfunction copyDirItem (item, src, dest, opts) {\n  const srcItem = path.join(src, item)\n  const destItem = path.join(dest, item)\n  if (opts.filter && !opts.filter(srcItem, destItem)) return\n  const { destStat } = stat.checkPathsSync(srcItem, destItem, 'copy', opts)\n  return getStats(destStat, srcItem, destItem, opts)\n}\n\nfunction onLink (destStat, src, dest, opts) {\n  let resolvedSrc = fs.readlinkSync(src)\n  if (opts.dereference) {\n    resolvedSrc = path.resolve(process.cwd(), resolvedSrc)\n  }\n\n  if (!destStat) {\n    return fs.symlinkSync(resolvedSrc, dest)\n  } else {\n    let resolvedDest\n    try {\n      resolvedDest = fs.readlinkSync(dest)\n    } catch (err) {\n      // dest exists and is a regular file or directory,\n      // Windows may throw UNKNOWN error. If dest already exists,\n      // fs throws error anyway, so no need to guard against it here.\n      if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs.symlinkSync(resolvedSrc, dest)\n      throw err\n    }\n    if (opts.dereference) {\n      resolvedDest = path.resolve(process.cwd(), resolvedDest)\n    }\n    if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {\n      throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)\n    }\n\n    // prevent copy if src is a subdir of dest since unlinking\n    // dest in this case would result in removing src contents\n    // and therefore a broken symlink would be created.\n    if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {\n      throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)\n    }\n    return copyLink(resolvedSrc, dest)\n  }\n}\n\nfunction copyLink (resolvedSrc, dest) {\n  fs.unlinkSync(dest)\n  return fs.symlinkSync(resolvedSrc, dest)\n}\n\nmodule.exports = copySync\n","'use strict'\n\nconst u = require('universalify').fromPromise\nmodule.exports = {\n  copy: u(require('./copy')),\n  copySync: require('./copy-sync')\n}\n","'use strict'\n\nconst fs = require('graceful-fs')\nconst u = require('universalify').fromCallback\n\nfunction remove (path, callback) {\n  fs.rm(path, { recursive: true, force: true }, callback)\n}\n\nfunction removeSync (path) {\n  fs.rmSync(path, { recursive: true, force: true })\n}\n\nmodule.exports = {\n  remove: u(remove),\n  removeSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst remove = require('../remove')\n\nconst emptyDir = u(async function emptyDir (dir) {\n  let items\n  try {\n    items = await fs.readdir(dir)\n  } catch {\n    return mkdir.mkdirs(dir)\n  }\n\n  return Promise.all(items.map(item => remove.remove(path.join(dir, item))))\n})\n\nfunction emptyDirSync (dir) {\n  let items\n  try {\n    items = fs.readdirSync(dir)\n  } catch {\n    return mkdir.mkdirsSync(dir)\n  }\n\n  items.forEach(item => {\n    item = path.join(dir, item)\n    remove.removeSync(item)\n  })\n}\n\nmodule.exports = {\n  emptyDirSync,\n  emptydirSync: emptyDirSync,\n  emptyDir,\n  emptydir: emptyDir\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\nconst mkdir = require('../mkdirs')\n\nasync function createFile (file) {\n  let stats\n  try {\n    stats = await fs.stat(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n\n  let dirStats = null\n  try {\n    dirStats = await fs.stat(dir)\n  } catch (err) {\n    // if the directory doesn't exist, make it\n    if (err.code === 'ENOENT') {\n      await mkdir.mkdirs(dir)\n      await fs.writeFile(file, '')\n      return\n    } else {\n      throw err\n    }\n  }\n\n  if (dirStats.isDirectory()) {\n    await fs.writeFile(file, '')\n  } else {\n    // parent is not a directory\n    // This is just to cause an internal ENOTDIR error to be thrown\n    await fs.readdir(dir)\n  }\n}\n\nfunction createFileSync (file) {\n  let stats\n  try {\n    stats = fs.statSync(file)\n  } catch { }\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir)\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir)\n    else throw err\n  }\n\n  fs.writeFileSync(file, '')\n}\n\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\nconst mkdir = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst { areIdentical } = require('../util/stat')\n\nasync function createLink (srcpath, dstpath) {\n  let dstStat\n  try {\n    dstStat = await fs.lstat(dstpath)\n  } catch {\n    // ignore error\n  }\n\n  let srcStat\n  try {\n    srcStat = await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  if (dstStat && areIdentical(srcStat, dstStat)) return\n\n  const dir = path.dirname(dstpath)\n\n  const dirExists = await pathExists(dir)\n\n  if (!dirExists) {\n    await mkdir.mkdirs(dir)\n  }\n\n  await fs.link(srcpath, dstpath)\n}\n\nfunction createLinkSync (srcpath, dstpath) {\n  let dstStat\n  try {\n    dstStat = fs.lstatSync(dstpath)\n  } catch {}\n\n  try {\n    const srcStat = fs.lstatSync(srcpath)\n    if (dstStat && areIdentical(srcStat, dstStat)) return\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureLink')\n    throw err\n  }\n\n  const dir = path.dirname(dstpath)\n  const dirExists = fs.existsSync(dir)\n  if (dirExists) return fs.linkSync(srcpath, dstpath)\n  mkdir.mkdirsSync(dir)\n\n  return fs.linkSync(srcpath, dstpath)\n}\n\nmodule.exports = {\n  createLink: u(createLink),\n  createLinkSync\n}\n","'use strict'\n\nconst path = require('path')\nconst fs = require('../fs')\nconst { pathExists } = require('../path-exists')\n\nconst u = require('universalify').fromPromise\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nasync function symlinkPaths (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    try {\n      await fs.lstat(srcpath)\n    } catch (err) {\n      err.message = err.message.replace('lstat', 'ensureSymlink')\n      throw err\n    }\n\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n\n  const exists = await pathExists(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  try {\n    await fs.lstat(srcpath)\n  } catch (err) {\n    err.message = err.message.replace('lstat', 'ensureSymlink')\n    throw err\n  }\n\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  if (path.isAbsolute(srcpath)) {\n    const exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  }\n\n  const dstdir = path.dirname(dstpath)\n  const relativeToDst = path.join(dstdir, srcpath)\n  const exists = fs.existsSync(relativeToDst)\n  if (exists) {\n    return {\n      toCwd: relativeToDst,\n      toDst: srcpath\n    }\n  }\n\n  const srcExists = fs.existsSync(srcpath)\n  if (!srcExists) throw new Error('relative srcpath does not exist')\n  return {\n    toCwd: srcpath,\n    toDst: path.relative(dstdir, srcpath)\n  }\n}\n\nmodule.exports = {\n  symlinkPaths: u(symlinkPaths),\n  symlinkPathsSync\n}\n","'use strict'\n\nconst fs = require('../fs')\nconst u = require('universalify').fromPromise\n\nasync function symlinkType (srcpath, type) {\n  if (type) return type\n\n  let stats\n  try {\n    stats = await fs.lstat(srcpath)\n  } catch {\n    return 'file'\n  }\n\n  return (stats && stats.isDirectory()) ? 'dir' : 'file'\n}\n\nfunction symlinkTypeSync (srcpath, type) {\n  if (type) return type\n\n  let stats\n  try {\n    stats = fs.lstatSync(srcpath)\n  } catch {\n    return 'file'\n  }\n  return (stats && stats.isDirectory()) ? 'dir' : 'file'\n}\n\nmodule.exports = {\n  symlinkType: u(symlinkType),\n  symlinkTypeSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst path = require('path')\nconst fs = require('../fs')\n\nconst { mkdirs, mkdirsSync } = require('../mkdirs')\n\nconst { symlinkPaths, symlinkPathsSync } = require('./symlink-paths')\nconst { symlinkType, symlinkTypeSync } = require('./symlink-type')\n\nconst { pathExists } = require('../path-exists')\n\nconst { areIdentical } = require('../util/stat')\n\nasync function createSymlink (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = await fs.lstat(dstpath)\n  } catch { }\n\n  if (stats && stats.isSymbolicLink()) {\n    const [srcStat, dstStat] = await Promise.all([\n      fs.stat(srcpath),\n      fs.stat(dstpath)\n    ])\n\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = await symlinkPaths(srcpath, dstpath)\n  srcpath = relative.toDst\n  const toType = await symlinkType(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n\n  if (!(await pathExists(dir))) {\n    await mkdirs(dir)\n  }\n\n  return fs.symlink(srcpath, dstpath, toType)\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch { }\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n","'use strict'\n\nconst { createFile, createFileSync } = require('./file')\nconst { createLink, createLinkSync } = require('./link')\nconst { createSymlink, createSymlinkSync } = require('./symlink')\n\nmodule.exports = {\n  // file\n  createFile,\n  createFileSync,\n  ensureFile: createFile,\n  ensureFileSync: createFileSync,\n  // link\n  createLink,\n  createLinkSync,\n  ensureLink: createLink,\n  ensureLinkSync: createLinkSync,\n  // symlink\n  createSymlink,\n  createSymlinkSync,\n  ensureSymlink: createSymlink,\n  ensureSymlinkSync: createSymlinkSync\n}\n","function stringify (obj, { EOL = '\\n', finalEOL = true, replacer = null, spaces } = {}) {\n  const EOF = finalEOL ? EOL : ''\n  const str = JSON.stringify(obj, replacer, spaces)\n\n  return str.replace(/\\n/g, EOL) + EOF\n}\n\nfunction stripBom (content) {\n  // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified\n  if (Buffer.isBuffer(content)) content = content.toString('utf8')\n  return content.replace(/^\\uFEFF/, '')\n}\n\nmodule.exports = { stringify, stripBom }\n","let _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\nconst universalify = require('universalify')\nconst { stringify, stripBom } = require('./utils')\n\nasync function _readFile (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  let data = await universalify.fromCallback(fs.readFile)(file, options)\n\n  data = stripBom(data)\n\n  let obj\n  try {\n    obj = JSON.parse(data, options ? options.reviver : null)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n\n  return obj\n}\n\nconst readFile = universalify.fromPromise(_readFile)\n\nfunction readFileSync (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  try {\n    let content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nasync function _writeFile (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n\n  await universalify.fromCallback(fs.writeFile)(file, str, options)\n}\n\nconst writeFile = universalify.fromPromise(_writeFile)\n\nfunction writeFileSync (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nconst jsonfile = {\n  readFile,\n  readFileSync,\n  writeFile,\n  writeFileSync\n}\n\nmodule.exports = jsonfile\n","'use strict'\n\nconst jsonFile = require('jsonfile')\n\nmodule.exports = {\n  // jsonfile exports\n  readJson: jsonFile.readFile,\n  readJsonSync: jsonFile.readFileSync,\n  writeJson: jsonFile.writeFile,\n  writeJsonSync: jsonFile.writeFileSync\n}\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst fs = require('../fs')\nconst path = require('path')\nconst mkdir = require('../mkdirs')\nconst pathExists = require('../path-exists').pathExists\n\nasync function outputFile (file, data, encoding = 'utf-8') {\n  const dir = path.dirname(file)\n\n  if (!(await pathExists(dir))) {\n    await mkdir.mkdirs(dir)\n  }\n\n  return fs.writeFile(file, data, encoding)\n}\n\nfunction outputFileSync (file, ...args) {\n  const dir = path.dirname(file)\n  if (!fs.existsSync(dir)) {\n    mkdir.mkdirsSync(dir)\n  }\n\n  fs.writeFileSync(file, ...args)\n}\n\nmodule.exports = {\n  outputFile: u(outputFile),\n  outputFileSync\n}\n","'use strict'\n\nconst { stringify } = require('jsonfile/utils')\nconst { outputFile } = require('../output-file')\n\nasync function outputJson (file, data, options = {}) {\n  const str = stringify(data, options)\n\n  await outputFile(file, str, options)\n}\n\nmodule.exports = outputJson\n","'use strict'\n\nconst { stringify } = require('jsonfile/utils')\nconst { outputFileSync } = require('../output-file')\n\nfunction outputJsonSync (file, data, options) {\n  const str = stringify(data, options)\n\n  outputFileSync(file, str, options)\n}\n\nmodule.exports = outputJsonSync\n","'use strict'\n\nconst u = require('universalify').fromPromise\nconst jsonFile = require('./jsonfile')\n\njsonFile.outputJson = u(require('./output-json'))\njsonFile.outputJsonSync = require('./output-json-sync')\n// aliases\njsonFile.outputJSON = jsonFile.outputJson\njsonFile.outputJSONSync = jsonFile.outputJsonSync\njsonFile.writeJSON = jsonFile.writeJson\njsonFile.writeJSONSync = jsonFile.writeJsonSync\njsonFile.readJSON = jsonFile.readJson\njsonFile.readJSONSync = jsonFile.readJsonSync\n\nmodule.exports = jsonFile\n","'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst { copy } = require('../copy')\nconst { remove } = require('../remove')\nconst { mkdirp } = require('../mkdirs')\nconst { pathExists } = require('../path-exists')\nconst stat = require('../util/stat')\n\nasync function move (src, dest, opts = {}) {\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = await stat.checkPaths(src, dest, 'move', opts)\n\n  await stat.checkParentPaths(src, srcStat, dest, 'move')\n\n  // If the parent of dest is not root, make sure it exists before proceeding\n  const destParent = path.dirname(dest)\n  const parsedParentPath = path.parse(destParent)\n  if (parsedParentPath.root !== destParent) {\n    await mkdirp(destParent)\n  }\n\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nasync function doRename (src, dest, overwrite, isChangingCase) {\n  if (!isChangingCase) {\n    if (overwrite) {\n      await remove(dest)\n    } else if (await pathExists(dest)) {\n      throw new Error('dest already exists.')\n    }\n  }\n\n  try {\n    // Try w/ rename first, and try copy + remove if EXDEV\n    await fs.rename(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') {\n      throw err\n    }\n    await moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nasync function moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n\n  await copy(src, dest, opts)\n  return remove(src)\n}\n\nmodule.exports = move\n","'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copySync = require('../copy').copySync\nconst removeSync = require('../remove').removeSync\nconst mkdirpSync = require('../mkdirs').mkdirpSync\nconst stat = require('../util/stat')\n\nfunction moveSync (src, dest, opts) {\n  opts = opts || {}\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, 'move', opts)\n  stat.checkParentPathsSync(src, srcStat, dest, 'move')\n  if (!isParentRoot(dest)) mkdirpSync(path.dirname(dest))\n  return doRename(src, dest, overwrite, isChangingCase)\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase) {\n  if (isChangingCase) return rename(src, dest, overwrite)\n  if (overwrite) {\n    removeSync(dest)\n    return rename(src, dest, overwrite)\n  }\n  if (fs.existsSync(dest)) throw new Error('dest already exists.')\n  return rename(src, dest, overwrite)\n}\n\nfunction rename (src, dest, overwrite) {\n  try {\n    fs.renameSync(src, dest)\n  } catch (err) {\n    if (err.code !== 'EXDEV') throw err\n    return moveAcrossDevice(src, dest, overwrite)\n  }\n}\n\nfunction moveAcrossDevice (src, dest, overwrite) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n  copySync(src, dest, opts)\n  return removeSync(src)\n}\n\nmodule.exports = moveSync\n","'use strict'\n\nconst u = require('universalify').fromPromise\nmodule.exports = {\n  move: u(require('./move')),\n  moveSync: require('./move-sync')\n}\n","'use strict'\n\nmodule.exports = {\n  // Export promiseified graceful-fs:\n  ...require('./fs'),\n  // Export extra methods:\n  ...require('./copy'),\n  ...require('./empty'),\n  ...require('./ensure'),\n  ...require('./json'),\n  ...require('./mkdirs'),\n  ...require('./move'),\n  ...require('./output-file'),\n  ...require('./path-exists'),\n  ...require('./remove')\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar camelCase = _interopDefault(require('lodash.camelcase'));\n\n/**\n * Takes any input and guarantees an array back.\n *\n * - Converts array-like objects (e.g. `arguments`, `Set`) to a real array.\n * - Converts `undefined` to an empty array.\n * - Converts any another other, singular value (including `null`, objects and iterables other than `Set`) into an array containing that value.\n * - Ignores input which is already an array.\n *\n * @module array-back\n * @example\n * > const arrayify = require('array-back')\n *\n * > arrayify(undefined)\n * []\n *\n * > arrayify(null)\n * [ null ]\n *\n * > arrayify(0)\n * [ 0 ]\n *\n * > arrayify([ 1, 2 ])\n * [ 1, 2 ]\n *\n * > arrayify(new Set([ 1, 2 ]))\n * [ 1, 2 ]\n *\n * > function f(){ return arrayify(arguments); }\n * > f(1,2,3)\n * [ 1, 2, 3 ]\n */\n\nfunction isObject (input) {\n  return typeof input === 'object' && input !== null\n}\n\nfunction isArrayLike (input) {\n  return isObject(input) && typeof input.length === 'number'\n}\n\n/**\n * @param {*} - The input value to convert to an array\n * @returns {Array}\n * @alias module:array-back\n */\nfunction arrayify (input) {\n  if (Array.isArray(input)) {\n    return input\n  }\n\n  if (input === undefined) {\n    return []\n  }\n\n  if (isArrayLike(input) || input instanceof Set) {\n    return Array.from(input)\n  }\n\n  return [ input ]\n}\n\n/**\n * Takes any input and guarantees an array back.\n *\n * - converts array-like objects (e.g. `arguments`) to a real array\n * - converts `undefined` to an empty array\n * - converts any another other, singular value (including `null`) into an array containing that value\n * - ignores input which is already an array\n *\n * @module array-back\n * @example\n * > const arrayify = require('array-back')\n *\n * > arrayify(undefined)\n * []\n *\n * > arrayify(null)\n * [ null ]\n *\n * > arrayify(0)\n * [ 0 ]\n *\n * > arrayify([ 1, 2 ])\n * [ 1, 2 ]\n *\n * > function f(){ return arrayify(arguments); }\n * > f(1,2,3)\n * [ 1, 2, 3 ]\n */\n\nfunction isObject$1 (input) {\n  return typeof input === 'object' && input !== null\n}\n\nfunction isArrayLike$1 (input) {\n  return isObject$1(input) && typeof input.length === 'number'\n}\n\n/**\n * @param {*} - the input value to convert to an array\n * @returns {Array}\n * @alias module:array-back\n */\nfunction arrayify$1 (input) {\n  if (Array.isArray(input)) {\n    return input\n  } else {\n    if (input === undefined) {\n      return []\n    } else if (isArrayLike$1(input)) {\n      return Array.prototype.slice.call(input)\n    } else {\n      return [ input ]\n    }\n  }\n}\n\n/**\n * Find and either replace or remove items in an array.\n *\n * @module find-replace\n * @example\n * > const findReplace = require('find-replace')\n * > const numbers = [ 1, 2, 3]\n *\n * > findReplace(numbers, n => n === 2, 'two')\n * [ 1, 'two', 3 ]\n *\n * > findReplace(numbers, n => n === 2, [ 'two', 'zwei' ])\n * [ 1, [ 'two', 'zwei' ], 3 ]\n *\n * > findReplace(numbers, n => n === 2, 'two', 'zwei')\n * [ 1, 'two', 'zwei', 3 ]\n *\n * > findReplace(numbers, n => n === 2) // no replacement, so remove\n * [ 1, 3 ]\n */\n\n/**\n * @param {array} - The input array\n * @param {testFn} - A predicate function which, if returning `true` causes the current item to be operated on.\n * @param [replaceWith] {...any} - If specified, found values will be replaced with these values, else removed.\n * @returns {array}\n * @alias module:find-replace\n */\nfunction findReplace (array, testFn) {\n  const found = [];\n  const replaceWiths = arrayify$1(arguments);\n  replaceWiths.splice(0, 2);\n\n  arrayify$1(array).forEach((value, index) => {\n    let expanded = [];\n    replaceWiths.forEach(replaceWith => {\n      if (typeof replaceWith === 'function') {\n        expanded = expanded.concat(replaceWith(value));\n      } else {\n        expanded.push(replaceWith);\n      }\n    });\n\n    if (testFn(value)) {\n      found.push({\n        index: index,\n        replaceWithValue: expanded\n      });\n    }\n  });\n\n  found.reverse().forEach(item => {\n    const spliceArgs = [ item.index, 1 ].concat(item.replaceWithValue);\n    array.splice.apply(array, spliceArgs);\n  });\n\n  return array\n}\n\n/**\n * Some useful tools for working with `process.argv`.\n *\n * @module argv-tools\n * @typicalName argvTools\n * @example\n * const argvTools = require('argv-tools')\n */\n\n/**\n * Regular expressions for matching option formats.\n * @static\n */\nconst re = {\n  short: /^-([^\\d-])$/,\n  long: /^--(\\S+)/,\n  combinedShort: /^-[^\\d-]{2,}$/,\n  optEquals: /^(--\\S+?)=(.*)/\n};\n\n/**\n * Array subclass encapsulating common operations on `process.argv`.\n * @static\n */\nclass ArgvArray extends Array {\n  /**\n   * Clears the array has loads the supplied input.\n   * @param {string[]} argv - The argv list to load. Defaults to `process.argv`.\n   */\n  load (argv) {\n    this.clear();\n    if (argv && argv !== process.argv) {\n      argv = arrayify(argv);\n    } else {\n      /* if no argv supplied, assume we are parsing process.argv */\n      argv = process.argv.slice(0);\n      const deleteCount = process.execArgv.some(isExecArg) ? 1 : 2;\n      argv.splice(0, deleteCount);\n    }\n    argv.forEach(arg => this.push(String(arg)));\n  }\n\n  /**\n   * Clear the array.\n   */\n  clear () {\n    this.length = 0;\n  }\n\n  /**\n   * expand ``--option=value` style args.\n   */\n  expandOptionEqualsNotation () {\n    if (this.some(arg => re.optEquals.test(arg))) {\n      const expandedArgs = [];\n      this.forEach(arg => {\n        const matches = arg.match(re.optEquals);\n        if (matches) {\n          expandedArgs.push(matches[1], matches[2]);\n        } else {\n          expandedArgs.push(arg);\n        }\n      });\n      this.clear();\n      this.load(expandedArgs);\n    }\n  }\n\n  /**\n   * expand getopt-style combinedShort options.\n   */\n  expandGetoptNotation () {\n    if (this.hasCombinedShortOptions()) {\n      findReplace(this, re.combinedShort, expandCombinedShortArg);\n    }\n  }\n\n  /**\n   * Returns true if the array contains combined short options (e.g. `-ab`).\n   * @returns {boolean}\n   */\n  hasCombinedShortOptions () {\n    return this.some(arg => re.combinedShort.test(arg))\n  }\n\n  static from (argv) {\n    const result = new this();\n    result.load(argv);\n    return result\n  }\n}\n\n/**\n * Expand a combined short option.\n * @param {string} - the string to expand, e.g. `-ab`\n * @returns {string[]}\n * @static\n */\nfunction expandCombinedShortArg (arg) {\n  /* remove initial hypen */\n  arg = arg.slice(1);\n  return arg.split('').map(letter => '-' + letter)\n}\n\n/**\n * Returns true if the supplied arg matches `--option=value` notation.\n * @param {string} - the arg to test, e.g. `--one=something`\n * @returns {boolean}\n * @static\n */\nfunction isOptionEqualsNotation (arg) {\n  return re.optEquals.test(arg)\n}\n\n/**\n * Returns true if the supplied arg is in either long (`--one`) or short (`-o`) format.\n * @param {string} - the arg to test, e.g. `--one`\n * @returns {boolean}\n * @static\n */\nfunction isOption (arg) {\n  return (re.short.test(arg) || re.long.test(arg)) && !re.optEquals.test(arg)\n}\n\n/**\n * Returns true if the supplied arg is in long (`--one`) format.\n * @param {string} - the arg to test, e.g. `--one`\n * @returns {boolean}\n * @static\n */\nfunction isLongOption (arg) {\n  return re.long.test(arg) && !isOptionEqualsNotation(arg)\n}\n\n/**\n * Returns the name from a long, short or `--options=value` arg.\n * @param {string} - the arg to inspect, e.g. `--one`\n * @returns {string}\n * @static\n */\nfunction getOptionName (arg) {\n  if (re.short.test(arg)) {\n    return arg.match(re.short)[1]\n  } else if (isLongOption(arg)) {\n    return arg.match(re.long)[1]\n  } else if (isOptionEqualsNotation(arg)) {\n    return arg.match(re.optEquals)[1].replace(/^--/, '')\n  } else {\n    return null\n  }\n}\n\nfunction isValue (arg) {\n  return !(isOption(arg) || re.combinedShort.test(arg) || re.optEquals.test(arg))\n}\n\nfunction isExecArg (arg) {\n  return ['--eval', '-e'].indexOf(arg) > -1 || arg.startsWith('--eval=')\n}\n\n/**\n * For type-checking Javascript values.\n * @module typical\n * @typicalname t\n * @example\n * const t = require('typical')\n */\n\n/**\n * Returns true if input is a number\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isNumber(0)\n * true\n * > t.isNumber(1)\n * true\n * > t.isNumber(1.1)\n * true\n * > t.isNumber(0xff)\n * true\n * > t.isNumber(0644)\n * true\n * > t.isNumber(6.2e5)\n * true\n * > t.isNumber(NaN)\n * false\n * > t.isNumber(Infinity)\n * false\n */\nfunction isNumber (n) {\n  return !isNaN(parseFloat(n)) && isFinite(n)\n}\n\n/**\n * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.\n *\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isPlainObject({ something: 'one' })\n * true\n * > t.isPlainObject(new Date())\n * false\n * > t.isPlainObject([ 0, 1 ])\n * false\n * > t.isPlainObject(/test/)\n * false\n * > t.isPlainObject(1)\n * false\n * > t.isPlainObject('one')\n * false\n * > t.isPlainObject(null)\n * false\n * > t.isPlainObject((function * () {})())\n * false\n * > t.isPlainObject(function * () {})\n * false\n */\nfunction isPlainObject (input) {\n  return input !== null && typeof input === 'object' && input.constructor === Object\n}\n\n/**\n * An array-like value has all the properties of an array, but is not an array instance. Examples in the `arguments` object. Returns true if the input value is an object, not null and has a `length` property with a numeric value.\n *\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * function sum(x, y){\n *     console.log(t.isArrayLike(arguments))\n *     // prints `true`\n * }\n */\nfunction isArrayLike$2 (input) {\n  return isObject$2(input) && typeof input.length === 'number'\n}\n\n/**\n * returns true if the typeof input is `'object'`, but not null!\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isObject$2 (input) {\n  return typeof input === 'object' && input !== null\n}\n\n/**\n * Returns true if the input value is defined\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isDefined (input) {\n  return typeof input !== 'undefined'\n}\n\n/**\n * Returns true if the input value is a string\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * Returns true if the input value is a boolean\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isBoolean (input) {\n  return typeof input === 'boolean'\n}\n\n/**\n * Returns true if the input value is a function\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isFunction (input) {\n  return typeof input === 'function'\n}\n\n/**\n * Returns true if the input value is an es2015 `class`.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isClass (input) {\n  if (isFunction(input)) {\n    return /^class /.test(Function.prototype.toString.call(input))\n  } else {\n    return false\n  }\n}\n\n/**\n * Returns true if the input is a string, number, symbol, boolean, null or undefined value.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isPrimitive (input) {\n  if (input === null) return true\n  switch (typeof input) {\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'undefined':\n    case 'boolean':\n      return true\n    default:\n      return false\n  }\n}\n\n/**\n * Returns true if the input is a Promise.\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n */\nfunction isPromise (input) {\n  if (input) {\n    const isPromise = isDefined(Promise) && input instanceof Promise;\n    const isThenable = input.then && typeof input.then === 'function';\n    return !!(isPromise || isThenable)\n  } else {\n    return false\n  }\n}\n\n/**\n * Returns true if the input is an iterable (`Map`, `Set`, `Array`, Generator etc.).\n * @param {*} - the input to test\n * @returns {boolean}\n * @static\n * @example\n * > t.isIterable('string')\n * true\n * > t.isIterable(new Map())\n * true\n * > t.isIterable([])\n * true\n * > t.isIterable((function * () {})())\n * true\n * > t.isIterable(Promise.resolve())\n * false\n * > t.isIterable(Promise)\n * false\n * > t.isIterable(true)\n * false\n * > t.isIterable({})\n * false\n * > t.isIterable(0)\n * false\n * > t.isIterable(1.1)\n * false\n * > t.isIterable(NaN)\n * false\n * > t.isIterable(Infinity)\n * false\n * > t.isIterable(function () {})\n * false\n * > t.isIterable(Date)\n * false\n * > t.isIterable()\n * false\n * > t.isIterable({ then: function () {} })\n * false\n */\nfunction isIterable (input) {\n  if (input === null || !isDefined(input)) {\n    return false\n  } else {\n    return (\n      typeof input[Symbol.iterator] === 'function' ||\n      typeof input[Symbol.asyncIterator] === 'function'\n    )\n  }\n}\n\nvar t = {\n  isNumber,\n  isString,\n  isBoolean,\n  isPlainObject,\n  isArrayLike: isArrayLike$2,\n  isObject: isObject$2,\n  isDefined,\n  isFunction,\n  isClass,\n  isPrimitive,\n  isPromise,\n  isIterable\n};\n\n/**\n * @module option-definition\n */\n\n/**\n * Describes a command-line option. Additionally, if generating a usage guide with [command-line-usage](https://github.com/75lb/command-line-usage) you could optionally add `description` and `typeLabel` properties to each definition.\n *\n * @alias module:option-definition\n * @typicalname option\n */\nclass OptionDefinition {\n  constructor (definition) {\n    /**\n    * The only required definition property is `name`, so the simplest working example is\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'file' },\n    *   { name: 'depth' }\n    * ]\n    * ```\n    *\n    * Where a `type` property is not specified it will default to `String`.\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | -------------------- | ------------ |\n    * | 1   | `--file` | `{ file: null }` |\n    * | 2   | `--file lib.js` | `{ file: 'lib.js' }` |\n    * | 3   | `--depth 2` | `{ depth: '2' }` |\n    *\n    * Unicode option names and aliases are valid, for example:\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'один' },\n    *   { name: '两' },\n    *   { name: 'три', alias: 'т' }\n    * ]\n    * ```\n    * @type {string}\n    */\n    this.name = definition.name;\n\n    /**\n    * The `type` value is a setter function (you receive the output from this), enabling you to be specific about the type and value received.\n    *\n    * The most common values used are `String` (the default), `Number` and `Boolean` but you can use a custom function, for example:\n    *\n    * ```js\n    * const fs = require('fs')\n    *\n    * class FileDetails {\n    *   constructor (filename) {\n    *     this.filename = filename\n    *     this.exists = fs.existsSync(filename)\n    *   }\n    * }\n    *\n    * const cli = commandLineArgs([\n    *   { name: 'file', type: filename => new FileDetails(filename) },\n    *   { name: 'depth', type: Number }\n    * ])\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ----------------- | ------------ |\n    * | 1   | `--file asdf.txt` | `{ file: { filename: 'asdf.txt', exists: false } }` |\n    *\n    * The `--depth` option expects a `Number`. If no value was set, you will receive `null`.\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ----------------- | ------------ |\n    * | 2   | `--depth` | `{ depth: null }` |\n    * | 3   | `--depth 2` | `{ depth: 2 }` |\n    *\n    * @type {function}\n    * @default String\n    */\n    this.type = definition.type || String;\n\n    /**\n    * getopt-style short option names. Can be any single character (unicode included) except a digit or hyphen.\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'hot', alias: 'h', type: Boolean },\n    *   { name: 'discount', alias: 'd', type: Boolean },\n    *   { name: 'courses', alias: 'c' , type: Number }\n    * ]\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `-hcd` | `{ hot: true, courses: null, discount: true }` |\n    * | 2   | `-hdc 3` | `{ hot: true, discount: true, courses: 3 }` |\n    *\n    * @type {string}\n    */\n    this.alias = definition.alias;\n\n    /**\n    * Set this flag if the option takes a list of values. You will receive an array of values, each passed through the `type` function (if specified).\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'files', type: String, multiple: true }\n    * ]\n    * ```\n    *\n    * Note, examples 1 and 3 below demonstrate \"greedy\" parsing which can be disabled by using `lazyMultiple`.\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 2   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 3   | `--files *` | `{ files: [ 'one.js', 'two.js' ] }` |\n    *\n    * @type {boolean}\n    */\n    this.multiple = definition.multiple;\n\n    /**\n     * Identical to `multiple` but with greedy parsing disabled.\n     *\n     * ```js\n     * const optionDefinitions = [\n     *   { name: 'files', lazyMultiple: true },\n     *   { name: 'verbose', alias: 'v', type: Boolean, lazyMultiple: true }\n     * ]\n     * ```\n     *\n     * | #   | argv input | commandLineArgs() output |\n     * | --- | ------------ | ------------ |\n     * | 1   | `--files one.js --files two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n     * | 2   | `-vvv` | `{ verbose: [ true, true, true ] }` |\n     *\n     * @type {boolean}\n     */\n    this.lazyMultiple = definition.lazyMultiple;\n\n    /**\n    * Any values unaccounted for by an option definition will be set on the `defaultOption`. This flag is typically set on the most commonly-used option to make for more concise usage (i.e. `$ example *.js` instead of `$ example --files *.js`).\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'files', multiple: true, defaultOption: true }\n    * ]\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   | `--files one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 2   | `one.js two.js` | `{ files: [ 'one.js', 'two.js' ] }` |\n    * | 3   | `*` | `{ files: [ 'one.js', 'two.js' ] }` |\n    *\n    * @type {boolean}\n    */\n    this.defaultOption = definition.defaultOption;\n\n    /**\n    * An initial value for the option.\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'files', multiple: true, defaultValue: [ 'one.js' ] },\n    *   { name: 'max', type: Number, defaultValue: 3 }\n    * ]\n    * ```\n    *\n    * | #   | argv input | commandLineArgs() output |\n    * | --- | ------------ | ------------ |\n    * | 1   |  | `{ files: [ 'one.js' ], max: 3 }` |\n    * | 2   | `--files two.js` | `{ files: [ 'two.js' ], max: 3 }` |\n    * | 3   | `--max 4` | `{ files: [ 'one.js' ], max: 4 }` |\n    *\n    * @type {*}\n    */\n    this.defaultValue = definition.defaultValue;\n\n    /**\n    * When your app has a large amount of options it makes sense to organise them in groups.\n    *\n    * There are two automatic groups: `_all` (contains all options) and `_none` (contains options without a `group` specified in their definition).\n    *\n    * ```js\n    * const optionDefinitions = [\n    *   { name: 'verbose', group: 'standard' },\n    *   { name: 'help', group: [ 'standard', 'main' ] },\n    *   { name: 'compress', group: [ 'server', 'main' ] },\n    *   { name: 'static', group: 'server' },\n    *   { name: 'debug' }\n    * ]\n    * ```\n    *\n    *<table>\n    *  <tr>\n    *    <th>#</th><th>Command Line</th><th>commandLineArgs() output</th>\n    *  </tr>\n    *  <tr>\n    *    <td>1</td><td><code>--verbose</code></td><td><pre><code>\n    *{\n    *  _all: { verbose: true },\n    *  standard: { verbose: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>2</td><td><code>--debug</code></td><td><pre><code>\n    *{\n    *  _all: { debug: true },\n    *  _none: { debug: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>3</td><td><code>--verbose --debug --compress</code></td><td><pre><code>\n    *{\n    *  _all: {\n    *    verbose: true,\n    *    debug: true,\n    *    compress: true\n    *  },\n    *  standard: { verbose: true },\n    *  server: { compress: true },\n    *  main: { compress: true },\n    *  _none: { debug: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *  <tr>\n    *    <td>4</td><td><code>--compress</code></td><td><pre><code>\n    *{\n    *  _all: { compress: true },\n    *  server: { compress: true },\n    *  main: { compress: true }\n    *}\n    *</code></pre></td>\n    *  </tr>\n    *</table>\n    *\n    * @type {string|string[]}\n    */\n    this.group = definition.group;\n\n    /* pick up any remaining properties */\n    for (const prop in definition) {\n      if (!this[prop]) this[prop] = definition[prop];\n    }\n  }\n\n  isBoolean () {\n    return this.type === Boolean || (t.isFunction(this.type) && this.type.name === 'Boolean')\n  }\n\n  isMultiple () {\n    return this.multiple || this.lazyMultiple\n  }\n\n  static create (def) {\n    const result = new this(def);\n    return result\n  }\n}\n\n/**\n * @module option-definitions\n */\n\n/**\n * @alias module:option-definitions\n */\nclass Definitions extends Array {\n  /**\n   * validate option definitions\n   * @param {boolean} [caseInsensitive=false] - whether arguments will be parsed in a case insensitive manner\n   * @returns {string}\n   */\n  validate (caseInsensitive) {\n    const someHaveNoName = this.some(def => !def.name);\n    if (someHaveNoName) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definitions: the `name` property is required on each definition'\n      );\n    }\n\n    const someDontHaveFunctionType = this.some(def => def.type && typeof def.type !== 'function');\n    if (someDontHaveFunctionType) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definitions: the `type` property must be a setter fuction (default: `Boolean`)'\n      );\n    }\n\n    let invalidOption;\n\n    const numericAlias = this.some(def => {\n      invalidOption = def;\n      return t.isDefined(def.alias) && t.isNumber(def.alias)\n    });\n    if (numericAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definition: to avoid ambiguity an alias cannot be numeric [--' + invalidOption.name + ' alias is -' + invalidOption.alias + ']'\n      );\n    }\n\n    const multiCharacterAlias = this.some(def => {\n      invalidOption = def;\n      return t.isDefined(def.alias) && def.alias.length !== 1\n    });\n    if (multiCharacterAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definition: an alias must be a single character'\n      );\n    }\n\n    const hypenAlias = this.some(def => {\n      invalidOption = def;\n      return def.alias === '-'\n    });\n    if (hypenAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Invalid option definition: an alias cannot be \"-\"'\n      );\n    }\n\n    const duplicateName = hasDuplicates(this.map(def => caseInsensitive ? def.name.toLowerCase() : def.name));\n    if (duplicateName) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Two or more option definitions have the same name'\n      );\n    }\n\n    const duplicateAlias = hasDuplicates(this.map(def => caseInsensitive && t.isDefined(def.alias) ? def.alias.toLowerCase() : def.alias));\n    if (duplicateAlias) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Two or more option definitions have the same alias'\n      );\n    }\n\n    const duplicateDefaultOption = this.filter(def => def.defaultOption === true).length > 1;\n    if (duplicateDefaultOption) {\n      halt(\n        'INVALID_DEFINITIONS',\n        'Only one option definition can be the defaultOption'\n      );\n    }\n\n    const defaultBoolean = this.some(def => {\n      invalidOption = def;\n      return def.isBoolean() && def.defaultOption\n    });\n    if (defaultBoolean) {\n      halt(\n        'INVALID_DEFINITIONS',\n        `A boolean option [\"${invalidOption.name}\"] can not also be the defaultOption.`\n      );\n    }\n  }\n\n  /**\n   * Get definition by option arg (e.g. `--one` or `-o`)\n   * @param {string} [arg] the argument name to get the definition for\n   * @param {boolean} [caseInsensitive] whether to use case insensitive comparisons when finding the appropriate definition\n   * @returns {Definition}\n   */\n  get (arg, caseInsensitive) {\n    if (isOption(arg)) {\n      if (re.short.test(arg)) {\n        const shortOptionName = getOptionName(arg);\n        if (caseInsensitive) {\n          const lowercaseShortOptionName = shortOptionName.toLowerCase();\n          return this.find(def => t.isDefined(def.alias) && def.alias.toLowerCase() === lowercaseShortOptionName)\n        } else {\n          return this.find(def => def.alias === shortOptionName)\n        }\n      } else {\n        const optionName = getOptionName(arg);\n        if (caseInsensitive) {\n          const lowercaseOptionName = optionName.toLowerCase();\n          return this.find(def => def.name.toLowerCase() === lowercaseOptionName)\n        } else {\n          return this.find(def => def.name === optionName)\n        }\n      }\n    } else {\n      return this.find(def => def.name === arg)\n    }\n  }\n\n  getDefault () {\n    return this.find(def => def.defaultOption === true)\n  }\n\n  isGrouped () {\n    return this.some(def => def.group)\n  }\n\n  whereGrouped () {\n    return this.filter(containsValidGroup)\n  }\n\n  whereNotGrouped () {\n    return this.filter(def => !containsValidGroup(def))\n  }\n\n  whereDefaultValueSet () {\n    return this.filter(def => t.isDefined(def.defaultValue))\n  }\n\n  static from (definitions, caseInsensitive) {\n    if (definitions instanceof this) return definitions\n    const result = super.from(arrayify(definitions), def => OptionDefinition.create(def));\n    result.validate(caseInsensitive);\n    return result\n  }\n}\n\nfunction halt (name, message) {\n  const err = new Error(message);\n  err.name = name;\n  throw err\n}\n\nfunction containsValidGroup (def) {\n  return arrayify(def.group).some(group => group)\n}\n\nfunction hasDuplicates (array) {\n  const items = {};\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (items[value]) {\n      return true\n    } else {\n      if (t.isDefined(value)) items[value] = true;\n    }\n  }\n}\n\n/**\n * @module argv-parser\n */\n\n/**\n * @alias module:argv-parser\n */\nclass ArgvParser {\n  /**\n   * @param {OptionDefinitions} - Definitions array\n   * @param {object} [options] - Options\n   * @param {string[]} [options.argv] - Overrides `process.argv`\n   * @param {boolean} [options.stopAtFirstUnknown] -\n   * @param {boolean} [options.caseInsensitive] - Arguments will be parsed in a case insensitive manner. Defaults to false.\n   */\n  constructor (definitions, options) {\n    this.options = Object.assign({}, options);\n    /**\n     * Option Definitions\n     */\n    this.definitions = Definitions.from(definitions, this.options.caseInsensitive);\n\n    /**\n     * Argv\n     */\n    this.argv = ArgvArray.from(this.options.argv);\n    if (this.argv.hasCombinedShortOptions()) {\n      findReplace(this.argv, re.combinedShort.test.bind(re.combinedShort), arg => {\n        arg = arg.slice(1);\n        return arg.split('').map(letter => ({ origArg: `-${arg}`, arg: '-' + letter }))\n      });\n    }\n  }\n\n  /**\n   * Yields one `{ event, name, value, arg, def }` argInfo object for each arg in `process.argv` (or `options.argv`).\n   */\n  * [Symbol.iterator] () {\n    const definitions = this.definitions;\n\n    let def;\n    let value;\n    let name;\n    let event;\n    let singularDefaultSet = false;\n    let unknownFound = false;\n    let origArg;\n\n    for (let arg of this.argv) {\n      if (t.isPlainObject(arg)) {\n        origArg = arg.origArg;\n        arg = arg.arg;\n      }\n\n      if (unknownFound && this.options.stopAtFirstUnknown) {\n        yield { event: 'unknown_value', arg, name: '_unknown', value: undefined };\n        continue\n      }\n\n      /* handle long or short option */\n      if (isOption(arg)) {\n        def = definitions.get(arg, this.options.caseInsensitive);\n        value = undefined;\n        if (def) {\n          value = def.isBoolean() ? true : null;\n          event = 'set';\n        } else {\n          event = 'unknown_option';\n        }\n\n      /* handle --option-value notation */\n      } else if (isOptionEqualsNotation(arg)) {\n        const matches = arg.match(re.optEquals);\n        def = definitions.get(matches[1], this.options.caseInsensitive);\n        if (def) {\n          if (def.isBoolean()) {\n            yield { event: 'unknown_value', arg, name: '_unknown', value, def };\n            event = 'set';\n            value = true;\n          } else {\n            event = 'set';\n            value = matches[2];\n          }\n        } else {\n          event = 'unknown_option';\n        }\n\n      /* handle value */\n      } else if (isValue(arg)) {\n        if (def) {\n          value = arg;\n          event = 'set';\n        } else {\n          /* get the defaultOption */\n          def = this.definitions.getDefault();\n          if (def && !singularDefaultSet) {\n            value = arg;\n            event = 'set';\n          } else {\n            event = 'unknown_value';\n            def = undefined;\n          }\n        }\n      }\n\n      name = def ? def.name : '_unknown';\n      const argInfo = { event, arg, name, value, def };\n      if (origArg) {\n        argInfo.subArg = arg;\n        argInfo.arg = origArg;\n      }\n      yield argInfo;\n\n      /* unknownFound logic */\n      if (name === '_unknown') unknownFound = true;\n\n      /* singularDefaultSet logic */\n      if (def && def.defaultOption && !def.isMultiple() && event === 'set') singularDefaultSet = true;\n\n      /* reset values once consumed and yielded */\n      if (def && def.isBoolean()) def = undefined;\n      /* reset the def if it's a singular which has been set */\n      if (def && !def.multiple && t.isDefined(value) && value !== null) {\n        def = undefined;\n      }\n      value = undefined;\n      event = undefined;\n      name = undefined;\n      origArg = undefined;\n    }\n  }\n}\n\nconst _value = new WeakMap();\n\n/**\n * Encapsulates behaviour (defined by an OptionDefinition) when setting values\n */\nclass Option {\n  constructor (definition) {\n    this.definition = new OptionDefinition(definition);\n    this.state = null; /* set or default */\n    this.resetToDefault();\n  }\n\n  get () {\n    return _value.get(this)\n  }\n\n  set (val) {\n    this._set(val, 'set');\n  }\n\n  _set (val, state) {\n    const def = this.definition;\n    if (def.isMultiple()) {\n      /* don't add null or undefined to a multiple */\n      if (val !== null && val !== undefined) {\n        const arr = this.get();\n        if (this.state === 'default') arr.length = 0;\n        arr.push(def.type(val));\n        this.state = state;\n      }\n    } else {\n      /* throw if already set on a singlar defaultOption */\n      if (!def.isMultiple() && this.state === 'set') {\n        const err = new Error(`Singular option already set [${this.definition.name}=${this.get()}]`);\n        err.name = 'ALREADY_SET';\n        err.value = val;\n        err.optionName = def.name;\n        throw err\n      } else if (val === null || val === undefined) {\n        _value.set(this, val);\n        // /* required to make 'partial: defaultOption with value equal to defaultValue 2' pass */\n        // if (!(def.defaultOption && !def.isMultiple())) {\n        //   this.state = state\n        // }\n      } else {\n        _value.set(this, def.type(val));\n        this.state = state;\n      }\n    }\n  }\n\n  resetToDefault () {\n    if (t.isDefined(this.definition.defaultValue)) {\n      if (this.definition.isMultiple()) {\n        _value.set(this, arrayify(this.definition.defaultValue).slice());\n      } else {\n        _value.set(this, this.definition.defaultValue);\n      }\n    } else {\n      if (this.definition.isMultiple()) {\n        _value.set(this, []);\n      } else {\n        _value.set(this, null);\n      }\n    }\n    this.state = 'default';\n  }\n\n  static create (definition) {\n    definition = new OptionDefinition(definition);\n    if (definition.isBoolean()) {\n      return FlagOption.create(definition)\n    } else {\n      return new this(definition)\n    }\n  }\n}\n\nclass FlagOption extends Option {\n  set (val) {\n    super.set(true);\n  }\n\n  static create (def) {\n    return new this(def)\n  }\n}\n\n/**\n * A map of { DefinitionNameString: Option }. By default, an Output has an `_unknown` property and any options with defaultValues.\n */\nclass Output extends Map {\n  constructor (definitions) {\n    super();\n    /**\n     * @type {OptionDefinitions}\n     */\n    this.definitions = Definitions.from(definitions);\n\n    /* by default, an Output has an `_unknown` property and any options with defaultValues */\n    this.set('_unknown', Option.create({ name: '_unknown', multiple: true }));\n    for (const def of this.definitions.whereDefaultValueSet()) {\n      this.set(def.name, Option.create(def));\n    }\n  }\n\n  toObject (options) {\n    options = options || {};\n    const output = {};\n    for (const item of this) {\n      const name = options.camelCase && item[0] !== '_unknown' ? camelCase(item[0]) : item[0];\n      const option = item[1];\n      if (name === '_unknown' && !option.get().length) continue\n      output[name] = option.get();\n    }\n\n    if (options.skipUnknown) delete output._unknown;\n    return output\n  }\n}\n\nclass GroupedOutput extends Output {\n  toObject (options) {\n    const superOutputNoCamel = super.toObject({ skipUnknown: options.skipUnknown });\n    const superOutput = super.toObject(options);\n    const unknown = superOutput._unknown;\n    delete superOutput._unknown;\n    const grouped = {\n      _all: superOutput\n    };\n    if (unknown && unknown.length) grouped._unknown = unknown;\n\n    this.definitions.whereGrouped().forEach(def => {\n      const name = options.camelCase ? camelCase(def.name) : def.name;\n      const outputValue = superOutputNoCamel[def.name];\n      for (const groupName of arrayify(def.group)) {\n        grouped[groupName] = grouped[groupName] || {};\n        if (t.isDefined(outputValue)) {\n          grouped[groupName][name] = outputValue;\n        }\n      }\n    });\n\n    this.definitions.whereNotGrouped().forEach(def => {\n      const name = options.camelCase ? camelCase(def.name) : def.name;\n      const outputValue = superOutputNoCamel[def.name];\n      if (t.isDefined(outputValue)) {\n        if (!grouped._none) grouped._none = {};\n        grouped._none[name] = outputValue;\n      }\n    });\n    return grouped\n  }\n}\n\n/**\n * @module command-line-args\n */\n\n/**\n * Returns an object containing all option values set on the command line. By default it parses the global  [`process.argv`](https://nodejs.org/api/process.html#process_process_argv) array.\n *\n * Parsing is strict by default - an exception is thrown if the user sets a singular option more than once or sets an unknown value or option (one without a valid [definition](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md)). To be more permissive, enabling [partial](https://github.com/75lb/command-line-args/wiki/Partial-mode-example) or [stopAtFirstUnknown](https://github.com/75lb/command-line-args/wiki/stopAtFirstUnknown) modes will return known options in the usual manner while collecting unknown arguments in a separate `_unknown` property.\n *\n * @param {Array<OptionDefinition>} - An array of [OptionDefinition](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md) objects\n * @param {object} [options] - Options.\n * @param {string[]} [options.argv] - An array of strings which, if present will be parsed instead  of `process.argv`.\n * @param {boolean} [options.partial] - If `true`, an array of unknown arguments is returned in the `_unknown` property of the output.\n * @param {boolean} [options.stopAtFirstUnknown] - If `true`, parsing will stop at the first unknown argument and the remaining arguments returned in `_unknown`. When set, `partial: true` is also implied.\n * @param {boolean} [options.camelCase] - If `true`, options with hypenated names (e.g. `move-to`) will be returned in camel-case (e.g. `moveTo`).\n * @param {boolean} [options.caseInsensitive] - If `true`, the case of each option name or alias parsed is insignificant. In other words, both `--Verbose` and `--verbose`, `-V` and `-v` would be equivalent. Defaults to false.\n * @returns {object}\n * @throws `UNKNOWN_OPTION` If `options.partial` is false and the user set an undefined option. The `err.optionName` property contains the arg that specified an unknown option, e.g. `--one`.\n * @throws `UNKNOWN_VALUE` If `options.partial` is false and the user set a value unaccounted for by an option definition. The `err.value` property contains the unknown value, e.g. `5`.\n * @throws `ALREADY_SET` If a user sets a singular, non-multiple option more than once. The `err.optionName` property contains the option name that has already been set, e.g. `one`.\n * @throws `INVALID_DEFINITIONS`\n *   - If an option definition is missing the required `name` property\n *   - If an option definition has a `type` value that's not a function\n *   - If an alias is numeric, a hyphen or a length other than 1\n *   - If an option definition name was used more than once\n *   - If an option definition alias was used more than once\n *   - If more than one option definition has `defaultOption: true`\n *   - If a `Boolean` option is also set as the `defaultOption`.\n * @alias module:command-line-args\n */\nfunction commandLineArgs (optionDefinitions, options) {\n  options = options || {};\n  if (options.stopAtFirstUnknown) options.partial = true;\n  optionDefinitions = Definitions.from(optionDefinitions, options.caseInsensitive);\n\n  const parser = new ArgvParser(optionDefinitions, {\n    argv: options.argv,\n    stopAtFirstUnknown: options.stopAtFirstUnknown,\n    caseInsensitive: options.caseInsensitive\n  });\n\n  const OutputClass = optionDefinitions.isGrouped() ? GroupedOutput : Output;\n  const output = new OutputClass(optionDefinitions);\n\n  /* Iterate the parser setting each known value to the output. Optionally, throw on unknowns. */\n  for (const argInfo of parser) {\n    const arg = argInfo.subArg || argInfo.arg;\n    if (!options.partial) {\n      if (argInfo.event === 'unknown_value') {\n        const err = new Error(`Unknown value: ${arg}`);\n        err.name = 'UNKNOWN_VALUE';\n        err.value = arg;\n        throw err\n      } else if (argInfo.event === 'unknown_option') {\n        const err = new Error(`Unknown option: ${arg}`);\n        err.name = 'UNKNOWN_OPTION';\n        err.optionName = arg;\n        throw err\n      }\n    }\n\n    let option;\n    if (output.has(argInfo.name)) {\n      option = output.get(argInfo.name);\n    } else {\n      option = Option.create(argInfo.def);\n      output.set(argInfo.name, option);\n    }\n\n    if (argInfo.name === '_unknown') {\n      option.set(arg);\n    } else {\n      option.set(argInfo.value);\n    }\n  }\n\n  return output.toObject({ skipUnknown: !options.partial, camelCase: options.camelCase })\n}\n\nmodule.exports = commandLineArgs;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Creates a const map from the given values\n * @param values - An array of values to be used as keys and values in the map.\n * @returns A populated version of the map with the values and keys derived from the values.\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function createConstMap<T>(values: Array<T[keyof T]>): T {\n  // eslint-disable-next-line prefer-const, @typescript-eslint/no-explicit-any\n  let res: any = {};\n  const len = values.length;\n  for (let lp = 0; lp < len; lp++) {\n    const val = values[lp];\n    if (val) {\n      res[String(val).toUpperCase().replace(/[-.]/g, '_')] = val;\n    }\n  }\n\n  return res as T;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createConstMap } from '../internal/utils';\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_CONNECTION_STRING = 'db.connection_string';\nconst TMP_DB_USER = 'db.user';\nconst TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nconst TMP_DB_NAME = 'db.name';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_DB_OPERATION = 'db.operation';\nconst TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nconst TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nconst TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nconst TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nconst TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nconst TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nconst TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT =\n  'db.cassandra.speculative_execution_count';\nconst TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nconst TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nconst TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nconst TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nconst TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nconst TMP_DB_SQL_TABLE = 'db.sql.table';\nconst TMP_EXCEPTION_TYPE = 'exception.type';\nconst TMP_EXCEPTION_MESSAGE = 'exception.message';\nconst TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nconst TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_FAAS_EXECUTION = 'faas.execution';\nconst TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nconst TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nconst TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nconst TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nconst TMP_FAAS_TIME = 'faas.time';\nconst TMP_FAAS_CRON = 'faas.cron';\nconst TMP_FAAS_COLDSTART = 'faas.coldstart';\nconst TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nconst TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nconst TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nconst TMP_NET_TRANSPORT = 'net.transport';\nconst TMP_NET_PEER_IP = 'net.peer.ip';\nconst TMP_NET_PEER_PORT = 'net.peer.port';\nconst TMP_NET_PEER_NAME = 'net.peer.name';\nconst TMP_NET_HOST_IP = 'net.host.ip';\nconst TMP_NET_HOST_PORT = 'net.host.port';\nconst TMP_NET_HOST_NAME = 'net.host.name';\nconst TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nconst TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nconst TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nconst TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nconst TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nconst TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nconst TMP_PEER_SERVICE = 'peer.service';\nconst TMP_ENDUSER_ID = 'enduser.id';\nconst TMP_ENDUSER_ROLE = 'enduser.role';\nconst TMP_ENDUSER_SCOPE = 'enduser.scope';\nconst TMP_THREAD_ID = 'thread.id';\nconst TMP_THREAD_NAME = 'thread.name';\nconst TMP_CODE_FUNCTION = 'code.function';\nconst TMP_CODE_NAMESPACE = 'code.namespace';\nconst TMP_CODE_FILEPATH = 'code.filepath';\nconst TMP_CODE_LINENO = 'code.lineno';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_HOST = 'http.host';\nconst TMP_HTTP_SCHEME = 'http.scheme';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_HTTP_FLAVOR = 'http.flavor';\nconst TMP_HTTP_USER_AGENT = 'http.user_agent';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =\n  'http.request_content_length_uncompressed';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =\n  'http.response_content_length_uncompressed';\nconst TMP_HTTP_SERVER_NAME = 'http.server_name';\nconst TMP_HTTP_ROUTE = 'http.route';\nconst TMP_HTTP_CLIENT_IP = 'http.client_ip';\nconst TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nconst TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nconst TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS =\n  'aws.dynamodb.item_collection_metrics';\nconst TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY =\n  'aws.dynamodb.provisioned_read_capacity';\nconst TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY =\n  'aws.dynamodb.provisioned_write_capacity';\nconst TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nconst TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nconst TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nconst TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nconst TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nconst TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES =\n  'aws.dynamodb.global_secondary_indexes';\nconst TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES =\n  'aws.dynamodb.local_secondary_indexes';\nconst TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE =\n  'aws.dynamodb.exclusive_start_table';\nconst TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nconst TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nconst TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nconst TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nconst TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nconst TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nconst TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS =\n  'aws.dynamodb.attribute_definitions';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES =\n  'aws.dynamodb.global_secondary_index_updates';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_MESSAGING_DESTINATION = 'messaging.destination';\nconst TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nconst TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nconst TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nconst TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nconst TMP_MESSAGING_URL = 'messaging.url';\nconst TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nconst TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES =\n  'messaging.message_payload_size_bytes';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES =\n  'messaging.message_payload_compressed_size_bytes';\nconst TMP_MESSAGING_OPERATION = 'messaging.operation';\nconst TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nconst TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nconst TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nconst TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nconst TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nconst TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nconst TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nconst TMP_RPC_SYSTEM = 'rpc.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_METHOD = 'rpc.method';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nconst TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nconst TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nconst TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nconst TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nconst TMP_MESSAGE_TYPE = 'message.type';\nconst TMP_MESSAGE_ID = 'message.id';\nconst TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nconst TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n */\nexport const SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n */\nexport const SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n\n/**\n * Username for accessing the database.\n */\nexport const SEMATTRS_DB_USER = TMP_DB_USER;\n\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n */\nexport const SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n */\nexport const SEMATTRS_DB_NAME = TMP_DB_NAME;\n\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n */\nexport const SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n */\nexport const SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n */\nexport const SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n */\nexport const SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n */\nexport const SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL =\n  TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n */\nexport const SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n\n/**\n * Whether or not the query is idempotent.\n */\nexport const SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n */\nexport const SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT =\n  TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n\n/**\n * The ID of the coordinating node for a query.\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_ID =\n  TMP_DB_CASSANDRA_COORDINATOR_ID;\n\n/**\n * The data center of the coordinating node for a query.\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_DC =\n  TMP_DB_CASSANDRA_COORDINATOR_DC;\n\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n */\nexport const SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n */\nexport const SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n\n/**\n * The collection being accessed within the database stated in `db.name`.\n */\nexport const SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n */\nexport const SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n */\nexport const SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n\n/**\n * The exception message.\n */\nexport const SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n */\nexport const SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*/\nexport const SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n\n/**\n * The execution ID of the current function execution.\n */\nexport const SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n */\nexport const SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n */\nexport const SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n */\nexport const SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n */\nexport const SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n */\nexport const SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n */\nexport const SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n */\nexport const SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n */\nexport const SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n\n/**\n * Remote port number.\n */\nexport const SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n\n/**\n * Remote hostname or similar, see note below.\n */\nexport const SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n */\nexport const SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n\n/**\n * Like `net.peer.port` but for the host port.\n */\nexport const SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n\n/**\n * Local hostname or similar, see note below.\n */\nexport const SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_SUBTYPE =\n  TMP_NET_HOST_CONNECTION_SUBTYPE;\n\n/**\n * The name of the mobile carrier.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n\n/**\n * The mobile carrier country code.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n\n/**\n * The mobile carrier network code.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n */\nexport const SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n */\nexport const SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n */\nexport const SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n */\nexport const SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n */\nexport const SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n */\nexport const SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n\n/**\n * Current thread name.\n */\nexport const SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n */\nexport const SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n */\nexport const SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n */\nexport const SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n */\nexport const SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n\n/**\n * HTTP request method.\n */\nexport const SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n */\nexport const SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n */\nexport const SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n */\nexport const SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n\n/**\n * The URI scheme identifying the used protocol.\n */\nexport const SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n */\nexport const SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n */\nexport const SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH =\n  TMP_HTTP_REQUEST_CONTENT_LENGTH;\n\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED =\n  TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH =\n  TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED =\n  TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n */\nexport const SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n\n/**\n * The matched route (path template).\n */\nexport const SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*/\nexport const SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n\n/**\n * The keys in the `RequestItems` object field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY =\n  TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS =\n  TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY =\n  TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY =\n  TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n\n/**\n * The value of the `ConsistentRead` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ =\n  TMP_AWS_DYNAMODB_CONSISTENT_READ;\n\n/**\n * The value of the `ProjectionExpression` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n\n/**\n * The value of the `Limit` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n\n/**\n * The value of the `AttributesToGet` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET =\n  TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n\n/**\n * The value of the `IndexName` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n\n/**\n * The value of the `Select` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES =\n  TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES =\n  TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE =\n  TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n\n/**\n * The the number of items in the `TableNames` response parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n\n/**\n * The value of the `ScanIndexForward` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n\n/**\n * The value of the `Segment` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n\n/**\n * The value of the `TotalSegments` request parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS =\n  TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n\n/**\n * The value of the `Count` response parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n\n/**\n * The value of the `ScannedCount` response parameter.\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT =\n  TMP_AWS_DYNAMODB_SCANNED_COUNT;\n\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS =\n  TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES =\n  TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n\n/**\n * A string identifying the messaging system.\n */\nexport const SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n\n/**\n * The kind of message destination.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION_KIND =\n  TMP_MESSAGING_DESTINATION_KIND;\n\n/**\n * A boolean that is true if the message destination is temporary.\n */\nexport const SEMATTRS_MESSAGING_TEMP_DESTINATION =\n  TMP_MESSAGING_TEMP_DESTINATION;\n\n/**\n * The name of the transport protocol.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n\n/**\n * The version of the transport protocol.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL_VERSION =\n  TMP_MESSAGING_PROTOCOL_VERSION;\n\n/**\n * Connection string.\n */\nexport const SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n */\nexport const SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES =\n  TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n\n/**\n * The compressed size of the message payload in bytes.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES =\n  TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport const SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n */\nexport const SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n\n/**\n * RabbitMQ message routing key.\n */\nexport const SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY =\n  TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY =\n  TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP =\n  TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n\n/**\n * Partition the message is sent to.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n\n/**\n * A boolean that is true if the message is a tombstone.\n */\nexport const SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n\n/**\n * A string identifying the remoting system.\n */\nexport const SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n */\nexport const SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n */\nexport const SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n */\nexport const SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n */\nexport const SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n\n/**\n * `error.code` property of response if it is an error response.\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n\n/**\n * `error.message` property of response if it is an error response.\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n\n/**\n * Whether this is a received or sent message.\n */\nexport const SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n */\nexport const SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n\n/**\n * Compressed size of the message in bytes.\n */\nexport const SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n\n/**\n * Uncompressed size of the message in bytes.\n */\nexport const SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n\n/**\n * Definition of available values for SemanticAttributes\n * This type is used for backward compatibility, you should use the individual exported\n * constants SemanticAttributes_XXXXX rather than the exported constant map. As any single reference\n * to a constant map value will result in all strings being included into your bundle.\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification.\n */\nexport type SemanticAttributes = {\n  /**\n   * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n   *\n   * Note: This may be different from `faas.id` if an alias is involved.\n   */\n  AWS_LAMBDA_INVOKED_ARN: 'aws.lambda.invoked_arn';\n\n  /**\n   * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n   */\n  DB_SYSTEM: 'db.system';\n\n  /**\n   * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n   */\n  DB_CONNECTION_STRING: 'db.connection_string';\n\n  /**\n   * Username for accessing the database.\n   */\n  DB_USER: 'db.user';\n\n  /**\n   * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n   */\n  DB_JDBC_DRIVER_CLASSNAME: 'db.jdbc.driver_classname';\n\n  /**\n   * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n   *\n   * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n   */\n  DB_NAME: 'db.name';\n\n  /**\n   * The database statement being executed.\n   *\n   * Note: The value may be sanitized to exclude sensitive information.\n   */\n  DB_STATEMENT: 'db.statement';\n\n  /**\n   * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n   *\n   * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n   */\n  DB_OPERATION: 'db.operation';\n\n  /**\n   * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n   *\n   * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n   */\n  DB_MSSQL_INSTANCE_NAME: 'db.mssql.instance_name';\n\n  /**\n   * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_CASSANDRA_KEYSPACE: 'db.cassandra.keyspace';\n\n  /**\n   * The fetch size used for paging, i.e. how many rows will be returned at once.\n   */\n  DB_CASSANDRA_PAGE_SIZE: 'db.cassandra.page_size';\n\n  /**\n   * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n   */\n  DB_CASSANDRA_CONSISTENCY_LEVEL: 'db.cassandra.consistency_level';\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_CASSANDRA_TABLE: 'db.cassandra.table';\n\n  /**\n   * Whether or not the query is idempotent.\n   */\n  DB_CASSANDRA_IDEMPOTENCE: 'db.cassandra.idempotence';\n\n  /**\n   * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n   */\n  DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: 'db.cassandra.speculative_execution_count';\n\n  /**\n   * The ID of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_ID: 'db.cassandra.coordinator.id';\n\n  /**\n   * The data center of the coordinating node for a query.\n   */\n  DB_CASSANDRA_COORDINATOR_DC: 'db.cassandra.coordinator.dc';\n\n  /**\n   * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n   */\n  DB_HBASE_NAMESPACE: 'db.hbase.namespace';\n\n  /**\n   * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n   */\n  DB_REDIS_DATABASE_INDEX: 'db.redis.database_index';\n\n  /**\n   * The collection being accessed within the database stated in `db.name`.\n   */\n  DB_MONGODB_COLLECTION: 'db.mongodb.collection';\n\n  /**\n   * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n   *\n   * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n   */\n  DB_SQL_TABLE: 'db.sql.table';\n\n  /**\n   * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n   */\n  EXCEPTION_TYPE: 'exception.type';\n\n  /**\n   * The exception message.\n   */\n  EXCEPTION_MESSAGE: 'exception.message';\n\n  /**\n   * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n   */\n  EXCEPTION_STACKTRACE: 'exception.stacktrace';\n\n  /**\n  * SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n  *\n  * Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n  */\n  EXCEPTION_ESCAPED: 'exception.escaped';\n\n  /**\n   * Type of the trigger on which the function is executed.\n   */\n  FAAS_TRIGGER: 'faas.trigger';\n\n  /**\n   * The execution ID of the current function execution.\n   */\n  FAAS_EXECUTION: 'faas.execution';\n\n  /**\n   * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n   */\n  FAAS_DOCUMENT_COLLECTION: 'faas.document.collection';\n\n  /**\n   * Describes the type of the operation that was performed on the data.\n   */\n  FAAS_DOCUMENT_OPERATION: 'faas.document.operation';\n\n  /**\n   * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_DOCUMENT_TIME: 'faas.document.time';\n\n  /**\n   * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n   */\n  FAAS_DOCUMENT_NAME: 'faas.document.name';\n\n  /**\n   * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n   */\n  FAAS_TIME: 'faas.time';\n\n  /**\n   * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n   */\n  FAAS_CRON: 'faas.cron';\n\n  /**\n   * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n   */\n  FAAS_COLDSTART: 'faas.coldstart';\n\n  /**\n   * The name of the invoked function.\n   *\n   * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_NAME: 'faas.invoked_name';\n\n  /**\n   * The cloud provider of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_PROVIDER: 'faas.invoked_provider';\n\n  /**\n   * The cloud region of the invoked function.\n   *\n   * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n   */\n  FAAS_INVOKED_REGION: 'faas.invoked_region';\n\n  /**\n   * Transport protocol used. See note below.\n   */\n  NET_TRANSPORT: 'net.transport';\n\n  /**\n   * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n   */\n  NET_PEER_IP: 'net.peer.ip';\n\n  /**\n   * Remote port number.\n   */\n  NET_PEER_PORT: 'net.peer.port';\n\n  /**\n   * Remote hostname or similar, see note below.\n   */\n  NET_PEER_NAME: 'net.peer.name';\n\n  /**\n   * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n   */\n  NET_HOST_IP: 'net.host.ip';\n\n  /**\n   * Like `net.peer.port` but for the host port.\n   */\n  NET_HOST_PORT: 'net.host.port';\n\n  /**\n   * Local hostname or similar, see note below.\n   */\n  NET_HOST_NAME: 'net.host.name';\n\n  /**\n   * The internet connection type currently being used by the host.\n   */\n  NET_HOST_CONNECTION_TYPE: 'net.host.connection.type';\n\n  /**\n   * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n   */\n  NET_HOST_CONNECTION_SUBTYPE: 'net.host.connection.subtype';\n\n  /**\n   * The name of the mobile carrier.\n   */\n  NET_HOST_CARRIER_NAME: 'net.host.carrier.name';\n\n  /**\n   * The mobile carrier country code.\n   */\n  NET_HOST_CARRIER_MCC: 'net.host.carrier.mcc';\n\n  /**\n   * The mobile carrier network code.\n   */\n  NET_HOST_CARRIER_MNC: 'net.host.carrier.mnc';\n\n  /**\n   * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n   */\n  NET_HOST_CARRIER_ICC: 'net.host.carrier.icc';\n\n  /**\n   * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n   */\n  PEER_SERVICE: 'peer.service';\n\n  /**\n   * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n   */\n  ENDUSER_ID: 'enduser.id';\n\n  /**\n   * Actual/assumed role the client is making the request under extracted from token or application security context.\n   */\n  ENDUSER_ROLE: 'enduser.role';\n\n  /**\n   * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n   */\n  ENDUSER_SCOPE: 'enduser.scope';\n\n  /**\n   * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n   */\n  THREAD_ID: 'thread.id';\n\n  /**\n   * Current thread name.\n   */\n  THREAD_NAME: 'thread.name';\n\n  /**\n   * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n   */\n  CODE_FUNCTION: 'code.function';\n\n  /**\n   * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n   */\n  CODE_NAMESPACE: 'code.namespace';\n\n  /**\n   * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n   */\n  CODE_FILEPATH: 'code.filepath';\n\n  /**\n   * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n   */\n  CODE_LINENO: 'code.lineno';\n\n  /**\n   * HTTP request method.\n   */\n  HTTP_METHOD: 'http.method';\n\n  /**\n   * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n   *\n   * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n   */\n  HTTP_URL: 'http.url';\n\n  /**\n   * The full request target as passed in a HTTP request line or equivalent.\n   */\n  HTTP_TARGET: 'http.target';\n\n  /**\n   * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n   *\n   * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n   */\n  HTTP_HOST: 'http.host';\n\n  /**\n   * The URI scheme identifying the used protocol.\n   */\n  HTTP_SCHEME: 'http.scheme';\n\n  /**\n   * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n   */\n  HTTP_STATUS_CODE: 'http.status_code';\n\n  /**\n   * Kind of HTTP protocol used.\n   *\n   * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n   */\n  HTTP_FLAVOR: 'http.flavor';\n\n  /**\n   * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n   */\n  HTTP_USER_AGENT: 'http.user_agent';\n\n  /**\n   * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH: 'http.request_content_length';\n\n  /**\n   * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: 'http.request_content_length_uncompressed';\n\n  /**\n   * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH: 'http.response_content_length';\n\n  /**\n   * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n   */\n  HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: 'http.response_content_length_uncompressed';\n\n  /**\n   * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n   *\n   * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n   */\n  HTTP_SERVER_NAME: 'http.server_name';\n\n  /**\n   * The matched route (path template).\n   */\n  HTTP_ROUTE: 'http.route';\n\n  /**\n  * The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n  *\n  * Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n  */\n  HTTP_CLIENT_IP: 'http.client_ip';\n\n  /**\n   * The keys in the `RequestItems` object field.\n   */\n  AWS_DYNAMODB_TABLE_NAMES: 'aws.dynamodb.table_names';\n\n  /**\n   * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n   */\n  AWS_DYNAMODB_CONSUMED_CAPACITY: 'aws.dynamodb.consumed_capacity';\n\n  /**\n   * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n   */\n  AWS_DYNAMODB_ITEM_COLLECTION_METRICS: 'aws.dynamodb.item_collection_metrics';\n\n  /**\n   * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: 'aws.dynamodb.provisioned_read_capacity';\n\n  /**\n   * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n   */\n  AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: 'aws.dynamodb.provisioned_write_capacity';\n\n  /**\n   * The value of the `ConsistentRead` request parameter.\n   */\n  AWS_DYNAMODB_CONSISTENT_READ: 'aws.dynamodb.consistent_read';\n\n  /**\n   * The value of the `ProjectionExpression` request parameter.\n   */\n  AWS_DYNAMODB_PROJECTION: 'aws.dynamodb.projection';\n\n  /**\n   * The value of the `Limit` request parameter.\n   */\n  AWS_DYNAMODB_LIMIT: 'aws.dynamodb.limit';\n\n  /**\n   * The value of the `AttributesToGet` request parameter.\n   */\n  AWS_DYNAMODB_ATTRIBUTES_TO_GET: 'aws.dynamodb.attributes_to_get';\n\n  /**\n   * The value of the `IndexName` request parameter.\n   */\n  AWS_DYNAMODB_INDEX_NAME: 'aws.dynamodb.index_name';\n\n  /**\n   * The value of the `Select` request parameter.\n   */\n  AWS_DYNAMODB_SELECT: 'aws.dynamodb.select';\n\n  /**\n   * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: 'aws.dynamodb.global_secondary_indexes';\n\n  /**\n   * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n   */\n  AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: 'aws.dynamodb.local_secondary_indexes';\n\n  /**\n   * The value of the `ExclusiveStartTableName` request parameter.\n   */\n  AWS_DYNAMODB_EXCLUSIVE_START_TABLE: 'aws.dynamodb.exclusive_start_table';\n\n  /**\n   * The the number of items in the `TableNames` response parameter.\n   */\n  AWS_DYNAMODB_TABLE_COUNT: 'aws.dynamodb.table_count';\n\n  /**\n   * The value of the `ScanIndexForward` request parameter.\n   */\n  AWS_DYNAMODB_SCAN_FORWARD: 'aws.dynamodb.scan_forward';\n\n  /**\n   * The value of the `Segment` request parameter.\n   */\n  AWS_DYNAMODB_SEGMENT: 'aws.dynamodb.segment';\n\n  /**\n   * The value of the `TotalSegments` request parameter.\n   */\n  AWS_DYNAMODB_TOTAL_SEGMENTS: 'aws.dynamodb.total_segments';\n\n  /**\n   * The value of the `Count` response parameter.\n   */\n  AWS_DYNAMODB_COUNT: 'aws.dynamodb.count';\n\n  /**\n   * The value of the `ScannedCount` response parameter.\n   */\n  AWS_DYNAMODB_SCANNED_COUNT: 'aws.dynamodb.scanned_count';\n\n  /**\n   * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n   */\n  AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: 'aws.dynamodb.attribute_definitions';\n\n  /**\n   * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n   */\n  AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: 'aws.dynamodb.global_secondary_index_updates';\n\n  /**\n   * A string identifying the messaging system.\n   */\n  MESSAGING_SYSTEM: 'messaging.system';\n\n  /**\n   * The message destination name. This might be equal to the span name but is required nevertheless.\n   */\n  MESSAGING_DESTINATION: 'messaging.destination';\n\n  /**\n   * The kind of message destination.\n   */\n  MESSAGING_DESTINATION_KIND: 'messaging.destination_kind';\n\n  /**\n   * A boolean that is true if the message destination is temporary.\n   */\n  MESSAGING_TEMP_DESTINATION: 'messaging.temp_destination';\n\n  /**\n   * The name of the transport protocol.\n   */\n  MESSAGING_PROTOCOL: 'messaging.protocol';\n\n  /**\n   * The version of the transport protocol.\n   */\n  MESSAGING_PROTOCOL_VERSION: 'messaging.protocol_version';\n\n  /**\n   * Connection string.\n   */\n  MESSAGING_URL: 'messaging.url';\n\n  /**\n   * A value used by the messaging system as an identifier for the message, represented as a string.\n   */\n  MESSAGING_MESSAGE_ID: 'messaging.message_id';\n\n  /**\n   * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n   */\n  MESSAGING_CONVERSATION_ID: 'messaging.conversation_id';\n\n  /**\n   * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: 'messaging.message_payload_size_bytes';\n\n  /**\n   * The compressed size of the message payload in bytes.\n   */\n  MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: 'messaging.message_payload_compressed_size_bytes';\n\n  /**\n   * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n   */\n  MESSAGING_OPERATION: 'messaging.operation';\n\n  /**\n   * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n   */\n  MESSAGING_CONSUMER_ID: 'messaging.consumer_id';\n\n  /**\n   * RabbitMQ message routing key.\n   */\n  MESSAGING_RABBITMQ_ROUTING_KEY: 'messaging.rabbitmq.routing_key';\n\n  /**\n   * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n   *\n   * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n   */\n  MESSAGING_KAFKA_MESSAGE_KEY: 'messaging.kafka.message_key';\n\n  /**\n   * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n   */\n  MESSAGING_KAFKA_CONSUMER_GROUP: 'messaging.kafka.consumer_group';\n\n  /**\n   * Client Id for the Consumer or Producer that is handling the message.\n   */\n  MESSAGING_KAFKA_CLIENT_ID: 'messaging.kafka.client_id';\n\n  /**\n   * Partition the message is sent to.\n   */\n  MESSAGING_KAFKA_PARTITION: 'messaging.kafka.partition';\n\n  /**\n   * A boolean that is true if the message is a tombstone.\n   */\n  MESSAGING_KAFKA_TOMBSTONE: 'messaging.kafka.tombstone';\n\n  /**\n   * A string identifying the remoting system.\n   */\n  RPC_SYSTEM: 'rpc.system';\n\n  /**\n   * The full (logical) name of the service being called, including its package name, if applicable.\n   *\n   * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n   */\n  RPC_SERVICE: 'rpc.service';\n\n  /**\n   * The name of the (logical) method being called, must be equal to the $method part in the span name.\n   *\n   * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n   */\n  RPC_METHOD: 'rpc.method';\n\n  /**\n   * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n   */\n  RPC_GRPC_STATUS_CODE: 'rpc.grpc.status_code';\n\n  /**\n   * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n   */\n  RPC_JSONRPC_VERSION: 'rpc.jsonrpc.version';\n\n  /**\n   * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n   */\n  RPC_JSONRPC_REQUEST_ID: 'rpc.jsonrpc.request_id';\n\n  /**\n   * `error.code` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_CODE: 'rpc.jsonrpc.error_code';\n\n  /**\n   * `error.message` property of response if it is an error response.\n   */\n  RPC_JSONRPC_ERROR_MESSAGE: 'rpc.jsonrpc.error_message';\n\n  /**\n   * Whether this is a received or sent message.\n   */\n  MESSAGE_TYPE: 'message.type';\n\n  /**\n   * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n   *\n   * Note: This way we guarantee that the values will be consistent between different implementations.\n   */\n  MESSAGE_ID: 'message.id';\n\n  /**\n   * Compressed size of the message in bytes.\n   */\n  MESSAGE_COMPRESSED_SIZE: 'message.compressed_size';\n\n  /**\n   * Uncompressed size of the message in bytes.\n   */\n  MESSAGE_UNCOMPRESSED_SIZE: 'message.uncompressed_size';\n};\n\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport const SemanticAttributes: SemanticAttributes =\n  /*#__PURE__*/ createConstMap<SemanticAttributes>([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nconst TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nconst TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nconst TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nconst TMP_DBSYSTEMVALUES_DB2 = 'db2';\nconst TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nconst TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nconst TMP_DBSYSTEMVALUES_HIVE = 'hive';\nconst TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nconst TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nconst TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nconst TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nconst TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nconst TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nconst TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nconst TMP_DBSYSTEMVALUES_EDB = 'edb';\nconst TMP_DBSYSTEMVALUES_CACHE = 'cache';\nconst TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nconst TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nconst TMP_DBSYSTEMVALUES_DERBY = 'derby';\nconst TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nconst TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nconst TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nconst TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nconst TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nconst TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nconst TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nconst TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nconst TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nconst TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nconst TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nconst TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nconst TMP_DBSYSTEMVALUES_H2 = 'h2';\nconst TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nconst TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nconst TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nconst TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nconst TMP_DBSYSTEMVALUES_REDIS = 'redis';\nconst TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nconst TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nconst TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nconst TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nconst TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nconst TMP_DBSYSTEMVALUES_GEODE = 'geode';\nconst TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nconst TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nconst TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n */\nexport const DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n\n/**\n * Identifies the Values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport type DbSystemValues = {\n  /** Some other SQL database. Fallback only. See notes. */\n  OTHER_SQL: 'other_sql';\n\n  /** Microsoft SQL Server. */\n  MSSQL: 'mssql';\n\n  /** MySQL. */\n  MYSQL: 'mysql';\n\n  /** Oracle Database. */\n  ORACLE: 'oracle';\n\n  /** IBM Db2. */\n  DB2: 'db2';\n\n  /** PostgreSQL. */\n  POSTGRESQL: 'postgresql';\n\n  /** Amazon Redshift. */\n  REDSHIFT: 'redshift';\n\n  /** Apache Hive. */\n  HIVE: 'hive';\n\n  /** Cloudscape. */\n  CLOUDSCAPE: 'cloudscape';\n\n  /** HyperSQL DataBase. */\n  HSQLDB: 'hsqldb';\n\n  /** Progress Database. */\n  PROGRESS: 'progress';\n\n  /** SAP MaxDB. */\n  MAXDB: 'maxdb';\n\n  /** SAP HANA. */\n  HANADB: 'hanadb';\n\n  /** Ingres. */\n  INGRES: 'ingres';\n\n  /** FirstSQL. */\n  FIRSTSQL: 'firstsql';\n\n  /** EnterpriseDB. */\n  EDB: 'edb';\n\n  /** InterSystems Caché. */\n  CACHE: 'cache';\n\n  /** Adabas (Adaptable Database System). */\n  ADABAS: 'adabas';\n\n  /** Firebird. */\n  FIREBIRD: 'firebird';\n\n  /** Apache Derby. */\n  DERBY: 'derby';\n\n  /** FileMaker. */\n  FILEMAKER: 'filemaker';\n\n  /** Informix. */\n  INFORMIX: 'informix';\n\n  /** InstantDB. */\n  INSTANTDB: 'instantdb';\n\n  /** InterBase. */\n  INTERBASE: 'interbase';\n\n  /** MariaDB. */\n  MARIADB: 'mariadb';\n\n  /** Netezza. */\n  NETEZZA: 'netezza';\n\n  /** Pervasive PSQL. */\n  PERVASIVE: 'pervasive';\n\n  /** PointBase. */\n  POINTBASE: 'pointbase';\n\n  /** SQLite. */\n  SQLITE: 'sqlite';\n\n  /** Sybase. */\n  SYBASE: 'sybase';\n\n  /** Teradata. */\n  TERADATA: 'teradata';\n\n  /** Vertica. */\n  VERTICA: 'vertica';\n\n  /** H2. */\n  H2: 'h2';\n\n  /** ColdFusion IMQ. */\n  COLDFUSION: 'coldfusion';\n\n  /** Apache Cassandra. */\n  CASSANDRA: 'cassandra';\n\n  /** Apache HBase. */\n  HBASE: 'hbase';\n\n  /** MongoDB. */\n  MONGODB: 'mongodb';\n\n  /** Redis. */\n  REDIS: 'redis';\n\n  /** Couchbase. */\n  COUCHBASE: 'couchbase';\n\n  /** CouchDB. */\n  COUCHDB: 'couchdb';\n\n  /** Microsoft Azure Cosmos DB. */\n  COSMOSDB: 'cosmosdb';\n\n  /** Amazon DynamoDB. */\n  DYNAMODB: 'dynamodb';\n\n  /** Neo4j. */\n  NEO4J: 'neo4j';\n\n  /** Apache Geode. */\n  GEODE: 'geode';\n\n  /** Elasticsearch. */\n  ELASTICSEARCH: 'elasticsearch';\n\n  /** Memcached. */\n  MEMCACHED: 'memcached';\n\n  /** CockroachDB. */\n  COCKROACHDB: 'cockroachdb';\n};\n\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport const DbSystemValues: DbSystemValues =\n  /*#__PURE__*/ createConstMap<DbSystemValues>([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ALL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ONE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_TWO =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_THREE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ANY =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL =\n  TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n\n/**\n * Identifies the Values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport type DbCassandraConsistencyLevelValues = {\n  /** all. */\n  ALL: 'all';\n\n  /** each_quorum. */\n  EACH_QUORUM: 'each_quorum';\n\n  /** quorum. */\n  QUORUM: 'quorum';\n\n  /** local_quorum. */\n  LOCAL_QUORUM: 'local_quorum';\n\n  /** one. */\n  ONE: 'one';\n\n  /** two. */\n  TWO: 'two';\n\n  /** three. */\n  THREE: 'three';\n\n  /** local_one. */\n  LOCAL_ONE: 'local_one';\n\n  /** any. */\n  ANY: 'any';\n\n  /** serial. */\n  SERIAL: 'serial';\n\n  /** local_serial. */\n  LOCAL_SERIAL: 'local_serial';\n};\n\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport const DbCassandraConsistencyLevelValues: DbCassandraConsistencyLevelValues =\n  /*#__PURE__*/ createConstMap<DbCassandraConsistencyLevelValues>([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nconst TMP_FAASTRIGGERVALUES_HTTP = 'http';\nconst TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nconst TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nconst TMP_FAASTRIGGERVALUES_OTHER = 'other';\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n\n/**\n * Type of the trigger on which the function is executed.\n */\nexport const FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n\n/**\n * Identifies the Values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport type FaasTriggerValues = {\n  /** A response to some data source operation such as a database or filesystem read/write. */\n  DATASOURCE: 'datasource';\n\n  /** To provide an answer to an inbound HTTP request. */\n  HTTP: 'http';\n\n  /** A function is set to be executed when messages are sent to a messaging system. */\n  PUBSUB: 'pubsub';\n\n  /** A function is scheduled to be executed regularly. */\n  TIMER: 'timer';\n\n  /** If none of the others apply. */\n  OTHER: 'other';\n};\n\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport const FaasTriggerValues: FaasTriggerValues =\n  /*#__PURE__*/ createConstMap<FaasTriggerValues>([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const FAASDOCUMENTOPERATIONVALUES_INSERT =\n  TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const FAASDOCUMENTOPERATIONVALUES_EDIT =\n  TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n\n/**\n * Describes the type of the operation that was performed on the data.\n */\nexport const FAASDOCUMENTOPERATIONVALUES_DELETE =\n  TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n\n/**\n * Identifies the Values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport type FaasDocumentOperationValues = {\n  /** When a new object is created. */\n  INSERT: 'insert';\n\n  /** When an object is modified. */\n  EDIT: 'edit';\n\n  /** When an object is deleted. */\n  DELETE: 'delete';\n};\n\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport const FaasDocumentOperationValues: FaasDocumentOperationValues =\n  /*#__PURE__*/ createConstMap<FaasDocumentOperationValues>([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD =\n  TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_AZURE =\n  TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n */\nexport const FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n\n/**\n * Identifies the Values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport type FaasInvokedProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud';\n\n  /** Amazon Web Services. */\n  AWS: 'aws';\n\n  /** Microsoft Azure. */\n  AZURE: 'azure';\n\n  /** Google Cloud Platform. */\n  GCP: 'gcp';\n};\n\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport const FaasInvokedProviderValues: FaasInvokedProviderValues =\n  /*#__PURE__*/ createConstMap<FaasInvokedProviderValues>([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nconst TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nconst TMP_NETTRANSPORTVALUES_IP = 'ip';\nconst TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nconst TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nconst TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nconst TMP_NETTRANSPORTVALUES_OTHER = 'other';\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n\n/**\n * Transport protocol used. See note below.\n */\nexport const NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n\n/**\n * Identifies the Values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport type NetTransportValues = {\n  /** ip_tcp. */\n  IP_TCP: 'ip_tcp';\n\n  /** ip_udp. */\n  IP_UDP: 'ip_udp';\n\n  /** Another IP-based protocol. */\n  IP: 'ip';\n\n  /** Unix Domain socket. See below. */\n  UNIX: 'unix';\n\n  /** Named or anonymous pipe. See note below. */\n  PIPE: 'pipe';\n\n  /** In-process communication. */\n  INPROC: 'inproc';\n\n  /** Something else (non IP-based). */\n  OTHER: 'other';\n};\n\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport const NetTransportValues: NetTransportValues =\n  /*#__PURE__*/ createConstMap<NetTransportValues>([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIFI =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIRED =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_CELL =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n\n/**\n * The internet connection type currently being used by the host.\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNKNOWN =\n  TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n\n/**\n * Identifies the Values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport type NetHostConnectionTypeValues = {\n  /** wifi. */\n  WIFI: 'wifi';\n\n  /** wired. */\n  WIRED: 'wired';\n\n  /** cell. */\n  CELL: 'cell';\n\n  /** unavailable. */\n  UNAVAILABLE: 'unavailable';\n\n  /** unknown. */\n  UNKNOWN: 'unknown';\n};\n\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionTypeValues: NetHostConnectionTypeValues =\n  /*#__PURE__*/ createConstMap<NetHostConnectionTypeValues>([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GPRS =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EDGE =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_UMTS =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IDEN =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GSM =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NR =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA =\n  TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n\n/**\n * Identifies the Values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport type NetHostConnectionSubtypeValues = {\n  /** GPRS. */\n  GPRS: 'gprs';\n\n  /** EDGE. */\n  EDGE: 'edge';\n\n  /** UMTS. */\n  UMTS: 'umts';\n\n  /** CDMA. */\n  CDMA: 'cdma';\n\n  /** EVDO Rel. 0. */\n  EVDO_0: 'evdo_0';\n\n  /** EVDO Rev. A. */\n  EVDO_A: 'evdo_a';\n\n  /** CDMA2000 1XRTT. */\n  CDMA2000_1XRTT: 'cdma2000_1xrtt';\n\n  /** HSDPA. */\n  HSDPA: 'hsdpa';\n\n  /** HSUPA. */\n  HSUPA: 'hsupa';\n\n  /** HSPA. */\n  HSPA: 'hspa';\n\n  /** IDEN. */\n  IDEN: 'iden';\n\n  /** EVDO Rev. B. */\n  EVDO_B: 'evdo_b';\n\n  /** LTE. */\n  LTE: 'lte';\n\n  /** EHRPD. */\n  EHRPD: 'ehrpd';\n\n  /** HSPAP. */\n  HSPAP: 'hspap';\n\n  /** GSM. */\n  GSM: 'gsm';\n\n  /** TD-SCDMA. */\n  TD_SCDMA: 'td_scdma';\n\n  /** IWLAN. */\n  IWLAN: 'iwlan';\n\n  /** 5G NR (New Radio). */\n  NR: 'nr';\n\n  /** 5G NRNSA (New Radio Non-Standalone). */\n  NRNSA: 'nrnsa';\n\n  /** LTE CA. */\n  LTE_CA: 'lte_ca';\n};\n\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionSubtypeValues: NetHostConnectionSubtypeValues =\n  /*#__PURE__*/ createConstMap<NetHostConnectionSubtypeValues>([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nconst TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nconst TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nconst TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nconst TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n */\nexport const HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n\n/**\n * Identifies the Values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport type HttpFlavorValues = {\n  /** HTTP 1.0. */\n  HTTP_1_0: '1.0';\n\n  /** HTTP 1.1. */\n  HTTP_1_1: '1.1';\n\n  /** HTTP 2. */\n  HTTP_2_0: '2.0';\n\n  /** SPDY protocol. */\n  SPDY: 'SPDY';\n\n  /** QUIC protocol. */\n  QUIC: 'QUIC';\n};\n\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport const HttpFlavorValues: HttpFlavorValues = {\n  HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n  HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n  HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n  SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n  QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n\n/**\n * The kind of message destination.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_QUEUE =\n  TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n\n/**\n * The kind of message destination.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_TOPIC =\n  TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n\n/**\n * Identifies the Values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport type MessagingDestinationKindValues = {\n  /** A message sent to a queue. */\n  QUEUE: 'queue';\n\n  /** A message sent to a topic. */\n  TOPIC: 'topic';\n};\n\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport const MessagingDestinationKindValues: MessagingDestinationKindValues =\n  /*#__PURE__*/ createConstMap<MessagingDestinationKindValues>([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nconst TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport const MESSAGINGOPERATIONVALUES_RECEIVE =\n  TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n */\nexport const MESSAGINGOPERATIONVALUES_PROCESS =\n  TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n\n/**\n * Identifies the Values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport type MessagingOperationValues = {\n  /** receive. */\n  RECEIVE: 'receive';\n\n  /** process. */\n  PROCESS: 'process';\n};\n\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport const MessagingOperationValues: MessagingOperationValues =\n  /*#__PURE__*/ createConstMap<MessagingOperationValues>([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nconst TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nconst TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nconst TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nconst TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nconst TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nconst TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_CANCELLED =\n  TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNKNOWN =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT =\n  TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED =\n  TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_NOT_FOUND =\n  TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS =\n  TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED =\n  TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION =\n  TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_ABORTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE =\n  TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_INTERNAL =\n  TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAVAILABLE =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_DATA_LOSS =\n  TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED =\n  TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n\n/**\n * Identifies the Values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport type RpcGrpcStatusCodeValues = {\n  /** OK. */\n  OK: 0;\n\n  /** CANCELLED. */\n  CANCELLED: 1;\n\n  /** UNKNOWN. */\n  UNKNOWN: 2;\n\n  /** INVALID_ARGUMENT. */\n  INVALID_ARGUMENT: 3;\n\n  /** DEADLINE_EXCEEDED. */\n  DEADLINE_EXCEEDED: 4;\n\n  /** NOT_FOUND. */\n  NOT_FOUND: 5;\n\n  /** ALREADY_EXISTS. */\n  ALREADY_EXISTS: 6;\n\n  /** PERMISSION_DENIED. */\n  PERMISSION_DENIED: 7;\n\n  /** RESOURCE_EXHAUSTED. */\n  RESOURCE_EXHAUSTED: 8;\n\n  /** FAILED_PRECONDITION. */\n  FAILED_PRECONDITION: 9;\n\n  /** ABORTED. */\n  ABORTED: 10;\n\n  /** OUT_OF_RANGE. */\n  OUT_OF_RANGE: 11;\n\n  /** UNIMPLEMENTED. */\n  UNIMPLEMENTED: 12;\n\n  /** INTERNAL. */\n  INTERNAL: 13;\n\n  /** UNAVAILABLE. */\n  UNAVAILABLE: 14;\n\n  /** DATA_LOSS. */\n  DATA_LOSS: 15;\n\n  /** UNAUTHENTICATED. */\n  UNAUTHENTICATED: 16;\n};\n\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport const RpcGrpcStatusCodeValues: RpcGrpcStatusCodeValues = {\n  OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n  CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n  UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n  INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n  DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n  NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n  ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n  PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n  RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n  FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n  ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n  OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n  UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n  INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n  UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n  DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n  UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nconst TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n\n/**\n * Whether this is a received or sent message.\n */\nexport const MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n\n/**\n * Whether this is a received or sent message.\n */\nexport const MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n\n/**\n * Identifies the Values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport type MessageTypeValues = {\n  /** sent. */\n  SENT: 'SENT';\n\n  /** received. */\n  RECEIVED: 'RECEIVED';\n};\n\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport const MessageTypeValues: MessageTypeValues =\n  /*#__PURE__*/ createConstMap<MessageTypeValues>([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n  ]);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticAttributes';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createConstMap } from '../internal/utils';\n\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n\n/**\n * Name of the cloud provider.\n */\nexport const SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n\n/**\n * The cloud account ID the resource is assigned to.\n */\nexport const SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n */\nexport const SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n */\nexport const SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n */\nexport const SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n */\nexport const SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport const SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n\n/**\n * The task definition family this task definition is a member of.\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n\n/**\n * The revision for this task definition.\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n\n/**\n * The ARN of an EKS cluster.\n */\nexport const SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n\n/**\n * Container name.\n */\nexport const SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n */\nexport const SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n\n/**\n * The container runtime managing this container.\n */\nexport const SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n\n/**\n * Name of the image the container was built on.\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n\n/**\n * Container image tag.\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n */\nexport const SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n */\nexport const SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n */\nexport const SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n */\nexport const SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n */\nexport const SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*/\nexport const SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*/\nexport const SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n */\nexport const SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n */\nexport const SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n */\nexport const SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n */\nexport const SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n\n/**\n * Type of host. For Cloud, this must be the machine type.\n */\nexport const SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n\n/**\n * Name of the VM image or OS install the host was instantiated from.\n */\nexport const SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n\n/**\n * VM image ID. For Cloud, this value is from the provider.\n */\nexport const SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n */\nexport const SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n\n/**\n * The name of the cluster.\n */\nexport const SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n\n/**\n * The name of the Node.\n */\nexport const SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n\n/**\n * The UID of the Node.\n */\nexport const SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n\n/**\n * The name of the namespace that the pod is running in.\n */\nexport const SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n\n/**\n * The UID of the Pod.\n */\nexport const SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n\n/**\n * The name of the Pod.\n */\nexport const SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n\n/**\n * The name of the Container in a Pod template.\n */\nexport const SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n\n/**\n * The UID of the ReplicaSet.\n */\nexport const SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n\n/**\n * The name of the ReplicaSet.\n */\nexport const SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n\n/**\n * The UID of the Deployment.\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n\n/**\n * The name of the Deployment.\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n\n/**\n * The UID of the StatefulSet.\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n\n/**\n * The name of the StatefulSet.\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n\n/**\n * The UID of the DaemonSet.\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n\n/**\n * The name of the DaemonSet.\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n\n/**\n * The UID of the Job.\n */\nexport const SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n\n/**\n * The name of the Job.\n */\nexport const SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n\n/**\n * The UID of the CronJob.\n */\nexport const SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n\n/**\n * The name of the CronJob.\n */\nexport const SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n\n/**\n * The operating system type.\n */\nexport const SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n */\nexport const SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n\n/**\n * Human readable operating system name.\n */\nexport const SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n */\nexport const SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n\n/**\n * Process identifier (PID).\n */\nexport const SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n */\nexport const SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n\n/**\n * The username of the user that owns the process.\n */\nexport const SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION =\n  TMP_PROCESS_RUNTIME_DESCRIPTION;\n\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n */\nexport const SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n */\nexport const SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n */\nexport const SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n\n/**\n * The version string of the service API or implementation.\n */\nexport const SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n\n/**\n * The name of the telemetry SDK as defined above.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n\n/**\n * The version string of the telemetry SDK.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n\n/**\n * The version string of the auto instrumentation agent, if used.\n */\nexport const SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n\n/**\n * The name of the web engine.\n */\nexport const SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n\n/**\n * The version of the web engine.\n */\nexport const SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n */\nexport const SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n\n/**\n * Definition of available values for SemanticResourceAttributes\n * This type is used for backward compatibility, you should use the individual exported\n * constants SemanticResourceAttributes_XXXXX rather than the exported constant map. As any single reference\n * to a constant map value will result in all strings being included into your bundle.\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification.\n */\nexport type SemanticResourceAttributes = {\n  /**\n   * Name of the cloud provider.\n   */\n  CLOUD_PROVIDER: 'cloud.provider';\n\n  /**\n   * The cloud account ID the resource is assigned to.\n   */\n  CLOUD_ACCOUNT_ID: 'cloud.account.id';\n\n  /**\n   * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n   */\n  CLOUD_REGION: 'cloud.region';\n\n  /**\n   * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n   *\n   * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n   */\n  CLOUD_AVAILABILITY_ZONE: 'cloud.availability_zone';\n\n  /**\n   * The cloud platform in use.\n   *\n   * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n   */\n  CLOUD_PLATFORM: 'cloud.platform';\n\n  /**\n   * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n   */\n  AWS_ECS_CONTAINER_ARN: 'aws.ecs.container.arn';\n\n  /**\n   * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n   */\n  AWS_ECS_CLUSTER_ARN: 'aws.ecs.cluster.arn';\n\n  /**\n   * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n   */\n  AWS_ECS_LAUNCHTYPE: 'aws.ecs.launchtype';\n\n  /**\n   * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n   */\n  AWS_ECS_TASK_ARN: 'aws.ecs.task.arn';\n\n  /**\n   * The task definition family this task definition is a member of.\n   */\n  AWS_ECS_TASK_FAMILY: 'aws.ecs.task.family';\n\n  /**\n   * The revision for this task definition.\n   */\n  AWS_ECS_TASK_REVISION: 'aws.ecs.task.revision';\n\n  /**\n   * The ARN of an EKS cluster.\n   */\n  AWS_EKS_CLUSTER_ARN: 'aws.eks.cluster.arn';\n\n  /**\n   * The name(s) of the AWS log group(s) an application is writing to.\n   *\n   * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n   */\n  AWS_LOG_GROUP_NAMES: 'aws.log.group.names';\n\n  /**\n   * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n   *\n   * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n   */\n  AWS_LOG_GROUP_ARNS: 'aws.log.group.arns';\n\n  /**\n   * The name(s) of the AWS log stream(s) an application is writing to.\n   */\n  AWS_LOG_STREAM_NAMES: 'aws.log.stream.names';\n\n  /**\n   * The ARN(s) of the AWS log stream(s).\n   *\n   * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n   */\n  AWS_LOG_STREAM_ARNS: 'aws.log.stream.arns';\n\n  /**\n   * Container name.\n   */\n  CONTAINER_NAME: 'container.name';\n\n  /**\n   * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n   */\n  CONTAINER_ID: 'container.id';\n\n  /**\n   * The container runtime managing this container.\n   */\n  CONTAINER_RUNTIME: 'container.runtime';\n\n  /**\n   * Name of the image the container was built on.\n   */\n  CONTAINER_IMAGE_NAME: 'container.image.name';\n\n  /**\n   * Container image tag.\n   */\n  CONTAINER_IMAGE_TAG: 'container.image.tag';\n\n  /**\n   * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n   */\n  DEPLOYMENT_ENVIRONMENT: 'deployment.environment';\n\n  /**\n   * A unique identifier representing the device.\n   *\n   * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n   */\n  DEVICE_ID: 'device.id';\n\n  /**\n   * The model identifier for the device.\n   *\n   * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n   */\n  DEVICE_MODEL_IDENTIFIER: 'device.model.identifier';\n\n  /**\n   * The marketing name for the device model.\n   *\n   * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n   */\n  DEVICE_MODEL_NAME: 'device.model.name';\n\n  /**\n   * The name of the single function that this runtime instance executes.\n   *\n   * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n   */\n  FAAS_NAME: 'faas.name';\n\n  /**\n  * The unique ID of the single function that this runtime instance executes.\n  *\n  * Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n  */\n  FAAS_ID: 'faas.id';\n\n  /**\n  * The immutable version of the function being executed.\n  *\n  * Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n  */\n  FAAS_VERSION: 'faas.version';\n\n  /**\n   * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n   *\n   * Note: * **AWS Lambda:** Use the (full) log stream name.\n   */\n  FAAS_INSTANCE: 'faas.instance';\n\n  /**\n   * The amount of memory available to the serverless function in MiB.\n   *\n   * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n   */\n  FAAS_MAX_MEMORY: 'faas.max_memory';\n\n  /**\n   * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n   */\n  HOST_ID: 'host.id';\n\n  /**\n   * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n   */\n  HOST_NAME: 'host.name';\n\n  /**\n   * Type of host. For Cloud, this must be the machine type.\n   */\n  HOST_TYPE: 'host.type';\n\n  /**\n   * The CPU architecture the host system is running on.\n   */\n  HOST_ARCH: 'host.arch';\n\n  /**\n   * Name of the VM image or OS install the host was instantiated from.\n   */\n  HOST_IMAGE_NAME: 'host.image.name';\n\n  /**\n   * VM image ID. For Cloud, this value is from the provider.\n   */\n  HOST_IMAGE_ID: 'host.image.id';\n\n  /**\n   * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n   */\n  HOST_IMAGE_VERSION: 'host.image.version';\n\n  /**\n   * The name of the cluster.\n   */\n  K8S_CLUSTER_NAME: 'k8s.cluster.name';\n\n  /**\n   * The name of the Node.\n   */\n  K8S_NODE_NAME: 'k8s.node.name';\n\n  /**\n   * The UID of the Node.\n   */\n  K8S_NODE_UID: 'k8s.node.uid';\n\n  /**\n   * The name of the namespace that the pod is running in.\n   */\n  K8S_NAMESPACE_NAME: 'k8s.namespace.name';\n\n  /**\n   * The UID of the Pod.\n   */\n  K8S_POD_UID: 'k8s.pod.uid';\n\n  /**\n   * The name of the Pod.\n   */\n  K8S_POD_NAME: 'k8s.pod.name';\n\n  /**\n   * The name of the Container in a Pod template.\n   */\n  K8S_CONTAINER_NAME: 'k8s.container.name';\n\n  /**\n   * The UID of the ReplicaSet.\n   */\n  K8S_REPLICASET_UID: 'k8s.replicaset.uid';\n\n  /**\n   * The name of the ReplicaSet.\n   */\n  K8S_REPLICASET_NAME: 'k8s.replicaset.name';\n\n  /**\n   * The UID of the Deployment.\n   */\n  K8S_DEPLOYMENT_UID: 'k8s.deployment.uid';\n\n  /**\n   * The name of the Deployment.\n   */\n  K8S_DEPLOYMENT_NAME: 'k8s.deployment.name';\n\n  /**\n   * The UID of the StatefulSet.\n   */\n  K8S_STATEFULSET_UID: 'k8s.statefulset.uid';\n\n  /**\n   * The name of the StatefulSet.\n   */\n  K8S_STATEFULSET_NAME: 'k8s.statefulset.name';\n\n  /**\n   * The UID of the DaemonSet.\n   */\n  K8S_DAEMONSET_UID: 'k8s.daemonset.uid';\n\n  /**\n   * The name of the DaemonSet.\n   */\n  K8S_DAEMONSET_NAME: 'k8s.daemonset.name';\n\n  /**\n   * The UID of the Job.\n   */\n  K8S_JOB_UID: 'k8s.job.uid';\n\n  /**\n   * The name of the Job.\n   */\n  K8S_JOB_NAME: 'k8s.job.name';\n\n  /**\n   * The UID of the CronJob.\n   */\n  K8S_CRONJOB_UID: 'k8s.cronjob.uid';\n\n  /**\n   * The name of the CronJob.\n   */\n  K8S_CRONJOB_NAME: 'k8s.cronjob.name';\n\n  /**\n   * The operating system type.\n   */\n  OS_TYPE: 'os.type';\n\n  /**\n   * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n   */\n  OS_DESCRIPTION: 'os.description';\n\n  /**\n   * Human readable operating system name.\n   */\n  OS_NAME: 'os.name';\n\n  /**\n   * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n   */\n  OS_VERSION: 'os.version';\n\n  /**\n   * Process identifier (PID).\n   */\n  PROCESS_PID: 'process.pid';\n\n  /**\n   * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_NAME: 'process.executable.name';\n\n  /**\n   * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n   */\n  PROCESS_EXECUTABLE_PATH: 'process.executable.path';\n\n  /**\n   * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n   */\n  PROCESS_COMMAND: 'process.command';\n\n  /**\n   * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n   */\n  PROCESS_COMMAND_LINE: 'process.command_line';\n\n  /**\n   * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n   */\n  PROCESS_COMMAND_ARGS: 'process.command_args';\n\n  /**\n   * The username of the user that owns the process.\n   */\n  PROCESS_OWNER: 'process.owner';\n\n  /**\n   * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n   */\n  PROCESS_RUNTIME_NAME: 'process.runtime.name';\n\n  /**\n   * The version of the runtime of this process, as returned by the runtime without modification.\n   */\n  PROCESS_RUNTIME_VERSION: 'process.runtime.version';\n\n  /**\n   * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n   */\n  PROCESS_RUNTIME_DESCRIPTION: 'process.runtime.description';\n\n  /**\n   * Logical name of the service.\n   *\n   * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n   */\n  SERVICE_NAME: 'service.name';\n\n  /**\n   * A namespace for `service.name`.\n   *\n   * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n   */\n  SERVICE_NAMESPACE: 'service.namespace';\n\n  /**\n   * The string ID of the service instance.\n   *\n   * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n   */\n  SERVICE_INSTANCE_ID: 'service.instance.id';\n\n  /**\n   * The version string of the service API or implementation.\n   */\n  SERVICE_VERSION: 'service.version';\n\n  /**\n   * The name of the telemetry SDK as defined above.\n   */\n  TELEMETRY_SDK_NAME: 'telemetry.sdk.name';\n\n  /**\n   * The language of the telemetry SDK.\n   */\n  TELEMETRY_SDK_LANGUAGE: 'telemetry.sdk.language';\n\n  /**\n   * The version string of the telemetry SDK.\n   */\n  TELEMETRY_SDK_VERSION: 'telemetry.sdk.version';\n\n  /**\n   * The version string of the auto instrumentation agent, if used.\n   */\n  TELEMETRY_AUTO_VERSION: 'telemetry.auto.version';\n\n  /**\n   * The name of the web engine.\n   */\n  WEBENGINE_NAME: 'webengine.name';\n\n  /**\n   * The version of the web engine.\n   */\n  WEBENGINE_VERSION: 'webengine.version';\n\n  /**\n   * Additional description of the web engine (e.g. detailed version and edition information).\n   */\n  WEBENGINE_DESCRIPTION: 'webengine.description';\n};\n\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport const SemanticResourceAttributes: SemanticResourceAttributes =\n  /*#__PURE__*/ createConstMap<SemanticResourceAttributes>([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_ALIBABA_CLOUD =\n  TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n\n/**\n * Name of the cloud provider.\n */\nexport const CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n\n/**\n * Identifies the Values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport type CloudProviderValues = {\n  /** Alibaba Cloud. */\n  ALIBABA_CLOUD: 'alibaba_cloud';\n\n  /** Amazon Web Services. */\n  AWS: 'aws';\n\n  /** Microsoft Azure. */\n  AZURE: 'azure';\n\n  /** Google Cloud Platform. */\n  GCP: 'gcp';\n};\n\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport const CloudProviderValues: CloudProviderValues =\n  /*#__PURE__*/ createConstMap<CloudProviderValues>([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES =\n  'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS =\n  TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC =\n  TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_LAMBDA =\n  TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK =\n  TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES =\n  TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_FUNCTIONS =\n  TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_AZURE_APP_SERVICE =\n  TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_RUN =\n  TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS =\n  TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n */\nexport const CLOUDPLATFORMVALUES_GCP_APP_ENGINE =\n  TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n\n/**\n * Identifies the Values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport type CloudPlatformValues = {\n  /** Alibaba Cloud Elastic Compute Service. */\n  ALIBABA_CLOUD_ECS: 'alibaba_cloud_ecs';\n\n  /** Alibaba Cloud Function Compute. */\n  ALIBABA_CLOUD_FC: 'alibaba_cloud_fc';\n\n  /** AWS Elastic Compute Cloud. */\n  AWS_EC2: 'aws_ec2';\n\n  /** AWS Elastic Container Service. */\n  AWS_ECS: 'aws_ecs';\n\n  /** AWS Elastic Kubernetes Service. */\n  AWS_EKS: 'aws_eks';\n\n  /** AWS Lambda. */\n  AWS_LAMBDA: 'aws_lambda';\n\n  /** AWS Elastic Beanstalk. */\n  AWS_ELASTIC_BEANSTALK: 'aws_elastic_beanstalk';\n\n  /** Azure Virtual Machines. */\n  AZURE_VM: 'azure_vm';\n\n  /** Azure Container Instances. */\n  AZURE_CONTAINER_INSTANCES: 'azure_container_instances';\n\n  /** Azure Kubernetes Service. */\n  AZURE_AKS: 'azure_aks';\n\n  /** Azure Functions. */\n  AZURE_FUNCTIONS: 'azure_functions';\n\n  /** Azure App Service. */\n  AZURE_APP_SERVICE: 'azure_app_service';\n\n  /** Google Cloud Compute Engine (GCE). */\n  GCP_COMPUTE_ENGINE: 'gcp_compute_engine';\n\n  /** Google Cloud Run. */\n  GCP_CLOUD_RUN: 'gcp_cloud_run';\n\n  /** Google Cloud Kubernetes Engine (GKE). */\n  GCP_KUBERNETES_ENGINE: 'gcp_kubernetes_engine';\n\n  /** Google Cloud Functions (GCF). */\n  GCP_CLOUD_FUNCTIONS: 'gcp_cloud_functions';\n\n  /** Google Cloud App Engine (GAE). */\n  GCP_APP_ENGINE: 'gcp_app_engine';\n};\n\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport const CloudPlatformValues: CloudPlatformValues =\n  /*#__PURE__*/ createConstMap<CloudPlatformValues>([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport const AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n */\nexport const AWSECSLAUNCHTYPEVALUES_FARGATE =\n  TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n\n/**\n * Identifies the Values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport type AwsEcsLaunchtypeValues = {\n  /** ec2. */\n  EC2: 'ec2';\n\n  /** fargate. */\n  FARGATE: 'fargate';\n};\n\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport const AwsEcsLaunchtypeValues: AwsEcsLaunchtypeValues =\n  /*#__PURE__*/ createConstMap<AwsEcsLaunchtypeValues>([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n\n/**\n * The CPU architecture the host system is running on.\n */\nexport const HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n\n/**\n * Identifies the Values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport type HostArchValues = {\n  /** AMD64. */\n  AMD64: 'amd64';\n\n  /** ARM32. */\n  ARM32: 'arm32';\n\n  /** ARM64. */\n  ARM64: 'arm64';\n\n  /** Itanium. */\n  IA64: 'ia64';\n\n  /** 32-bit PowerPC. */\n  PPC32: 'ppc32';\n\n  /** 64-bit PowerPC. */\n  PPC64: 'ppc64';\n\n  /** 32-bit x86. */\n  X86: 'x86';\n};\n\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport const HostArchValues: HostArchValues =\n  /*#__PURE__*/ createConstMap<HostArchValues>([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n\n/**\n * The operating system type.\n */\nexport const OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n\n/**\n * Identifies the Values for OsTypeValues enum definition\n *\n * The operating system type.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport type OsTypeValues = {\n  /** Microsoft Windows. */\n  WINDOWS: 'windows';\n\n  /** Linux. */\n  LINUX: 'linux';\n\n  /** Apple Darwin. */\n  DARWIN: 'darwin';\n\n  /** FreeBSD. */\n  FREEBSD: 'freebsd';\n\n  /** NetBSD. */\n  NETBSD: 'netbsd';\n\n  /** OpenBSD. */\n  OPENBSD: 'openbsd';\n\n  /** DragonFly BSD. */\n  DRAGONFLYBSD: 'dragonflybsd';\n\n  /** HP-UX (Hewlett Packard Unix). */\n  HPUX: 'hpux';\n\n  /** AIX (Advanced Interactive eXecutive). */\n  AIX: 'aix';\n\n  /** Oracle Solaris. */\n  SOLARIS: 'solaris';\n\n  /** IBM z/OS. */\n  Z_OS: 'z_os';\n};\n\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport const OsTypeValues: OsTypeValues =\n  /*#__PURE__*/ createConstMap<OsTypeValues>([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n  ]);\n\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_CPP =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_DOTNET =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_ERLANG =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_JAVA =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_NODEJS =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PHP =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PYTHON =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_RUBY =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n\n/**\n * The language of the telemetry SDK.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_WEBJS =\n  TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n\n/**\n * Identifies the Values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport type TelemetrySdkLanguageValues = {\n  /** cpp. */\n  CPP: 'cpp';\n\n  /** dotnet. */\n  DOTNET: 'dotnet';\n\n  /** erlang. */\n  ERLANG: 'erlang';\n\n  /** go. */\n  GO: 'go';\n\n  /** java. */\n  JAVA: 'java';\n\n  /** nodejs. */\n  NODEJS: 'nodejs';\n\n  /** php. */\n  PHP: 'php';\n\n  /** python. */\n  PYTHON: 'python';\n\n  /** ruby. */\n  RUBY: 'ruby';\n\n  /** webjs. */\n  WEBJS: 'webjs';\n};\n\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport const TelemetrySdkLanguageValues: TelemetrySdkLanguageValues =\n  /*#__PURE__*/ createConstMap<TelemetrySdkLanguageValues>([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n  ]);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './SemanticResourceAttributes';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './trace';\nexport * from './resource';\n","(function (root) {\n    'use strict';\n    // A list of regular expressions that match arbitrary IPv4 addresses,\n    // for which a number of weird notations exist.\n    // Note that an address like 0010.0xa5.1.1 is considered legal.\n    const ipv4Part = '(0?\\\\d+|0x[a-f0-9]+)';\n    const ipv4Regexes = {\n        fourOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        threeOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        twoOctet: new RegExp(`^${ipv4Part}\\\\.${ipv4Part}$`, 'i'),\n        longValue: new RegExp(`^${ipv4Part}$`, 'i')\n    };\n\n    // Regular Expression for checking Octal numbers\n    const octalRegex = new RegExp(`^0[0-7]+$`, 'i');\n    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');\n\n    const zoneIndex = '%[0-9a-z]{1,}';\n\n    // IPv6-matching regular expressions.\n    // For IPv6, the task is simpler: it is enough to match the colon-delimited\n    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at\n    // the end.\n    const ipv6Part = '(?:[0-9a-f]+::?)+';\n    const ipv6Regexes = {\n        zoneIndex: new RegExp(zoneIndex, 'i'),\n        'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),\n        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),\n        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}\\\\.${ipv4Part}(${zoneIndex})?$`, 'i')\n    };\n\n    // Expand :: in an IPv6 address or address part consisting of `parts` groups.\n    function expandIPv6 (string, parts) {\n        // More than one '::' means invalid adddress\n        if (string.indexOf('::') !== string.lastIndexOf('::')) {\n            return null;\n        }\n\n        let colonCount = 0;\n        let lastColon = -1;\n        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];\n        let replacement, replacementCount;\n\n        // Remove zone index and save it for later\n        if (zoneId) {\n            zoneId = zoneId.substring(1);\n            string = string.replace(/%.+$/, '');\n        }\n\n        // How many parts do we already have?\n        while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\n            colonCount++;\n        }\n\n        // 0::0 is two parts more than ::\n        if (string.substr(0, 2) === '::') {\n            colonCount--;\n        }\n\n        if (string.substr(-2, 2) === '::') {\n            colonCount--;\n        }\n\n        // The following loop would hang if colonCount > parts\n        if (colonCount > parts) {\n            return null;\n        }\n\n        // replacement = ':' + '0:' * (parts - colonCount)\n        replacementCount = parts - colonCount;\n        replacement = ':';\n        while (replacementCount--) {\n            replacement += '0:';\n        }\n\n        // Insert the missing zeroes\n        string = string.replace('::', replacement);\n\n        // Trim any garbage which may be hanging around if :: was at the edge in\n        // the source strin\n        if (string[0] === ':') {\n            string = string.slice(1);\n        }\n\n        if (string[string.length - 1] === ':') {\n            string = string.slice(0, -1);\n        }\n\n        parts = (function () {\n            const ref = string.split(':');\n            const results = [];\n\n            for (let i = 0; i < ref.length; i++) {\n                results.push(parseInt(ref[i], 16));\n            }\n\n            return results;\n        })();\n\n        return {\n            parts: parts,\n            zoneId: zoneId\n        };\n    }\n\n    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.\n    function matchCIDR (first, second, partSize, cidrBits) {\n        if (first.length !== second.length) {\n            throw new Error('ipaddr: cannot match CIDR for objects with different lengths');\n        }\n\n        let part = 0;\n        let shift;\n\n        while (cidrBits > 0) {\n            shift = partSize - cidrBits;\n            if (shift < 0) {\n                shift = 0;\n            }\n\n            if (first[part] >> shift !== second[part] >> shift) {\n                return false;\n            }\n\n            cidrBits -= partSize;\n            part += 1;\n        }\n\n        return true;\n    }\n\n    function parseIntAuto (string) {\n        // Hexadedimal base 16 (0x#)\n        if (hexRegex.test(string)) {\n            return parseInt(string, 16);\n        }\n        // While octal representation is discouraged by ECMAScript 3\n        // and forbidden by ECMAScript 5, we silently allow it to\n        // work only if the rest of the string has numbers less than 8.\n        if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {\n        if (octalRegex.test(string)) {\n            return parseInt(string, 8);\n        }\n            throw new Error(`ipaddr: cannot parse ${string} as octal`);\n        }\n        // Always include the base 10 radix!\n        return parseInt(string, 10);\n    }\n\n    function padPart (part, length) {\n        while (part.length < length) {\n            part = `0${part}`;\n        }\n\n        return part;\n    }\n\n    const ipaddr = {};\n\n    // An IPv4 address (RFC791).\n    ipaddr.IPv4 = (function () {\n        // Constructs a new IPv4 address from an array of four octets\n        // in network order (MSB first)\n        // Verifies the input.\n        function IPv4 (octets) {\n            if (octets.length !== 4) {\n                throw new Error('ipaddr: ipv4 octet count should be 4');\n            }\n\n            let i, octet;\n\n            for (i = 0; i < octets.length; i++) {\n                octet = octets[i];\n                if (!((0 <= octet && octet <= 255))) {\n                    throw new Error('ipaddr: ipv4 octet should fit in 8 bits');\n                }\n            }\n\n            this.octets = octets;\n        }\n\n        // Special IPv4 address ranges.\n        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses\n        IPv4.prototype.SpecialRanges = {\n            unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\n            broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\n            // RFC3171\n            multicast: [[new IPv4([224, 0, 0, 0]), 4]],\n            // RFC3927\n            linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\n            // RFC5735\n            loopback: [[new IPv4([127, 0, 0, 0]), 8]],\n            // RFC6598\n            carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\n            // RFC1918\n            'private': [\n                [new IPv4([10, 0, 0, 0]), 8],\n                [new IPv4([172, 16, 0, 0]), 12],\n                [new IPv4([192, 168, 0, 0]), 16]\n            ],\n            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700\n            reserved: [\n                [new IPv4([192, 0, 0, 0]), 24],\n                [new IPv4([192, 0, 2, 0]), 24],\n                [new IPv4([192, 88, 99, 0]), 24],\n                [new IPv4([198, 18, 0, 0]), 15],\n                [new IPv4([198, 51, 100, 0]), 24],\n                [new IPv4([203, 0, 113, 0]), 24],\n                [new IPv4([240, 0, 0, 0]), 4]\n            ],\n            // RFC7534, RFC7535\n            as112: [\n                [new IPv4([192, 175, 48, 0]), 24],\n                [new IPv4([192, 31, 196, 0]), 24],\n            ],\n            // RFC7450\n            amt: [\n                [new IPv4([192, 52, 193, 0]), 24],\n            ],\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv4.prototype.kind = function () {\n            return 'ipv4';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv4.prototype.match = function (other, cidrRange) {\n            let ref;\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv4') {\n                throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');\n            }\n\n            return matchCIDR(this.octets, other.octets, 8, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv4 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv4.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 8,\n                128: 7,\n                192: 6,\n                224: 5,\n                240: 4,\n                248: 3,\n                252: 2,\n                254: 1,\n                255: 0\n            };\n            let i, octet, zeros;\n\n            for (i = 3; i >= 0; i -= 1) {\n                octet = this.octets[i];\n                if (octet in zerotable) {\n                    zeros = zerotable[octet];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 8) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 32 - cidr;\n        };\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv4.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv4.prototype.toByteArray = function () {\n            return this.octets.slice(0);\n        };\n\n        // Converts this IPv4 address to an IPv4-mapped IPv6 address.\n        IPv4.prototype.toIPv4MappedAddress = function () {\n            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);\n        };\n\n        // Symmetrical method strictly for aligning with the IPv6 methods.\n        IPv4.prototype.toNormalizedString = function () {\n            return this.toString();\n        };\n\n        // Returns the address in convenient, decimal-dotted format.\n        IPv4.prototype.toString = function () {\n            return this.octets.join('.');\n        };\n\n        return IPv4;\n    })();\n\n    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {\n\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 4) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Checks if a given string is formatted like IPv4 address.\n    ipaddr.IPv4.isIPv4 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks if a given string is a valid IPv4 address.\n    ipaddr.IPv4.isValid = function (string) {\n        try {\n            new this(this.parser(string));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a valid IPv4 address in CIDR notation.\n    ipaddr.IPv4.isValidCIDR = function (string) {\n        try {\n            this.parseCIDR(string);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a full four-part IPv4 Address.\n    ipaddr.IPv4.isValidFourPartDecimal = function (string) {\n        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation\n    ipaddr.IPv4.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 4) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error('ipaddr: the address does not have IPv4 CIDR format');\n        }\n    };\n\n    // Tries to parse and validate a string with IPv4 address.\n    // Throws an error if it fails.\n    ipaddr.IPv4.parse = function (string) {\n        const parts = this.parser(string);\n\n        if (parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv4 Address');\n        }\n\n        return new this(parts);\n    };\n\n    // Parses the string as an IPv4 Address with CIDR Notation.\n    ipaddr.IPv4.parseCIDR = function (string) {\n        let match;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            const maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 32) {\n                const parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');\n    };\n\n    // Classful variants (like a.b, where a is an octet, and b is a 24-bit\n    // value representing last three octets; this corresponds to a class C\n    // address) are omitted due to classless nature of modern Internet.\n    ipaddr.IPv4.parser = function (string) {\n        let match, part, value;\n\n        // parseInt recognizes all that octal & hexadecimal weirdness for us\n        if ((match = string.match(ipv4Regexes.fourOctet))) {\n            return (function () {\n                const ref = match.slice(1, 6);\n                const results = [];\n\n                for (let i = 0; i < ref.length; i++) {\n                    part = ref[i];\n                    results.push(parseIntAuto(part));\n                }\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.longValue))) {\n            value = parseIntAuto(match[1]);\n            if (value > 0xffffffff || value < 0) {\n                throw new Error('ipaddr: address outside defined range');\n            }\n\n            return ((function () {\n                const results = [];\n                let shift;\n\n                for (shift = 0; shift <= 24; shift += 8) {\n                    results.push((value >> shift) & 0xff);\n                }\n\n                return results;\n            })()).reverse();\n        } else if ((match = string.match(ipv4Regexes.twoOctet))) {\n            return (function () {\n                const ref = match.slice(1, 4);\n                const results = [];\n\n                value = parseIntAuto(ref[1]);\n                if (value > 0xffffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push((value >> 16) & 0xff);\n                results.push((value >>  8) & 0xff);\n                results.push( value        & 0xff);\n\n                return results;\n            })();\n        } else if ((match = string.match(ipv4Regexes.threeOctet))) {\n            return (function () {\n                const ref = match.slice(1, 5);\n                const results = [];\n\n                value = parseIntAuto(ref[2]);\n                if (value > 0xffff || value < 0) {\n                    throw new Error('ipaddr: address outside defined range');\n                }\n\n                results.push(parseIntAuto(ref[0]));\n                results.push(parseIntAuto(ref[1]));\n                results.push((value >> 8) & 0xff);\n                results.push( value       & 0xff);\n\n                return results;\n            })();\n        } else {\n            return null;\n        }\n    };\n\n    // A utility function to return subnet mask in IPv4 format given the prefix length\n    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 32) {\n            throw new Error('ipaddr: invalid IPv4 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 4) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // An IPv6 address (RFC2460)\n    ipaddr.IPv6 = (function () {\n        // Constructs an IPv6 address from an array of eight 16 - bit parts\n        // or sixteen 8 - bit parts in network order(MSB first).\n        // Throws an error if the input is invalid.\n        function IPv6 (parts, zoneId) {\n            let i, part;\n\n            if (parts.length === 16) {\n                this.parts = [];\n                for (i = 0; i <= 14; i += 2) {\n                    this.parts.push((parts[i] << 8) | parts[i + 1]);\n                }\n            } else if (parts.length === 8) {\n                this.parts = parts;\n            } else {\n                throw new Error('ipaddr: ipv6 part count should be 8 or 16');\n            }\n\n            for (i = 0; i < this.parts.length; i++) {\n                part = this.parts[i];\n                if (!((0 <= part && part <= 0xffff))) {\n                    throw new Error('ipaddr: ipv6 part should fit in 16 bits');\n                }\n            }\n\n            if (zoneId) {\n                this.zoneId = zoneId;\n            }\n        }\n\n        // Special IPv6 ranges\n        IPv6.prototype.SpecialRanges = {\n            // RFC4291, here and after\n            unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\n            linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\n            multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\n            loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\n            uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\n            ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\n            // RFC6666\n            discard: [new IPv6([0x100, 0, 0, 0, 0, 0, 0, 0]), 64],\n            // RFC6145\n            rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\n            // RFC6052\n            rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\n            // RFC3056\n            '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\n            // RFC6052, RFC6146\n            teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\n            // RFC5180\n            benchmarking: [new IPv6([0x2001, 0x2, 0, 0, 0, 0, 0, 0]), 48],\n            // RFC7450\n            amt: [new IPv6([0x2001, 0x3, 0, 0, 0, 0, 0, 0]), 32],\n            as112v6: [\n                [new IPv6([0x2001, 0x4, 0x112, 0, 0, 0, 0, 0]), 48],\n                [new IPv6([0x2620, 0x4f, 0x8000, 0, 0, 0, 0, 0]), 48],\n            ],\n            deprecated: [new IPv6([0x2001, 0x10, 0, 0, 0, 0, 0, 0]), 28],\n            orchid2: [new IPv6([0x2001, 0x20, 0, 0, 0, 0, 0, 0]), 28],\n            droneRemoteIdProtocolEntityTags: [new IPv6([0x2001, 0x30, 0, 0, 0, 0, 0, 0]), 28],\n            reserved: [\n                // RFC3849\n                [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 23],\n                // RFC2928\n                [new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32],\n            ],\n        };\n\n        // Checks if this address is an IPv4-mapped IPv6 address.\n        IPv6.prototype.isIPv4MappedAddress = function () {\n            return this.range() === 'ipv4Mapped';\n        };\n\n        // The 'kind' method exists on both IPv4 and IPv6 classes.\n        IPv6.prototype.kind = function () {\n            return 'ipv6';\n        };\n\n        // Checks if this address matches other one within given CIDR range.\n        IPv6.prototype.match = function (other, cidrRange) {\n            let ref;\n\n            if (cidrRange === undefined) {\n                ref = other;\n                other = ref[0];\n                cidrRange = ref[1];\n            }\n\n            if (other.kind() !== 'ipv6') {\n                throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');\n            }\n\n            return matchCIDR(this.parts, other.parts, 16, cidrRange);\n        };\n\n        // returns a number of leading ones in IPv6 address, making sure that\n        // the rest is a solid sequence of 0's (valid netmask)\n        // returns either the CIDR length or null if mask is not valid\n        IPv6.prototype.prefixLengthFromSubnetMask = function () {\n            let cidr = 0;\n            // non-zero encountered stop scanning for zeroes\n            let stop = false;\n            // number of zeroes in octet\n            const zerotable = {\n                0: 16,\n                32768: 15,\n                49152: 14,\n                57344: 13,\n                61440: 12,\n                63488: 11,\n                64512: 10,\n                65024: 9,\n                65280: 8,\n                65408: 7,\n                65472: 6,\n                65504: 5,\n                65520: 4,\n                65528: 3,\n                65532: 2,\n                65534: 1,\n                65535: 0\n            };\n            let part, zeros;\n\n            for (let i = 7; i >= 0; i -= 1) {\n                part = this.parts[i];\n                if (part in zerotable) {\n                    zeros = zerotable[part];\n                    if (stop && zeros !== 0) {\n                        return null;\n                    }\n\n                    if (zeros !== 16) {\n                        stop = true;\n                    }\n\n                    cidr += zeros;\n                } else {\n                    return null;\n                }\n            }\n\n            return 128 - cidr;\n        };\n\n\n        // Checks if the address corresponds to one of the special ranges.\n        IPv6.prototype.range = function () {\n            return ipaddr.subnetMatch(this, this.SpecialRanges);\n        };\n\n        // Returns an array of byte-sized values in network order (MSB first)\n        IPv6.prototype.toByteArray = function () {\n            let part;\n            const bytes = [];\n            const ref = this.parts;\n            for (let i = 0; i < ref.length; i++) {\n                part = ref[i];\n                bytes.push(part >> 8);\n                bytes.push(part & 0xff);\n            }\n\n            return bytes;\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:0db8:0008:0066:0000:0000:0000:0001\n        IPv6.prototype.toFixedLengthString = function () {\n            const addr = ((function () {\n                const results = [];\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(padPart(this.parts[i].toString(16), 4));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.\n        // Throws an error otherwise.\n        IPv6.prototype.toIPv4Address = function () {\n            if (!this.isIPv4MappedAddress()) {\n                throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');\n            }\n\n            const ref = this.parts.slice(-2);\n            const high = ref[0];\n            const low = ref[1];\n\n            return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\n        };\n\n        // Returns the address in expanded format with all zeroes included, like\n        // 2001:db8:8:66:0:0:0:1\n        //\n        // Deprecated: use toFixedLengthString() instead.\n        IPv6.prototype.toNormalizedString = function () {\n            const addr = ((function () {\n                const results = [];\n\n                for (let i = 0; i < this.parts.length; i++) {\n                    results.push(this.parts[i].toString(16));\n                }\n\n                return results;\n            }).call(this)).join(':');\n\n            let suffix = '';\n\n            if (this.zoneId) {\n                suffix = `%${this.zoneId}`;\n            }\n\n            return addr + suffix;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)\n        IPv6.prototype.toRFC5952String = function () {\n            const regex = /((^|:)(0(:|$)){2,})/g;\n            const string = this.toNormalizedString();\n            let bestMatchIndex = 0;\n            let bestMatchLength = -1;\n            let match;\n\n            while ((match = regex.exec(string))) {\n                if (match[0].length > bestMatchLength) {\n                    bestMatchIndex = match.index;\n                    bestMatchLength = match[0].length;\n                }\n            }\n\n            if (bestMatchLength < 0) {\n                return string;\n            }\n\n            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;\n        };\n\n        // Returns the address in compact, human-readable format like\n        // 2001:db8:8:66::1\n        // Calls toRFC5952String under the hood.\n        IPv6.prototype.toString = function () {\n            return this.toRFC5952String();\n        };\n\n        return IPv6;\n\n    })();\n\n    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {\n        try {\n            const cidr = this.parseCIDR(string);\n            const ipInterfaceOctets = cidr[0].toByteArray();\n            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            const octets = [];\n            let i = 0;\n            while (i < 16) {\n                // Broadcast address is bitwise OR between ip interface and inverted mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Checks if a given string is formatted like IPv6 address.\n    ipaddr.IPv6.isIPv6 = function (string) {\n        return this.parser(string) !== null;\n    };\n\n    // Checks to see if string is a valid IPv6 Address\n    ipaddr.IPv6.isValid = function (string) {\n\n        // Since IPv6.isValid is always called first, this shortcut\n        // provides a substantial performance gain.\n        if (typeof string === 'string' && string.indexOf(':') === -1) {\n            return false;\n        }\n\n        try {\n            const addr = this.parser(string);\n            new this(addr.parts, addr.zoneId);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // Checks if a given string is a valid IPv6 address in CIDR notation.\n    ipaddr.IPv6.isValidCIDR = function (string) {\n\n        // See note in IPv6.isValid\n        if (typeof string === 'string' && string.indexOf(':') === -1) {\n            return false;\n        }\n\n        try {\n            this.parseCIDR(string);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\n\n    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation\n    ipaddr.IPv6.networkAddressFromCIDR = function (string) {\n        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;\n\n        try {\n            cidr = this.parseCIDR(string);\n            ipInterfaceOctets = cidr[0].toByteArray();\n            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\n            octets = [];\n            i = 0;\n            while (i < 16) {\n                // Network address is bitwise AND between ip interface and mask\n                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\n                i++;\n            }\n\n            return new this(octets);\n        } catch (e) {\n            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);\n        }\n    };\n\n    // Tries to parse and validate a string with IPv6 address.\n    // Throws an error if it fails.\n    ipaddr.IPv6.parse = function (string) {\n        const addr = this.parser(string);\n\n        if (addr.parts === null) {\n            throw new Error('ipaddr: string is not formatted like an IPv6 Address');\n        }\n\n        return new this(addr.parts, addr.zoneId);\n    };\n\n    ipaddr.IPv6.parseCIDR = function (string) {\n        let maskLength, match, parsed;\n\n        if ((match = string.match(/^(.+)\\/(\\d+)$/))) {\n            maskLength = parseInt(match[2]);\n            if (maskLength >= 0 && maskLength <= 128) {\n                parsed = [this.parse(match[1]), maskLength];\n                Object.defineProperty(parsed, 'toString', {\n                    value: function () {\n                        return this.join('/');\n                    }\n                });\n                return parsed;\n            }\n        }\n\n        throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');\n    };\n\n    // Parse an IPv6 address.\n    ipaddr.IPv6.parser = function (string) {\n        let addr, i, match, octet, octets, zoneId;\n\n        if ((match = string.match(ipv6Regexes.deprecatedTransitional))) {\n            return this.parser(`::ffff:${match[1]}`);\n        }\n        if (ipv6Regexes.native.test(string)) {\n            return expandIPv6(string, 8);\n        }\n        if ((match = string.match(ipv6Regexes.transitional))) {\n            zoneId = match[6] || '';\n            addr = match[1]\n            if (!match[1].endsWith('::')) {\n                addr = addr.slice(0, -1)\n            }\n            addr = expandIPv6(addr + zoneId, 6);\n            if (addr.parts) {\n                octets = [\n                    parseInt(match[2]),\n                    parseInt(match[3]),\n                    parseInt(match[4]),\n                    parseInt(match[5])\n                ];\n                for (i = 0; i < octets.length; i++) {\n                    octet = octets[i];\n                    if (!((0 <= octet && octet <= 255))) {\n                        return null;\n                    }\n                }\n\n                addr.parts.push(octets[0] << 8 | octets[1]);\n                addr.parts.push(octets[2] << 8 | octets[3]);\n                return {\n                    parts: addr.parts,\n                    zoneId: addr.zoneId\n                };\n            }\n        }\n\n        return null;\n    };\n\n    // A utility function to return subnet mask in IPv6 format given the prefix length\n    ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {\n        prefix = parseInt(prefix);\n        if (prefix < 0 || prefix > 128) {\n            throw new Error('ipaddr: invalid IPv6 prefix length');\n        }\n\n        const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        let j = 0;\n        const filledOctetCount = Math.floor(prefix / 8);\n\n        while (j < filledOctetCount) {\n            octets[j] = 255;\n            j++;\n        }\n\n        if (filledOctetCount < 16) {\n            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\n        }\n\n        return new this(octets);\n    };\n\n    // Try to parse an array in network order (MSB first) for IPv4 and IPv6\n    ipaddr.fromByteArray = function (bytes) {\n        const length = bytes.length;\n\n        if (length === 4) {\n            return new ipaddr.IPv4(bytes);\n        } else if (length === 16) {\n            return new ipaddr.IPv6(bytes);\n        } else {\n            throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');\n        }\n    };\n\n    // Checks if the address is valid IP address\n    ipaddr.isValid = function (string) {\n        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\n    };\n\n    // Checks if the address is valid IP address in CIDR notation\n    ipaddr.isValidCIDR = function (string) {\n        return ipaddr.IPv6.isValidCIDR(string) || ipaddr.IPv4.isValidCIDR(string);\n    };\n\n\n    // Attempts to parse an IP Address, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parse = function (string) {\n        if (ipaddr.IPv6.isValid(string)) {\n            return ipaddr.IPv6.parse(string);\n        } else if (ipaddr.IPv4.isValid(string)) {\n            return ipaddr.IPv4.parse(string);\n        } else {\n            throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');\n        }\n    };\n\n    // Attempt to parse CIDR notation, first through IPv6 then IPv4.\n    // Throws an error if it could not be parsed.\n    ipaddr.parseCIDR = function (string) {\n        try {\n            return ipaddr.IPv6.parseCIDR(string);\n        } catch (e) {\n            try {\n                return ipaddr.IPv4.parseCIDR(string);\n            } catch (e2) {\n                throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');\n            }\n        }\n    };\n\n    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address\n    ipaddr.process = function (string) {\n        const addr = this.parse(string);\n\n        if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\n            return addr.toIPv4Address();\n        } else {\n            return addr;\n        }\n    };\n\n    // An utility function to ease named range matching. See examples below.\n    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors\n    // on matching IPv4 addresses to IPv6 ranges or vice versa.\n    ipaddr.subnetMatch = function (address, rangeList, defaultName) {\n        let i, rangeName, rangeSubnets, subnet;\n\n        if (defaultName === undefined || defaultName === null) {\n            defaultName = 'unicast';\n        }\n\n        for (rangeName in rangeList) {\n            if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {\n                rangeSubnets = rangeList[rangeName];\n                // ECMA5 Array.isArray isn't available everywhere\n                if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\n                    rangeSubnets = [rangeSubnets];\n                }\n\n                for (i = 0; i < rangeSubnets.length; i++) {\n                    subnet = rangeSubnets[i];\n                    if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {\n                        return rangeName;\n                    }\n                }\n            }\n        }\n\n        return defaultName;\n    };\n\n    // Export for both the CommonJS and browser-like environment\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = ipaddr;\n\n    } else {\n        root.ipaddr = ipaddr;\n    }\n\n}(this));\n","import {Attributes} from '@opentelemetry/api';\nimport {\n  SEMATTRS_RPC_SYSTEM,\n  SEMATTRS_RPC_SERVICE,\n  SEMATTRS_RPC_METHOD,\n  SEMATTRS_RPC_GRPC_STATUS_CODE,\n  SEMATTRS_NET_PEER_NAME,\n  SEMATTRS_NET_PEER_IP,\n  SEMATTRS_NET_PEER_PORT,\n} from '@opentelemetry/semantic-conventions';\nimport * as ipaddr from 'ipaddr.js';\nimport {Status} from 'nice-grpc-common';\n\n/**\n * @param methodPath Full method path in form `/package.service/method`\n *\n * @see https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/rpc/#common-attributes\n */\nexport function getMethodAttributes(methodPath: string): Attributes {\n  const [, service, method] = methodPath.split('/');\n\n  return {\n    [SEMATTRS_RPC_SYSTEM]: 'grpc',\n    [SEMATTRS_RPC_SERVICE]: service,\n    [SEMATTRS_RPC_METHOD]: method,\n  };\n}\n\n/**\n * @see https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/rpc/#grpc-attributes\n */\nexport function getStatusAttributes(status: Status): Attributes {\n  return {\n    [SEMATTRS_RPC_GRPC_STATUS_CODE]: status,\n    'rpc.grpc.status_text': Status[status],\n  };\n}\n\n/**\n * @param peer Peer provided by `grpc-js`, usually `ip:port`\n *\n * @see https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/rpc/#common-attributes\n */\nexport function getPeerAttributes(peer: string): Attributes {\n  const lastColonIndex = peer.lastIndexOf(':');\n\n  if (lastColonIndex === -1) {\n    return {\n      [SEMATTRS_NET_PEER_NAME]: peer,\n    };\n  }\n\n  const host = peer.slice(0, lastColonIndex);\n  const port = +peer.slice(lastColonIndex + 1);\n\n  if (Number.isNaN(port)) {\n    return {\n      [SEMATTRS_NET_PEER_NAME]: peer,\n    };\n  }\n\n  if (ipaddr.isValid(host)) {\n    return {\n      [SEMATTRS_NET_PEER_IP]: host,\n      [SEMATTRS_NET_PEER_PORT]: port,\n    };\n  }\n\n  return {\n    [SEMATTRS_NET_PEER_NAME]: host,\n    [SEMATTRS_NET_PEER_PORT]: port,\n  };\n}\n","import {TextMapGetter, TextMapSetter} from '@opentelemetry/api';\nimport {Metadata} from 'nice-grpc-common';\n\nexport const metadataSetter: TextMapSetter<Metadata> = {\n  set(carrier, key, value) {\n    carrier.set(key, value);\n  },\n};\n\nexport const metadataGetter: TextMapGetter<Metadata> = {\n  get: (carrier, key) => carrier.get(key) as string | undefined,\n  keys: carrier => Array.from(carrier, ([key]) => key),\n};\n","// Generated by scripts/version.js\nexport const VERSION = '0.1.15';\n","import {Span, trace} from '@opentelemetry/api';\nimport {\n  MESSAGETYPEVALUES_RECEIVED,\n  MESSAGETYPEVALUES_SENT,\n  SEMATTRS_MESSAGE_ID,\n  SEMATTRS_MESSAGE_TYPE,\n} from '@opentelemetry/semantic-conventions';\nimport {VERSION} from './version';\n\nexport const tracer = trace.getTracer('nice-grpc-opentelemetry', VERSION);\n\n/**\n * @param methodPath Full method path in form `/package.service/method`\n *\n * @see https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/rpc/#span-name\n */\nexport function getSpanName(methodPath: string): string {\n  return methodPath.slice(1);\n}\n\n/**\n * Wrap call request or response iterable and emit `message` span event for each\n * item.\n *\n * @param iterable request or response iterable\n * @param span call span\n * @param type `SENT` or `RECEIVED`\n *\n * @see https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/rpc/#events\n */\nexport async function* emitSpanEvents<T>(\n  iterable: AsyncIterable<T>,\n  span: Span,\n  type: typeof MESSAGETYPEVALUES_SENT | typeof MESSAGETYPEVALUES_RECEIVED,\n): AsyncIterable<T> {\n  let nextId = 1;\n\n  for await (const item of iterable) {\n    span.addEvent('message', {\n      [SEMATTRS_MESSAGE_TYPE]: type,\n      [SEMATTRS_MESSAGE_ID]: nextId++,\n    });\n\n    yield item;\n  }\n}\n","import {context, Context} from '@opentelemetry/api';\n\nexport function bindAsyncGenerator<T = unknown, TReturn = any, TNext = unknown>(\n  ctx: Context,\n  generator: AsyncGenerator<T, TReturn, TNext>,\n): AsyncGenerator<T, TReturn, TNext> {\n  return {\n    next: context.bind(ctx, generator.next.bind(generator)),\n    return: context.bind(ctx, generator.return.bind(generator)),\n    throw: context.bind(ctx, generator.throw.bind(generator)),\n\n    [Symbol.asyncIterator]() {\n      return bindAsyncGenerator(ctx, generator[Symbol.asyncIterator]());\n    },\n  };\n}\n","import {\n  context as contextApi,\n  propagation,\n  ROOT_CONTEXT,\n  Span,\n  SpanKind,\n  SpanStatusCode,\n} from '@opentelemetry/api';\nimport {\n  MESSAGETYPEVALUES_RECEIVED,\n  MESSAGETYPEVALUES_SENT,\n} from '@opentelemetry/semantic-conventions';\nimport {isAbortError} from 'abort-controller-x';\nimport {\n  CallContext,\n  ServerError,\n  ServerMiddleware,\n  ServerMiddlewareCall,\n  Status,\n} from 'nice-grpc-common';\nimport {\n  getMethodAttributes,\n  getPeerAttributes,\n  getStatusAttributes,\n} from './attributes';\nimport {metadataGetter} from './propagation';\nimport {emitSpanEvents, getSpanName, tracer} from './traces';\nimport {bindAsyncGenerator} from './utils/bindAsyncGenerator';\n\nexport function openTelemetryServerMiddleware(): ServerMiddleware {\n  return (call, context) =>\n    tracer.startActiveSpan(\n      getSpanName(call.method.path),\n      {\n        kind: SpanKind.SERVER,\n      },\n      propagation.extract(ROOT_CONTEXT, context.metadata, metadataGetter),\n      span =>\n        bindAsyncGenerator(\n          contextApi.active(),\n          openTelemetryServerMiddlewareGenerator(span, call, context),\n        ),\n    );\n}\n\nasync function* openTelemetryServerMiddlewareGenerator<Request, Response>(\n  span: Span,\n  call: ServerMiddlewareCall<Request, Response>,\n  context: CallContext,\n): AsyncGenerator<Response, Response | void, undefined> {\n  const attributes = {\n    ...getMethodAttributes(call.method.path),\n    ...getPeerAttributes(context.peer),\n  };\n\n  span.setAttributes(attributes);\n\n  let status: Status = Status.OK;\n  let errorMessage: string | undefined;\n\n  try {\n    let request;\n\n    if (!call.requestStream) {\n      request = call.request;\n    } else {\n      request = emitSpanEvents(call.request, span, MESSAGETYPEVALUES_RECEIVED);\n    }\n\n    if (!call.responseStream) {\n      return yield* call.next(request, context);\n    } else {\n      yield* emitSpanEvents(\n        call.next(request, context),\n        span,\n        MESSAGETYPEVALUES_SENT,\n      );\n\n      return;\n    }\n  } catch (err: unknown) {\n    if (err instanceof ServerError) {\n      status = err.code;\n      errorMessage = err.details;\n    } else if (isAbortError(err)) {\n      status = Status.CANCELLED;\n      errorMessage = 'The operation was cancelled';\n    } else {\n      status = Status.UNKNOWN;\n      errorMessage = 'Unknown server error occurred';\n\n      span.recordException(err as any);\n    }\n\n    throw err;\n  } finally {\n    const statusAttributes = getStatusAttributes(status);\n\n    span.setAttributes(statusAttributes);\n\n    // https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/rpc/#grpc-status\n    if (status !== Status.OK) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: `${Status[status]}: ${errorMessage}`,\n      });\n    }\n\n    span.end();\n  }\n}\n","import {\n  context as contextApi,\n  propagation,\n  Span,\n  SpanKind,\n  SpanStatusCode,\n} from '@opentelemetry/api';\nimport {\n  MESSAGETYPEVALUES_RECEIVED,\n  MESSAGETYPEVALUES_SENT,\n} from '@opentelemetry/semantic-conventions';\nimport {isAbortError} from 'abort-controller-x';\nimport {\n  CallOptions,\n  ClientError,\n  ClientMiddleware,\n  ClientMiddlewareCall,\n  Metadata,\n  Status,\n} from 'nice-grpc-common';\nimport {getMethodAttributes, getStatusAttributes} from './attributes';\nimport {metadataSetter} from './propagation';\nimport {emitSpanEvents, getSpanName, tracer} from './traces';\nimport {bindAsyncGenerator} from './utils/bindAsyncGenerator';\n\nexport function openTelemetryClientMiddleware(): ClientMiddleware {\n  return (call, options) =>\n    tracer.startActiveSpan(\n      getSpanName(call.method.path),\n      {\n        kind: SpanKind.CLIENT,\n      },\n      span => {\n        const metadata = Metadata(options.metadata);\n\n        propagation.inject(contextApi.active(), metadata, metadataSetter);\n\n        return bindAsyncGenerator(\n          contextApi.active(),\n          openTelemetryClientMiddlewareGenerator(span, call, {\n            ...options,\n            metadata,\n          }),\n        );\n      },\n    );\n}\n\nasync function* openTelemetryClientMiddlewareGenerator<Request, Response>(\n  span: Span,\n  call: ClientMiddlewareCall<Request, Response>,\n  options: CallOptions,\n): AsyncGenerator<Response, Response | void, undefined> {\n  const attributes = getMethodAttributes(call.method.path);\n\n  span.setAttributes(attributes);\n\n  let settled = false;\n  let status: Status = Status.OK;\n  let errorMessage: string | undefined;\n\n  try {\n    let request;\n\n    if (!call.requestStream) {\n      request = call.request;\n    } else {\n      request = emitSpanEvents(call.request, span, MESSAGETYPEVALUES_SENT);\n    }\n\n    if (!call.responseStream) {\n      const response = yield* call.next(request, options);\n\n      settled = true;\n\n      return response;\n    } else {\n      yield* emitSpanEvents(\n        call.next(request, options),\n        span,\n        MESSAGETYPEVALUES_RECEIVED,\n      );\n\n      settled = true;\n\n      return;\n    }\n  } catch (err: unknown) {\n    settled = true;\n\n    if (err instanceof ClientError) {\n      status = err.code;\n      errorMessage = err.details;\n    } else if (isAbortError(err)) {\n      status = Status.CANCELLED;\n      errorMessage = 'The operation was cancelled';\n    } else {\n      status = Status.UNKNOWN;\n      errorMessage = 'Unknown server error occurred';\n\n      span.recordException(err as any);\n    }\n\n    throw err;\n  } finally {\n    if (!settled) {\n      status = Status.CANCELLED;\n      errorMessage =\n        'Stream iteration was aborted by client, e.g. by breaking from the for .. of loop';\n    }\n\n    const statusAttributes = getStatusAttributes(status);\n\n    span.setAttributes(statusAttributes);\n\n    // https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/rpc/#grpc-status\n    if (status !== Status.OK) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: `${Status[status]}: ${errorMessage}`,\n      });\n    }\n\n    span.end();\n  }\n}\n","export {openTelemetryServerMiddleware} from './server';\nexport {openTelemetryClientMiddleware} from './client';\n","'use strict';\n\n/*\n * Displays a helpful message and the source of\n * the format when it is invalid.\n */\nclass InvalidFormatError extends Error {\n  constructor(formatFn) {\n    super(`Format functions must be synchronous taking a two arguments: (info, opts)\nFound: ${formatFn.toString().split('\\n')[0]}\\n`);\n\n    Error.captureStackTrace(this, InvalidFormatError);\n  }\n}\n\n/*\n * function format (formatFn)\n * Returns a create function for the `formatFn`.\n */\nmodule.exports = formatFn => {\n  if (formatFn.length > 2) {\n    throw new InvalidFormatError(formatFn);\n  }\n\n  /*\n   * function Format (options)\n   * Base prototype which calls a `_format`\n   * function and pushes the result.\n   */\n  function Format(options = {}) {\n    this.options = options;\n  }\n\n  Format.prototype.transform = formatFn;\n\n  //\n  // Create a function which returns new instances of\n  // FormatWrap for simple syntax like:\n  //\n  // require('winston').formats.json();\n  //\n  function createFormatWrap(opts) {\n    return new Format(opts);\n  }\n\n  //\n  // Expose the FormatWrap through the create function\n  // for testability.\n  //\n  createFormatWrap.Format = Format;\n  return createFormatWrap;\n};\n","/*\nThe MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar styles = {};\nmodule['exports'] = styles;\n\nvar codes = {\n  reset: [0, 0],\n\n  bold: [1, 22],\n  dim: [2, 22],\n  italic: [3, 23],\n  underline: [4, 24],\n  inverse: [7, 27],\n  hidden: [8, 28],\n  strikethrough: [9, 29],\n\n  black: [30, 39],\n  red: [31, 39],\n  green: [32, 39],\n  yellow: [33, 39],\n  blue: [34, 39],\n  magenta: [35, 39],\n  cyan: [36, 39],\n  white: [37, 39],\n  gray: [90, 39],\n  grey: [90, 39],\n\n  brightRed: [91, 39],\n  brightGreen: [92, 39],\n  brightYellow: [93, 39],\n  brightBlue: [94, 39],\n  brightMagenta: [95, 39],\n  brightCyan: [96, 39],\n  brightWhite: [97, 39],\n\n  bgBlack: [40, 49],\n  bgRed: [41, 49],\n  bgGreen: [42, 49],\n  bgYellow: [43, 49],\n  bgBlue: [44, 49],\n  bgMagenta: [45, 49],\n  bgCyan: [46, 49],\n  bgWhite: [47, 49],\n  bgGray: [100, 49],\n  bgGrey: [100, 49],\n\n  bgBrightRed: [101, 49],\n  bgBrightGreen: [102, 49],\n  bgBrightYellow: [103, 49],\n  bgBrightBlue: [104, 49],\n  bgBrightMagenta: [105, 49],\n  bgBrightCyan: [106, 49],\n  bgBrightWhite: [107, 49],\n\n  // legacy styles for colors pre v1.0.0\n  blackBG: [40, 49],\n  redBG: [41, 49],\n  greenBG: [42, 49],\n  yellowBG: [43, 49],\n  blueBG: [44, 49],\n  magentaBG: [45, 49],\n  cyanBG: [46, 49],\n  whiteBG: [47, 49],\n\n};\n\nObject.keys(codes).forEach(function(key) {\n  var val = codes[key];\n  var style = styles[key] = [];\n  style.open = '\\u001b[' + val[0] + 'm';\n  style.close = '\\u001b[' + val[1] + 'm';\n});\n","/*\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n'use strict';\n\nmodule.exports = function(flag, argv) {\n  argv = argv || process.argv || [];\n\n  var terminatorPos = argv.indexOf('--');\n  var prefix = /^-{1,2}/.test(flag) ? '' : '--';\n  var pos = argv.indexOf(prefix + flag);\n\n  return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);\n};\n","/*\nThe MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\n'use strict';\n\nvar os = require('os');\nvar hasFlag = require('./has-flag.js');\n\nvar env = process.env;\n\nvar forceColor = void 0;\nif (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {\n  forceColor = false;\n} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true')\n           || hasFlag('color=always')) {\n  forceColor = true;\n}\nif ('FORCE_COLOR' in env) {\n  forceColor = env.FORCE_COLOR.length === 0\n    || parseInt(env.FORCE_COLOR, 10) !== 0;\n}\n\nfunction translateLevel(level) {\n  if (level === 0) {\n    return false;\n  }\n\n  return {\n    level: level,\n    hasBasic: true,\n    has256: level >= 2,\n    has16m: level >= 3,\n  };\n}\n\nfunction supportsColor(stream) {\n  if (forceColor === false) {\n    return 0;\n  }\n\n  if (hasFlag('color=16m') || hasFlag('color=full')\n      || hasFlag('color=truecolor')) {\n    return 3;\n  }\n\n  if (hasFlag('color=256')) {\n    return 2;\n  }\n\n  if (stream && !stream.isTTY && forceColor !== true) {\n    return 0;\n  }\n\n  var min = forceColor ? 1 : 0;\n\n  if (process.platform === 'win32') {\n    // Node.js 7.5.0 is the first version of Node.js to include a patch to\n    // libuv that enables 256 color output on Windows. Anything earlier and it\n    // won't work. However, here we target Node.js 8 at minimum as it is an LTS\n    // release, and Node.js 7 is not. Windows 10 build 10586 is the first\n    // Windows release that supports 256 colors. Windows 10 build 14931 is the\n    // first release that supports 16m/TrueColor.\n    var osRelease = os.release().split('.');\n    if (Number(process.versions.node.split('.')[0]) >= 8\n        && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {\n      return Number(osRelease[2]) >= 14931 ? 3 : 2;\n    }\n\n    return 1;\n  }\n\n  if ('CI' in env) {\n    if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function(sign) {\n      return sign in env;\n    }) || env.CI_NAME === 'codeship') {\n      return 1;\n    }\n\n    return min;\n  }\n\n  if ('TEAMCITY_VERSION' in env) {\n    return (/^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0\n    );\n  }\n\n  if ('TERM_PROGRAM' in env) {\n    var version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n    switch (env.TERM_PROGRAM) {\n      case 'iTerm.app':\n        return version >= 3 ? 3 : 2;\n      case 'Hyper':\n        return 3;\n      case 'Apple_Terminal':\n        return 2;\n      // No default\n    }\n  }\n\n  if (/-256(color)?$/i.test(env.TERM)) {\n    return 2;\n  }\n\n  if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n    return 1;\n  }\n\n  if ('COLORTERM' in env) {\n    return 1;\n  }\n\n  if (env.TERM === 'dumb') {\n    return min;\n  }\n\n  return min;\n}\n\nfunction getSupportLevel(stream) {\n  var level = supportsColor(stream);\n  return translateLevel(level);\n}\n\nmodule.exports = {\n  supportsColor: getSupportLevel,\n  stdout: getSupportLevel(process.stdout),\n  stderr: getSupportLevel(process.stderr),\n};\n","module['exports'] = function runTheTrap(text, options) {\n  var result = '';\n  text = text || 'Run the trap, drop the bass';\n  text = text.split('');\n  var trap = {\n    a: ['\\u0040', '\\u0104', '\\u023a', '\\u0245', '\\u0394', '\\u039b', '\\u0414'],\n    b: ['\\u00df', '\\u0181', '\\u0243', '\\u026e', '\\u03b2', '\\u0e3f'],\n    c: ['\\u00a9', '\\u023b', '\\u03fe'],\n    d: ['\\u00d0', '\\u018a', '\\u0500', '\\u0501', '\\u0502', '\\u0503'],\n    e: ['\\u00cb', '\\u0115', '\\u018e', '\\u0258', '\\u03a3', '\\u03be', '\\u04bc',\n      '\\u0a6c'],\n    f: ['\\u04fa'],\n    g: ['\\u0262'],\n    h: ['\\u0126', '\\u0195', '\\u04a2', '\\u04ba', '\\u04c7', '\\u050a'],\n    i: ['\\u0f0f'],\n    j: ['\\u0134'],\n    k: ['\\u0138', '\\u04a0', '\\u04c3', '\\u051e'],\n    l: ['\\u0139'],\n    m: ['\\u028d', '\\u04cd', '\\u04ce', '\\u0520', '\\u0521', '\\u0d69'],\n    n: ['\\u00d1', '\\u014b', '\\u019d', '\\u0376', '\\u03a0', '\\u048a'],\n    o: ['\\u00d8', '\\u00f5', '\\u00f8', '\\u01fe', '\\u0298', '\\u047a', '\\u05dd',\n      '\\u06dd', '\\u0e4f'],\n    p: ['\\u01f7', '\\u048e'],\n    q: ['\\u09cd'],\n    r: ['\\u00ae', '\\u01a6', '\\u0210', '\\u024c', '\\u0280', '\\u042f'],\n    s: ['\\u00a7', '\\u03de', '\\u03df', '\\u03e8'],\n    t: ['\\u0141', '\\u0166', '\\u0373'],\n    u: ['\\u01b1', '\\u054d'],\n    v: ['\\u05d8'],\n    w: ['\\u0428', '\\u0460', '\\u047c', '\\u0d70'],\n    x: ['\\u04b2', '\\u04fe', '\\u04fc', '\\u04fd'],\n    y: ['\\u00a5', '\\u04b0', '\\u04cb'],\n    z: ['\\u01b5', '\\u0240'],\n  };\n  text.forEach(function(c) {\n    c = c.toLowerCase();\n    var chars = trap[c] || [' '];\n    var rand = Math.floor(Math.random() * chars.length);\n    if (typeof trap[c] !== 'undefined') {\n      result += trap[c][rand];\n    } else {\n      result += c;\n    }\n  });\n  return result;\n};\n","// please no\nmodule['exports'] = function zalgo(text, options) {\n  text = text || '   he is here   ';\n  var soul = {\n    'up': [\n      '̍', '̎', '̄', '̅',\n      '̿', '̑', '̆', '̐',\n      '͒', '͗', '͑', '̇',\n      '̈', '̊', '͂', '̓',\n      '̈', '͊', '͋', '͌',\n      '̃', '̂', '̌', '͐',\n      '̀', '́', '̋', '̏',\n      '̒', '̓', '̔', '̽',\n      '̉', 'ͣ', 'ͤ', 'ͥ',\n      'ͦ', 'ͧ', 'ͨ', 'ͩ',\n      'ͪ', 'ͫ', 'ͬ', 'ͭ',\n      'ͮ', 'ͯ', '̾', '͛',\n      '͆', '̚',\n    ],\n    'down': [\n      '̖', '̗', '̘', '̙',\n      '̜', '̝', '̞', '̟',\n      '̠', '̤', '̥', '̦',\n      '̩', '̪', '̫', '̬',\n      '̭', '̮', '̯', '̰',\n      '̱', '̲', '̳', '̹',\n      '̺', '̻', '̼', 'ͅ',\n      '͇', '͈', '͉', '͍',\n      '͎', '͓', '͔', '͕',\n      '͖', '͙', '͚', '̣',\n    ],\n    'mid': [\n      '̕', '̛', '̀', '́',\n      '͘', '̡', '̢', '̧',\n      '̨', '̴', '̵', '̶',\n      '͜', '͝', '͞',\n      '͟', '͠', '͢', '̸',\n      '̷', '͡', ' ҉',\n    ],\n  };\n  var all = [].concat(soul.up, soul.down, soul.mid);\n\n  function randomNumber(range) {\n    var r = Math.floor(Math.random() * range);\n    return r;\n  }\n\n  function isChar(character) {\n    var bool = false;\n    all.filter(function(i) {\n      bool = (i === character);\n    });\n    return bool;\n  }\n\n\n  function heComes(text, options) {\n    var result = '';\n    var counts;\n    var l;\n    options = options || {};\n    options['up'] =\n      typeof options['up'] !== 'undefined' ? options['up'] : true;\n    options['mid'] =\n      typeof options['mid'] !== 'undefined' ? options['mid'] : true;\n    options['down'] =\n      typeof options['down'] !== 'undefined' ? options['down'] : true;\n    options['size'] =\n      typeof options['size'] !== 'undefined' ? options['size'] : 'maxi';\n    text = text.split('');\n    for (l in text) {\n      if (isChar(l)) {\n        continue;\n      }\n      result = result + text[l];\n      counts = {'up': 0, 'down': 0, 'mid': 0};\n      switch (options.size) {\n        case 'mini':\n          counts.up = randomNumber(8);\n          counts.mid = randomNumber(2);\n          counts.down = randomNumber(8);\n          break;\n        case 'maxi':\n          counts.up = randomNumber(16) + 3;\n          counts.mid = randomNumber(4) + 1;\n          counts.down = randomNumber(64) + 3;\n          break;\n        default:\n          counts.up = randomNumber(8) + 1;\n          counts.mid = randomNumber(6) / 2;\n          counts.down = randomNumber(8) + 1;\n          break;\n      }\n\n      var arr = ['up', 'mid', 'down'];\n      for (var d in arr) {\n        var index = arr[d];\n        for (var i = 0; i <= counts[index]; i++) {\n          if (options[index]) {\n            result = result + soul[index][randomNumber(soul[index].length)];\n          }\n        }\n      }\n    }\n    return result;\n  }\n  // don't summon him\n  return heComes(text, options);\n};\n\n","module['exports'] = function(colors) {\n  return function(letter, i, exploded) {\n    if (letter === ' ') return letter;\n    switch (i%3) {\n      case 0: return colors.red(letter);\n      case 1: return colors.white(letter);\n      case 2: return colors.blue(letter);\n    }\n  };\n};\n","module['exports'] = function(colors) {\n  return function(letter, i, exploded) {\n    return i % 2 === 0 ? letter : colors.inverse(letter);\n  };\n};\n","module['exports'] = function(colors) {\n  // RoY G BiV\n  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta'];\n  return function(letter, i, exploded) {\n    if (letter === ' ') {\n      return letter;\n    } else {\n      return colors[rainbowColors[i++ % rainbowColors.length]](letter);\n    }\n  };\n};\n\n","module['exports'] = function(colors) {\n  var available = ['underline', 'inverse', 'grey', 'yellow', 'red', 'green',\n    'blue', 'white', 'cyan', 'magenta', 'brightYellow', 'brightRed',\n    'brightGreen', 'brightBlue', 'brightWhite', 'brightCyan', 'brightMagenta'];\n  return function(letter, i, exploded) {\n    return letter === ' ' ? letter :\n      colors[\n          available[Math.round(Math.random() * (available.length - 2))]\n      ](letter);\n  };\n};\n","/*\n\nThe MIT License (MIT)\n\nOriginal Library\n  - Copyright (c) Marak Squires\n\nAdditional functionality\n - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n*/\n\nvar colors = {};\nmodule['exports'] = colors;\n\ncolors.themes = {};\n\nvar util = require('util');\nvar ansiStyles = colors.styles = require('./styles');\nvar defineProps = Object.defineProperties;\nvar newLineRegex = new RegExp(/[\\r\\n]+/g);\n\ncolors.supportsColor = require('./system/supports-colors').supportsColor;\n\nif (typeof colors.enabled === 'undefined') {\n  colors.enabled = colors.supportsColor() !== false;\n}\n\ncolors.enable = function() {\n  colors.enabled = true;\n};\n\ncolors.disable = function() {\n  colors.enabled = false;\n};\n\ncolors.stripColors = colors.strip = function(str) {\n  return ('' + str).replace(/\\x1B\\[\\d+m/g, '');\n};\n\n// eslint-disable-next-line no-unused-vars\nvar stylize = colors.stylize = function stylize(str, style) {\n  if (!colors.enabled) {\n    return str+'';\n  }\n\n  var styleMap = ansiStyles[style];\n\n  // Stylize should work for non-ANSI styles, too\n  if (!styleMap && style in colors) {\n    // Style maps like trap operate as functions on strings;\n    // they don't have properties like open or close.\n    return colors[style](str);\n  }\n\n  return styleMap.open + str + styleMap.close;\n};\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\nvar escapeStringRegexp = function(str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n  return str.replace(matchOperatorsRe, '\\\\$&');\n};\n\nfunction build(_styles) {\n  var builder = function builder() {\n    return applyStyle.apply(builder, arguments);\n  };\n  builder._styles = _styles;\n  // __proto__ is used because we must return a function, but there is\n  // no way to create a function with a different prototype.\n  builder.__proto__ = proto;\n  return builder;\n}\n\nvar styles = (function() {\n  var ret = {};\n  ansiStyles.grey = ansiStyles.gray;\n  Object.keys(ansiStyles).forEach(function(key) {\n    ansiStyles[key].closeRe =\n      new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');\n    ret[key] = {\n      get: function() {\n        return build(this._styles.concat(key));\n      },\n    };\n  });\n  return ret;\n})();\n\nvar proto = defineProps(function colors() {}, styles);\n\nfunction applyStyle() {\n  var args = Array.prototype.slice.call(arguments);\n\n  var str = args.map(function(arg) {\n    // Use weak equality check so we can colorize null/undefined in safe mode\n    if (arg != null && arg.constructor === String) {\n      return arg;\n    } else {\n      return util.inspect(arg);\n    }\n  }).join(' ');\n\n  if (!colors.enabled || !str) {\n    return str;\n  }\n\n  var newLinesPresent = str.indexOf('\\n') != -1;\n\n  var nestedStyles = this._styles;\n\n  var i = nestedStyles.length;\n  while (i--) {\n    var code = ansiStyles[nestedStyles[i]];\n    str = code.open + str.replace(code.closeRe, code.open) + code.close;\n    if (newLinesPresent) {\n      str = str.replace(newLineRegex, function(match) {\n        return code.close + match + code.open;\n      });\n    }\n  }\n\n  return str;\n}\n\ncolors.setTheme = function(theme) {\n  if (typeof theme === 'string') {\n    console.log('colors.setTheme now only accepts an object, not a string.  ' +\n      'If you are trying to set a theme from a file, it is now your (the ' +\n      'caller\\'s) responsibility to require the file.  The old syntax ' +\n      'looked like colors.setTheme(__dirname + ' +\n      '\\'/../themes/generic-logging.js\\'); The new syntax looks like '+\n      'colors.setTheme(require(__dirname + ' +\n      '\\'/../themes/generic-logging.js\\'));');\n    return;\n  }\n  for (var style in theme) {\n    (function(style) {\n      colors[style] = function(str) {\n        if (typeof theme[style] === 'object') {\n          var out = str;\n          for (var i in theme[style]) {\n            out = colors[theme[style][i]](out);\n          }\n          return out;\n        }\n        return colors[theme[style]](str);\n      };\n    })(style);\n  }\n};\n\nfunction init() {\n  var ret = {};\n  Object.keys(styles).forEach(function(name) {\n    ret[name] = {\n      get: function() {\n        return build([name]);\n      },\n    };\n  });\n  return ret;\n}\n\nvar sequencer = function sequencer(map, str) {\n  var exploded = str.split('');\n  exploded = exploded.map(map);\n  return exploded.join('');\n};\n\n// custom formatter methods\ncolors.trap = require('./custom/trap');\ncolors.zalgo = require('./custom/zalgo');\n\n// maps\ncolors.maps = {};\ncolors.maps.america = require('./maps/america')(colors);\ncolors.maps.zebra = require('./maps/zebra')(colors);\ncolors.maps.rainbow = require('./maps/rainbow')(colors);\ncolors.maps.random = require('./maps/random')(colors);\n\nfor (var map in colors.maps) {\n  (function(map) {\n    colors[map] = function(str) {\n      return sequencer(colors.maps[map], str);\n    };\n  })(map);\n}\n\ndefineProps(colors, init());\n","//\n// Remark: Requiring this file will use the \"safe\" colors API,\n// which will not touch String.prototype.\n//\n//   var colors = require('colors/safe');\n//   colors.red(\"foo\")\n//\n//\nvar colors = require('./lib/colors');\nmodule['exports'] = colors;\n","/**\n * cli.js: Config that conform to commonly used CLI logging levels.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Default levels for the CLI configuration.\n * @type {Object}\n */\nexports.levels = {\n  error: 0,\n  warn: 1,\n  help: 2,\n  data: 3,\n  info: 4,\n  debug: 5,\n  prompt: 6,\n  verbose: 7,\n  input: 8,\n  silly: 9\n};\n\n/**\n * Default colors for the CLI configuration.\n * @type {Object}\n */\nexports.colors = {\n  error: 'red',\n  warn: 'yellow',\n  help: 'cyan',\n  data: 'grey',\n  info: 'green',\n  debug: 'blue',\n  prompt: 'grey',\n  verbose: 'cyan',\n  input: 'grey',\n  silly: 'magenta'\n};\n","/**\n * npm.js: Config that conform to npm logging levels.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Default levels for the npm configuration.\n * @type {Object}\n */\nexports.levels = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  http: 3,\n  verbose: 4,\n  debug: 5,\n  silly: 6\n};\n\n/**\n * Default levels for the npm configuration.\n * @type {Object}\n */\nexports.colors = {\n  error: 'red',\n  warn: 'yellow',\n  info: 'green',\n  http: 'green',\n  verbose: 'cyan',\n  debug: 'blue',\n  silly: 'magenta'\n};\n","/**\n * syslog.js: Config that conform to syslog logging levels.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Default levels for the syslog configuration.\n * @type {Object}\n */\nexports.levels = {\n  emerg: 0,\n  alert: 1,\n  crit: 2,\n  error: 3,\n  warning: 4,\n  notice: 5,\n  info: 6,\n  debug: 7\n};\n\n/**\n * Default levels for the syslog configuration.\n * @type {Object}\n */\nexports.colors = {\n  emerg: 'red',\n  alert: 'yellow',\n  crit: 'red',\n  error: 'red',\n  warning: 'red',\n  notice: 'yellow',\n  info: 'green',\n  debug: 'blue'\n};\n","/**\n * index.js: Default settings for all levels that winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * Export config set for the CLI.\n * @type {Object}\n */\nObject.defineProperty(exports, 'cli', {\n  value: require('./cli')\n});\n\n/**\n * Export config set for npm.\n * @type {Object}\n */\nObject.defineProperty(exports, 'npm', {\n  value: require('./npm')\n});\n\n/**\n * Export config set for the syslog.\n * @type {Object}\n */\nObject.defineProperty(exports, 'syslog', {\n  value: require('./syslog')\n});\n","'use strict';\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden level identifier\n * to allow the readable level property to be mutable for\n * operations like colorization\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'LEVEL', {\n  value: Symbol.for('level')\n});\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the final message property to not have\n * side effects on another.\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'MESSAGE', {\n  value: Symbol.for('message')\n});\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the extracted splat property be hidden\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'SPLAT', {\n  value: Symbol.for('splat')\n});\n\n/**\n * A shareable object constant  that can be used\n * as a standard configuration for winston@3.\n *\n * @type {Object}\n */\nObject.defineProperty(exports, 'configs', {\n  value: require('./config')\n});\n","'use strict';\n\nconst colors = require('@colors/colors/safe');\nconst { LEVEL, MESSAGE } = require('triple-beam');\n\n//\n// Fix colors not appearing in non-tty environments\n//\ncolors.enabled = true;\n\n/**\n * @property {RegExp} hasSpace\n * Simple regex to check for presence of spaces.\n */\nconst hasSpace = /\\s+/;\n\n/*\n * Colorizer format. Wraps the `level` and/or `message` properties\n * of the `info` objects with ANSI color codes based on a few options.\n */\nclass Colorizer {\n  constructor(opts = {}) {\n    if (opts.colors) {\n      this.addColors(opts.colors);\n    }\n\n    this.options = opts;\n  }\n\n  /*\n   * Adds the colors Object to the set of allColors\n   * known by the Colorizer\n   *\n   * @param {Object} colors Set of color mappings to add.\n   */\n  static addColors(clrs) {\n    const nextColors = Object.keys(clrs).reduce((acc, level) => {\n      acc[level] = hasSpace.test(clrs[level])\n        ? clrs[level].split(hasSpace)\n        : clrs[level];\n\n      return acc;\n    }, {});\n\n    Colorizer.allColors = Object.assign({}, Colorizer.allColors || {}, nextColors);\n    return Colorizer.allColors;\n  }\n\n  /*\n   * Adds the colors Object to the set of allColors\n   * known by the Colorizer\n   *\n   * @param {Object} colors Set of color mappings to add.\n   */\n  addColors(clrs) {\n    return Colorizer.addColors(clrs);\n  }\n\n  /*\n   * function colorize (lookup, level, message)\n   * Performs multi-step colorization using @colors/colors/safe\n   */\n  colorize(lookup, level, message) {\n    if (typeof message === 'undefined') {\n      message = level;\n    }\n\n    //\n    // If the color for the level is just a string\n    // then attempt to colorize the message with it.\n    //\n    if (!Array.isArray(Colorizer.allColors[lookup])) {\n      return colors[Colorizer.allColors[lookup]](message);\n    }\n\n    //\n    // If it is an Array then iterate over that Array, applying\n    // the colors function for each item.\n    //\n    for (let i = 0, len = Colorizer.allColors[lookup].length; i < len; i++) {\n      message = colors[Colorizer.allColors[lookup][i]](message);\n    }\n\n    return message;\n  }\n\n  /*\n   * function transform (info, opts)\n   * Attempts to colorize the { level, message } of the given\n   * `logform` info object.\n   */\n  transform(info, opts) {\n    if (opts.all && typeof info[MESSAGE] === 'string') {\n      info[MESSAGE] = this.colorize(info[LEVEL], info.level, info[MESSAGE]);\n    }\n\n    if (opts.level || opts.all || !opts.message) {\n      info.level = this.colorize(info[LEVEL], info.level);\n    }\n\n    if (opts.all || opts.message) {\n      info.message = this.colorize(info[LEVEL], info.level, info.message);\n    }\n\n    return info;\n  }\n}\n\n/*\n * function colorize (info)\n * Returns a new instance of the colorize Format that applies\n * level colors to `info` objects. This was previously exposed\n * as { colorize: true } to transports in `winston < 3.0.0`.\n */\nmodule.exports = opts => new Colorizer(opts);\n\n//\n// Attach the Colorizer for registration purposes\n//\nmodule.exports.Colorizer\n  = module.exports.Format\n  = Colorizer;\n","'use strict';\n\nconst { Colorizer } = require('./colorize');\n\n/*\n * Simple method to register colors with a simpler require\n * path within the module.\n */\nmodule.exports = config => {\n  Colorizer.addColors(config.colors || config);\n  return config;\n};\n","'use strict';\n\nconst format = require('./format');\n\n/*\n * function align (info)\n * Returns a new instance of the align Format which adds a `\\t`\n * delimiter before the message to properly align it in the same place.\n * It was previously { align: true } in winston < 3.0.0\n */\nmodule.exports = format(info => {\n  info.message = `\\t${info.message}`;\n  return info;\n});\n","/* eslint no-undefined: 0 */\n'use strict';\n\nconst format = require('./format');\nconst { LEVEL, MESSAGE } = require('triple-beam');\n\n/*\n * function errors (info)\n * If the `message` property of the `info` object is an instance of `Error`,\n * replace the `Error` object its own `message` property.\n *\n * Optionally, the Error's `stack` and/or `cause` properties can also be appended to the `info` object.\n */\nmodule.exports = format((einfo, { stack, cause }) => {\n  if (einfo instanceof Error) {\n    const info = Object.assign({}, einfo, {\n      level: einfo.level,\n      [LEVEL]: einfo[LEVEL] || einfo.level,\n      message: einfo.message,\n      [MESSAGE]: einfo[MESSAGE] || einfo.message\n    });\n\n    if (stack) info.stack = einfo.stack;\n    if (cause) info.cause = einfo.cause;\n    return info;\n  }\n\n  if (!(einfo.message instanceof Error)) return einfo;\n\n  // Assign all enumerable properties and the\n  // message property from the error provided.\n  const err = einfo.message;\n  Object.assign(einfo, err);\n  einfo.message = err.message;\n  einfo[MESSAGE] = err.message;\n\n  // Assign the stack and/or cause if requested.\n  if (stack) einfo.stack = err.stack;\n  if (cause) einfo.cause = err.cause;\n  return einfo;\n});\n","/* eslint no-unused-vars: 0 */\n'use strict';\n\nconst { configs, LEVEL, MESSAGE } = require('triple-beam');\n\nclass Padder {\n  constructor(opts = { levels: configs.npm.levels }) {\n    this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);\n    this.options = opts;\n  }\n\n  /**\n   * Returns the maximum length of keys in the specified `levels` Object.\n   * @param  {Object} levels Set of all levels to calculate longest level against.\n   * @returns {Number} Maximum length of the longest level string.\n   */\n  static getLongestLevel(levels) {\n    const lvls = Object.keys(levels).map(level => level.length);\n    return Math.max(...lvls);\n  }\n\n  /**\n   * Returns the padding for the specified `level` assuming that the\n   * maximum length of all levels it's associated with is `maxLength`.\n   * @param  {String} level Level to calculate padding for.\n   * @param  {String} filler Repeatable text to use for padding.\n   * @param  {Number} maxLength Length of the longest level\n   * @returns {String} Padding string for the `level`\n   */\n  static paddingForLevel(level, filler, maxLength) {\n    const targetLen = maxLength + 1 - level.length;\n    const rep = Math.floor(targetLen / filler.length);\n    const padding = `${filler}${filler.repeat(rep)}`;\n    return padding.slice(0, targetLen);\n  }\n\n  /**\n   * Returns an object with the string paddings for the given `levels`\n   * using the specified `filler`.\n   * @param  {Object} levels Set of all levels to calculate padding for.\n   * @param  {String} filler Repeatable text to use for padding.\n   * @returns {Object} Mapping of level to desired padding.\n   */\n  static paddingForLevels(levels, filler = ' ') {\n    const maxLength = Padder.getLongestLevel(levels);\n    return Object.keys(levels).reduce((acc, level) => {\n      acc[level] = Padder.paddingForLevel(level, filler, maxLength);\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Prepends the padding onto the `message` based on the `LEVEL` of\n   * the `info`. This is based on the behavior of `winston@2` which also\n   * prepended the level onto the message.\n   *\n   * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201\n   *\n   * @param  {Info} info Logform info object\n   * @param  {Object} opts Options passed along to this instance.\n   * @returns {Info} Modified logform info object.\n   */\n  transform(info, opts) {\n    info.message = `${this.paddings[info[LEVEL]]}${info.message}`;\n    if (info[MESSAGE]) {\n      info[MESSAGE] = `${this.paddings[info[LEVEL]]}${info[MESSAGE]}`;\n    }\n\n    return info;\n  }\n}\n\n/*\n * function padLevels (info)\n * Returns a new instance of the padLevels Format which pads\n * levels to be the same length. This was previously exposed as\n * { padLevels: true } to transports in `winston < 3.0.0`.\n */\nmodule.exports = opts => new Padder(opts);\n\nmodule.exports.Padder\n  = module.exports.Format\n  = Padder;\n","'use strict';\n\nconst { Colorizer } = require('./colorize');\nconst { Padder } = require('./pad-levels');\nconst { configs, MESSAGE } = require('triple-beam');\n\n\n/**\n * Cli format class that handles initial state for a a separate\n * Colorizer and Padder instance.\n */\nclass CliFormat {\n  constructor(opts = {}) {\n    if (!opts.levels) {\n      opts.levels = configs.cli.levels;\n    }\n\n    this.colorizer = new Colorizer(opts);\n    this.padder = new Padder(opts);\n    this.options = opts;\n  }\n\n  /*\n   * function transform (info, opts)\n   * Attempts to both:\n   * 1. Pad the { level }\n   * 2. Colorize the { level, message }\n   * of the given `logform` info object depending on the `opts`.\n   */\n  transform(info, opts) {\n    this.colorizer.transform(\n      this.padder.transform(info, opts),\n      opts\n    );\n\n    info[MESSAGE] = `${info.level}:${info.message}`;\n    return info;\n  }\n}\n\n/*\n * function cli (opts)\n * Returns a new instance of the CLI format that turns a log\n * `info` object into the same format previously available\n * in `winston.cli()` in `winston < 3.0.0`.\n */\nmodule.exports = opts => new CliFormat(opts);\n\n//\n// Attach the CliFormat for registration purposes\n//\nmodule.exports.Format = CliFormat;\n","'use strict';\n\nconst format = require('./format');\n\n/*\n * function cascade(formats)\n * Returns a function that invokes the `._format` function in-order\n * for the specified set of `formats`. In this manner we say that Formats\n * are \"pipe-like\", but not a pure pumpify implementation. Since there is no back\n * pressure we can remove all of the \"readable\" plumbing in Node streams.\n */\nfunction cascade(formats) {\n  if (!formats.every(isValidFormat)) {\n    return;\n  }\n\n  return info => {\n    let obj = info;\n    for (let i = 0; i < formats.length; i++) {\n      obj = formats[i].transform(obj, formats[i].options);\n      if (!obj) {\n        return false;\n      }\n    }\n\n    return obj;\n  };\n}\n\n/*\n * function isValidFormat(format)\n * If the format does not define a `transform` function throw an error\n * with more detailed usage.\n */\nfunction isValidFormat(fmt) {\n  if (typeof fmt.transform !== 'function') {\n    throw new Error([\n      'No transform function found on format. Did you create a format instance?',\n      'const myFormat = format(formatFn);',\n      'const instance = myFormat();'\n    ].join('\\n'));\n  }\n\n  return true;\n}\n\n/*\n * function combine (info)\n * Returns a new instance of the combine Format which combines the specified\n * formats into a new format. This is similar to a pipe-chain in transform streams.\n * We choose to combine the prototypes this way because there is no back pressure in\n * an in-memory transform chain.\n */\nmodule.exports = (...formats) => {\n  const combinedFormat = format(cascade(formats));\n  const instance = combinedFormat();\n  instance.Format = combinedFormat.Format;\n  return instance;\n};\n\n//\n// Export the cascade method for use in cli and other\n// combined formats that should not be assumed to be\n// singletons.\n//\nmodule.exports.cascade = cascade;\n","'use strict'\n\nconst { hasOwnProperty } = Object.prototype\n\nconst stringify = configure()\n\n// @ts-expect-error\nstringify.configure = configure\n// @ts-expect-error\nstringify.stringify = stringify\n\n// @ts-expect-error\nstringify.default = stringify\n\n// @ts-expect-error used for named export\nexports.stringify = stringify\n// @ts-expect-error used for named export\nexports.configure = configure\n\nmodule.exports = stringify\n\n// eslint-disable-next-line no-control-regex\nconst strEscapeSequencesRegExp = /[\\u0000-\\u001f\\u0022\\u005c\\ud800-\\udfff]|[\\ud800-\\udbff](?![\\udc00-\\udfff])|(?:[^\\ud800-\\udbff]|^)[\\udc00-\\udfff]/\n\n// Escape C0 control characters, double quotes, the backslash and every code\n// unit with a numeric value in the inclusive range 0xD800 to 0xDFFF.\nfunction strEscape (str) {\n  // Some magic numbers that worked out fine while benchmarking with v8 8.0\n  if (str.length < 5000 && !strEscapeSequencesRegExp.test(str)) {\n    return `\"${str}\"`\n  }\n  return JSON.stringify(str)\n}\n\nfunction insertSort (array) {\n  // Insertion sort is very efficient for small input sizes but it has a bad\n  // worst case complexity. Thus, use native array sort for bigger values.\n  if (array.length > 2e2) {\n    return array.sort()\n  }\n  for (let i = 1; i < array.length; i++) {\n    const currentValue = array[i]\n    let position = i\n    while (position !== 0 && array[position - 1] > currentValue) {\n      array[position] = array[position - 1]\n      position--\n    }\n    array[position] = currentValue\n  }\n  return array\n}\n\nconst typedArrayPrototypeGetSymbolToStringTag =\n  Object.getOwnPropertyDescriptor(\n    Object.getPrototypeOf(\n      Object.getPrototypeOf(\n        new Int8Array()\n      )\n    ),\n    Symbol.toStringTag\n  ).get\n\nfunction isTypedArrayWithEntries (value) {\n  return typedArrayPrototypeGetSymbolToStringTag.call(value) !== undefined && value.length !== 0\n}\n\nfunction stringifyTypedArray (array, separator, maximumBreadth) {\n  if (array.length < maximumBreadth) {\n    maximumBreadth = array.length\n  }\n  const whitespace = separator === ',' ? '' : ' '\n  let res = `\"0\":${whitespace}${array[0]}`\n  for (let i = 1; i < maximumBreadth; i++) {\n    res += `${separator}\"${i}\":${whitespace}${array[i]}`\n  }\n  return res\n}\n\nfunction getCircularValueOption (options) {\n  if (hasOwnProperty.call(options, 'circularValue')) {\n    const circularValue = options.circularValue\n    if (typeof circularValue === 'string') {\n      return `\"${circularValue}\"`\n    }\n    if (circularValue == null) {\n      return circularValue\n    }\n    if (circularValue === Error || circularValue === TypeError) {\n      return {\n        toString () {\n          throw new TypeError('Converting circular structure to JSON')\n        }\n      }\n    }\n    throw new TypeError('The \"circularValue\" argument must be of type string or the value null or undefined')\n  }\n  return '\"[Circular]\"'\n}\n\nfunction getBooleanOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'boolean') {\n      throw new TypeError(`The \"${key}\" argument must be of type boolean`)\n    }\n  }\n  return value === undefined ? true : value\n}\n\nfunction getPositiveIntegerOption (options, key) {\n  let value\n  if (hasOwnProperty.call(options, key)) {\n    value = options[key]\n    if (typeof value !== 'number') {\n      throw new TypeError(`The \"${key}\" argument must be of type number`)\n    }\n    if (!Number.isInteger(value)) {\n      throw new TypeError(`The \"${key}\" argument must be an integer`)\n    }\n    if (value < 1) {\n      throw new RangeError(`The \"${key}\" argument must be >= 1`)\n    }\n  }\n  return value === undefined ? Infinity : value\n}\n\nfunction getItemCount (number) {\n  if (number === 1) {\n    return '1 item'\n  }\n  return `${number} items`\n}\n\nfunction getUniqueReplacerSet (replacerArray) {\n  const replacerSet = new Set()\n  for (const value of replacerArray) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      replacerSet.add(String(value))\n    }\n  }\n  return replacerSet\n}\n\nfunction getStrictOption (options) {\n  if (hasOwnProperty.call(options, 'strict')) {\n    const value = options.strict\n    if (typeof value !== 'boolean') {\n      throw new TypeError('The \"strict\" argument must be of type boolean')\n    }\n    if (value) {\n      return (value) => {\n        let message = `Object can not safely be stringified. Received type ${typeof value}`\n        if (typeof value !== 'function') message += ` (${value.toString()})`\n        throw new Error(message)\n      }\n    }\n  }\n}\n\nfunction configure (options) {\n  options = { ...options }\n  const fail = getStrictOption(options)\n  if (fail) {\n    if (options.bigint === undefined) {\n      options.bigint = false\n    }\n    if (!('circularValue' in options)) {\n      options.circularValue = Error\n    }\n  }\n  const circularValue = getCircularValueOption(options)\n  const bigint = getBooleanOption(options, 'bigint')\n  const deterministic = getBooleanOption(options, 'deterministic')\n  const maximumDepth = getPositiveIntegerOption(options, 'maximumDepth')\n  const maximumBreadth = getPositiveIntegerOption(options, 'maximumBreadth')\n\n  function stringifyFnReplacer (key, parent, stack, replacer, spacer, indentation) {\n    let value = parent[key]\n\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n    value = replacer.call(parent, key, value)\n\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n        let join = ','\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let whitespace = ''\n        let separator = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (deterministic && !isTypedArrayWithEntries(value)) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyFnReplacer(key, value, stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":${whitespace}\"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyArrayReplacer (key, value, stack, replacer, spacer, indentation) {\n    if (typeof value === 'object' && value !== null && typeof value.toJSON === 'function') {\n      value = value.toJSON(key)\n    }\n\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        const originalIndentation = indentation\n        let res = ''\n        let join = ','\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          if (spacer !== '') {\n            indentation += spacer\n            res += `\\n${indentation}`\n            join = `,\\n${indentation}`\n          }\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          if (spacer !== '') {\n            res += `\\n${originalIndentation}`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n        stack.push(value)\n        let whitespace = ''\n        if (spacer !== '') {\n          indentation += spacer\n          join = `,\\n${indentation}`\n          whitespace = ' '\n        }\n        let separator = ''\n        for (const key of replacer) {\n          const tmp = stringifyArrayReplacer(key, value[key], stack, replacer, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${whitespace}${tmp}`\n            separator = join\n          }\n        }\n        if (spacer !== '' && separator.length > 1) {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifyIndent (key, value, stack, spacer, indentation) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again.\n          if (typeof value !== 'object') {\n            return stringifyIndent(key, value, stack, spacer, indentation)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n        const originalIndentation = indentation\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          indentation += spacer\n          let res = `\\n${indentation}`\n          const join = `,\\n${indentation}`\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation)\n            res += tmp !== undefined ? tmp : 'null'\n            res += join\n          }\n          const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `${join}\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          res += `\\n${originalIndentation}`\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        indentation += spacer\n        const join = `,\\n${indentation}`\n        let res = ''\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, join, maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = join\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifyIndent(key, value[key], stack, spacer, indentation)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}: ${tmp}`\n            separator = join\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\": \"${getItemCount(removedKeys)} not stringified\"`\n          separator = join\n        }\n        if (separator !== '') {\n          res = `\\n${indentation}${res}\\n${originalIndentation}`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringifySimple (key, value, stack) {\n    switch (typeof value) {\n      case 'string':\n        return strEscape(value)\n      case 'object': {\n        if (value === null) {\n          return 'null'\n        }\n        if (typeof value.toJSON === 'function') {\n          value = value.toJSON(key)\n          // Prevent calling `toJSON` again\n          if (typeof value !== 'object') {\n            return stringifySimple(key, value, stack)\n          }\n          if (value === null) {\n            return 'null'\n          }\n        }\n        if (stack.indexOf(value) !== -1) {\n          return circularValue\n        }\n\n        let res = ''\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '[]'\n          }\n          if (maximumDepth < stack.length + 1) {\n            return '\"[Array]\"'\n          }\n          stack.push(value)\n          const maximumValuesToStringify = Math.min(value.length, maximumBreadth)\n          let i = 0\n          for (; i < maximumValuesToStringify - 1; i++) {\n            const tmp = stringifySimple(String(i), value[i], stack)\n            res += tmp !== undefined ? tmp : 'null'\n            res += ','\n          }\n          const tmp = stringifySimple(String(i), value[i], stack)\n          res += tmp !== undefined ? tmp : 'null'\n          if (value.length - 1 > maximumBreadth) {\n            const removedKeys = value.length - maximumBreadth - 1\n            res += `,\"... ${getItemCount(removedKeys)} not stringified\"`\n          }\n          stack.pop()\n          return `[${res}]`\n        }\n\n        let keys = Object.keys(value)\n        const keyLength = keys.length\n        if (keyLength === 0) {\n          return '{}'\n        }\n        if (maximumDepth < stack.length + 1) {\n          return '\"[Object]\"'\n        }\n        let separator = ''\n        let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth)\n        if (isTypedArrayWithEntries(value)) {\n          res += stringifyTypedArray(value, ',', maximumBreadth)\n          keys = keys.slice(value.length)\n          maximumPropertiesToStringify -= value.length\n          separator = ','\n        }\n        if (deterministic) {\n          keys = insertSort(keys)\n        }\n        stack.push(value)\n        for (let i = 0; i < maximumPropertiesToStringify; i++) {\n          const key = keys[i]\n          const tmp = stringifySimple(key, value[key], stack)\n          if (tmp !== undefined) {\n            res += `${separator}${strEscape(key)}:${tmp}`\n            separator = ','\n          }\n        }\n        if (keyLength > maximumBreadth) {\n          const removedKeys = keyLength - maximumBreadth\n          res += `${separator}\"...\":\"${getItemCount(removedKeys)} not stringified\"`\n        }\n        stack.pop()\n        return `{${res}}`\n      }\n      case 'number':\n        return isFinite(value) ? String(value) : fail ? fail(value) : 'null'\n      case 'boolean':\n        return value === true ? 'true' : 'false'\n      case 'undefined':\n        return undefined\n      case 'bigint':\n        if (bigint) {\n          return String(value)\n        }\n        // fallthrough\n      default:\n        return fail ? fail(value) : undefined\n    }\n  }\n\n  function stringify (value, replacer, space) {\n    if (arguments.length > 1) {\n      let spacer = ''\n      if (typeof space === 'number') {\n        spacer = ' '.repeat(Math.min(space, 10))\n      } else if (typeof space === 'string') {\n        spacer = space.slice(0, 10)\n      }\n      if (replacer != null) {\n        if (typeof replacer === 'function') {\n          return stringifyFnReplacer('', { '': value }, [], replacer, spacer, '')\n        }\n        if (Array.isArray(replacer)) {\n          return stringifyArrayReplacer('', value, [], getUniqueReplacerSet(replacer), spacer, '')\n        }\n      }\n      if (spacer.length !== 0) {\n        return stringifyIndent('', value, [], spacer, '')\n      }\n    }\n    return stringifySimple('', value, [])\n  }\n\n  return stringify\n}\n","'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst stringify = require('safe-stable-stringify');\n\n/*\n * function replacer (key, value)\n * Handles proper stringification of Buffer and bigint output.\n */\nfunction replacer(key, value) {\n  // safe-stable-stringify does support BigInt, however, it doesn't wrap the value in quotes.\n  // Leading to a loss in fidelity if the resulting string is parsed.\n  // It would also be a breaking change for logform.\n  if (typeof value === 'bigint')\n    return value.toString();\n  return value;\n}\n\n/*\n * function json (info)\n * Returns a new instance of the JSON format that turns a log `info`\n * object into pure JSON. This was previously exposed as { json: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts) => {\n  const jsonStringify = stringify.configure(opts);\n  info[MESSAGE] = jsonStringify(info, opts.replacer || replacer, opts.space);\n  return info;\n});\n","'use strict';\n\nconst format = require('./format');\n\n/*\n * function label (info)\n * Returns a new instance of the label Format which adds the specified\n * `opts.label` before the message. This was previously exposed as\n * { label: 'my label' } to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts) => {\n  if (opts.message) {\n    info.message = `[${opts.label}] ${info.message}`;\n    return info;\n  }\n\n  info.label = opts.label;\n  return info;\n});\n","'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst jsonStringify = require('safe-stable-stringify');\n\n/*\n * function logstash (info)\n * Returns a new instance of the LogStash Format that turns a\n * log `info` object into pure JSON with the appropriate logstash\n * options. This was previously exposed as { logstash: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format(info => {\n  const logstash = {};\n  if (info.message) {\n    logstash['@message'] = info.message;\n    delete info.message;\n  }\n\n  if (info.timestamp) {\n    logstash['@timestamp'] = info.timestamp;\n    delete info.timestamp;\n  }\n\n  logstash['@fields'] = info;\n  info[MESSAGE] = jsonStringify(logstash);\n  return info;\n});\n","'use strict';\n\nconst format = require('./format');\n\nfunction fillExcept(info, fillExceptKeys, metadataKey) {\n  const savedKeys = fillExceptKeys.reduce((acc, key) => {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n  const metadata = Object.keys(info).reduce((acc, key) => {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n\n  Object.assign(info, savedKeys, {\n    [metadataKey]: metadata\n  });\n  return info;\n}\n\nfunction fillWith(info, fillWithKeys, metadataKey) {\n  info[metadataKey] = fillWithKeys.reduce((acc, key) => {\n    acc[key] = info[key];\n    delete info[key];\n    return acc;\n  }, {});\n  return info;\n}\n\n/**\n * Adds in a \"metadata\" object to collect extraneous data, similar to the metadata\n * object in winston 2.x.\n */\nmodule.exports = format((info, opts = {}) => {\n  let metadataKey = 'metadata';\n  if (opts.key) {\n    metadataKey = opts.key;\n  }\n\n  let fillExceptKeys = [];\n  if (!opts.fillExcept && !opts.fillWith) {\n    fillExceptKeys.push('level');\n    fillExceptKeys.push('message');\n  }\n\n  if (opts.fillExcept) {\n    fillExceptKeys = opts.fillExcept;\n  }\n\n  if (fillExceptKeys.length > 0) {\n    return fillExcept(info, fillExceptKeys, metadataKey);\n  }\n\n  if (opts.fillWith) {\n    return fillWith(info, opts.fillWith, metadataKey);\n  }\n\n  return info;\n});\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","'use strict';\n\nconst format = require('./format');\nconst ms = require('ms');\n\n/*\n * function ms (info)\n * Returns an `info` with a `ms` property. The `ms` property holds the Value\n * of the time difference between two calls in milliseconds.\n */\nmodule.exports = format(info => {\n  const curr = +new Date();\n  this.diff = curr - (this.prevTime || curr);\n  this.prevTime = curr;\n  info.ms = `+${ms(this.diff)}`;\n\n  return info;\n});\n","'use strict';\n\nconst inspect = require('util').inspect;\nconst format = require('./format');\nconst { LEVEL, MESSAGE, SPLAT } = require('triple-beam');\n\n/*\n * function prettyPrint (info)\n * Returns a new instance of the prettyPrint Format that \"prettyPrint\"\n * serializes `info` objects. This was previously exposed as\n * { prettyPrint: true } to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts = {}) => {\n  //\n  // info[{LEVEL, MESSAGE, SPLAT}] are enumerable here. Since they\n  // are internal, we remove them before util.inspect so they\n  // are not printed.\n  //\n  const stripped = Object.assign({}, info);\n\n  // Remark (indexzero): update this technique in April 2019\n  // when node@6 is EOL\n  delete stripped[LEVEL];\n  delete stripped[MESSAGE];\n  delete stripped[SPLAT];\n\n  info[MESSAGE] = inspect(stripped, false, opts.depth || null, opts.colorize);\n  return info;\n});\n","'use strict';\n\nconst { MESSAGE } = require('triple-beam');\n\nclass Printf {\n  constructor(templateFn) {\n    this.template = templateFn;\n  }\n\n  transform(info) {\n    info[MESSAGE] = this.template(info);\n    return info;\n  }\n}\n\n/*\n * function printf (templateFn)\n * Returns a new instance of the printf Format that creates an\n * intermediate prototype to store the template string-based formatter\n * function.\n */\nmodule.exports = opts => new Printf(opts);\n\nmodule.exports.Printf\n  = module.exports.Format\n  = Printf;\n","/* eslint no-undefined: 0 */\n'use strict';\n\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\nconst jsonStringify = require('safe-stable-stringify');\n\n/*\n * function simple (info)\n * Returns a new instance of the simple format TransformStream\n * which writes a simple representation of logs.\n *\n *    const { level, message, splat, ...rest } = info;\n *\n *    ${level}: ${message}                            if rest is empty\n *    ${level}: ${message} ${JSON.stringify(rest)}    otherwise\n */\nmodule.exports = format(info => {\n  const stringifiedRest = jsonStringify(Object.assign({}, info, {\n    level: undefined,\n    message: undefined,\n    splat: undefined\n  }));\n\n  const padding = info.padding && info.padding[info.level] || '';\n  if (stringifiedRest !== '{}') {\n    info[MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;\n  } else {\n    info[MESSAGE] = `${info.level}:${padding} ${info.message}`;\n  }\n\n  return info;\n});\n","'use strict';\n\nconst util = require('util');\nconst { SPLAT } = require('triple-beam');\n\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\nconst formatRegExp = /%[scdjifoO%]/g;\n\n/**\n * Captures the number of escaped % signs in a format string (i.e. %s strings).\n * @type {RegExp}\n */\nconst escapedPercent = /%%/g;\n\nclass Splatter {\n  constructor(opts) {\n    this.options = opts;\n  }\n\n  /**\n     * Check to see if tokens <= splat.length, assign { splat, meta } into the\n     * `info` accordingly, and write to this instance.\n     *\n     * @param  {Info} info Logform info message.\n     * @param  {String[]} tokens Set of string interpolation tokens.\n     * @returns {Info} Modified info message\n     * @private\n     */\n  _splat(info, tokens) {\n    const msg = info.message;\n    const splat = info[SPLAT] || info.splat || [];\n    const percents = msg.match(escapedPercent);\n    const escapes = percents && percents.length || 0;\n\n    // The expected splat is the number of tokens minus the number of escapes\n    // e.g.\n    // - { expectedSplat: 3 } '%d %s %j'\n    // - { expectedSplat: 5 } '[%s] %d%% %d%% %s %j'\n    //\n    // Any \"meta\" will be arugments in addition to the expected splat size\n    // regardless of type. e.g.\n    //\n    // logger.log('info', '%d%% %s %j', 100, 'wow', { such: 'js' }, { thisIsMeta: true });\n    // would result in splat of four (4), but only three (3) are expected. Therefore:\n    //\n    // extraSplat = 3 - 4 = -1\n    // metas = [100, 'wow', { such: 'js' }, { thisIsMeta: true }].splice(-1, -1 * -1);\n    // splat = [100, 'wow', { such: 'js' }]\n    const expectedSplat = tokens.length - escapes;\n    const extraSplat = expectedSplat - splat.length;\n    const metas = extraSplat < 0\n      ? splat.splice(extraSplat, -1 * extraSplat)\n      : [];\n\n    // Now that { splat } has been separated from any potential { meta }. we\n    // can assign this to the `info` object and write it to our format stream.\n    // If the additional metas are **NOT** objects or **LACK** enumerable properties\n    // you are going to have a bad time.\n    const metalen = metas.length;\n    if (metalen) {\n      for (let i = 0; i < metalen; i++) {\n        Object.assign(info, metas[i]);\n      }\n    }\n\n    info.message = util.format(msg, ...splat);\n    return info;\n  }\n\n  /**\n    * Transforms the `info` message by using `util.format` to complete\n    * any `info.message` provided it has string interpolation tokens.\n    * If no tokens exist then `info` is immutable.\n    *\n    * @param  {Info} info Logform info message.\n    * @param  {Object} opts Options for this instance.\n    * @returns {Info} Modified info message\n    */\n  transform(info) {\n    const msg = info.message;\n    const splat = info[SPLAT] || info.splat;\n\n    // No need to process anything if splat is undefined\n    if (!splat || !splat.length) {\n      return info;\n    }\n\n    // Extract tokens, if none available default to empty array to\n    // ensure consistancy in expected results\n    const tokens = msg && msg.match && msg.match(formatRegExp);\n\n    // This condition will take care of inputs with info[SPLAT]\n    // but no tokens present\n    if (!tokens && (splat || splat.length)) {\n      const metas = splat.length > 1\n        ? splat.splice(0)\n        : splat;\n\n      // Now that { splat } has been separated from any potential { meta }. we\n      // can assign this to the `info` object and write it to our format stream.\n      // If the additional metas are **NOT** objects or **LACK** enumerable properties\n      // you are going to have a bad time.\n      const metalen = metas.length;\n      if (metalen) {\n        for (let i = 0; i < metalen; i++) {\n          Object.assign(info, metas[i]);\n        }\n      }\n\n      return info;\n    }\n\n    if (tokens) {\n      return this._splat(info, tokens);\n    }\n\n    return info;\n  }\n}\n\n/*\n * function splat (info)\n * Returns a new instance of the splat format TransformStream\n * which performs string interpolation from `info` objects. This was\n * previously exposed implicitly in `winston < 3.0.0`.\n */\nmodule.exports = opts => new Splatter(opts);\n","const token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nconst twoDigitsOptional = \"\\\\d\\\\d?\";\nconst twoDigits = \"\\\\d\\\\d\";\nconst threeDigits = \"\\\\d{3}\";\nconst fourDigits = \"\\\\d{4}\";\nconst word = \"[^\\\\s]+\";\nconst literal = /\\[([^]*?)\\]/gm;\n\ntype DateInfo = {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  second: number;\n  millisecond: number;\n  isPm: number | null;\n  timezoneOffset: number | null;\n};\n\nexport type I18nSettings = {\n  amPm: [string, string];\n  dayNames: Days;\n  dayNamesShort: Days;\n  monthNames: Months;\n  monthNamesShort: Months;\n  DoFn(dayOfMonth: number): string;\n};\n\nexport type I18nSettingsOptional = Partial<I18nSettings>;\n\nexport type Days = [string, string, string, string, string, string, string];\nexport type Months = [\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string\n];\n\nfunction shorten<T extends string[]>(arr: T, sLen: number): string[] {\n  const newArr: string[] = [];\n  for (let i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n  return newArr;\n}\n\nconst monthUpdate = (\n  arrName: \"monthNames\" | \"monthNamesShort\" | \"dayNames\" | \"dayNamesShort\"\n) => (v: string, i18n: I18nSettings): number | null => {\n  const lowerCaseArr = i18n[arrName].map(v => v.toLowerCase());\n  const index = lowerCaseArr.indexOf(v.toLowerCase());\n  if (index > -1) {\n    return index;\n  }\n  return null;\n};\n\nexport function assign<A>(a: A): A;\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign(origObj: any, ...args: any[]): any {\n  for (const obj of args) {\n    for (const key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n  return origObj;\n}\n\nconst dayNames: Days = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nconst monthNames: Months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\n\nconst monthNamesShort: Months = shorten(monthNames, 3) as Months;\nconst dayNamesShort: Days = shorten(dayNames, 3) as Days;\n\nconst defaultI18n: I18nSettings = {\n  dayNamesShort,\n  dayNames,\n  monthNamesShort,\n  monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn(dayOfMonth: number) {\n    return (\n      dayOfMonth +\n      [\"th\", \"st\", \"nd\", \"rd\"][\n        dayOfMonth % 10 > 3\n          ? 0\n          : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10\n      ]\n    );\n  }\n};\nlet globalI18n = assign({}, defaultI18n);\nconst setGlobalDateI18n = (i18n: I18nSettingsOptional): I18nSettings =>\n  (globalI18n = assign(globalI18n, i18n));\n\nconst regexEscape = (str: string): string =>\n  str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n\nconst pad = (val: string | number, len = 2): string => {\n  val = String(val);\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n  return val;\n};\n\nconst formatFlags: Record<\n  string,\n  (dateObj: Date, i18n: I18nSettings) => string\n> = {\n  D: (dateObj: Date): string => String(dateObj.getDate()),\n  DD: (dateObj: Date): string => pad(dateObj.getDate()),\n  Do: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.DoFn(dateObj.getDate()),\n  d: (dateObj: Date): string => String(dateObj.getDay()),\n  dd: (dateObj: Date): string => pad(dateObj.getDay()),\n  ddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNamesShort[dateObj.getDay()],\n  dddd: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.dayNames[dateObj.getDay()],\n  M: (dateObj: Date): string => String(dateObj.getMonth() + 1),\n  MM: (dateObj: Date): string => pad(dateObj.getMonth() + 1),\n  MMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNamesShort[dateObj.getMonth()],\n  MMMM: (dateObj: Date, i18n: I18nSettings): string =>\n    i18n.monthNames[dateObj.getMonth()],\n  YY: (dateObj: Date): string =>\n    pad(String(dateObj.getFullYear()), 4).substr(2),\n  YYYY: (dateObj: Date): string => pad(dateObj.getFullYear(), 4),\n  h: (dateObj: Date): string => String(dateObj.getHours() % 12 || 12),\n  hh: (dateObj: Date): string => pad(dateObj.getHours() % 12 || 12),\n  H: (dateObj: Date): string => String(dateObj.getHours()),\n  HH: (dateObj: Date): string => pad(dateObj.getHours()),\n  m: (dateObj: Date): string => String(dateObj.getMinutes()),\n  mm: (dateObj: Date): string => pad(dateObj.getMinutes()),\n  s: (dateObj: Date): string => String(dateObj.getSeconds()),\n  ss: (dateObj: Date): string => pad(dateObj.getSeconds()),\n  S: (dateObj: Date): string =>\n    String(Math.round(dateObj.getMilliseconds() / 100)),\n  SS: (dateObj: Date): string =>\n    pad(Math.round(dateObj.getMilliseconds() / 10), 2),\n  SSS: (dateObj: Date): string => pad(dateObj.getMilliseconds(), 3),\n  a: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1],\n  A: (dateObj: Date, i18n: I18nSettings): string =>\n    dateObj.getHours() < 12\n      ? i18n.amPm[0].toUpperCase()\n      : i18n.amPm[1].toUpperCase(),\n  ZZ(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4)\n    );\n  },\n  Z(dateObj: Date): string {\n    const offset = dateObj.getTimezoneOffset();\n    return (\n      (offset > 0 ? \"-\" : \"+\") +\n      pad(Math.floor(Math.abs(offset) / 60), 2) +\n      \":\" +\n      pad(Math.abs(offset) % 60, 2)\n    );\n  }\n};\n\ntype ParseInfo = [\n  keyof DateInfo,\n  string,\n  ((v: string, i18n: I18nSettings) => number | null)?,\n  string?\n];\nconst monthParse = (v: string): number => +v - 1;\nconst emptyDigits: ParseInfo = [null, twoDigitsOptional];\nconst emptyWord: ParseInfo = [null, word];\nconst amPm: ParseInfo = [\n  \"isPm\",\n  word,\n  (v: string, i18n: I18nSettings): number | null => {\n    const val = v.toLowerCase();\n    if (val === i18n.amPm[0]) {\n      return 0;\n    } else if (val === i18n.amPm[1]) {\n      return 1;\n    }\n    return null;\n  }\n];\nconst timezoneOffset: ParseInfo = [\n  \"timezoneOffset\",\n  \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n  (v: string): number | null => {\n    const parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n\n    if (parts) {\n      const minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n      return parts[0] === \"+\" ? minutes : -minutes;\n    }\n\n    return 0;\n  }\n];\nconst parseFlags: Record<string, ParseInfo> = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, (v: string): number => parseInt(v, 10)],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\n    \"year\",\n    twoDigits,\n    (v: string): number => {\n      const now = new Date();\n      const cent = +(\"\" + now.getFullYear()).substr(0, 2);\n      return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n    }\n  ],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", (v: string): number => +v * 100],\n  SS: [\"millisecond\", twoDigits, (v: string): number => +v * 10],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n};\n\n// Some common format strings\nconst globalMasks: { [key: string]: string } = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\nconst setGlobalDateMasks = (masks: {\n  [key: string]: string;\n}): { [key: string]: string } => assign(globalMasks, masks);\n\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nconst format = (\n  dateObj: Date,\n  mask: string = globalMasks[\"default\"],\n  i18n: I18nSettingsOptional = {}\n): string => {\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n\n  if (\n    Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n    isNaN(dateObj.getTime())\n  ) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n\n  mask = globalMasks[mask] || mask;\n\n  const literals: string[] = [];\n\n  // Make literals inactive by replacing them with @@@\n  mask = mask.replace(literal, function($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n  // Apply formatting rules\n  mask = mask.replace(token, $0 =>\n    formatFlags[$0](dateObj, combinedI18nSettings)\n  );\n  // Inline literal values back into the formatted value\n  return mask.replace(/@@@/g, () => literals.shift());\n};\n\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(\n  dateStr: string,\n  format: string,\n  i18n: I18nSettingsOptional = {}\n): Date | null {\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  }\n\n  // Check to see if the format is actually a mask\n  format = globalMasks[format] || format;\n\n  // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n  if (dateStr.length > 1000) {\n    return null;\n  }\n\n  // Default to the beginning of the year.\n  const today = new Date();\n  const dateInfo: DateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  const parseInfo: ParseInfo[] = [];\n  const literals: string[] = [];\n\n  // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n  let newFormat = format.replace(literal, ($0, $1) => {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  const specifiedFields: { [field: string]: boolean } = {};\n  const requiredFields: { [field: string]: boolean } = {};\n\n  // Change every token that we find into the correct regex\n  newFormat = regexEscape(newFormat).replace(token, $0 => {\n    const info = parseFlags[$0];\n    const [field, regex, , requiredField] = info;\n\n    // Check if the person has specified the same field twice. This will lead to confusing results.\n    if (specifiedFields[field]) {\n      throw new Error(`Invalid format. ${field} specified twice in format`);\n    }\n\n    specifiedFields[field] = true;\n\n    // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  });\n\n  // Check all the required fields are present\n  Object.keys(requiredFields).forEach(field => {\n    if (!specifiedFields[field]) {\n      throw new Error(\n        `Invalid format. ${field} is required in specified format`\n      );\n    }\n  });\n\n  // Add back all the literals after\n  newFormat = newFormat.replace(/@@@/g, () => literals.shift());\n\n  // Check if the date string matches the format. If it doesn't return null\n  const matches = dateStr.match(new RegExp(newFormat, \"i\"));\n  if (!matches) {\n    return null;\n  }\n\n  const combinedI18nSettings: I18nSettings = assign(\n    assign({}, globalI18n),\n    i18n\n  );\n\n  // For each match, call the parser function for that date part\n  for (let i = 1; i < matches.length; i++) {\n    const [field, , parser] = parseInfo[i - 1];\n    const value = parser\n      ? parser(matches[i], combinedI18nSettings)\n      : +matches[i];\n\n    // If the parser can't make sense of the value, return null\n    if (value == null) {\n      return null;\n    }\n\n    dateInfo[field] = value;\n  }\n\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  let dateTZ: Date;\n  if (dateInfo.timezoneOffset == null) {\n    dateTZ = new Date(\n      dateInfo.year,\n      dateInfo.month,\n      dateInfo.day,\n      dateInfo.hour,\n      dateInfo.minute,\n      dateInfo.second,\n      dateInfo.millisecond\n    );\n    const validateFields: [\n      \"month\" | \"day\" | \"hour\" | \"minute\" | \"second\",\n      \"getMonth\" | \"getDate\" | \"getHours\" | \"getMinutes\" | \"getSeconds\"\n    ][] = [\n      [\"month\", \"getMonth\"],\n      [\"day\", \"getDate\"],\n      [\"hour\", \"getHours\"],\n      [\"minute\", \"getMinutes\"],\n      [\"second\", \"getSeconds\"]\n    ];\n    for (let i = 0, len = validateFields.length; i < len; i++) {\n      // Check to make sure the date field is within the allowed range. Javascript dates allows values\n      // outside the allowed range. If the values don't match the value was invalid\n      if (\n        specifiedFields[validateFields[i][0]] &&\n        dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()\n      ) {\n        return null;\n      }\n    }\n  } else {\n    dateTZ = new Date(\n      Date.UTC(\n        dateInfo.year,\n        dateInfo.month,\n        dateInfo.day,\n        dateInfo.hour,\n        dateInfo.minute - dateInfo.timezoneOffset,\n        dateInfo.second,\n        dateInfo.millisecond\n      )\n    );\n\n    // We can't validate dates in another timezone unfortunately. Do a basic check instead\n    if (\n      dateInfo.month > 11 ||\n      dateInfo.month < 0 ||\n      dateInfo.day > 31 ||\n      dateInfo.day < 1 ||\n      dateInfo.hour > 23 ||\n      dateInfo.hour < 0 ||\n      dateInfo.minute > 59 ||\n      dateInfo.minute < 0 ||\n      dateInfo.second > 59 ||\n      dateInfo.second < 0\n    ) {\n      return null;\n    }\n  }\n\n  // Don't allow invalid dates\n\n  return dateTZ;\n}\nexport default {\n  format,\n  parse,\n  defaultI18n,\n  setGlobalDateI18n,\n  setGlobalDateMasks\n};\nexport { format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };\n","'use strict';\n\nconst fecha = require('fecha');\nconst format = require('./format');\n\n/*\n * function timestamp (info)\n * Returns a new instance of the timestamp Format which adds a timestamp\n * to the info. It was previously available in winston < 3.0.0 as:\n *\n * - { timestamp: true }             // `new Date.toISOString()`\n * - { timestamp: function:String }  // Value returned by `timestamp()`\n */\nmodule.exports = format((info, opts = {}) => {\n  if (opts.format) {\n    info.timestamp = typeof opts.format === 'function'\n      ? opts.format()\n      : fecha.format(new Date(), opts.format);\n  }\n\n  if (!info.timestamp) {\n    info.timestamp = new Date().toISOString();\n  }\n\n  if (opts.alias) {\n    info[opts.alias] = info.timestamp;\n  }\n\n  return info;\n});\n","'use strict';\n\nconst colors = require('@colors/colors/safe');\nconst format = require('./format');\nconst { MESSAGE } = require('triple-beam');\n\n/*\n * function uncolorize (info)\n * Returns a new instance of the uncolorize Format that strips colors\n * from `info` objects. This was previously exposed as { stripColors: true }\n * to transports in `winston < 3.0.0`.\n */\nmodule.exports = format((info, opts) => {\n  if (opts.level !== false) {\n    info.level = colors.strip(info.level);\n  }\n\n  if (opts.message !== false) {\n    info.message = colors.strip(String(info.message));\n  }\n\n  if (opts.raw !== false && info[MESSAGE]) {\n    info[MESSAGE] = colors.strip(String(info[MESSAGE]));\n  }\n\n  return info;\n});\n","'use strict';\n\n/*\n * @api public\n * @property {function} format\n * Both the construction method and set of exposed\n * formats.\n */\nconst format = exports.format = require('./format');\n\n/*\n * @api public\n * @method {function} levels\n * Registers the specified levels with logform.\n */\nexports.levels = require('./levels');\n\n/*\n * @api private\n * method {function} exposeFormat\n * Exposes a sub-format on the main format object\n * as a lazy-loaded getter.\n */\nfunction exposeFormat(name, requireFormat) {\n  Object.defineProperty(format, name, {\n    get() {\n      return requireFormat();\n    },\n    configurable: true\n  });\n}\n\n//\n// Setup all transports as lazy-loaded getters.\n//\nexposeFormat('align', function () { return require('./align'); });\nexposeFormat('errors', function () { return require('./errors'); });\nexposeFormat('cli', function () { return require('./cli'); });\nexposeFormat('combine', function () { return require('./combine'); });\nexposeFormat('colorize', function () { return require('./colorize'); });\nexposeFormat('json', function () { return require('./json'); });\nexposeFormat('label', function () { return require('./label'); });\nexposeFormat('logstash', function () { return require('./logstash'); });\nexposeFormat('metadata', function () { return require('./metadata'); });\nexposeFormat('ms', function () { return require('./ms'); });\nexposeFormat('padLevels', function () { return require('./pad-levels'); });\nexposeFormat('prettyPrint', function () { return require('./pretty-print'); });\nexposeFormat('printf', function () { return require('./printf'); });\nexposeFormat('simple', function () { return require('./simple'); });\nexposeFormat('splat', function () { return require('./splat'); });\nexposeFormat('timestamp', function () { return require('./timestamp'); });\nexposeFormat('uncolorize', function () { return require('./uncolorize'); });\n","/**\n * common.js: Internal helper and utility functions for winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { format } = require('util');\n\n/**\n * Set of simple deprecation notices and a way to expose them for a set of\n * properties.\n * @type {Object}\n * @private\n */\nexports.warn = {\n  deprecated(prop) {\n    return () => {\n      throw new Error(format('{ %s } was removed in winston@3.0.0.', prop));\n    };\n  },\n  useFormat(prop) {\n    return () => {\n      throw new Error([\n        format('{ %s } was removed in winston@3.0.0.', prop),\n        'Use a custom winston.format = winston.format(function) instead.'\n      ].join('\\n'));\n    };\n  },\n  forFunctions(obj, type, props) {\n    props.forEach(prop => {\n      obj[prop] = exports.warn[type](prop);\n    });\n  },\n  forProperties(obj, type, props) {\n    props.forEach(prop => {\n      const notice = exports.warn[type](prop);\n      Object.defineProperty(obj, prop, {\n        get: notice,\n        set: notice\n      });\n    });\n  }\n};\n","{\n  \"name\": \"winston\",\n  \"description\": \"A logger for just about everything.\",\n  \"version\": \"3.13.0\",\n  \"author\": \"Charlie Robbins <charlie.robbins@gmail.com>\",\n  \"maintainers\": [\n    \"David Hyde <dabh@alumni.stanford.edu>\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/winstonjs/winston.git\"\n  },\n  \"keywords\": [\n    \"winston\",\n    \"logger\",\n    \"logging\",\n    \"logs\",\n    \"sysadmin\",\n    \"bunyan\",\n    \"pino\",\n    \"loglevel\",\n    \"tools\",\n    \"json\",\n    \"stream\"\n  ],\n  \"dependencies\": {\n    \"@dabh/diagnostics\": \"^2.0.2\",\n    \"@colors/colors\": \"^1.6.0\",\n    \"async\": \"^3.2.3\",\n    \"is-stream\": \"^2.0.0\",\n    \"logform\": \"^2.4.0\",\n    \"one-time\": \"^1.0.0\",\n    \"readable-stream\": \"^3.4.0\",\n    \"safe-stable-stringify\": \"^2.3.1\",\n    \"stack-trace\": \"0.0.x\",\n    \"triple-beam\": \"^1.3.0\",\n    \"winston-transport\": \"^4.7.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.23.9\",\n    \"@babel/core\": \"^7.24.0\",\n    \"@babel/preset-env\": \"^7.24.0\",\n    \"@dabh/eslint-config-populist\": \"^5.0.0\",\n    \"@types/node\": \"^20.11.24\",\n    \"abstract-winston-transport\": \"^0.5.1\",\n    \"assume\": \"^2.2.0\",\n    \"cross-spawn-async\": \"^2.2.5\",\n    \"eslint\": \"^8.57.0\",\n    \"hock\": \"^1.4.1\",\n    \"mocha\": \"^10.3.0\",\n    \"nyc\": \"^15.1.0\",\n    \"rimraf\": \"^5.0.5\",\n    \"split2\": \"^4.1.0\",\n    \"std-mocks\": \"^2.0.0\",\n    \"through2\": \"^4.0.2\",\n    \"winston-compat\": \"^0.1.5\"\n  },\n  \"main\": \"./lib/winston.js\",\n  \"browser\": \"./dist/winston\",\n  \"types\": \"./index.d.ts\",\n  \"scripts\": {\n    \"lint\": \"eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist\",\n    \"test\": \"rimraf test/fixtures/logs/* && mocha\",\n    \"test:coverage\": \"nyc npm run test:unit\",\n    \"test:unit\": \"mocha test/unit\",\n    \"test:integration\": \"mocha test/integration\",\n    \"build\": \"rimraf dist && babel lib -d dist\",\n    \"prepublishOnly\": \"npm run build\"\n  },\n  \"engines\": {\n    \"node\": \">= 12.0.0\"\n  },\n  \"license\": \"MIT\"\n}\n","\n/**\n * For Node.js, simply re-export the core `util.deprecate` function.\n */\n\nmodule.exports = require('util').deprecate;\n","module.exports = require('stream');\n","'use strict';\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n  return this;\n}\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};","'use strict';\n\nconst codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error\n  }\n\n  function getMessage (arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message\n    } else {\n      return message(arg1, arg2, arg3)\n    }\n  }\n\n  class NodeError extends Base {\n    constructor (arg1, arg2, arg3) {\n      super(getMessage(arg1, arg2, arg3));\n    }\n  }\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n\n  codes[code] = NodeError;\n}\n\n// https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    const len = expected.length;\n    expected = expected.map((i) => String(i));\n    if (len > 2) {\n      return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +\n             expected[len - 1];\n    } else if (len === 2) {\n      return `one of ${thing} ${expected[0]} or ${expected[1]}`;\n    } else {\n      return `of ${thing} ${expected[0]}`;\n    }\n  } else {\n    return `of ${thing} ${String(expected)}`;\n  }\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nfunction startsWith(str, search, pos) {\n\treturn str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nfunction endsWith(str, search, this_len) {\n\tif (this_len === undefined || this_len > str.length) {\n\t\tthis_len = str.length;\n\t}\n\treturn str.substring(this_len - search.length, this_len) === search;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"'\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  let determiner;\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  let msg;\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;\n  } else {\n    const type = includes(name, '.') ? 'property' : 'argument';\n    msg = `The \"${name}\" ${type} ${determiner} ${oneOf(expected, 'type')}`;\n  }\n\n  msg += `. Received type ${typeof actual}`;\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented'\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\n\nmodule.exports.codes = codes;\n","'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n    return Math.floor(hwm);\n  }\n\n  // Default value\n  return state.objectMode ? 16 : 16 * 1024;\n}\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","try {\n  var util = require('util');\n  /* istanbul ignore next */\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  /* istanbul ignore next */\n  module.exports = require('./inherits_browser.js');\n}\n","'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar _require = require('buffer'),\n  Buffer = _require.Buffer;\nvar _require2 = require('util'),\n  inspect = _require2.inspect;\nvar custom = inspect && inspect.custom || 'inspect';\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\nmodule.exports = /*#__PURE__*/function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n      while (p = p.next) ret += s + p.data;\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n      return ret;\n    }\n\n    // Consumes a specified amount of bytes or characters from the buffered data.\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    }\n\n    // Consumes a specified amount of characters from the buffered data.\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n          break;\n        }\n        ++c;\n      }\n      this.length -= c;\n      return ret;\n    }\n\n    // Consumes a specified amount of bytes from the buffered data.\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n          break;\n        }\n        ++c;\n      }\n      this.length -= c;\n      return ret;\n    }\n\n    // Make sure the linked list only shows the minimal necessary information.\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n  return BufferList;\n}();","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    callback.apply(this, args);\n  };\n}\nfunction noop() {}\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n  var writableEnded = stream._writableState && stream._writableState.finished;\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n  var onclose = function onclose() {\n    var err;\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\nmodule.exports = eos;","'use strict';\n\nvar _Object$setPrototypeO;\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar finished = require('./end-of-stream');\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n  if (resolve !== null) {\n    var data = iter[kStream].read();\n    // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n  next: function next() {\n    var _this = this;\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    }\n\n    // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n    var lastPromise = this[kLastPromise];\n    var promise;\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n      promise = new Promise(this[kHandlePromise]);\n    }\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject];\n      // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n      iterator[kError] = err;\n      return;\n    }\n    var resolve = iterator[kLastResolve];\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\nmodule.exports = createReadableStreamAsyncIterator;","'use strict';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nvar ERR_INVALID_ARG_TYPE = require('../../../errors').codes.ERR_INVALID_ARG_TYPE;\nfunction from(Readable, iterable, opts) {\n  var iterator;\n  if (iterable && typeof iterable.next === 'function') {\n    iterator = iterable;\n  } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);\n  var readable = new Readable(_objectSpread({\n    objectMode: true\n  }, opts));\n  // Reading boolean to protect against _read\n  // being called before last iteration completion.\n  var reading = false;\n  readable._read = function () {\n    if (!reading) {\n      reading = true;\n      next();\n    }\n  };\n  function next() {\n    return _next2.apply(this, arguments);\n  }\n  function _next2() {\n    _next2 = _asyncToGenerator(function* () {\n      try {\n        var _yield$iterator$next = yield iterator.next(),\n          value = _yield$iterator$next.value,\n          done = _yield$iterator$next.done;\n        if (done) {\n          readable.push(null);\n        } else if (readable.push(yield value)) {\n          next();\n        } else {\n          reading = false;\n        }\n      } catch (err) {\n        readable.destroy(err);\n      }\n    });\n    return _next2.apply(this, arguments);\n  }\n  return readable;\n}\nmodule.exports = from;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/buffer_list');\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;\n\n// Lazy loaded to improve the startup performance.\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\nrequire('inherits')(Readable, Stream);\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'end' (and potentially 'finish')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex);\n\n  // legacy\n  this.readable = true;\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n  Stream.call(this);\n}\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  }\n\n  // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n  return er;\n}\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder;\n  // If setEncoding(null), decoder.encoding equals utf8\n  this._readableState.encoding = this._readableState.decoder.encoding;\n\n  // Iterate over current buffer to convert already stored Buffers:\n  var p = this._readableState.buffer.head;\n  var content = '';\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n  this._readableState.buffer.clear();\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n};\n\n// Don't raise the hwm > 1GB\nvar MAX_HWM = 0x40000000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  }\n\n  // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n  return dest;\n};\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {\n      hasUnpiped: false\n    });\n    return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0;\n\n    // Try start flowing on next tick if stream isn't explicitly paused\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n  return res;\n};\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true;\n\n    // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n  state.paused = false;\n  return this;\n};\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n  if (!state.reading) {\n    stream.read(0);\n  }\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  this._readableState.paused = true;\n  return this;\n};\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null);\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n  return this;\n};\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n    return createReadableStreamAsyncIterator(this);\n  };\n}\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n});\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length);\n\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n    return from(Readable, iterable, opts);\n  };\n}\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\nrequire('inherits')(Duplex, Readable);\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  process.nextTick(onEndNT, this);\n}\nfunction onEndNT(self) {\n  self.end();\n}\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\nvar Buffer = require('buffer').Buffer;\nvar OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\nvar destroyImpl = require('./internal/streams/destroy');\nvar _require = require('./internal/streams/state'),\n  getHighWaterMark = _require.getHighWaterMark;\nvar _require$codes = require('../errors').codes,\n  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nrequire('inherits')(Writable, Stream);\nfunction nop() {}\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = options.emitClose !== false;\n\n  // Should .destroy() be called after 'finish' (and potentially 'end')\n  this.autoDestroy = !!options.autoDestroy;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex);\n\n  // legacy.\n  this.writable = true;\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END();\n  // TODO: defer error events consistently everywhere, not just the cb\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n  return true;\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n  return ret;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n  return need;\n}\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  // reuse the free corkReq.\n  state.corkedRequestsFree.next = corkReq;\n}\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","'use strict';\n\nconst util = require('util');\nconst Writable = require('readable-stream/lib/_stream_writable.js');\nconst { LEVEL } = require('triple-beam');\n\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\nconst TransportStream = module.exports = function TransportStream(options = {}) {\n  Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });\n\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close;\n\n  // Get the levels from the source we are piped from.\n  this.once('pipe', logger => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    this.levels = logger.levels;\n    this.parent = logger;\n  });\n\n  // If and/or when the transport is removed from this instance\n  this.once('unpipe', src => {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === this.parent) {\n      this.parent = null;\n      if (this.close) {\n        this.close();\n      }\n    }\n  });\n};\n\n/*\n * Inherit from Writeable using Node.js built-ins\n */\nutil.inherits(TransportStream, Writable);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n  this._writableState.sync = false;\n  return callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    const infos = chunks.filter(this._accept, this);\n    if (!infos.length) {\n      return callback(null);\n    }\n\n    // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n    return this.logv(infos, callback);\n  }\n\n  for (let i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    let errState;\n    let transformed;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(\n        Object.assign({}, chunks[i].chunk),\n        this.format.options\n      );\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\nTransportStream.prototype._accept = function _accept(write) {\n  const info = write.chunk;\n  if (this.silent) {\n    return false;\n  }\n\n  // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n  const level = this.level || (this.parent && this.parent.level);\n\n  // Immediately check the average case: log level filtering.\n  if (\n    info.exception === true ||\n    !level ||\n    this.levels[level] >= this.levels[info[LEVEL]]\n  ) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};\n","'use strict';\n\nconst util = require('util');\nconst { LEVEL } = require('triple-beam');\nconst TransportStream = require('./modern');\n\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */\n\nconst LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n  TransportStream.call(this, options);\n  if (!options.transport || typeof options.transport.log !== 'function') {\n    throw new Error('Invalid transport, must be an object with a log method.');\n  }\n\n  this.transport = options.transport;\n  this.level = this.level || options.transport.level;\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\n\n  // Display our deprecation notice.\n  this._deprecated();\n\n  // Properly bubble up errors from the transport to the\n  // LegacyTransportStream instance, but only once no matter how many times\n  // this transport is shared.\n  function transportError(err) {\n    this.emit('error', err, this.transport);\n  }\n\n  if (!this.transport.__winstonError) {\n    this.transport.__winstonError = transportError.bind(this);\n    this.transport.on('error', this.transport.__winstonError);\n  }\n};\n\n/*\n * Inherit from TransportStream using Node.js built-ins\n */\nutil.inherits(LegacyTransportStream, TransportStream);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream.\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\n  }\n\n  callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n  for (let i = 0; i < chunks.length; i++) {\n    if (this._accept(chunks[i])) {\n      this.transport.log(\n        chunks[i].chunk[LEVEL],\n        chunks[i].chunk.message,\n        chunks[i].chunk,\n        this._nop\n      );\n      chunks[i].callback();\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\n  // eslint-disable-next-line no-console\n  console.error([\n    `${this.transport.name} is a legacy winston transport. Consider upgrading: `,\n    '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'\n  ].join('\\n'));\n};\n\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype.close = function close() {\n  if (this.transport.close) {\n    this.transport.close();\n  }\n\n  if (this.transport.__winstonError) {\n    this.transport.removeListener('error', this.transport.__winstonError);\n    this.transport.__winstonError = null;\n  }\n};\n","'use strict';\n\n// Expose modern transport directly as the export\nmodule.exports = require('./modern');\n\n// Expose legacy stream\nmodule.exports.LegacyTransportStream = require('./legacy');\n","/* eslint-disable no-console */\n/*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst { LEVEL, MESSAGE } = require('triple-beam');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */\nmodule.exports = class Console extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // Expose the name of this Transport on the prototype\n    this.name = options.name || 'console';\n    this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\n    this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\n\n    this.setMaxListeners(30);\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n\n    // Remark: what if there is no raw...?\n    if (this.stderrLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.error adds a newline\n        console.error(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    } else if (this.consoleWarnLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        // in Node.js console.warn is an alias for console.error\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.warn adds a newline\n        console.warn(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n\n    if (console._stdout) {\n      // Node.js maps `process.stdout` to `console._stdout`.\n      console._stdout.write(`${info[MESSAGE]}${this.eol}`);\n    } else {\n      // console.log adds a newline.\n      console.log(info[MESSAGE]);\n    }\n\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n  }\n\n  /**\n   * Returns a Set-like object with strArray's elements as keys (each with the\n   * value true).\n   * @param {Array} strArray - Array of Set-elements as strings.\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n   * @returns {Object} - TODO: add return description.\n   * @private\n   */\n  _stringArrayToSet(strArray, errMsg) {\n    if (!strArray)\n      return {};\n\n    errMsg = errMsg || 'Cannot make set from type other than Array of string elements';\n\n    if (!Array.isArray(strArray)) {\n      throw new Error(errMsg);\n    }\n\n    return strArray.reduce((set, el) =>  {\n      if (typeof el !== 'string') {\n        throw new Error(errMsg);\n      }\n      set[el] = true;\n\n      return set;\n    }, {});\n  }\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = isArrayLike;\nfunction isArrayLike(value) {\n    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n}\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (fn) {\n    return function (...args /*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n};\n\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.fallback = fallback;\nexports.wrap = wrap;\n/* istanbul ignore file */\n\nvar hasQueueMicrotask = exports.hasQueueMicrotask = typeof queueMicrotask === 'function' && queueMicrotask;\nvar hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasQueueMicrotask) {\n    _defer = queueMicrotask;\n} else if (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nexports.default = wrap(_defer);","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = asyncify;\n\nvar _initialParams = require('./internal/initialParams.js');\n\nvar _initialParams2 = _interopRequireDefault(_initialParams);\n\nvar _setImmediate = require('./internal/setImmediate.js');\n\nvar _setImmediate2 = _interopRequireDefault(_setImmediate);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if ((0, _wrapAsync.isAsync)(func)) {\n        return function (...args /*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback);\n        };\n    }\n\n    return (0, _initialParams2.default)(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback);\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        (0, _setImmediate2.default)(e => {\n            throw e;\n        }, err);\n    }\n}\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = undefined;\n\nvar _asyncify = require('../asyncify.js');\n\nvar _asyncify2 = _interopRequireDefault(_asyncify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function');\n    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;\n}\n\nexports.default = wrapAsync;\nexports.isAsync = isAsync;\nexports.isAsyncGenerator = isAsyncGenerator;\nexports.isAsyncIterable = isAsyncIterable;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = awaitify;\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify(asyncFn, arity) {\n    if (!arity) arity = asyncFn.length;\n    if (!arity) throw new Error('arity is undefined');\n    function awaitable(...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args);\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err);\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        });\n    }\n\n    return awaitable;\n}\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _isArrayLike = require('./isArrayLike.js');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _wrapAsync = require('./wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _awaitify2.default)((eachfn, tasks, callback) => {\n    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        (0, _wrapAsync2.default)(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = once;\nfunction once(fn) {\n    function wrapper(...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper;\n}\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nexports.default = function (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n};\n\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = createIterator;\n\nvar _isArrayLike = require('./isArrayLike.js');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _getIterator = require('./getIterator.js');\n\nvar _getIterator2 = _interopRequireDefault(_getIterator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? { value: coll[i], key: i } : null;\n    };\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done) return null;\n        i++;\n        return { value: item.value, key: i };\n    };\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        if (key === '__proto__') {\n            return next();\n        }\n        return i < len ? { value: obj[key], key } : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if ((0, _isArrayLike2.default)(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = (0, _getIterator2.default)(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = onlyOnce;\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\nexports.default = breakLoop;\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = asyncEachOfLimit;\n\nvar _breakLoop = require('./breakLoop.js');\n\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return;\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({ value, done: iterDone }) => {\n            //console.log('got value', value)\n            if (canceled || done) return;\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return;\n        if (err) return handleError(err);\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return;\n        }\n\n        if (result === _breakLoop2.default || done && running <= 0) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return;\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _once = require('./once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _iterator = require('./iterator.js');\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _onlyOnce = require('./onlyOnce.js');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./wrapAsync.js');\n\nvar _asyncEachOfLimit = require('./asyncEachOfLimit.js');\n\nvar _asyncEachOfLimit2 = _interopRequireDefault(_asyncEachOfLimit);\n\nvar _breakLoop = require('./breakLoop.js');\n\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = limit => {\n    return (obj, iteratee, callback) => {\n        callback = (0, _once2.default)(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1');\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if ((0, _wrapAsync.isAsyncGenerator)(obj)) {\n            return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);\n        }\n        if ((0, _wrapAsync.isAsyncIterable)(obj)) {\n            return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);\n        }\n        var nextElem = (0, _iterator2.default)(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return;\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            } else if (err === false) {\n                done = true;\n                canceled = true;\n            } else if (value === _breakLoop2.default || done && running <= 0) {\n                done = true;\n                return callback(null);\n            } else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish() {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _eachOfLimit2 = require('./internal/eachOfLimit.js');\n\nvar _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit(coll, limit, iteratee, callback) {\n    return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachOfLimit, 4);\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _eachOfLimit = require('./eachOfLimit.js');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);\n}\nexports.default = (0, _awaitify2.default)(eachOfSeries, 3);\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = series;\n\nvar _parallel2 = require('./internal/parallel.js');\n\nvar _parallel3 = _interopRequireDefault(_parallel2);\n\nvar _eachOfSeries = require('./eachOfSeries.js');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n *\n * //Using Callbacks\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ], function(err, results) {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * });\n *\n * // an example using objects instead of arrays\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * });\n *\n * //Using Promises\n * async.series([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ]).then(results => {\n *     console.log(results);\n *     // results is equal to ['one','two']\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // an example using an object instead of an array\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             // do some async task\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             // then do another async task\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }).then(results => {\n *     console.log(results);\n *     // results is equal to: { one: 1, two: 2 }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * //Using async/await\n * async () => {\n *     try {\n *         let results = await async.series([\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 'one');\n *                 }, 200);\n *             },\n *             function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 'two');\n *                 }, 100);\n *             }\n *         ]);\n *         console.log(results);\n *         // results is equal to ['one','two']\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // an example using an object instead of an array\n * async () => {\n *     try {\n *         let results = await async.parallel({\n *             one: function(callback) {\n *                 setTimeout(function() {\n *                     // do some async task\n *                     callback(null, 1);\n *                 }, 200);\n *             },\n *            two: function(callback) {\n *                 setTimeout(function() {\n *                     // then do another async task\n *                     callback(null, 2);\n *                 }, 100);\n *            }\n *         });\n *         console.log(results);\n *         // results is equal to: { one: 1, two: 2 }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */\nfunction series(tasks, callback) {\n    return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);\n}\nmodule.exports = exports.default;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\nvar _require$codes = require('../errors').codes,\n  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\nvar Duplex = require('./_stream_duplex');\nrequire('inherits')(Transform, Duplex);\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null)\n    // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\nfunction prefinish() {\n  var _this = this;\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null)\n    // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\nvar Transform = require('./_stream_transform');\nrequire('inherits')(PassThrough, Transform);\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n'use strict';\n\nvar eos;\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\nvar _require$codes = require('../../../errors').codes,\n  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true;\n\n    // request.destroy just do .end - .abort is what we want\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\nfunction call(fn) {\n  fn();\n}\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\nmodule.exports = pipeline;","var Stream = require('stream');\nif (process.env.READABLE_STREAM === 'disable' && Stream) {\n  module.exports = Stream.Readable;\n  Object.assign(module.exports, Stream);\n  module.exports.Stream = Stream;\n} else {\n  exports = module.exports = require('./lib/_stream_readable.js');\n  exports.Stream = Stream || exports;\n  exports.Readable = exports;\n  exports.Writable = require('./lib/_stream_writable.js');\n  exports.Duplex = require('./lib/_stream_duplex.js');\n  exports.Transform = require('./lib/_stream_transform.js');\n  exports.PassThrough = require('./lib/_stream_passthrough.js');\n  exports.finished = require('./lib/internal/streams/end-of-stream.js');\n  exports.pipeline = require('./lib/internal/streams/pipeline.js');\n}\n","/**\n * Contains all configured adapters for the given environment.\n *\n * @type {Array}\n * @public\n */\nvar adapters = [];\n\n/**\n * Contains all modifier functions.\n *\n * @typs {Array}\n * @public\n */\nvar modifiers = [];\n\n/**\n * Our default logger.\n *\n * @public\n */\nvar logger = function devnull() {};\n\n/**\n * Register a new adapter that will used to find environments.\n *\n * @param {Function} adapter A function that will return the possible env.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction use(adapter) {\n  if (~adapters.indexOf(adapter)) return false;\n\n  adapters.push(adapter);\n  return true;\n}\n\n/**\n * Assign a new log method.\n *\n * @param {Function} custom The log method.\n * @public\n */\nfunction set(custom) {\n  logger = custom;\n}\n\n/**\n * Check if the namespace is allowed by any of our adapters.\n *\n * @param {String} namespace The namespace that needs to be enabled\n * @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.\n * @public\n */\nfunction enabled(namespace) {\n  var async = [];\n\n  for (var i = 0; i < adapters.length; i++) {\n    if (adapters[i].async) {\n      async.push(adapters[i]);\n      continue;\n    }\n\n    if (adapters[i](namespace)) return true;\n  }\n\n  if (!async.length) return false;\n\n  //\n  // Now that we know that we Async functions, we know we run in an ES6\n  // environment and can use all the API's that they offer, in this case\n  // we want to return a Promise so that we can `await` in React-Native\n  // for an async adapter.\n  //\n  return new Promise(function pinky(resolve) {\n    Promise.all(\n      async.map(function prebind(fn) {\n        return fn(namespace);\n      })\n    ).then(function resolved(values) {\n      resolve(values.some(Boolean));\n    });\n  });\n}\n\n/**\n * Add a new message modifier to the debugger.\n *\n * @param {Function} fn Modification function.\n * @returns {Boolean} Indication of a successful add.\n * @public\n */\nfunction modify(fn) {\n  if (~modifiers.indexOf(fn)) return false;\n\n  modifiers.push(fn);\n  return true;\n}\n\n/**\n * Write data to the supplied logger.\n *\n * @param {Object} meta Meta information about the log.\n * @param {Array} args Arguments for console.log.\n * @public\n */\nfunction write() {\n  logger.apply(logger, arguments);\n}\n\n/**\n * Process the message with the modifiers.\n *\n * @param {Mixed} message The message to be transformed by modifers.\n * @returns {String} Transformed message.\n * @public\n */\nfunction process(message) {\n  for (var i = 0; i < modifiers.length; i++) {\n    message = modifiers[i].apply(modifiers[i], arguments);\n  }\n\n  return message;\n}\n\n/**\n * Introduce options to the logger function.\n *\n * @param {Function} fn Calback function.\n * @param {Object} options Properties to introduce on fn.\n * @returns {Function} The passed function\n * @public\n */\nfunction introduce(fn, options) {\n  var has = Object.prototype.hasOwnProperty;\n\n  for (var key in options) {\n    if (has.call(options, key)) {\n      fn[key] = options[key];\n    }\n  }\n\n  return fn;\n}\n\n/**\n * Nope, we're not allowed to write messages.\n *\n * @returns {Boolean} false\n * @public\n */\nfunction nope(options) {\n  options.enabled = false;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(function diagnopes() {\n    return false;\n  }, options);\n}\n\n/**\n * Yep, we're allowed to write debug messages.\n *\n * @param {Object} options The options for the process.\n * @returns {Function} The function that does the logging.\n * @public\n */\nfunction yep(options) {\n  /**\n   * The function that receives the actual debug information.\n   *\n   * @returns {Boolean} indication that we're logging.\n   * @public\n   */\n  function diagnostics() {\n    var args = Array.prototype.slice.call(arguments, 0);\n\n    write.call(write, options, process(args, options));\n    return true;\n  }\n\n  options.enabled = true;\n  options.modify = modify;\n  options.set = set;\n  options.use = use;\n\n  return introduce(diagnostics, options);\n}\n\n/**\n * Simple helper function to introduce various of helper methods to our given\n * diagnostics function.\n *\n * @param {Function} diagnostics The diagnostics function.\n * @returns {Function} diagnostics\n * @public\n */\nmodule.exports = function create(diagnostics) {\n  diagnostics.introduce = introduce;\n  diagnostics.enabled = enabled;\n  diagnostics.process = process;\n  diagnostics.modify = modify;\n  diagnostics.write = write;\n  diagnostics.nope = nope;\n  diagnostics.yep = yep;\n  diagnostics.set = set;\n  diagnostics.use = use;\n\n  return diagnostics;\n}\n","var create = require('../diagnostics');\n\n/**\n * Create a new diagnostics logger.\n *\n * @param {String} namespace The namespace it should enable.\n * @param {Object} options Additional options.\n * @returns {Function} The logger.\n * @public\n */\nvar diagnostics = create(function prod(namespace, options) {\n  options = options || {};\n  options.namespace = namespace;\n  options.prod = true;\n  options.dev = false;\n\n  if (!(options.force || prod.force)) return prod.nope(options);\n  return prod.yep(options);\n});\n\n//\n// Expose the diagnostics logger.\n//\nmodule.exports = diagnostics;\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar reverseNames = Object.create(null);\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (hasOwnProperty.call(colorNames, name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)(?=[\\s,])\\s*(?:,\\s*)?([+-]?\\d+)\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*,?\\s*([+-]?[\\d\\.]+)\\%\\s*(?:[,|\\/]\\s*([+-]?[\\d\\.]+)(%?)\\s*)?\\)$/;\n\tvar keyword = /^(\\w+)$/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\tif (match[5]) {\n\t\t\t\trgb[3] = parseFloat(match[4]) * 0.01;\n\t\t\t} else {\n\t\t\t\trgb[3] = parseFloat(match[4]);\n\t\t\t}\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\tif (!hasOwnProperty.call(colorNames, match[1])) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d{0,3}\\.)?\\d+)(?:deg)?\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*,?\\s*([+-]?[\\d\\.]+)%\\s*(?:[,|\\/]\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d{0,3}(?:\\.\\d+)?)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?(?=\\.\\d|\\d)(?:0|[1-9]\\d*)?(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = Math.round(num).toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (obj == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","'use strict';\n\n/***\n * Convert string to hex color.\n *\n * @param {String} str Text to hash and convert to hex.\n * @returns {String}\n * @api public\n */\nmodule.exports = function hex(str) {\n  for (\n    var i = 0, hash = 0;\n    i < str.length;\n    hash = str.charCodeAt(i++) + ((hash << 5) - hash)\n  );\n\n  var color = Math.floor(\n    Math.abs(\n      (Math.sin(hash) * 10000) % 1 * 16777216\n    )\n  ).toString(16);\n\n  return '#' + Array(6 - color.length + 1).join('0') + color;\n};\n","'use strict';\n\nvar color = require('color')\n  , hex = require('text-hex');\n\n/**\n * Generate a color for a given name. But be reasonably smart about it by\n * understanding name spaces and coloring each namespace a bit lighter so they\n * still have the same base color as the root.\n *\n * @param {string} namespace The namespace\n * @param {string} [delimiter] The delimiter\n * @returns {string} color\n */\nmodule.exports = function colorspace(namespace, delimiter) {\n  var split = namespace.split(delimiter || ':');\n  var base = hex(split[0]);\n\n  if (!split.length) return base;\n\n  for (var i = 0, l = split.length - 1; i < l; i++) {\n    base = color(base)\n    .mix(color(hex(split[i + 1])))\n    .saturate(1)\n    .hex();\n  }\n\n  return base;\n};\n","'use strict';\n\n/**\n * Kuler: Color text using CSS colors\n *\n * @constructor\n * @param {String} text The text that needs to be styled\n * @param {String} color Optional color for alternate API.\n * @api public\n */\nfunction Kuler(text, color) {\n  if (color) return (new Kuler(text)).style(color);\n  if (!(this instanceof Kuler)) return new Kuler(text);\n\n  this.text = text;\n}\n\n/**\n * ANSI color codes.\n *\n * @type {String}\n * @private\n */\nKuler.prototype.prefix = '\\x1b[';\nKuler.prototype.suffix = 'm';\n\n/**\n * Parse a hex color string and parse it to it's RGB equiv.\n *\n * @param {String} color\n * @returns {Array}\n * @api private\n */\nKuler.prototype.hex = function hex(color) {\n  color = color[0] === '#' ? color.substring(1) : color;\n\n  //\n  // Pre-parse for shorthand hex colors.\n  //\n  if (color.length === 3) {\n    color = color.split('');\n\n    color[5] = color[2]; // F60##0\n    color[4] = color[2]; // F60#00\n    color[3] = color[1]; // F60600\n    color[2] = color[1]; // F66600\n    color[1] = color[0]; // FF6600\n\n    color = color.join('');\n  }\n\n  var r = color.substring(0, 2)\n    , g = color.substring(2, 4)\n    , b = color.substring(4, 6);\n\n  return [ parseInt(r, 16), parseInt(g, 16), parseInt(b, 16) ];\n};\n\n/**\n * Transform a 255 RGB value to an RGV code.\n *\n * @param {Number} r Red color channel.\n * @param {Number} g Green color channel.\n * @param {Number} b Blue color channel.\n * @returns {String}\n * @api public\n */\nKuler.prototype.rgb = function rgb(r, g, b) {\n  var red = r / 255 * 5\n    , green = g / 255 * 5\n    , blue = b / 255 * 5;\n\n  return this.ansi(red, green, blue);\n};\n\n/**\n * Turns RGB 0-5 values into a single ANSI code.\n *\n * @param {Number} r Red color channel.\n * @param {Number} g Green color channel.\n * @param {Number} b Blue color channel.\n * @returns {String}\n * @api public\n */\nKuler.prototype.ansi = function ansi(r, g, b) {\n  var red = Math.round(r)\n    , green = Math.round(g)\n    , blue = Math.round(b);\n\n  return 16 + (red * 36) + (green * 6) + blue;\n};\n\n/**\n * Marks an end of color sequence.\n *\n * @returns {String} Reset sequence.\n * @api public\n */\nKuler.prototype.reset = function reset() {\n  return this.prefix +'39;49'+ this.suffix;\n};\n\n/**\n * Colour the terminal using CSS.\n *\n * @param {String} color The HEX color code.\n * @returns {String} the escape code.\n * @api public\n */\nKuler.prototype.style = function style(color) {\n  return this.prefix +'38;5;'+ this.rgb.apply(this, this.hex(color)) + this.suffix + this.text + this.reset();\n};\n\n\n//\n// Expose the actual interface.\n//\nmodule.exports = Kuler;\n","var colorspace = require('colorspace');\nvar kuler = require('kuler');\n\n/**\n * Prefix the messages with a colored namespace.\n *\n * @param {Array} args The messages array that is getting written.\n * @param {Object} options Options for diagnostics.\n * @returns {Array} Altered messages array.\n * @public\n */\nmodule.exports = function ansiModifier(args, options) {\n  var namespace = options.namespace;\n  var ansi = options.colors !== false\n  ? kuler(namespace +':', colorspace(namespace))\n  : namespace +':';\n\n  args[0] = ansi +' '+ args[0];\n  return args;\n};\n","'use strict';\n\n/**\n * Checks if a given namespace is allowed by the given variable.\n *\n * @param {String} name namespace that should be included.\n * @param {String} variable Value that needs to be tested.\n * @returns {Boolean} Indication if namespace is enabled.\n * @public\n */\nmodule.exports = function enabled(name, variable) {\n  if (!variable) return false;\n\n  var variables = variable.split(/[\\s,]+/)\n    , i = 0;\n\n  for (; i < variables.length; i++) {\n    variable = variables[i].replace('*', '.*?');\n\n    if ('-' === variable.charAt(0)) {\n      if ((new RegExp('^'+ variable.substr(1) +'$')).test(name)) {\n        return false;\n      }\n\n      continue;\n    }\n\n    if ((new RegExp('^'+ variable +'$')).test(name)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n","var enabled = require('enabled');\n\n/**\n * Creates a new Adapter.\n *\n * @param {Function} fn Function that returns the value.\n * @returns {Function} The adapter logic.\n * @public\n */\nmodule.exports = function create(fn) {\n  return function adapter(namespace) {\n    try {\n      return enabled(namespace, fn());\n    } catch (e) { /* Any failure means that we found nothing */ }\n\n    return false;\n  };\n}\n","var adapter = require('./');\n\n/**\n * Extracts the values from process.env.\n *\n * @type {Function}\n * @public\n */\nmodule.exports = adapter(function processenv() {\n  return process.env.DEBUG || process.env.DIAGNOSTICS;\n});\n","/**\n * An idiot proof logger to be used as default. We've wrapped it in a try/catch\n * statement to ensure the environments without the `console` API do not crash\n * as well as an additional fix for ancient browsers like IE8 where the\n * `console.log` API doesn't have an `apply`, so we need to use the Function's\n * apply functionality to apply the arguments.\n *\n * @param {Object} meta Options of the logger.\n * @param {Array} messages The actuall message that needs to be logged.\n * @public\n */\nmodule.exports = function (meta, messages) {\n  //\n  // So yea. IE8 doesn't have an apply so we need a work around to puke the\n  // arguments in place.\n  //\n  try { Function.prototype.apply.call(console.log, console, messages); }\n  catch (e) {}\n}\n","var create = require('../diagnostics');\nvar tty = require('tty').isatty(1);\n\n/**\n * Create a new diagnostics logger.\n *\n * @param {String} namespace The namespace it should enable.\n * @param {Object} options Additional options.\n * @returns {Function} The logger.\n * @public\n */\nvar diagnostics = create(function dev(namespace, options) {\n  options = options || {};\n  options.colors = 'colors' in options ? options.colors : tty;\n  options.namespace = namespace;\n  options.prod = false;\n  options.dev = true;\n\n  if (!dev.enabled(namespace) && !(options.force || dev.force)) {\n    return dev.nope(options);\n  }\n  \n  return dev.yep(options);\n});\n\n//\n// Configure the logger for the given environment.\n//\ndiagnostics.modify(require('../modifiers/namespace-ansi'));\ndiagnostics.use(require('../adapters/process.env'));\ndiagnostics.set(require('../logger/console'));\n\n//\n// Expose the diagnostics logger.\n//\nmodule.exports = diagnostics;\n","//\n// Select the correct build version depending on the environment.\n//\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./production.js');\n} else {\n  module.exports = require('./development.js');\n}\n","/**\n * tail-file.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst { StringDecoder } = require('string_decoder');\nconst { Stream } = require('readable-stream');\n\n/**\n * Simple no-op function.\n * @returns {undefined}\n */\nfunction noop() {}\n\n/**\n * TODO: add function description.\n * @param {Object} options - Options for tail.\n * @param {function} iter - Iterator function to execute on every line.\n* `tail -f` a file. Options must include file.\n * @returns {mixed} - TODO: add return description.\n */\nmodule.exports = (options, iter) => {\n  const buffer = Buffer.alloc(64 * 1024);\n  const decode = new StringDecoder('utf8');\n  const stream = new Stream();\n  let buff = '';\n  let pos = 0;\n  let row = 0;\n\n  if (options.start === -1) {\n    delete options.start;\n  }\n\n  stream.readable = true;\n  stream.destroy = () => {\n    stream.destroyed = true;\n    stream.emit('end');\n    stream.emit('close');\n  };\n\n  fs.open(options.file, 'a+', '0644', (err, fd) => {\n    if (err) {\n      if (!iter) {\n        stream.emit('error', err);\n      } else {\n        iter(err);\n      }\n      stream.destroy();\n      return;\n    }\n\n    (function read() {\n      if (stream.destroyed) {\n        fs.close(fd, noop);\n        return;\n      }\n\n      return fs.read(fd, buffer, 0, buffer.length, pos, (error, bytes) => {\n        if (error) {\n          if (!iter) {\n            stream.emit('error', error);\n          } else {\n            iter(error);\n          }\n          stream.destroy();\n          return;\n        }\n\n        if (!bytes) {\n          if (buff) {\n            // eslint-disable-next-line eqeqeq\n            if (options.start == null || row > options.start) {\n              if (!iter) {\n                stream.emit('line', buff);\n              } else {\n                iter(null, buff);\n              }\n            }\n            row++;\n            buff = '';\n          }\n          return setTimeout(read, 1000);\n        }\n\n        let data = decode.write(buffer.slice(0, bytes));\n        if (!iter) {\n          stream.emit('data', data);\n        }\n\n        data = (buff + data).split(/\\n+/);\n\n        const l = data.length - 1;\n        let i = 0;\n\n        for (; i < l; i++) {\n          // eslint-disable-next-line eqeqeq\n          if (options.start == null || row > options.start) {\n            if (!iter) {\n              stream.emit('line', data[i]);\n            } else {\n              iter(null, data[i]);\n            }\n          }\n          row++;\n        }\n\n        buff = data[l];\n        pos += bytes;\n        return read();\n      });\n    }());\n  });\n\n  if (!iter) {\n    return stream;\n  }\n\n  return stream.destroy;\n};\n","/* eslint-disable complexity,max-statements */\n/**\n * file.js: Transport for outputting to a local log file.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst asyncSeries = require('async/series');\nconst zlib = require('zlib');\nconst { MESSAGE } = require('triple-beam');\nconst { Stream, PassThrough } = require('readable-stream');\nconst TransportStream = require('winston-transport');\nconst debug = require('@dabh/diagnostics')('winston:file');\nconst os = require('os');\nconst tailFile = require('../tail-file');\n\n/**\n * Transport for outputting to a local log file.\n * @type {File}\n * @extends {TransportStream}\n */\nmodule.exports = class File extends TransportStream {\n  /**\n   * Constructor function for the File transport object responsible for\n   * persisting log messages and metadata to one or more files.\n   * @param {Object} options - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // Expose the name of this Transport on the prototype.\n    this.name = options.name || 'file';\n\n    // Helper function which throws an `Error` in the event that any of the\n    // rest of the arguments is present in `options`.\n    function throwIf(target, ...args) {\n      args.slice(1).forEach(name => {\n        if (options[name]) {\n          throw new Error(`Cannot set ${name} and ${target} together`);\n        }\n      });\n    }\n\n    // Setup the base stream that always gets piped to to handle buffering.\n    this._stream = new PassThrough();\n    this._stream.setMaxListeners(30);\n\n    // Bind this context for listener methods.\n    this._onError = this._onError.bind(this);\n\n    if (options.filename || options.dirname) {\n      throwIf('filename or dirname', 'stream');\n      this._basename = this.filename = options.filename\n        ? path.basename(options.filename)\n        : 'winston.log';\n\n      this.dirname = options.dirname || path.dirname(options.filename);\n      this.options = options.options || { flags: 'a' };\n    } else if (options.stream) {\n      // eslint-disable-next-line no-console\n      console.warn('options.stream will be removed in winston@4. Use winston.transports.Stream');\n      throwIf('stream', 'filename', 'maxsize');\n      this._dest = this._stream.pipe(this._setupStream(options.stream));\n      this.dirname = path.dirname(this._dest.path);\n      // We need to listen for drain events when write() returns false. This\n      // can make node mad at times.\n    } else {\n      throw new Error('Cannot log to file without filename or stream.');\n    }\n\n    this.maxsize = options.maxsize || null;\n    this.rotationFormat = options.rotationFormat || false;\n    this.zippedArchive = options.zippedArchive || false;\n    this.maxFiles = options.maxFiles || null;\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\n    this.tailable = options.tailable || false;\n    this.lazy = options.lazy || false;\n\n    // Internal state variables representing the number of files this instance\n    // has created and the current size (in bytes) of the current logfile.\n    this._size = 0;\n    this._pendingSize = 0;\n    this._created = 0;\n    this._drain = false;\n    this._opening = false;\n    this._ending = false;\n    this._fileExist = false;\n\n    if (this.dirname) this._createLogDirIfNotExist(this.dirname);\n    if (!this.lazy) this.open();\n  }\n\n  finishIfEnding() {\n    if (this._ending) {\n      if (this._opening) {\n        this.once('open', () => {\n          this._stream.once('finish', () => this.emit('finish'));\n          setImmediate(() => this._stream.end());\n        });\n      } else {\n        this._stream.once('finish', () => this.emit('finish'));\n        setImmediate(() => this._stream.end());\n      }\n    }\n  }\n\n  /**\n   * Core logging method exposed to Winston. Metadata is optional.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback = () => { }) {\n    // Remark: (jcrugzz) What is necessary about this callback(null, true) now\n    // when thinking about 3.x? Should silent be handled in the base\n    // TransportStream _write method?\n    if (this.silent) {\n      callback();\n      return true;\n    }\n\n\n    // Output stream buffer is full and has asked us to wait for the drain event\n    if (this._drain) {\n      this._stream.once('drain', () => {\n        this._drain = false;\n        this.log(info, callback);\n      });\n      return;\n    }\n    if (this._rotate) {\n      this._stream.once('rotate', () => {\n        this._rotate = false;\n        this.log(info, callback);\n      });\n      return;\n    }\n    if (this.lazy) {\n      if (!this._fileExist) {\n        if (!this._opening) {\n          this.open();\n        }\n        this.once('open', () => {\n          this._fileExist = true;\n          this.log(info, callback);\n          return;\n        });\n        return;\n      }\n      if (this._needsNewFile(this._pendingSize)) {\n        this._dest.once('close', () => {\n          if (!this._opening) {\n            this.open();\n          }\n          this.once('open', () => {\n            this.log(info, callback);\n            return;\n          });\n          return;\n        });\n        return;\n      }\n    }\n\n    // Grab the raw string and append the expected EOL.\n    const output = `${info[MESSAGE]}${this.eol}`;\n    const bytes = Buffer.byteLength(output);\n\n    // After we have written to the PassThrough check to see if we need\n    // to rotate to the next file.\n    //\n    // Remark: This gets called too early and does not depict when data\n    // has been actually flushed to disk.\n    function logged() {\n      this._size += bytes;\n      this._pendingSize -= bytes;\n\n      debug('logged %s %s', this._size, output);\n      this.emit('logged', info);\n\n      // Do not attempt to rotate files while rotating\n      if (this._rotate) {\n        return;\n      }\n\n      // Do not attempt to rotate files while opening\n      if (this._opening) {\n        return;\n      }\n\n      // Check to see if we need to end the stream and create a new one.\n      if (!this._needsNewFile()) {\n        return;\n      }\n      if (this.lazy) {\n        this._endStream(() => {this.emit('fileclosed');});\n        return;\n      }\n\n      // End the current stream, ensure it flushes and create a new one.\n      // This could potentially be optimized to not run a stat call but its\n      // the safest way since we are supporting `maxFiles`.\n      this._rotate = true;\n      this._endStream(() => this._rotateFile());\n    }\n\n    // Keep track of the pending bytes being written while files are opening\n    // in order to properly rotate the PassThrough this._stream when the file\n    // eventually does open.\n    this._pendingSize += bytes;\n    if (this._opening\n      && !this.rotatedWhileOpening\n      && this._needsNewFile(this._size + this._pendingSize)) {\n      this.rotatedWhileOpening = true;\n    }\n\n    const written = this._stream.write(output, logged.bind(this));\n    if (!written) {\n      this._drain = true;\n      this._stream.once('drain', () => {\n        this._drain = false;\n        callback();\n      });\n    } else {\n      callback(); // eslint-disable-line callback-return\n    }\n\n    debug('written', written, this._drain);\n\n    this.finishIfEnding();\n\n    return written;\n  }\n\n  /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options - Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * TODO: Refactor me.\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = normalizeQuery(options);\n    const file = path.join(this.dirname, this.filename);\n    let buff = '';\n    let results = [];\n    let row = 0;\n\n    const stream = fs.createReadStream(file, {\n      encoding: 'utf8'\n    });\n\n    stream.on('error', err => {\n      if (stream.readable) {\n        stream.destroy();\n      }\n      if (!callback) {\n        return;\n      }\n\n      return err.code !== 'ENOENT' ? callback(err) : callback(null, results);\n    });\n\n    stream.on('data', data => {\n      data = (buff + data).split(/\\n+/);\n      const l = data.length - 1;\n      let i = 0;\n\n      for (; i < l; i++) {\n        if (!options.start || row >= options.start) {\n          add(data[i]);\n        }\n        row++;\n      }\n\n      buff = data[l];\n    });\n\n    stream.on('close', () => {\n      if (buff) {\n        add(buff, true);\n      }\n      if (options.order === 'desc') {\n        results = results.reverse();\n      }\n\n      // eslint-disable-next-line callback-return\n      if (callback) callback(null, results);\n    });\n\n    function add(buff, attempt) {\n      try {\n        const log = JSON.parse(buff);\n        if (check(log)) {\n          push(log);\n        }\n      } catch (e) {\n        if (!attempt) {\n          stream.emit('error', e);\n        }\n      }\n    }\n\n    function push(log) {\n      if (\n        options.rows &&\n        results.length >= options.rows &&\n        options.order !== 'desc'\n      ) {\n        if (stream.readable) {\n          stream.destroy();\n        }\n        return;\n      }\n\n      if (options.fields) {\n        log = options.fields.reduce((obj, key) => {\n          obj[key] = log[key];\n          return obj;\n        }, {});\n      }\n\n      if (options.order === 'desc') {\n        if (results.length >= options.rows) {\n          results.shift();\n        }\n      }\n      results.push(log);\n    }\n\n    function check(log) {\n      if (!log) {\n        return;\n      }\n\n      if (typeof log !== 'object') {\n        return;\n      }\n\n      const time = new Date(log.timestamp);\n      if (\n        (options.from && time < options.from) ||\n        (options.until && time > options.until) ||\n        (options.level && options.level !== log.level)\n      ) {\n        return;\n      }\n\n      return true;\n    }\n\n    function normalizeQuery(options) {\n      options = options || {};\n\n      // limit\n      options.rows = options.rows || options.limit || 10;\n\n      // starting row offset\n      options.start = options.start || 0;\n\n      // now\n      options.until = options.until || new Date();\n      if (typeof options.until !== 'object') {\n        options.until = new Date(options.until);\n      }\n\n      // now - 24\n      options.from = options.from || (options.until - (24 * 60 * 60 * 1000));\n      if (typeof options.from !== 'object') {\n        options.from = new Date(options.from);\n      }\n\n      // 'asc' or 'desc'\n      options.order = options.order || 'desc';\n\n      return options;\n    }\n  }\n\n  /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   * TODO: Refactor me.\n   */\n  stream(options = {}) {\n    const file = path.join(this.dirname, this.filename);\n    const stream = new Stream();\n    const tail = {\n      file,\n      start: options.start\n    };\n\n    stream.destroy = tailFile(tail, (err, line) => {\n      if (err) {\n        return stream.emit('error', err);\n      }\n\n      try {\n        stream.emit('data', line);\n        line = JSON.parse(line);\n        stream.emit('log', line);\n      } catch (e) {\n        stream.emit('error', e);\n      }\n    });\n\n    return stream;\n  }\n\n  /**\n   * Checks to see the filesize of.\n   * @returns {undefined}\n   */\n  open() {\n    // If we do not have a filename then we were passed a stream and\n    // don't need to keep track of size.\n    if (!this.filename) return;\n    if (this._opening) return;\n\n    this._opening = true;\n\n    // Stat the target file to get the size and create the stream.\n    this.stat((err, size) => {\n      if (err) {\n        return this.emit('error', err);\n      }\n      debug('stat done: %s { size: %s }', this.filename, size);\n      this._size = size;\n      this._dest = this._createStream(this._stream);\n      this._opening = false;\n      this.once('open', () => {\n        if (this._stream.eventNames().includes('rotate')) {\n          this._stream.emit('rotate');\n        } else {\n          this._rotate = false;\n        }\n      });\n    });\n  }\n\n  /**\n   * Stat the file and assess information in order to create the proper stream.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  stat(callback) {\n    const target = this._getFile();\n    const fullpath = path.join(this.dirname, target);\n\n    fs.stat(fullpath, (err, stat) => {\n      if (err && err.code === 'ENOENT') {\n        debug('ENOENT ok', fullpath);\n        // Update internally tracked filename with the new target name.\n        this.filename = target;\n        return callback(null, 0);\n      }\n\n      if (err) {\n        debug(`err ${err.code} ${fullpath}`);\n        return callback(err);\n      }\n\n      if (!stat || this._needsNewFile(stat.size)) {\n        // If `stats.size` is greater than the `maxsize` for this\n        // instance then try again.\n        return this._incFile(() => this.stat(callback));\n      }\n\n      // Once we have figured out what the filename is, set it\n      // and return the size.\n      this.filename = target;\n      callback(null, stat.size);\n    });\n  }\n\n  /**\n   * Closes the stream associated with this instance.\n   * @param {function} cb - TODO: add param description.\n   * @returns {undefined}\n   */\n  close(cb) {\n    if (!this._stream) {\n      return;\n    }\n\n    this._stream.end(() => {\n      if (cb) {\n        cb(); // eslint-disable-line callback-return\n      }\n      this.emit('flush');\n      this.emit('closed');\n    });\n  }\n\n  /**\n   * TODO: add method description.\n   * @param {number} size - TODO: add param description.\n   * @returns {undefined}\n   */\n  _needsNewFile(size) {\n    size = size || this._size;\n    return this.maxsize && size >= this.maxsize;\n  }\n\n  /**\n   * TODO: add method description.\n   * @param {Error} err - TODO: add param description.\n   * @returns {undefined}\n   */\n  _onError(err) {\n    this.emit('error', err);\n  }\n\n  /**\n   * TODO: add method description.\n   * @param {Stream} stream - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */\n  _setupStream(stream) {\n    stream.on('error', this._onError);\n\n    return stream;\n  }\n\n  /**\n   * TODO: add method description.\n   * @param {Stream} stream - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */\n  _cleanupStream(stream) {\n    stream.removeListener('error', this._onError);\n    stream.destroy();\n    return stream;\n  }\n\n  /**\n   * TODO: add method description.\n   */\n  _rotateFile() {\n    this._incFile(() => this.open());\n  }\n\n  /**\n   * Unpipe from the stream that has been marked as full and end it so it\n   * flushes to disk.\n   *\n   * @param {function} callback - Callback for when the current file has closed.\n   * @private\n   */\n  _endStream(callback = () => { }) {\n    if (this._dest) {\n      this._stream.unpipe(this._dest);\n      this._dest.end(() => {\n        this._cleanupStream(this._dest);\n        callback();\n      });\n    } else {\n      callback(); // eslint-disable-line callback-return\n    }\n  }\n\n  /**\n   * Returns the WritableStream for the active file on this instance. If we\n   * should gzip the file then a zlib stream is returned.\n   *\n   * @param {ReadableStream} source –PassThrough to pipe to the file when open.\n   * @returns {WritableStream} Stream that writes to disk for the active file.\n   */\n  _createStream(source) {\n    const fullpath = path.join(this.dirname, this.filename);\n\n    debug('create stream start', fullpath, this.options);\n    const dest = fs.createWriteStream(fullpath, this.options)\n      // TODO: What should we do with errors here?\n      .on('error', err => debug(err))\n      .on('close', () => debug('close', dest.path, dest.bytesWritten))\n      .on('open', () => {\n        debug('file open ok', fullpath);\n        this.emit('open', fullpath);\n        source.pipe(dest);\n\n        // If rotation occured during the open operation then we immediately\n        // start writing to a new PassThrough, begin opening the next file\n        // and cleanup the previous source and dest once the source has drained.\n        if (this.rotatedWhileOpening) {\n          this._stream = new PassThrough();\n          this._stream.setMaxListeners(30);\n          this._rotateFile();\n          this.rotatedWhileOpening = false;\n          this._cleanupStream(dest);\n          source.end();\n        }\n      });\n\n    debug('create stream ok', fullpath);\n    return dest;\n  }\n\n  /**\n   * TODO: add method description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  _incFile(callback) {\n    debug('_incFile', this.filename);\n    const ext = path.extname(this._basename);\n    const basename = path.basename(this._basename, ext);\n    const tasks = [];\n\n    if (this.zippedArchive) {\n      tasks.push(\n        function (cb) {\n          const num = this._created > 0 && !this.tailable ? this._created : '';\n          this._compressFile(\n            path.join(this.dirname, `${basename}${num}${ext}`),\n            path.join(this.dirname, `${basename}${num}${ext}.gz`),\n            cb\n          );\n        }.bind(this)\n      );\n    }\n\n    tasks.push(\n      function (cb) {\n        if (!this.tailable) {\n          this._created += 1;\n          this._checkMaxFilesIncrementing(ext, basename, cb);\n        } else {\n          this._checkMaxFilesTailable(ext, basename, cb);\n        }\n      }.bind(this)\n    );\n\n    asyncSeries(tasks, callback);\n  }\n\n  /**\n   * Gets the next filename to use for this instance in the case that log\n   * filesizes are being capped.\n   * @returns {string} - TODO: add return description.\n   * @private\n   */\n  _getFile() {\n    const ext = path.extname(this._basename);\n    const basename = path.basename(this._basename, ext);\n    const isRotation = this.rotationFormat\n      ? this.rotationFormat()\n      : this._created;\n\n    // Caveat emptor (indexzero): rotationFormat() was broken by design When\n    // combined with max files because the set of files to unlink is never\n    // stored.\n    return !this.tailable && this._created\n      ? `${basename}${isRotation}${ext}`\n      : `${basename}${ext}`;\n  }\n\n  /**\n   * Increment the number of files created or checked by this instance.\n   * @param {mixed} ext - TODO: add param description.\n   * @param {mixed} basename - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {undefined}\n   * @private\n   */\n  _checkMaxFilesIncrementing(ext, basename, callback) {\n    // Check for maxFiles option and delete file.\n    if (!this.maxFiles || this._created < this.maxFiles) {\n      return setImmediate(callback);\n    }\n\n    const oldest = this._created - this.maxFiles;\n    const isOldest = oldest !== 0 ? oldest : '';\n    const isZipped = this.zippedArchive ? '.gz' : '';\n    const filePath = `${basename}${isOldest}${ext}${isZipped}`;\n    const target = path.join(this.dirname, filePath);\n\n    fs.unlink(target, callback);\n  }\n\n  /**\n   * Roll files forward based on integer, up to maxFiles. e.g. if base if\n   * file.log and it becomes oversized, roll to file1.log, and allow file.log\n   * to be re-used. If file is oversized again, roll file1.log to file2.log,\n   * roll file.log to file1.log, and so on.\n   * @param {mixed} ext - TODO: add param description.\n   * @param {mixed} basename - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {undefined}\n   * @private\n   */\n  _checkMaxFilesTailable(ext, basename, callback) {\n    const tasks = [];\n    if (!this.maxFiles) {\n      return;\n    }\n\n    // const isZipped = this.zippedArchive ? '.gz' : '';\n    const isZipped = this.zippedArchive ? '.gz' : '';\n    for (let x = this.maxFiles - 1; x > 1; x--) {\n      tasks.push(function (i, cb) {\n        let fileName = `${basename}${(i - 1)}${ext}${isZipped}`;\n        const tmppath = path.join(this.dirname, fileName);\n\n        fs.exists(tmppath, exists => {\n          if (!exists) {\n            return cb(null);\n          }\n\n          fileName = `${basename}${i}${ext}${isZipped}`;\n          fs.rename(tmppath, path.join(this.dirname, fileName), cb);\n        });\n      }.bind(this, x));\n    }\n\n    asyncSeries(tasks, () => {\n      fs.rename(\n        path.join(this.dirname, `${basename}${ext}${isZipped}`),\n        path.join(this.dirname, `${basename}1${ext}${isZipped}`),\n        callback\n      );\n    });\n  }\n\n  /**\n   * Compresses src to dest with gzip and unlinks src\n   * @param {string} src - path to source file.\n   * @param {string} dest - path to zipped destination file.\n   * @param {Function} callback - callback called after file has been compressed.\n   * @returns {undefined}\n   * @private\n   */\n  _compressFile(src, dest, callback) {\n    fs.access(src, fs.F_OK, (err) => {\n      if (err) {\n        return callback();\n      }\n      var gzip = zlib.createGzip();\n      var inp = fs.createReadStream(src);\n      var out = fs.createWriteStream(dest);\n      out.on('finish', () => {\n        fs.unlink(src, callback);\n      });\n      inp.pipe(gzip).pipe(out);\n    });\n  }\n\n  _createLogDirIfNotExist(dirPath) {\n    /* eslint-disable no-sync */\n    if (!fs.existsSync(dirPath)) {\n      fs.mkdirSync(dirPath, { recursive: true });\n    }\n    /* eslint-enable no-sync */\n  }\n};\n","/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst { Stream } = require('readable-stream');\nconst TransportStream = require('winston-transport');\nconst { configure } = require('safe-stable-stringify');\n\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Http extends TransportStream {\n  /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  // eslint-disable-next-line max-statements\n  constructor(options = {}) {\n    super(options);\n\n    this.options = options;\n    this.name = options.name || 'http';\n    this.ssl = !!options.ssl;\n    this.host = options.host || 'localhost';\n    this.port = options.port;\n    this.auth = options.auth;\n    this.path = options.path || '';\n    this.maximumDepth = options.maximumDepth;\n    this.agent = options.agent;\n    this.headers = options.headers || {};\n    this.headers['content-type'] = 'application/json';\n    this.batch = options.batch || false;\n    this.batchInterval = options.batchInterval || 5000;\n    this.batchCount = options.batchCount || 10;\n    this.batchOptions = [];\n    this.batchTimeoutID = -1;\n    this.batchCallback = {};\n\n    if (!this.port) {\n      this.port = this.ssl ? 443 : 80;\n    }\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    this._request(info, null, null, (err, res) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        this.emit('warn', err);\n      } else {\n        this.emit('logged', info);\n      }\n    });\n\n    // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n    // and block more requests from happening?\n    if (callback) {\n      setImmediate(callback);\n    }\n  }\n\n  /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options -  Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @returns {undefined}\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = {\n      method: 'query',\n      params: this.normalizeQuery(options)\n    };\n\n    const auth = options.params.auth || null;\n    delete options.params.auth;\n\n    const path = options.params.path || null;\n    delete options.params.path;\n\n    this._request(options, auth, path, (err, res, body) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        return callback(err);\n      }\n\n      if (typeof body === 'string') {\n        try {\n          body = JSON.parse(body);\n        } catch (e) {\n          return callback(e);\n        }\n      }\n\n      callback(null, body);\n    });\n  }\n\n  /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description\n   */\n  stream(options = {}) {\n    const stream = new Stream();\n    options = {\n      method: 'stream',\n      params: options\n    };\n\n    const path = options.params.path || null;\n    delete options.params.path;\n\n    const auth = options.params.auth || null;\n    delete options.params.auth;\n\n    let buff = '';\n    const req = this._request(options, auth, path);\n\n    stream.destroy = () => req.destroy();\n    req.on('data', data => {\n      data = (buff + data).split(/\\n+/);\n      const l = data.length - 1;\n\n      let i = 0;\n      for (; i < l; i++) {\n        try {\n          stream.emit('log', JSON.parse(data[i]));\n        } catch (e) {\n          stream.emit('error', e);\n        }\n      }\n\n      buff = data[l];\n    });\n    req.on('error', err => stream.emit('error', err));\n\n    return stream;\n  }\n\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n  _request(options, auth, path, callback) {\n    options = options || {};\n\n    auth = auth || this.auth;\n    path = path || this.path || '';\n\n    if (this.batch) {\n      this._doBatch(options, callback, auth, path);\n    } else {\n      this._doRequest(options, callback, auth, path);\n    }\n  }\n\n  /**\n   * Send or memorize the options according to batch configuration\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doBatch(options, callback, auth, path) {\n    this.batchOptions.push(options);\n    if (this.batchOptions.length === 1) {\n      // First message stored, it's time to start the timeout!\n      const me = this;\n      this.batchCallback = callback;\n      this.batchTimeoutID = setTimeout(function () {\n        // timeout is reached, send all messages to endpoint\n        me.batchTimeoutID = -1;\n        me._doBatchRequest(me.batchCallback, auth, path);\n      }, this.batchInterval);\n    }\n    if (this.batchOptions.length === this.batchCount) {\n      // max batch count is reached, send all messages to endpoint\n      this._doBatchRequest(this.batchCallback, auth, path);\n    }\n  }\n\n  /**\n   * Initiate a request with the memorized batch options, stop the batch timeout\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doBatchRequest(callback, auth, path) {\n    if (this.batchTimeoutID > 0) {\n      clearTimeout(this.batchTimeoutID);\n      this.batchTimeoutID = -1;\n    }\n    const batchOptionsCopy = this.batchOptions.slice();\n    this.batchOptions = [];\n    this._doRequest(batchOptionsCopy, callback, auth, path);\n  }\n\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @param {Object?} auth - authentication options\n   * @param {string} path - request path\n   */\n  _doRequest(options, callback, auth, path) {\n    // Prepare options for outgoing HTTP request\n    const headers = Object.assign({}, this.headers);\n    if (auth && auth.bearer) {\n      headers.Authorization = `Bearer ${auth.bearer}`;\n    }\n    const req = (this.ssl ? https : http).request({\n      ...this.options,\n      method: 'POST',\n      host: this.host,\n      port: this.port,\n      path: `/${path.replace(/^\\//, '')}`,\n      headers: headers,\n      auth: (auth && auth.username && auth.password) ? (`${auth.username}:${auth.password}`) : '',\n      agent: this.agent\n    });\n\n    req.on('error', callback);\n    req.on('response', res => (\n      res.on('end', () => callback(null, res)).resume()\n    ));\n    const jsonStringify = configure({\n      ...(this.maximumDepth && { maximumDepth: this.maximumDepth })\n    });\n    req.end(Buffer.from(jsonStringify(options, this.options.replacer), 'utf8'));\n  }\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n","/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst isStream = require('is-stream');\nconst { MESSAGE } = require('triple-beam');\nconst os = require('os');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Stream extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    if (!options.stream || !isStream(options.stream)) {\n      throw new Error('options.stream is required.');\n    }\n\n    // We need to listen for drain events when write() returns false. This can\n    // make node mad at times.\n    this._stream = options.stream;\n    this._stream.setMaxListeners(Infinity);\n    this.isObjectMode = options.stream._writableState.objectMode;\n    this.eol = (typeof options.eol === 'string') ? options.eol : os.EOL;\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n    if (this.isObjectMode) {\n      this._stream.write(info);\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n\n    this._stream.write(`${info[MESSAGE]}${this.eol}`);\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n    return;\n  }\n};\n","/**\n * transports.js: Set of all transports Winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\n/**\n * TODO: add property description.\n * @type {Console}\n */\nObject.defineProperty(exports, 'Console', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return require('./console');\n  }\n});\n\n/**\n * TODO: add property description.\n * @type {File}\n */\nObject.defineProperty(exports, 'File', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return require('./file');\n  }\n});\n\n/**\n * TODO: add property description.\n * @type {Http}\n */\nObject.defineProperty(exports, 'Http', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return require('./http');\n  }\n});\n\n/**\n * TODO: add property description.\n * @type {Stream}\n */\nObject.defineProperty(exports, 'Stream', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return require('./stream');\n  }\n});\n","/**\n * index.js: Default settings for all levels that winston knows about.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst logform = require('logform');\nconst { configs } = require('triple-beam');\n\n/**\n * Export config set for the CLI.\n * @type {Object}\n */\nexports.cli = logform.levels(configs.cli);\n\n/**\n * Export config set for npm.\n * @type {Object}\n */\nexports.npm = logform.levels(configs.npm);\n\n/**\n * Export config set for the syslog.\n * @type {Object}\n */\nexports.syslog = logform.levels(configs.syslog);\n\n/**\n * Hoist addColors from logform where it was refactored into in winston@3.\n * @type {Object}\n */\nexports.addColors = logform.levels;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _isArrayLike = require('./internal/isArrayLike.js');\n\nvar _isArrayLike2 = _interopRequireDefault(_isArrayLike);\n\nvar _breakLoop = require('./internal/breakLoop.js');\n\nvar _breakLoop2 = _interopRequireDefault(_breakLoop);\n\nvar _eachOfLimit = require('./eachOfLimit.js');\n\nvar _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);\n\nvar _once = require('./internal/once.js');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _onlyOnce = require('./internal/onlyOnce.js');\n\nvar _onlyOnce2 = _interopRequireDefault(_onlyOnce);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = (0, _once2.default)(callback);\n    var index = 0,\n        completed = 0,\n        { length } = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return;\n        if (err) {\n            callback(err);\n        } else if (++completed === length || value === _breakLoop2.default) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric(coll, iteratee, callback) {\n    return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dev.json is a file containing a valid json object config for dev environment\n * // dev.json is a file containing a valid json object config for test environment\n * // prod.json is a file containing a valid json object config for prod environment\n * // invalid.json is a file with a malformed json object\n *\n * let configs = {}; //global variable\n * let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};\n * let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};\n *\n * // asynchronous function that reads a json file and parses the contents as json object\n * function parseFile(file, key, callback) {\n *     fs.readFile(file, \"utf8\", function(err, data) {\n *         if (err) return calback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }\n *\n * // Using callbacks\n * async.forEachOf(validConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *     } else {\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile, function (err) {\n *     if (err) {\n *         console.error(err);\n *         // JSON parse error exception\n *     } else {\n *         console.log(configs);\n *     }\n * });\n *\n * // Using Promises\n * async.forEachOf(validConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n *     // configs is now a map of JSON data, e.g.\n *     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n * }).catch( err => {\n *     console.error(err);\n * });\n *\n * //Error handing\n * async.forEachOf(invalidConfigFileMap, parseFile)\n * .then( () => {\n *     console.log(configs);\n * }).catch( err => {\n *     console.error(err);\n *     // JSON parse error exception\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.forEachOf(validConfigFileMap, parseFile);\n *         console.log(configs);\n *         // configs is now a map of JSON data, e.g.\n *         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * //Error handing\n * async () => {\n *     try {\n *         let result = await async.forEachOf(invalidConfigFileMap, parseFile);\n *         console.log(configs);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // JSON parse error exception\n *     }\n * }\n *\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachOf, 3);\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _withoutIndex;\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\nmodule.exports = exports.default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _eachOf = require('./eachOf.js');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _withoutIndex = require('./internal/withoutIndex.js');\n\nvar _withoutIndex2 = _interopRequireDefault(_withoutIndex);\n\nvar _wrapAsync = require('./internal/wrapAsync.js');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nvar _awaitify = require('./internal/awaitify.js');\n\nvar _awaitify2 = _interopRequireDefault(_awaitify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);\n}\n\nexports.default = (0, _awaitify2.default)(eachLimit, 3);\nmodule.exports = exports.default;","'use strict';\n\nvar toString = Object.prototype.toString;\n\n/**\n * Extract names from functions.\n *\n * @param {Function} fn The function who's name we need to extract.\n * @returns {String} The name of the function.\n * @public\n */\nmodule.exports = function name(fn) {\n  if ('string' === typeof fn.displayName && fn.constructor.name) {\n    return fn.displayName;\n  } else if ('string' === typeof fn.name && fn.name) {\n    return fn.name;\n  }\n\n  //\n  // Check to see if the constructor has a name.\n  //\n  if (\n       'object' === typeof fn\n    && fn.constructor\n    && 'string' === typeof fn.constructor.name\n  ) return fn.constructor.name;\n\n  //\n  // toString the given function and attempt to parse it out of it, or determine\n  // the class.\n  //\n  var named = fn.toString()\n    , type = toString.call(fn).slice(8, -1);\n\n  if ('Function' === type) {\n    named = named.substring(named.indexOf('(') + 1, named.indexOf(')'));\n  } else {\n    named = type;\n  }\n\n  return named || 'anonymous';\n};\n","'use strict';\n\nvar name = require('fn.name');\n\n/**\n * Wrap callbacks to prevent double execution.\n *\n * @param {Function} fn Function that should only be called once.\n * @returns {Function} A wrapped callback which prevents multiple executions.\n * @public\n */\nmodule.exports = function one(fn) {\n  var called = 0\n    , value;\n\n  /**\n   * The function that prevents double execution.\n   *\n   * @private\n   */\n  function onetime() {\n    if (called) return value;\n\n    called = 1;\n    value = fn.apply(this, arguments);\n    fn = null;\n\n    return value;\n  }\n\n  //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n  // NOTE: We cannot override the `name` property, as that is `readOnly`\n  // property, so displayName will have to do.\n  //\n  onetime.displayName = name(fn);\n  return onetime;\n};\n","exports.get = function(belowFn) {\n  var oldLimit = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n\n  var dummyObject = {};\n\n  var v8Handler = Error.prepareStackTrace;\n  Error.prepareStackTrace = function(dummyObject, v8StackTrace) {\n    return v8StackTrace;\n  };\n  Error.captureStackTrace(dummyObject, belowFn || exports.get);\n\n  var v8StackTrace = dummyObject.stack;\n  Error.prepareStackTrace = v8Handler;\n  Error.stackTraceLimit = oldLimit;\n\n  return v8StackTrace;\n};\n\nexports.parse = function(err) {\n  if (!err.stack) {\n    return [];\n  }\n\n  var self = this;\n  var lines = err.stack.split('\\n').slice(1);\n\n  return lines\n    .map(function(line) {\n      if (line.match(/^\\s*[-]{4,}$/)) {\n        return self._createParsedCallSite({\n          fileName: line,\n          lineNumber: null,\n          functionName: null,\n          typeName: null,\n          methodName: null,\n          columnNumber: null,\n          'native': null,\n        });\n      }\n\n      var lineMatch = line.match(/at (?:(.+)\\s+\\()?(?:(.+?):(\\d+)(?::(\\d+))?|([^)]+))\\)?/);\n      if (!lineMatch) {\n        return;\n      }\n\n      var object = null;\n      var method = null;\n      var functionName = null;\n      var typeName = null;\n      var methodName = null;\n      var isNative = (lineMatch[5] === 'native');\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        var methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart-1] == '.')\n          methodStart--;\n        if (methodStart > 0) {\n          object = functionName.substr(0, methodStart);\n          method = functionName.substr(methodStart + 1);\n          var objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.substr(objectEnd + 1);\n            object = object.substr(0, objectEnd);\n          }\n        }\n        typeName = null;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = null;\n        functionName = null;\n      }\n\n      var properties = {\n        fileName: lineMatch[2] || null,\n        lineNumber: parseInt(lineMatch[3], 10) || null,\n        functionName: functionName,\n        typeName: typeName,\n        methodName: methodName,\n        columnNumber: parseInt(lineMatch[4], 10) || null,\n        'native': isNative,\n      };\n\n      return self._createParsedCallSite(properties);\n    })\n    .filter(function(callSite) {\n      return !!callSite;\n    });\n};\n\nfunction CallSite(properties) {\n  for (var property in properties) {\n    this[property] = properties[property];\n  }\n}\n\nvar strProperties = [\n  'this',\n  'typeName',\n  'functionName',\n  'methodName',\n  'fileName',\n  'lineNumber',\n  'columnNumber',\n  'function',\n  'evalOrigin'\n];\nvar boolProperties = [\n  'topLevel',\n  'eval',\n  'native',\n  'constructor'\n];\nstrProperties.forEach(function (property) {\n  CallSite.prototype[property] = null;\n  CallSite.prototype['get' + property[0].toUpperCase() + property.substr(1)] = function () {\n    return this[property];\n  }\n});\nboolProperties.forEach(function (property) {\n  CallSite.prototype[property] = false;\n  CallSite.prototype['is' + property[0].toUpperCase() + property.substr(1)] = function () {\n    return this[property];\n  }\n});\n\nexports._createParsedCallSite = function(properties) {\n  return new CallSite(properties);\n};\n","/**\n * exception-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { Writable } = require('readable-stream');\n\n/**\n * TODO: add class description.\n * @type {ExceptionStream}\n * @extends {Writable}\n */\nmodule.exports = class ExceptionStream extends Writable {\n  /**\n   * Constructor function for the ExceptionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.exception` set to true.\n   * @param {!TransportStream} transport - Stream to filter to exceptions\n   */\n  constructor(transport) {\n    super({ objectMode: true });\n\n    if (!transport) {\n      throw new Error('ExceptionStream requires a TransportStream instance.');\n    }\n\n    // Remark (indexzero): we set `handleExceptions` here because it's the\n    // predicate checked in ExceptionHandler.prototype.__getExceptionHandlers\n    this.handleExceptions = true;\n    this.transport = transport;\n  }\n\n  /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `exception` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  _write(info, enc, callback) {\n    if (info.exception) {\n      return this.transport.log(info, callback);\n    }\n\n    callback();\n    return true;\n  }\n};\n","/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst asyncForEach = require('async/forEach');\nconst debug = require('@dabh/diagnostics')('winston:exception');\nconst once = require('one-time');\nconst stackTrace = require('stack-trace');\nconst ExceptionStream = require('./exception-stream');\n\n/**\n * Object for handling uncaughtException events.\n * @type {ExceptionHandler}\n */\nmodule.exports = class ExceptionHandler {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  constructor(logger) {\n    if (!logger) {\n      throw new Error('Logger is required to handle exceptions');\n    }\n\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n\n  /**\n   * Handles `uncaughtException` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n  handle(...args) {\n    args.forEach(arg => {\n      if (Array.isArray(arg)) {\n        return arg.forEach(handler => this._addHandler(handler));\n      }\n\n      this._addHandler(arg);\n    });\n\n    if (!this.catcher) {\n      this.catcher = this._uncaughtException.bind(this);\n      process.on('uncaughtException', this.catcher);\n    }\n  }\n\n  /**\n   * Removes any handlers to `uncaughtException` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */\n  unhandle() {\n    if (this.catcher) {\n      process.removeListener('uncaughtException', this.catcher);\n      this.catcher = false;\n\n      Array.from(this.handlers.values())\n        .forEach(wrapper => this.logger.unpipe(wrapper));\n    }\n  }\n\n  /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getAllInfo(err) {\n    let message = null;\n    if (err) {\n      message = typeof err === 'string' ? err : err.message;\n    }\n\n    return {\n      error: err,\n      // TODO (indexzero): how do we configure this?\n      level: 'error',\n      message: [\n        `uncaughtException: ${(message || '(no error message)')}`,\n        err && err.stack || '  No stack trace'\n      ].join('\\n'),\n      stack: err && err.stack,\n      exception: true,\n      date: new Date().toString(),\n      process: this.getProcessInfo(),\n      os: this.getOsInfo(),\n      trace: this.getTrace(err)\n    };\n  }\n\n  /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getProcessInfo() {\n    return {\n      pid: process.pid,\n      uid: process.getuid ? process.getuid() : null,\n      gid: process.getgid ? process.getgid() : null,\n      cwd: process.cwd(),\n      execPath: process.execPath,\n      version: process.version,\n      argv: process.argv,\n      memoryUsage: process.memoryUsage()\n    };\n  }\n\n  /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getOsInfo() {\n    return {\n      loadavg: os.loadavg(),\n      uptime: os.uptime()\n    };\n  }\n\n  /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getTrace(err) {\n    const trace = err ? stackTrace.parse(err) : stackTrace.get();\n    return trace.map(site => {\n      return {\n        column: site.getColumnNumber(),\n        file: site.getFileName(),\n        function: site.getFunctionName(),\n        line: site.getLineNumber(),\n        method: site.getMethodName(),\n        native: site.isNative()\n      };\n    });\n  }\n\n  /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */\n  _addHandler(handler) {\n    if (!this.handlers.has(handler)) {\n      handler.handleExceptions = true;\n      const wrapper = new ExceptionStream(handler);\n      this.handlers.set(handler, wrapper);\n      this.logger.pipe(wrapper);\n    }\n  }\n\n  /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  _uncaughtException(err) {\n    const info = this.getAllInfo(err);\n    const handlers = this._getExceptionHandlers();\n    // Calculate if we should exit on this error\n    let doExit = typeof this.logger.exitOnError === 'function'\n      ? this.logger.exitOnError(err)\n      : this.logger.exitOnError;\n    let timeout;\n\n    if (!handlers.length && doExit) {\n      // eslint-disable-next-line no-console\n      console.warn('winston: exitOnError cannot be true with no exception handlers.');\n      // eslint-disable-next-line no-console\n      console.warn('winston: not exiting process.');\n      doExit = false;\n    }\n\n    function gracefulExit() {\n      debug('doExit', doExit);\n      debug('process._exiting', process._exiting);\n\n      if (doExit && !process._exiting) {\n        // Remark: Currently ignoring any exceptions from transports when\n        // catching uncaught exceptions.\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        // eslint-disable-next-line no-process-exit\n        process.exit(1);\n      }\n    }\n\n    if (!handlers || handlers.length === 0) {\n      return process.nextTick(gracefulExit);\n    }\n\n    // Log to all transports attempting to listen for when they are completed.\n    asyncForEach(handlers, (handler, next) => {\n      const done = once(next);\n      const transport = handler.transport || handler;\n\n      // Debug wrapping so that we can inspect what's going on under the covers.\n      function onDone(event) {\n        return () => {\n          debug(event);\n          done();\n        };\n      }\n\n      transport._ending = true;\n      transport.once('finish', onDone('finished'));\n      transport.once('error', onDone('error'));\n    }, () => doExit && gracefulExit());\n\n    this.logger.log(info);\n\n    // If exitOnError is true, then only allow the logging of exceptions to\n    // take up to `3000ms`.\n    if (doExit) {\n      timeout = setTimeout(gracefulExit, 3000);\n    }\n  }\n\n  /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */\n  _getExceptionHandlers() {\n    // Remark (indexzero): since `logger.transports` returns all of the pipes\n    // from the _readableState of the stream we actually get the join of the\n    // explicit handlers and the implicit transports with\n    // `handleExceptions: true`\n    return this.logger.transports.filter(wrap => {\n      const transport = wrap.transport || wrap;\n      return transport.handleExceptions;\n    });\n  }\n};\n","/**\n * rejection-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { Writable } = require('readable-stream');\n\n/**\n * TODO: add class description.\n * @type {RejectionStream}\n * @extends {Writable}\n */\nmodule.exports = class RejectionStream extends Writable {\n  /**\n   * Constructor function for the RejectionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.rejection` set to true.\n   * @param {!TransportStream} transport - Stream to filter to rejections\n   */\n  constructor(transport) {\n    super({ objectMode: true });\n\n    if (!transport) {\n      throw new Error('RejectionStream requires a TransportStream instance.');\n    }\n\n    this.handleRejections = true;\n    this.transport = transport;\n  }\n\n  /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `rejection` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  _write(info, enc, callback) {\n    if (info.rejection) {\n      return this.transport.log(info, callback);\n    }\n\n    callback();\n    return true;\n  }\n};\n","/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst asyncForEach = require('async/forEach');\nconst debug = require('@dabh/diagnostics')('winston:rejection');\nconst once = require('one-time');\nconst stackTrace = require('stack-trace');\nconst RejectionStream = require('./rejection-stream');\n\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */\nmodule.exports = class RejectionHandler {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  constructor(logger) {\n    if (!logger) {\n      throw new Error('Logger is required to handle rejections');\n    }\n\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n\n  /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n  handle(...args) {\n    args.forEach(arg => {\n      if (Array.isArray(arg)) {\n        return arg.forEach(handler => this._addHandler(handler));\n      }\n\n      this._addHandler(arg);\n    });\n\n    if (!this.catcher) {\n      this.catcher = this._unhandledRejection.bind(this);\n      process.on('unhandledRejection', this.catcher);\n    }\n  }\n\n  /**\n   * Removes any handlers to `unhandledRejection` events for the current\n   * process. This does not modify the state of the `this.handlers` set.\n   * @returns {undefined}\n   */\n  unhandle() {\n    if (this.catcher) {\n      process.removeListener('unhandledRejection', this.catcher);\n      this.catcher = false;\n\n      Array.from(this.handlers.values()).forEach(wrapper =>\n        this.logger.unpipe(wrapper)\n      );\n    }\n  }\n\n  /**\n   * TODO: add method description\n   * @param {Error} err - Error to get information about.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getAllInfo(err) {\n    let message = null;\n    if (err) {\n      message = typeof err === 'string' ? err : err.message;\n    }\n\n    return {\n      error: err,\n      // TODO (indexzero): how do we configure this?\n      level: 'error',\n      message: [\n        `unhandledRejection: ${message || '(no error message)'}`,\n        err && err.stack || '  No stack trace'\n      ].join('\\n'),\n      stack: err && err.stack,\n      rejection: true,\n      date: new Date().toString(),\n      process: this.getProcessInfo(),\n      os: this.getOsInfo(),\n      trace: this.getTrace(err)\n    };\n  }\n\n  /**\n   * Gets all relevant process information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getProcessInfo() {\n    return {\n      pid: process.pid,\n      uid: process.getuid ? process.getuid() : null,\n      gid: process.getgid ? process.getgid() : null,\n      cwd: process.cwd(),\n      execPath: process.execPath,\n      version: process.version,\n      argv: process.argv,\n      memoryUsage: process.memoryUsage()\n    };\n  }\n\n  /**\n   * Gets all relevant OS information for the currently running process.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getOsInfo() {\n    return {\n      loadavg: os.loadavg(),\n      uptime: os.uptime()\n    };\n  }\n\n  /**\n   * Gets a stack trace for the specified error.\n   * @param {mixed} err - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   */\n  getTrace(err) {\n    const trace = err ? stackTrace.parse(err) : stackTrace.get();\n    return trace.map(site => {\n      return {\n        column: site.getColumnNumber(),\n        file: site.getFileName(),\n        function: site.getFunctionName(),\n        line: site.getLineNumber(),\n        method: site.getMethodName(),\n        native: site.isNative()\n      };\n    });\n  }\n\n  /**\n   * Helper method to add a transport as an exception handler.\n   * @param {Transport} handler - The transport to add as an exception handler.\n   * @returns {void}\n   */\n  _addHandler(handler) {\n    if (!this.handlers.has(handler)) {\n      handler.handleRejections = true;\n      const wrapper = new RejectionStream(handler);\n      this.handlers.set(handler, wrapper);\n      this.logger.pipe(wrapper);\n    }\n  }\n\n  /**\n   * Logs all relevant information around the `err` and exits the current\n   * process.\n   * @param {Error} err - Error to handle\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  _unhandledRejection(err) {\n    const info = this.getAllInfo(err);\n    const handlers = this._getRejectionHandlers();\n    // Calculate if we should exit on this error\n    let doExit =\n      typeof this.logger.exitOnError === 'function'\n        ? this.logger.exitOnError(err)\n        : this.logger.exitOnError;\n    let timeout;\n\n    if (!handlers.length && doExit) {\n      // eslint-disable-next-line no-console\n      console.warn('winston: exitOnError cannot be true with no rejection handlers.');\n      // eslint-disable-next-line no-console\n      console.warn('winston: not exiting process.');\n      doExit = false;\n    }\n\n    function gracefulExit() {\n      debug('doExit', doExit);\n      debug('process._exiting', process._exiting);\n\n      if (doExit && !process._exiting) {\n        // Remark: Currently ignoring any rejections from transports when\n        // catching unhandled rejections.\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        // eslint-disable-next-line no-process-exit\n        process.exit(1);\n      }\n    }\n\n    if (!handlers || handlers.length === 0) {\n      return process.nextTick(gracefulExit);\n    }\n\n    // Log to all transports attempting to listen for when they are completed.\n    asyncForEach(\n      handlers,\n      (handler, next) => {\n        const done = once(next);\n        const transport = handler.transport || handler;\n\n        // Debug wrapping so that we can inspect what's going on under the covers.\n        function onDone(event) {\n          return () => {\n            debug(event);\n            done();\n          };\n        }\n\n        transport._ending = true;\n        transport.once('finish', onDone('finished'));\n        transport.once('error', onDone('error'));\n      },\n      () => doExit && gracefulExit()\n    );\n\n    this.logger.log(info);\n\n    // If exitOnError is true, then only allow the logging of exceptions to\n    // take up to `3000ms`.\n    if (doExit) {\n      timeout = setTimeout(gracefulExit, 3000);\n    }\n  }\n\n  /**\n   * Returns the list of transports and exceptionHandlers for this instance.\n   * @returns {Array} - List of transports and exceptionHandlers for this\n   * instance.\n   * @private\n   */\n  _getRejectionHandlers() {\n    // Remark (indexzero): since `logger.transports` returns all of the pipes\n    // from the _readableState of the stream we actually get the join of the\n    // explicit handlers and the implicit transports with\n    // `handleRejections: true`\n    return this.logger.transports.filter(wrap => {\n      const transport = wrap.transport || wrap;\n      return transport.handleRejections;\n    });\n  }\n};\n","/**\n * profiler.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n/**\n * TODO: add class description.\n * @type {Profiler}\n * @private\n */\nclass Profiler {\n  /**\n   * Constructor function for the Profiler instance used by\n   * `Logger.prototype.startTimer`. When done is called the timer will finish\n   * and log the duration.\n   * @param {!Logger} logger - TODO: add param description.\n   * @private\n   */\n  constructor(logger) {\n    const Logger = require('./logger');\n    if (typeof logger !== 'object' || Array.isArray(logger) || !(logger instanceof Logger)) {\n      throw new Error('Logger is required for profiling');\n    } else {\n      this.logger = logger;\n      this.start = Date.now();\n    }\n  }\n\n  /**\n   * Ends the current timer (i.e. Profiler) instance and logs the `msg` along\n   * with the duration since creation.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  done(...args) {\n    if (typeof args[args.length - 1] === 'function') {\n      // eslint-disable-next-line no-console\n      console.warn('Callback function no longer supported as of winston@3.0.0');\n      args.pop();\n    }\n\n    const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n    info.level = info.level || 'info';\n    info.durationMs = (Date.now()) - this.start;\n\n    return this.logger.write(info);\n  }\n};\n\nmodule.exports = Profiler;\n","/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { Stream, Transform } = require('readable-stream');\nconst asyncForEach = require('async/forEach');\nconst { LEVEL, SPLAT } = require('triple-beam');\nconst isStream = require('is-stream');\nconst ExceptionHandler = require('./exception-handler');\nconst RejectionHandler = require('./rejection-handler');\nconst LegacyTransportStream = require('winston-transport/legacy');\nconst Profiler = require('./profiler');\nconst { warn } = require('./common');\nconst config = require('./config');\n\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\nconst formatRegExp = /%[scdjifoO%]/g;\n\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {Transform}\n */\nclass Logger extends Transform {\n  /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */\n  constructor(options) {\n    super({ objectMode: true });\n    this.configure(options);\n  }\n\n  child(defaultRequestMetadata) {\n    const logger = this;\n    return Object.create(logger, {\n      write: {\n        value: function (info) {\n          const infoClone = Object.assign(\n            {},\n            defaultRequestMetadata,\n            info\n          );\n\n          // Object.assign doesn't copy inherited Error\n          // properties so we have to do that explicitly\n          //\n          // Remark (indexzero): we should remove this\n          // since the errors format will handle this case.\n          //\n          if (info instanceof Error) {\n            infoClone.stack = info.stack;\n            infoClone.message = info.message;\n          }\n\n          logger.write(infoClone);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */\n  configure({\n    silent,\n    format,\n    defaultMeta,\n    levels,\n    level = 'info',\n    exitOnError = true,\n    transports,\n    colors,\n    emitErrs,\n    formatters,\n    padLevels,\n    rewriters,\n    stripColors,\n    exceptionHandlers,\n    rejectionHandlers\n  } = {}) {\n    // Reset transports if we already have them\n    if (this.transports.length) {\n      this.clear();\n    }\n\n    this.silent = silent;\n    this.format = format || this.format || require('logform/json')();\n\n    this.defaultMeta = defaultMeta || null;\n    // Hoist other options onto this instance.\n    this.levels = levels || this.levels || config.npm.levels;\n    this.level = level;\n    if (this.exceptions) {\n      this.exceptions.unhandle();\n    }\n    if (this.rejections) {\n      this.rejections.unhandle();\n    }\n    this.exceptions = new ExceptionHandler(this);\n    this.rejections = new RejectionHandler(this);\n    this.profilers = {};\n    this.exitOnError = exitOnError;\n\n    // Add all transports we have been provided.\n    if (transports) {\n      transports = Array.isArray(transports) ? transports : [transports];\n      transports.forEach(transport => this.add(transport));\n    }\n\n    if (\n      colors ||\n      emitErrs ||\n      formatters ||\n      padLevels ||\n      rewriters ||\n      stripColors\n    ) {\n      throw new Error(\n        [\n          '{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.',\n          'Use a custom winston.format(function) instead.',\n          'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\n        ].join('\\n')\n      );\n    }\n\n    if (exceptionHandlers) {\n      this.exceptions.handle(exceptionHandlers);\n    }\n    if (rejectionHandlers) {\n      this.rejections.handle(rejectionHandlers);\n    }\n  }\n\n  isLevelEnabled(level) {\n    const givenLevelValue = getLevelValue(this.levels, level);\n    if (givenLevelValue === null) {\n      return false;\n    }\n\n    const configuredLevelValue = getLevelValue(this.levels, this.level);\n    if (configuredLevelValue === null) {\n      return false;\n    }\n\n    if (!this.transports || this.transports.length === 0) {\n      return configuredLevelValue >= givenLevelValue;\n    }\n\n    const index = this.transports.findIndex(transport => {\n      let transportLevelValue = getLevelValue(this.levels, transport.level);\n      if (transportLevelValue === null) {\n        transportLevelValue = configuredLevelValue;\n      }\n      return transportLevelValue >= givenLevelValue;\n    });\n    return index !== -1;\n  }\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Ensure backwards compatibility with a `log` method\n   * @param {mixed} level - Level the log message is written at.\n   * @param {mixed} msg - TODO: add param description.\n   * @param {mixed} meta - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   *\n   * @example\n   *    // Supports the existing API:\n   *    logger.log('info', 'Hello world', { custom: true });\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\n   *\n   *    // Requires winston.format.splat()\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n   *\n   *    // And the new API with a single JSON literal:\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n   *\n   *    // Also requires winston.format.splat()\n   *    logger.log({\n   *      level: 'info',\n   *      message: '%s %d%%',\n   *      [SPLAT]: ['A string', 50],\n   *      meta: { thisIsMeta: true }\n   *    });\n   *\n   */\n  /* eslint-enable valid-jsdoc */\n  log(level, msg, ...splat) {\n    // eslint-disable-line max-params\n    // Optimize for the hotpath of logging JSON literals\n    if (arguments.length === 1) {\n      // Yo dawg, I heard you like levels ... seriously ...\n      // In this context the LHS `level` here is actually the `info` so read\n      // this as: info[LEVEL] = info.level;\n      level[LEVEL] = level.level;\n      this._addDefaultMeta(level);\n      this.write(level);\n      return this;\n    }\n\n    // Slightly less hotpath, but worth optimizing for.\n    if (arguments.length === 2) {\n      if (msg && typeof msg === 'object') {\n        msg[LEVEL] = msg.level = level;\n        this._addDefaultMeta(msg);\n        this.write(msg);\n        return this;\n      }\n\n      msg = { [LEVEL]: level, level, message: msg };\n      this._addDefaultMeta(msg);\n      this.write(msg);\n      return this;\n    }\n\n    const [meta] = splat;\n    if (typeof meta === 'object' && meta !== null) {\n      // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n      const tokens = msg && msg.match && msg.match(formatRegExp);\n\n      if (!tokens) {\n        const info = Object.assign({}, this.defaultMeta, meta, {\n          [LEVEL]: level,\n          [SPLAT]: splat,\n          level,\n          message: msg\n        });\n\n        if (meta.message) info.message = `${info.message} ${meta.message}`;\n        if (meta.stack) info.stack = meta.stack;\n\n        this.write(info);\n        return this;\n      }\n    }\n\n    this.write(Object.assign({}, this.defaultMeta, {\n      [LEVEL]: level,\n      [SPLAT]: splat,\n      level,\n      message: msg\n    }));\n\n    return this;\n  }\n\n  /**\n   * Pushes data so that it can be picked up by all of our pipe targets.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - Continues stream processing.\n   * @returns {undefined}\n   * @private\n   */\n  _transform(info, enc, callback) {\n    if (this.silent) {\n      return callback();\n    }\n\n    // [LEVEL] is only soft guaranteed to be set here since we are a proper\n    // stream. It is likely that `info` came in through `.log(info)` or\n    // `.info(info)`. If it is not defined, however, define it.\n    // This LEVEL symbol is provided by `triple-beam` and also used in:\n    // - logform\n    // - winston-transport\n    // - abstract-winston-transport\n    if (!info[LEVEL]) {\n      info[LEVEL] = info.level;\n    }\n\n    // Remark: really not sure what to do here, but this has been reported as\n    // very confusing by pre winston@2.0.0 users as quite confusing when using\n    // custom levels.\n    if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Unknown logger level: %s', info[LEVEL]);\n    }\n\n    // Remark: not sure if we should simply error here.\n    if (!this._readableState.pipes) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '[winston] Attempt to write logs with no transports, which can increase memory usage: %j',\n        info\n      );\n    }\n\n    // Here we write to the `format` pipe-chain, which on `readable` above will\n    // push the formatted `info` Object onto the buffer for this instance. We trap\n    // (and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      this.push(this.format.transform(info, this.format.options));\n    } finally {\n      this._writableState.sync = false;\n      // eslint-disable-next-line callback-return\n      callback();\n    }\n  }\n\n  /**\n   * Delays the 'finish' event until all transport pipe targets have\n   * also emitted 'finish' or are already finished.\n   * @param {mixed} callback - Continues stream processing.\n   */\n  _final(callback) {\n    const transports = this.transports.slice();\n    asyncForEach(\n      transports,\n      (transport, next) => {\n        if (!transport || transport.finished) return setImmediate(next);\n        transport.once('finish', next);\n        transport.end();\n      },\n      callback\n    );\n  }\n\n  /**\n   * Adds the transport to this logger instance by piping to it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  add(transport) {\n    // Support backwards compatibility with all existing `winston < 3.x.x`\n    // transports which meet one of two criteria:\n    // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n    // 2. They expose a log method which has a length greater than 2 (i.e. more then\n    //    just `log(info, callback)`.\n    const target =\n      !isStream(transport) || transport.log.length > 2\n        ? new LegacyTransportStream({ transport })\n        : transport;\n\n    if (!target._writableState || !target._writableState.objectMode) {\n      throw new Error(\n        'Transports must WritableStreams in objectMode. Set { objectMode: true }.'\n      );\n    }\n\n    // Listen for the `error` event and the `warn` event on the new Transport.\n    this._onEvent('error', target);\n    this._onEvent('warn', target);\n    this.pipe(target);\n\n    if (transport.handleExceptions) {\n      this.exceptions.handle();\n    }\n\n    if (transport.handleRejections) {\n      this.rejections.handle();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the transport from this logger instance by unpiping from it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  remove(transport) {\n    if (!transport) return this;\n    let target = transport;\n    if (!isStream(transport) || transport.log.length > 2) {\n      target = this.transports.filter(\n        match => match.transport === transport\n      )[0];\n    }\n\n    if (target) {\n      this.unpipe(target);\n    }\n    return this;\n  }\n\n  /**\n   * Removes all transports from this logger instance.\n   * @returns {Logger} - TODO: add return description.\n   */\n  clear() {\n    this.unpipe();\n    return this;\n  }\n\n  /**\n   * Cleans up resources (streams, event listeners) for all transports\n   * associated with this instance (if necessary).\n   * @returns {Logger} - TODO: add return description.\n   */\n  close() {\n    this.exceptions.unhandle();\n    this.rejections.unhandle();\n    this.clear();\n    this.emit('close');\n    return this;\n  }\n\n  /**\n   * Sets the `target` levels specified on this instance.\n   * @param {Object} Target levels to use on this instance.\n   */\n  setLevels() {\n    warn.deprecated('setLevels');\n  }\n\n  /**\n   * Queries the all transports for this instance with the specified `options`.\n   * This will aggregate each transport's results into one object containing\n   * a property per transport.\n   * @param {Object} options - Query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    const results = {};\n    const queryObject = Object.assign({}, options.query || {});\n\n    // Helper function to query a single transport\n    function queryTransport(transport, next) {\n      if (options.query && typeof transport.formatQuery === 'function') {\n        options.query = transport.formatQuery(queryObject);\n      }\n\n      transport.query(options, (err, res) => {\n        if (err) {\n          return next(err);\n        }\n\n        if (typeof transport.formatResults === 'function') {\n          res = transport.formatResults(res, options.format);\n        }\n\n        next(null, res);\n      });\n    }\n\n    // Helper function to accumulate the results from `queryTransport` into\n    // the `results`.\n    function addResults(transport, next) {\n      queryTransport(transport, (err, result) => {\n        // queryTransport could potentially invoke the callback multiple times\n        // since Transport code can be unpredictable.\n        if (next) {\n          result = err || result;\n          if (result) {\n            results[transport.name] = result;\n          }\n\n          // eslint-disable-next-line callback-return\n          next();\n        }\n\n        next = null;\n      });\n    }\n\n    // Iterate over the transports in parallel setting the appropriate key in\n    // the `results`.\n    asyncForEach(\n      this.transports.filter(transport => !!transport.query),\n      addResults,\n      () => callback(null, results)\n    );\n  }\n\n  /**\n   * Returns a log stream for all transports. Options object is optional.\n   * @param{Object} options={} - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   */\n  stream(options = {}) {\n    const out = new Stream();\n    const streams = [];\n\n    out._streams = streams;\n    out.destroy = () => {\n      let i = streams.length;\n      while (i--) {\n        streams[i].destroy();\n      }\n    };\n\n    // Create a list of all transports for this instance.\n    this.transports\n      .filter(transport => !!transport.stream)\n      .forEach(transport => {\n        const str = transport.stream(options);\n        if (!str) {\n          return;\n        }\n\n        streams.push(str);\n\n        str.on('log', log => {\n          log.transport = log.transport || [];\n          log.transport.push(transport.name);\n          out.emit('log', log);\n        });\n\n        str.on('error', err => {\n          err.transport = err.transport || [];\n          err.transport.push(transport.name);\n          out.emit('error', err);\n        });\n      });\n\n    return out;\n  }\n\n  /**\n   * Returns an object corresponding to a specific timing. When done is called\n   * the timer will finish and log the duration. e.g.:\n   * @returns {Profile} - TODO: add return description.\n   * @example\n   *    const timer = winston.startTimer()\n   *    setTimeout(() => {\n   *      timer.done({\n   *        message: 'Logging message'\n   *      });\n   *    }, 1000);\n   */\n  startTimer() {\n    return new Profiler(this);\n  }\n\n  /**\n   * Tracks the time inbetween subsequent calls to this method with the same\n   * `id` parameter. The second call to this method will log the difference in\n   * milliseconds along with the message.\n   * @param {string} id Unique id of the profiler\n   * @returns {Logger} - TODO: add return description.\n   */\n  profile(id, ...args) {\n    const time = Date.now();\n    if (this.profilers[id]) {\n      const timeEnd = this.profilers[id];\n      delete this.profilers[id];\n\n      // Attempt to be kind to users if they are still using older APIs.\n      if (typeof args[args.length - 2] === 'function') {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Callback function no longer supported as of winston@3.0.0'\n        );\n        args.pop();\n      }\n\n      // Set the duration property of the metadata\n      const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n      info.level = info.level || 'info';\n      info.durationMs = time - timeEnd;\n      info.message = info.message || id;\n      return this.write(info);\n    }\n\n    this.profilers[id] = time;\n    return this;\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  handleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()'\n    );\n    this.exceptions.handle(...args);\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  unhandleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()'\n    );\n    this.exceptions.unhandle(...args);\n  }\n\n  /**\n   * Throw a more meaningful deprecation notice\n   * @throws {Error} - TODO: add throws description.\n   */\n  cli() {\n    throw new Error(\n      [\n        'Logger.cli() was removed in winston@3.0.0',\n        'Use a custom winston.formats.cli() instead.',\n        'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\n      ].join('\\n')\n    );\n  }\n\n  /**\n   * Bubbles the `event` that occured on the specified `transport` up\n   * from this instance.\n   * @param {string} event - The event that occured\n   * @param {Object} transport - Transport on which the event occured\n   * @private\n   */\n  _onEvent(event, transport) {\n    function transportEvent(err) {\n      // https://github.com/winstonjs/winston/issues/1364\n      if (event === 'error' && !this.transports.includes(transport)) {\n        this.add(transport);\n      }\n      this.emit(event, err, transport);\n    }\n\n    if (!transport['__winston' + event]) {\n      transport['__winston' + event] = transportEvent.bind(this);\n      transport.on(event, transport['__winston' + event]);\n    }\n  }\n\n  _addDefaultMeta(msg) {\n    if (this.defaultMeta) {\n      Object.assign(msg, this.defaultMeta);\n    }\n  }\n}\n\nfunction getLevelValue(levels, level) {\n  const value = levels[level];\n  if (!value && value !== 0) {\n    return null;\n  }\n  return value;\n}\n\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */\nObject.defineProperty(Logger.prototype, 'transports', {\n  configurable: false,\n  enumerable: true,\n  get() {\n    const { pipes } = this._readableState;\n    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;\n  }\n});\n\nmodule.exports = Logger;\n","/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { LEVEL } = require('triple-beam');\nconst config = require('./config');\nconst Logger = require('./logger');\nconst debug = require('@dabh/diagnostics')('winston:create-logger');\n\nfunction isLevelEnabledFunctionName(level) {\n  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';\n}\n\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */\nmodule.exports = function (opts = {}) {\n  //\n  // Default levels: npm\n  //\n  opts.levels = opts.levels || config.npm.levels;\n\n  /**\n   * DerivedLogger to attach the logs level methods.\n   * @type {DerivedLogger}\n   * @extends {Logger}\n   */\n  class DerivedLogger extends Logger {\n    /**\n     * Create a new class derived logger for which the levels can be attached to\n     * the prototype of. This is a V8 optimization that is well know to increase\n     * performance of prototype functions.\n     * @param {!Object} options - Options for the created logger.\n     */\n    constructor(options) {\n      super(options);\n    }\n  }\n\n  const logger = new DerivedLogger(opts);\n\n  //\n  // Create the log level methods for the derived logger.\n  //\n  Object.keys(opts.levels).forEach(function (level) {\n    debug('Define prototype method for \"%s\"', level);\n    if (level === 'log') {\n      // eslint-disable-next-line no-console\n      console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n      return;\n    }\n\n    //\n    // Define prototype methods for each log level e.g.:\n    // logger.log('info', msg) implies these methods are defined:\n    // - logger.info(msg)\n    // - logger.isInfoEnabled()\n    //\n    // Remark: to support logger.child this **MUST** be a function\n    // so it'll always be called on the instance instead of a fixed\n    // place in the prototype chain.\n    //\n    DerivedLogger.prototype[level] = function (...args) {\n      // Prefer any instance scope, but default to \"root\" logger\n      const self = this || logger;\n\n      // Optimize the hot-path which is the single object.\n      if (args.length === 1) {\n        const [msg] = args;\n        const info = msg && msg.message && msg || { message: msg };\n        info.level = info[LEVEL] = level;\n        self._addDefaultMeta(info);\n        self.write(info);\n        return (this || logger);\n      }\n\n      // When provided nothing assume the empty string\n      if (args.length === 0) {\n        self.log(level, '');\n        return self;\n      }\n\n      // Otherwise build argument list which could potentially conform to\n      // either:\n      // . v3 API: log(obj)\n      // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n      return self.log(level, ...args);\n    };\n\n    DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function () {\n      return (this || logger).isLevelEnabled(level);\n    };\n  });\n\n  return logger;\n};\n","/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst createLogger = require('./create-logger');\n\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\nmodule.exports = class Container {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  constructor(options = {}) {\n    this.loggers = new Map();\n    this.options = options;\n  }\n\n  /**\n   * Retrieves a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  add(id, options) {\n    if (!this.loggers.has(id)) {\n      // Remark: Simple shallow clone for configuration options in case we pass\n      // in instantiated protoypal objects\n      options = Object.assign({}, options || this.options);\n      const existing = options.transports || this.options.transports;\n\n      // Remark: Make sure if we have an array of transports we slice it to\n      // make copies of those references.\n      if (existing) {\n        options.transports = Array.isArray(existing) ? existing.slice() : [existing];\n      } else {\n        options.transports = [];\n      }\n\n      const logger = createLogger(options);\n      logger.on('close', () => this._delete(id));\n      this.loggers.set(id, logger);\n    }\n\n    return this.loggers.get(id);\n  }\n\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If\n   * an instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  get(id, options) {\n    return this.add(id, options);\n  }\n\n  /**\n   * Check if the container has a logger with the id.\n   * @param {?string} id - The id of the Logger instance to find.\n   * @returns {boolean} - Boolean value indicating if this instance has a\n   * logger with the specified `id`.\n   */\n  has(id) {\n    return !!this.loggers.has(id);\n  }\n\n  /**\n   * Closes a `Logger` instance with the specified `id` if it exists.\n   * If no `id` is supplied then all Loggers are closed.\n   * @param {?string} id - The id of the Logger instance to close.\n   * @returns {undefined}\n   */\n  close(id) {\n    if (id) {\n      return this._removeLogger(id);\n    }\n\n    this.loggers.forEach((val, key) => this._removeLogger(key));\n  }\n\n  /**\n   * Remove a logger based on the id.\n   * @param {!string} id - The id of the logger to remove.\n   * @returns {undefined}\n   * @private\n   */\n  _removeLogger(id) {\n    if (!this.loggers.has(id)) {\n      return;\n    }\n\n    const logger = this.loggers.get(id);\n    logger.close();\n    this._delete(id);\n  }\n\n  /**\n   * Deletes a `Logger` instance with the specified `id`.\n   * @param {!string} id - The id of the Logger instance to delete from\n   * container.\n   * @returns {undefined}\n   * @private\n   */\n  _delete(id) {\n    this.loggers.delete(id);\n  }\n};\n","/**\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst logform = require('logform');\nconst { warn } = require('./winston/common');\n\n/**\n * Expose version. Use `require` method for `webpack` support.\n * @type {string}\n */\nexports.version = require('../package.json').version;\n/**\n * Include transports defined by default by winston\n * @type {Array}\n */\nexports.transports = require('./winston/transports');\n/**\n * Expose utility methods\n * @type {Object}\n */\nexports.config = require('./winston/config');\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\nexports.addColors = logform.levels;\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\nexports.format = logform.format;\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */\nexports.createLogger = require('./winston/create-logger');\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */\nexports.Logger = require('./winston/logger');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\nexports.ExceptionHandler = require('./winston/exception-handler');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\nexports.RejectionHandler = require('./winston/rejection-handler');\n/**\n * Expose core Logging-related prototypes.\n * @type {Container}\n */\nexports.Container = require('./winston/container');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\nexports.Transport = require('winston-transport');\n/**\n * We create and expose a default `Container` to `winston.loggers` so that the\n * programmer may manage multiple `winston.Logger` instances without any\n * additional overhead.\n * @example\n *   // some-file1.js\n *   const logger = require('winston').loggers.get('something');\n *\n *   // some-file2.js\n *   const logger = require('winston').loggers.get('something');\n */\nexports.loggers = new exports.Container();\n\n/**\n * We create and expose a 'defaultLogger' so that the programmer may do the\n * following without the need to create an instance of winston.Logger directly:\n * @example\n *   const winston = require('winston');\n *   winston.log('info', 'some message');\n *   winston.error('some error');\n */\nconst defaultLogger = exports.createLogger();\n\n// Pass through the target methods onto `winston.\nObject.keys(exports.config.npm.levels)\n  .concat([\n    'log',\n    'query',\n    'stream',\n    'add',\n    'remove',\n    'clear',\n    'profile',\n    'startTimer',\n    'handleExceptions',\n    'unhandleExceptions',\n    'handleRejections',\n    'unhandleRejections',\n    'configure',\n    'child'\n  ])\n  .forEach(\n    method => (exports[method] = (...args) => defaultLogger[method](...args))\n  );\n\n/**\n * Define getter / setter for the default logger level which need to be exposed\n * by winston.\n * @type {string}\n */\nObject.defineProperty(exports, 'level', {\n  get() {\n    return defaultLogger.level;\n  },\n  set(val) {\n    defaultLogger.level = val;\n  }\n});\n\n/**\n * Define getter for `exceptions` which replaces `handleExceptions` and\n * `unhandleExceptions`.\n * @type {Object}\n */\nObject.defineProperty(exports, 'exceptions', {\n  get() {\n    return defaultLogger.exceptions;\n  }\n});\n\n/**\n * Define getter for `rejections` which replaces `handleRejections` and\n * `unhandleRejections`.\n * @type {Object}\n */\nObject.defineProperty(exports, 'rejections', {\n  get() {\n    return defaultLogger.rejections;\n  }\n});\n\n/**\n * Define getters / setters for appropriate properties of the default logger\n * which need to be exposed by winston.\n * @type {Logger}\n */\n['exitOnError'].forEach(prop => {\n  Object.defineProperty(exports, prop, {\n    get() {\n      return defaultLogger[prop];\n    },\n    set(val) {\n      defaultLogger[prop] = val;\n    }\n  });\n});\n\n/**\n * The default transports and exceptionHandlers for the default winston logger.\n * @type {Object}\n */\nObject.defineProperty(exports, 'default', {\n  get() {\n    return {\n      exceptionHandlers: defaultLogger.exceptionHandlers,\n      rejectionHandlers: defaultLogger.rejectionHandlers,\n      transports: defaultLogger.transports\n    };\n  }\n});\n\n// Have friendlier breakage notices for properties that were exposed by default\n// on winston < 3.0.\nwarn.deprecated(exports, 'setLevels');\nwarn.forFunctions(exports, 'useFormat', ['cli']);\nwarn.forProperties(exports, 'useFormat', ['padLevels', 'stripColors']);\nwarn.forFunctions(exports, 'deprecated', [\n  'addRewriter',\n  'addFilter',\n  'clone',\n  'extend'\n]);\nwarn.forProperties(exports, 'deprecated', ['emitErrs', 'levelLength']);\n\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey } from '@opentelemetry/api';\n\nconst SUPPRESS_TRACING_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key SUPPRESS_TRACING'\n);\n\nexport function suppressTracing(context: Context): Context {\n  return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\n\nexport function unsuppressTracing(context: Context): Context {\n  return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\n\nexport function isTracingSuppressed(context: Context): boolean {\n  return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport const BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport const BAGGAGE_ITEMS_SEPARATOR = ',';\n\n// Name of the http header used to propagate the baggage\nexport const BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport const BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport const BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Baggage,\n  BaggageEntryMetadata,\n  baggageEntryMetadataFromString,\n} from '@opentelemetry/api';\nimport {\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_PROPERTIES_SEPARATOR,\n  BAGGAGE_KEY_PAIR_SEPARATOR,\n  BAGGAGE_MAX_TOTAL_LENGTH,\n} from './constants';\n\ntype ParsedBaggageKeyValue = {\n  key: string;\n  value: string;\n  metadata: BaggageEntryMetadata | undefined;\n};\n\nexport function serializeKeyPairs(keyPairs: string[]): string {\n  return keyPairs.reduce((hValue: string, current: string) => {\n    const value = `${hValue}${\n      hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : ''\n    }${current}`;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\n\nexport function getKeyPairs(baggage: Baggage): string[] {\n  return baggage.getAllEntries().map(([key, value]) => {\n    let entry = `${encodeURIComponent(key)}=${encodeURIComponent(value.value)}`;\n\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n\n    return entry;\n  });\n}\n\nexport function parsePairKeyValue(\n  entry: string\n): ParsedBaggageKeyValue | undefined {\n  const valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  const keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  const separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (separatorIndex <= 0) return;\n  const key = decodeURIComponent(\n    keyPairPart.substring(0, separatorIndex).trim()\n  );\n  const value = decodeURIComponent(\n    keyPairPart.substring(separatorIndex + 1).trim()\n  );\n  let metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(\n      valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR)\n    );\n  }\n  return { key, value, metadata };\n}\n\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(\n  value?: string\n): Record<string, string> {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value\n    .split(BAGGAGE_ITEMS_SEPARATOR)\n    .map(entry => {\n      return parsePairKeyValue(entry);\n    })\n    .filter(keyPair => keyPair !== undefined && keyPair.value.length > 0)\n    .reduce<Record<string, string>>((headers, keyPair) => {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      headers[keyPair!.key] = keyPair!.value;\n      return headers;\n    }, {});\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaggageEntry,\n  Context,\n  propagation,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport {\n  BAGGAGE_HEADER,\n  BAGGAGE_ITEMS_SEPARATOR,\n  BAGGAGE_MAX_NAME_VALUE_PAIRS,\n  BAGGAGE_MAX_PER_NAME_VALUE_PAIRS,\n} from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nexport class W3CBaggagePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    const keyPairs = getKeyPairs(baggage)\n      .filter((pair: string) => {\n        return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n      })\n      .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    const headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    const baggageString = Array.isArray(headerValue)\n      ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n      : headerValue;\n    if (!baggageString) return context;\n    const baggage: Record<string, BaggageEntry> = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    const pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(entry => {\n      const keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        const baggageEntry: BaggageEntry = { value: keyPair.value };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  }\n\n  fields(): string[] {\n    return [BAGGAGE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Clock {\n  /**\n   * Return the current time in milliseconds from some epoch such as the Unix epoch or process start\n   */\n  now(): number;\n}\n\n/**\n * A utility for returning wall times anchored to a given point in time. Wall time measurements will\n * not be taken from the system, but instead are computed by adding a monotonic clock time\n * to the anchor point.\n *\n * This is needed because the system time can change and result in unexpected situations like\n * spans ending before they are started. Creating an anchored clock for each local root span\n * ensures that span timings and durations are accurate while preventing span times from drifting\n * too far from the system clock.\n *\n * Only creating an anchored clock once per local trace ensures span times are correct relative\n * to each other. For example, a child span will never have a start time before its parent even\n * if the system clock is corrected during the local trace.\n *\n * Heavily inspired by the OTel Java anchored clock\n * https://github.com/open-telemetry/opentelemetry-java/blob/main/sdk/trace/src/main/java/io/opentelemetry/sdk/trace/AnchoredClock.java\n */\nexport class AnchoredClock implements Clock {\n  private _monotonicClock: Clock;\n  private _epochMillis: number;\n  private _performanceMillis: number;\n\n  /**\n   * Create a new AnchoredClock anchored to the current time returned by systemClock.\n   *\n   * @param systemClock should be a clock that returns the number of milliseconds since January 1 1970 such as Date\n   * @param monotonicClock should be a clock that counts milliseconds monotonically such as window.performance or perf_hooks.performance\n   */\n  public constructor(systemClock: Clock, monotonicClock: Clock) {\n    this._monotonicClock = monotonicClock;\n    this._epochMillis = systemClock.now();\n    this._performanceMillis = monotonicClock.now();\n  }\n\n  /**\n   * Returns the current time by adding the number of milliseconds since the\n   * AnchoredClock was created to the creation epoch time\n   */\n  public now(): number {\n    const delta = this._monotonicClock.now() - this._performanceMillis;\n    return this._epochMillis + delta;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, SpanAttributeValue, SpanAttributes } from '@opentelemetry/api';\n\nexport function sanitizeAttributes(attributes: unknown): SpanAttributes {\n  const out: SpanAttributes = {};\n\n  if (typeof attributes !== 'object' || attributes == null) {\n    return out;\n  }\n\n  for (const [key, val] of Object.entries(attributes)) {\n    if (!isAttributeKey(key)) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      continue;\n    }\n    if (!isAttributeValue(val)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      continue;\n    }\n    if (Array.isArray(val)) {\n      out[key] = val.slice();\n    } else {\n      out[key] = val;\n    }\n  }\n\n  return out;\n}\n\nexport function isAttributeKey(key: unknown): key is string {\n  return typeof key === 'string' && key.length > 0;\n}\n\nexport function isAttributeValue(val: unknown): val is SpanAttributeValue {\n  if (val == null) {\n    return true;\n  }\n\n  if (Array.isArray(val)) {\n    return isHomogeneousAttributeValueArray(val);\n  }\n\n  return isValidPrimitiveAttributeValue(val);\n}\n\nfunction isHomogeneousAttributeValueArray(arr: unknown[]): boolean {\n  let type: string | undefined;\n\n  for (const element of arr) {\n    // null/undefined elements are allowed\n    if (element == null) continue;\n\n    if (!type) {\n      if (isValidPrimitiveAttributeValue(element)) {\n        type = typeof element;\n        continue;\n      }\n      // encountered an invalid primitive\n      return false;\n    }\n\n    if (typeof element === type) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidPrimitiveAttributeValue(val: unknown): boolean {\n  switch (typeof val) {\n    case 'number':\n    case 'boolean':\n    case 'string':\n      return true;\n  }\n\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag, Exception } from '@opentelemetry/api';\nimport { ErrorHandler } from './types';\n\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler(): ErrorHandler {\n  return (ex: Exception) => {\n    diag.error(stringifyException(ex));\n  };\n}\n\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex: Exception | string): string {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex: Exception): Record<string, string> {\n  const result = {} as Record<string, string>;\n  let current = ex;\n\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(propertyName => {\n      if (result[propertyName]) return;\n      const value = current[propertyName as keyof typeof current];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n\n  return result;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\nimport { loggingErrorHandler } from './logging-error-handler';\nimport { ErrorHandler } from './types';\n\n/** The global error handler delegate */\nlet delegateHandler = loggingErrorHandler();\n\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler: ErrorHandler): void {\n  delegateHandler = handler;\n}\n\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex: Exception): void {\n  try {\n    delegateHandler(ex);\n  } catch {} // eslint-disable-line no-empty\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum TracesSamplerValues {\n  AlwaysOff = 'always_off',\n  AlwaysOn = 'always_on',\n  ParentBasedAlwaysOff = 'parentbased_always_off',\n  ParentBasedAlwaysOn = 'parentbased_always_on',\n  ParentBasedTraceIdRatio = 'parentbased_traceidratio',\n  TraceIdRatio = 'traceidratio',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\n\nconst DEFAULT_LIST_SEPARATOR = ',';\n\n/**\n * Environment interface to define all names\n */\n\nconst ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'] as const;\n\ntype ENVIRONMENT_BOOLEANS = {\n  [K in (typeof ENVIRONMENT_BOOLEAN_KEYS)[number]]?: boolean;\n};\n\nfunction isEnvVarABoolean(key: unknown): key is keyof ENVIRONMENT_BOOLEANS {\n  return (\n    ENVIRONMENT_BOOLEAN_KEYS.indexOf(key as keyof ENVIRONMENT_BOOLEANS) > -1\n  );\n}\n\nconst ENVIRONMENT_NUMBERS_KEYS = [\n  'OTEL_BSP_EXPORT_TIMEOUT',\n  'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BSP_MAX_QUEUE_SIZE',\n  'OTEL_BSP_SCHEDULE_DELAY',\n  'OTEL_BLRP_EXPORT_TIMEOUT',\n  'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n  'OTEL_BLRP_MAX_QUEUE_SIZE',\n  'OTEL_BLRP_SCHEDULE_DELAY',\n  'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n  'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n  'OTEL_SPAN_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_LINK_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n  'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n  'OTEL_EXPORTER_OTLP_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n  'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n  'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n] as const;\n\ntype ENVIRONMENT_NUMBERS = {\n  [K in (typeof ENVIRONMENT_NUMBERS_KEYS)[number]]?: number;\n};\n\nfunction isEnvVarANumber(key: unknown): key is keyof ENVIRONMENT_NUMBERS {\n  return (\n    ENVIRONMENT_NUMBERS_KEYS.indexOf(key as keyof ENVIRONMENT_NUMBERS) > -1\n  );\n}\n\nconst ENVIRONMENT_LISTS_KEYS = [\n  'OTEL_NO_PATCH_MODULES',\n  'OTEL_PROPAGATORS',\n] as const;\n\ntype ENVIRONMENT_LISTS = {\n  [K in (typeof ENVIRONMENT_LISTS_KEYS)[number]]?: string[];\n};\n\nfunction isEnvVarAList(key: unknown): key is keyof ENVIRONMENT_LISTS {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key as keyof ENVIRONMENT_LISTS) > -1;\n}\n\nexport type ENVIRONMENT = {\n  CONTAINER_NAME?: string;\n  ECS_CONTAINER_METADATA_URI_V4?: string;\n  ECS_CONTAINER_METADATA_URI?: string;\n  HOSTNAME?: string;\n  KUBERNETES_SERVICE_HOST?: string;\n  NAMESPACE?: string;\n  OTEL_EXPORTER_JAEGER_AGENT_HOST?: string;\n  OTEL_EXPORTER_JAEGER_ENDPOINT?: string;\n  OTEL_EXPORTER_JAEGER_PASSWORD?: string;\n  OTEL_EXPORTER_JAEGER_USER?: string;\n  OTEL_EXPORTER_OTLP_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT?: string;\n  OTEL_EXPORTER_OTLP_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS?: string;\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS?: string;\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT?: string;\n  OTEL_LOG_LEVEL?: DiagLogLevel;\n  OTEL_RESOURCE_ATTRIBUTES?: string;\n  OTEL_SERVICE_NAME?: string;\n  OTEL_TRACES_EXPORTER?: string;\n  OTEL_TRACES_SAMPLER_ARG?: string;\n  OTEL_TRACES_SAMPLER?: string;\n  OTEL_LOGS_EXPORTER?: string;\n  OTEL_EXPORTER_OTLP_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE?: string;\n  OTEL_EXPORTER_OTLP_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY?: string;\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE?: string;\n  OTEL_EXPORTER_OTLP_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL?: string;\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE?: string;\n} & ENVIRONMENT_BOOLEANS &\n  ENVIRONMENT_NUMBERS &\n  ENVIRONMENT_LISTS;\n\nexport type RAW_ENVIRONMENT = {\n  [key: string]: string | number | undefined | string[];\n};\n\nexport const DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\n\nexport const DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport const DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n\n/**\n * Default environment variables\n */\nexport const DEFAULT_ENVIRONMENT: Required<ENVIRONMENT> = {\n  OTEL_SDK_DISABLED: false,\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n  OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BLRP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n  OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT:\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT:\n    DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n  OTEL_TRACES_EXPORTER: '',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_LOGS_EXPORTER: '',\n  OTEL_EXPORTER_OTLP_INSECURE: '',\n  OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n  OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n  OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n  OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n  OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n  OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n};\n\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(\n  key: keyof ENVIRONMENT_BOOLEANS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  if (typeof values[key] === 'undefined') {\n    return;\n  }\n\n  const value = String(values[key]);\n  // support case-insensitive \"true\"\n  environment[key] = value.toLowerCase() === 'true';\n}\n\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(\n  name: keyof ENVIRONMENT_NUMBERS,\n  environment: ENVIRONMENT,\n  values: RAW_ENVIRONMENT,\n  min = -Infinity,\n  max = Infinity\n) {\n  if (typeof values[name] !== 'undefined') {\n    const value = Number(values[name] as string);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(\n  name: keyof ENVIRONMENT_LISTS,\n  output: ENVIRONMENT,\n  input: RAW_ENVIRONMENT,\n  separator = DEFAULT_LIST_SEPARATOR\n) {\n  const givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(v => v.trim());\n  }\n}\n\n// The support string -> DiagLogLevel mappings\nconst logLevelMap: { [key: string]: DiagLogLevel } = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE,\n};\n\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(\n  key: keyof ENVIRONMENT,\n  environment: RAW_ENVIRONMENT | ENVIRONMENT,\n  values: RAW_ENVIRONMENT\n) {\n  const value = values[key];\n  if (typeof value === 'string') {\n    const theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values: RAW_ENVIRONMENT): ENVIRONMENT {\n  const environment: ENVIRONMENT = {};\n\n  for (const env in DEFAULT_ENVIRONMENT) {\n    const key = env as keyof ENVIRONMENT;\n\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n\n      default:\n        if (isEnvVarABoolean(key)) {\n          parseBoolean(key, environment, values);\n        } else if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          const value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n\n  return environment;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DEFAULT_ENVIRONMENT,\n  ENVIRONMENT,\n  RAW_ENVIRONMENT,\n  parseEnvironment,\n} from '../../utils/environment';\n\n/**\n * Gets the environment variables\n */\nexport function getEnv(): Required<ENVIRONMENT> {\n  const processEnv = parseEnvironment(process.env as RAW_ENVIRONMENT);\n  return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\n\nexport function getEnvWithoutDefaults(): ENVIRONMENT {\n  return parseEnvironment(process.env as RAW_ENVIRONMENT);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** only globals that common to node and browsers are allowed */\n// eslint-disable-next-line node/no-unsupported-features/es-builtins\nexport const _globalThis = typeof globalThis === 'object' ? globalThis : global;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction intValue(charCode: number): number {\n  // 0-9\n  if (charCode >= 48 && charCode <= 57) {\n    return charCode - 48;\n  }\n\n  // a-f\n  if (charCode >= 97 && charCode <= 102) {\n    return charCode - 87;\n  }\n\n  // A-F\n  return charCode - 55;\n}\n\nexport function hexToBinary(hexStr: string): Uint8Array {\n  const buf = new Uint8Array(hexStr.length / 2);\n  let offset = 0;\n\n  for (let i = 0; i < hexStr.length; i += 2) {\n    const hi = intValue(hexStr.charCodeAt(i));\n    const lo = intValue(hexStr.charCodeAt(i + 1));\n    buf[offset++] = (hi << 4) | lo;\n  }\n\n  return buf;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { hexToBinary } from '../../common/hex-to-binary';\n\nexport function hexToBase64(hexStr: string): string {\n  return Buffer.from(hexToBinary(hexStr)).toString('base64');\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../trace/IdGenerator';\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { performance } from 'perf_hooks';\n\nexport const otperformance = performance;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '1.25.1';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { VERSION } from '../../version';\nimport {\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_PROCESS_RUNTIME_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\n\n/** Constants describing the SDK in use */\nexport const SDK_INFO = {\n  [SEMRESATTRS_TELEMETRY_SDK_NAME]: 'opentelemetry',\n  [SEMRESATTRS_PROCESS_RUNTIME_NAME]: 'node',\n  [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]: TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n  [SEMRESATTRS_TELEMETRY_SDK_VERSION]: VERSION,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer: NodeJS.Timer): void {\n  timer.unref();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { getEnvWithoutDefaults, getEnv } from './environment';\nexport * from './globalThis';\nexport * from './hex-to-base64';\nexport * from './RandomIdGenerator';\nexport * from './performance';\nexport * from './sdk-info';\nexport * from './timer-util';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { otperformance as performance } from '../platform';\nimport { TimeOriginLegacy } from './types';\n\nconst NANOSECOND_DIGITS = 9;\nconst NANOSECOND_DIGITS_IN_MILLIS = 6;\nconst MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nconst SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis: number): api.HrTime {\n  const epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  const seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  const nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n  return [seconds, nanos];\n}\n\nexport function getTimeOrigin(): number {\n  let timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    const perf: TimeOriginLegacy = performance as unknown as TimeOriginLegacy;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow?: number): api.HrTime {\n  const timeOrigin = millisToHrTime(getTimeOrigin());\n  const now = millisToHrTime(\n    typeof performanceNow === 'number' ? performanceNow : performance.now()\n  );\n\n  return addHrTimes(timeOrigin, now);\n}\n\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time: api.TimeInput): api.HrTime {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time as api.HrTime;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return millisToHrTime(time);\n    }\n  } else if (time instanceof Date) {\n    return millisToHrTime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(\n  startTime: api.HrTime,\n  endTime: api.HrTime\n): api.HrTime {\n  let seconds = endTime[0] - startTime[0];\n  let nanos = endTime[1] - startTime[1];\n\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n\n  return [seconds, nanos];\n}\n\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time: api.HrTime): string {\n  const precision = NANOSECOND_DIGITS;\n  const tmp = `${'0'.repeat(precision)}${time[1]}Z`;\n  const nanoString = tmp.substr(tmp.length - precision - 1);\n  const date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time: api.HrTime): number {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time: api.HrTime): number {\n  return time[0] * 1e3 + time[1] / 1e6;\n}\n\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time: api.HrTime): number {\n  return time[0] * 1e6 + time[1] / 1e3;\n}\n\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value: unknown): value is api.HrTime {\n  return (\n    Array.isArray(value) &&\n    value.length === 2 &&\n    typeof value[0] === 'number' &&\n    typeof value[1] === 'number'\n  );\n}\n\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(\n  value: unknown\n): value is api.HrTime | number | Date {\n  return (\n    isTimeInputHrTime(value) ||\n    typeof value === 'number' ||\n    value instanceof Date\n  );\n}\n\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1: api.HrTime, time2: api.HrTime): api.HrTime {\n  const out = [time1[0] + time2[0], time1[1] + time2[1]] as api.HrTime;\n\n  // Nanoseconds\n  if (out[1] >= SECOND_TO_NANOSECONDS) {\n    out[1] -= SECOND_TO_NANOSECONDS;\n    out[0] += 1;\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Exception } from '@opentelemetry/api';\n\n/**\n * This interface defines a fallback to read a timeOrigin when it is not available on performance.timeOrigin,\n * this happens for example on Safari Mac\n * then the timeOrigin is taken from fetchStart - which is the closest to timeOrigin\n */\nexport interface TimeOriginLegacy {\n  timing: {\n    fetchStart: number;\n  };\n}\n\n/**\n * This interface defines the params that are be added to the wrapped function\n * using the \"shimmer.wrap\"\n */\nexport interface ShimWrapped extends Function {\n  __wrapped: boolean;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  __unwrap: Function;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  __original: Function;\n}\n\n/**\n * An instrumentation library consists of the name and optional version\n * used to obtain a tracer or meter from a provider. This metadata is made\n * available on ReadableSpan and MetricRecord for use by the export pipeline.\n * @deprecated Use {@link InstrumentationScope} instead.\n */\nexport interface InstrumentationLibrary {\n  readonly name: string;\n  readonly version?: string;\n  readonly schemaUrl?: string;\n}\n\n/**\n * An instrumentation scope consists of the name and optional version\n * used to obtain a tracer or meter from a provider. This metadata is made\n * available on ReadableSpan and MetricRecord for use by the export pipeline.\n */\nexport interface InstrumentationScope {\n  readonly name: string;\n  readonly version?: string;\n  readonly schemaUrl?: string;\n}\n\n/** Defines an error handler function */\nexport type ErrorHandler = (ex: Exception) => void;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface ExportResult {\n  code: ExportResultCode;\n  error?: Error;\n}\n\nexport enum ExportResultCode {\n  SUCCESS,\n  FAILED,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  diag,\n  TextMapSetter,\n} from '@opentelemetry/api';\n\n/** Configuration object for composite propagator */\nexport interface CompositePropagatorConfig {\n  /**\n   * List of propagators to run. Propagators run in the\n   * list order. If a propagator later in the list writes the same context\n   * key as a propagator earlier in the list, the later on will \"win\".\n   */\n  propagators?: TextMapPropagator[];\n}\n\n/** Combines multiple propagators into a single propagator. */\nexport class CompositePropagator implements TextMapPropagator {\n  private readonly _propagators: TextMapPropagator[];\n  private readonly _fields: string[];\n\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  constructor(config: CompositePropagatorConfig = {}) {\n    this._propagators = config.propagators ?? [];\n\n    this._fields = Array.from(\n      new Set(\n        this._propagators\n          // older propagators may not have fields function, null check to be sure\n          .map(p => (typeof p.fields === 'function' ? p.fields() : []))\n          .reduce((x, y) => x.concat(y), [])\n      )\n    );\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    for (const propagator of this._propagators) {\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n    }\n  }\n\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    return this._propagators.reduce((ctx, propagator) => {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\n          `Failed to inject with ${propagator.constructor.name}. Err: ${err.message}`\n        );\n      }\n      return ctx;\n    }, context);\n  }\n\n  fields(): string[] {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nconst VALID_KEY = `[a-z]${VALID_KEY_CHAR_RANGE}{0,255}`;\nconst VALID_VENDOR_KEY = `[a-z0-9]${VALID_KEY_CHAR_RANGE}{0,240}@[a-z]${VALID_KEY_CHAR_RANGE}{0,13}`;\nconst VALID_KEY_REGEX = new RegExp(`^(?:${VALID_KEY}|${VALID_VENDOR_KEY})$`);\nconst VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nconst INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key: string): boolean {\n  return VALID_KEY_REGEX.test(key);\n}\n\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value: string): boolean {\n  return (\n    VALID_VALUE_BASE_REGEX.test(value) &&\n    !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value)\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { validateKey, validateValue } from '../internal/validators';\n\nconst MAX_TRACE_STATE_ITEMS = 32;\nconst MAX_TRACE_STATE_LEN = 512;\nconst LIST_MEMBERS_SEPARATOR = ',';\nconst LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nexport class TraceState implements api.TraceState {\n  private _internalState: Map<string, string> = new Map();\n\n  constructor(rawTraceState?: string) {\n    if (rawTraceState) this._parse(rawTraceState);\n  }\n\n  set(key: string, value: string): TraceState {\n    // TODO: Benchmark the different approaches(map vs list) and\n    // use the faster one.\n    const traceState = this._clone();\n    if (traceState._internalState.has(key)) {\n      traceState._internalState.delete(key);\n    }\n    traceState._internalState.set(key, value);\n    return traceState;\n  }\n\n  unset(key: string): TraceState {\n    const traceState = this._clone();\n    traceState._internalState.delete(key);\n    return traceState;\n  }\n\n  get(key: string): string | undefined {\n    return this._internalState.get(key);\n  }\n\n  serialize(): string {\n    return this._keys()\n      .reduce((agg: string[], key) => {\n        agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + this.get(key));\n        return agg;\n      }, [])\n      .join(LIST_MEMBERS_SEPARATOR);\n  }\n\n  private _parse(rawTraceState: string) {\n    if (rawTraceState.length > MAX_TRACE_STATE_LEN) return;\n    this._internalState = rawTraceState\n      .split(LIST_MEMBERS_SEPARATOR)\n      .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n      .reduce((agg: Map<string, string>, part: string) => {\n        const listMember = part.trim(); // Optional Whitespace (OWS) handling\n        const i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n        if (i !== -1) {\n          const key = listMember.slice(0, i);\n          const value = listMember.slice(i + 1, part.length);\n          if (validateKey(key) && validateValue(value)) {\n            agg.set(key, value);\n          } else {\n            // TODO: Consider to add warning log\n          }\n        }\n        return agg;\n      }, new Map());\n\n    // Because of the reverse() requirement, trunc must be done after map is created\n    if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n      this._internalState = new Map(\n        Array.from(this._internalState.entries())\n          .reverse() // Use reverse same as original tracestate parse chain\n          .slice(0, MAX_TRACE_STATE_ITEMS)\n      );\n    }\n  }\n\n  private _keys(): string[] {\n    return Array.from(this._internalState.keys()).reverse();\n  }\n\n  private _clone(): TraceState {\n    const traceState = new TraceState();\n    traceState._internalState = new Map(this._internalState);\n    return traceState;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\n\nexport const TRACE_PARENT_HEADER = 'traceparent';\nexport const TRACE_STATE_HEADER = 'tracestate';\n\nconst VERSION = '00';\nconst VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nconst TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nconst PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nconst FLAGS_PART = '[\\\\da-f]{2}';\nconst TRACE_PARENT_REGEX = new RegExp(\n  `^\\\\s?(${VERSION_PART})-(${TRACE_ID_PART})-(${PARENT_ID_PART})-(${FLAGS_PART})(-.*)?\\\\s?$`\n);\n\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent: string): SpanContext | null {\n  const match = TRACE_PARENT_REGEX.exec(traceParent);\n  if (!match) return null;\n\n  // According to the specification the implementation should be compatible\n  // with future versions. If there are more parts, we only reject it if it's using version 00\n  // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n  if (match[1] === '00' && match[5]) return null;\n\n  return {\n    traceId: match[2],\n    spanId: match[3],\n    traceFlags: parseInt(match[4], 16),\n  };\n}\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nexport class W3CTraceContextPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      isTracingSuppressed(context) ||\n      !isSpanContextValid(spanContext)\n    )\n      return;\n\n    const traceParent = `${VERSION}-${spanContext.traceId}-${\n      spanContext.spanId\n    }-0${Number(spanContext.traceFlags || TraceFlags.NONE).toString(16)}`;\n\n    setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n    if (spanContext.traceState) {\n      setter.set(\n        carrier,\n        TRACE_STATE_HEADER,\n        spanContext.traceState.serialize()\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n    if (!traceParentHeader) return context;\n    const traceParent = Array.isArray(traceParentHeader)\n      ? traceParentHeader[0]\n      : traceParentHeader;\n    if (typeof traceParent !== 'string') return context;\n    const spanContext = parseTraceParent(traceParent);\n    if (!spanContext) return context;\n\n    spanContext.isRemote = true;\n\n    const traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n    if (traceStateHeader) {\n      // If more than one `tracestate` header is found, we merge them into a\n      // single header.\n      const state = Array.isArray(traceStateHeader)\n        ? traceStateHeader.join(',')\n        : traceStateHeader;\n      spanContext.traceState = new TraceState(\n        typeof state === 'string' ? state : undefined\n      );\n    }\n    return trace.setSpanContext(context, spanContext);\n  }\n\n  fields(): string[] {\n    return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * IdGenerator provides an interface for generating Trace Id and Span Id.\n */\nexport interface IdGenerator {\n  /** Returns a trace ID composed of 32 lowercase hex characters. */\n  generateTraceId(): string;\n  /** Returns a span ID composed of 16 lowercase hex characters. */\n  generateSpanId(): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, createContextKey, Span } from '@opentelemetry/api';\n\nconst RPC_METADATA_KEY = createContextKey(\n  'OpenTelemetry SDK Context Key RPC_METADATA'\n);\n\nexport enum RPCType {\n  HTTP = 'http',\n}\n\ntype HTTPMetadata = {\n  type: RPCType.HTTP;\n  route?: string;\n  span: Span;\n};\n\n/**\n * Allows for future rpc metadata to be used with this mechanism\n */\nexport type RPCMetadata = HTTPMetadata;\n\nexport function setRPCMetadata(context: Context, meta: RPCMetadata): Context {\n  return context.setValue(RPC_METADATA_KEY, meta);\n}\n\nexport function deleteRPCMetadata(context: Context): Context {\n  return context.deleteValue(RPC_METADATA_KEY);\n}\n\nexport function getRPCMetadata(context: Context): RPCMetadata | undefined {\n  return context.getValue(RPC_METADATA_KEY) as RPCMetadata | undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples no traces.\n */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples all traces.\n */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  Sampler,\n  SamplingResult,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sampler,\n  SamplingDecision,\n  SamplingResult,\n  isValidTraceId,\n} from '@opentelemetry/api';\n\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n * Sampler that samples a given fraction of traces based of trace id deterministically.\n */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\n\nconst objectTag = '[object Object]';\nconst nullTag = '[object Null]';\nconst undefinedTag = '[object Undefined]';\nconst funcProto = Function.prototype;\nconst funcToString = funcProto.toString;\nconst objectCtorString = funcToString.call(Object);\nconst getPrototype = overArg(Object.getPrototypeOf, Object);\nconst objectProto = Object.prototype;\nconst hasOwnProperty = objectProto.hasOwnProperty;\nconst symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nconst nativeObjectToString = objectProto.toString;\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func: Function, transform: any): any {\n  return function (arg: any) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value: any) {\n  if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n    return false;\n  }\n  const proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (\n    typeof Ctor == 'function' &&\n    Ctor instanceof Ctor &&\n    funcToString.call(Ctor) === objectCtorString\n  );\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value: any) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value: any) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return symToStringTag && symToStringTag in Object(value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value: any) {\n  const isOwn = hasOwnProperty.call(value, symToStringTag as any),\n    tag = value[symToStringTag as any];\n  let unmasked = false;\n\n  try {\n    value[symToStringTag as any] = undefined;\n    unmasked = true;\n  } catch (e) {\n    // silence\n  }\n\n  const result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag as any] = tag;\n    } else {\n      delete value[symToStringTag as any];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value: any) {\n  return nativeObjectToString.call(value);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { isPlainObject } from './lodash.merge';\n\nconst MAX_LEVEL = 20;\n\ninterface ObjectInto {\n  obj: any;\n  key: string;\n}\n\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge(...args: any[]): any {\n  let result: any = args.shift();\n  const objects: WeakMap<any, ObjectInto[]> | undefined = new WeakMap<\n    any,\n    ObjectInto[]\n  >();\n  while (args.length > 0) {\n    result = mergeTwoObjects(result, args.shift(), 0, objects);\n  }\n\n  return result;\n}\n\nfunction takeValue(value: any): any {\n  if (isArray(value)) {\n    return value.slice();\n  }\n  return value;\n}\n\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(\n  one: any,\n  two: any,\n  level = 0,\n  objects: WeakMap<any, ObjectInto[]>\n): any {\n  let result: any;\n  if (level > MAX_LEVEL) {\n    return undefined;\n  }\n  level++;\n  if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n    result = takeValue(two);\n  } else if (isArray(one)) {\n    result = one.slice();\n    if (isArray(two)) {\n      for (let i = 0, j = two.length; i < j; i++) {\n        result.push(takeValue(two[i]));\n      }\n    } else if (isObject(two)) {\n      const keys = Object.keys(two);\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        result[key] = takeValue(two[key]);\n      }\n    }\n  } else if (isObject(one)) {\n    if (isObject(two)) {\n      if (!shouldMerge(one, two)) {\n        return two;\n      }\n      result = Object.assign({}, one);\n      const keys = Object.keys(two);\n\n      for (let i = 0, j = keys.length; i < j; i++) {\n        const key = keys[i];\n        const twoValue = two[key];\n\n        if (isPrimitive(twoValue)) {\n          if (typeof twoValue === 'undefined') {\n            delete result[key];\n          } else {\n            // result[key] = takeValue(twoValue);\n            result[key] = twoValue;\n          }\n        } else {\n          const obj1 = result[key];\n          const obj2 = twoValue;\n\n          if (\n            wasObjectReferenced(one, key, objects) ||\n            wasObjectReferenced(two, key, objects)\n          ) {\n            delete result[key];\n          } else {\n            if (isObject(obj1) && isObject(obj2)) {\n              const arr1 = objects.get(obj1) || [];\n              const arr2 = objects.get(obj2) || [];\n              arr1.push({ obj: one, key });\n              arr2.push({ obj: two, key });\n              objects.set(obj1, arr1);\n              objects.set(obj2, arr2);\n            }\n\n            result[key] = mergeTwoObjects(\n              result[key],\n              twoValue,\n              level,\n              objects\n            );\n          }\n        }\n      }\n    } else {\n      result = two;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(\n  obj: any,\n  key: string,\n  objects: WeakMap<any, ObjectInto[]>\n): boolean {\n  const arr = objects.get(obj[key]) || [];\n  for (let i = 0, j = arr.length; i < j; i++) {\n    const info = arr[i];\n    if (info.key === key && info.obj === obj) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isArray(value: any): boolean {\n  return Array.isArray(value);\n}\n\nfunction isFunction(value: any): boolean {\n  return typeof value === 'function';\n}\n\nfunction isObject(value: any): boolean {\n  return (\n    !isPrimitive(value) &&\n    !isArray(value) &&\n    !isFunction(value) &&\n    typeof value === 'object'\n  );\n}\n\nfunction isPrimitive(value: any): boolean {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean' ||\n    typeof value === 'undefined' ||\n    value instanceof Date ||\n    value instanceof RegExp ||\n    value === null\n  );\n}\n\nfunction shouldMerge(one: any, two: any): boolean {\n  if (!isPlainObject(one) || !isPlainObject(two)) {\n    return false;\n  }\n\n  return true;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url: string, urlToMatch: string | RegExp): boolean {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(\n  url: string,\n  ignoredUrls?: Array<string | RegExp>\n): boolean {\n  if (!ignoredUrls) {\n    return false;\n  }\n\n  for (const ignoreUrl of ignoredUrls) {\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ShimWrapped } from '../common/types';\n\n/**\n * Checks if certain function has been already wrapped\n * @param func\n */\nexport function isWrapped(func: unknown): func is ShimWrapped {\n  return (\n    typeof func === 'function' &&\n    typeof (func as ShimWrapped).__original === 'function' &&\n    typeof (func as ShimWrapped).__unwrap === 'function' &&\n    (func as ShimWrapped).__wrapped === true\n  );\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<T> {\n  private _promise: Promise<T>;\n  private _resolve!: (val: T) => void;\n  private _reject!: (error: unknown) => void;\n  constructor() {\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  resolve(val: T) {\n    this._resolve(val);\n  }\n\n  reject(err: unknown) {\n    this._reject(err);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './promise';\n\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nexport class BindOnceFuture<\n  R,\n  This = unknown,\n  T extends (this: This, ...args: unknown[]) => R = () => R,\n> {\n  private _isCalled = false;\n  private _deferred = new Deferred<R>();\n  constructor(\n    private _callback: T,\n    private _that: This\n  ) {}\n\n  get isCalled() {\n    return this._isCalled;\n  }\n\n  get promise() {\n    return this._deferred.promise;\n  }\n\n  call(...args: Parameters<T>): Promise<R> {\n    if (!this._isCalled) {\n      this._isCalled = true;\n      try {\n        Promise.resolve(this._callback.call(this._that, ...args)).then(\n          val => this._deferred.resolve(val),\n          err => this._deferred.reject(err)\n        );\n      } catch (err) {\n        this._deferred.reject(err);\n      }\n    }\n    return this._deferred.promise;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context } from '@opentelemetry/api';\nimport { ExportResult } from '../ExportResult';\nimport { suppressTracing } from '../trace/suppress-tracing';\n\nexport interface Exporter<T> {\n  export(arg: T, resultCallback: (result: ExportResult) => void): void;\n}\n\n/**\n * @internal\n * Shared functionality used by Exporters while exporting data, including suppression of Traces.\n */\nexport function _export<T>(\n  exporter: Exporter<T>,\n  arg: T\n): Promise<ExportResult> {\n  return new Promise(resolve => {\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), () => {\n      exporter.export(arg, (result: ExportResult) => {\n        resolve(result);\n      });\n    });\n  });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './baggage/propagation/W3CBaggagePropagator';\nexport * from './common/anchored-clock';\nexport * from './common/attributes';\nexport * from './common/global-error-handler';\nexport * from './common/logging-error-handler';\nexport * from './common/time';\nexport * from './common/types';\nexport * from './common/hex-to-binary';\nexport * from './ExportResult';\nexport * as baggageUtils from './baggage/utils';\nexport * from './platform';\nexport * from './propagation/composite';\nexport * from './trace/W3CTraceContextPropagator';\nexport * from './trace/IdGenerator';\nexport * from './trace/rpc-metadata';\nexport * from './trace/sampler/AlwaysOffSampler';\nexport * from './trace/sampler/AlwaysOnSampler';\nexport * from './trace/sampler/ParentBasedSampler';\nexport * from './trace/sampler/TraceIdRatioBasedSampler';\nexport * from './trace/suppress-tracing';\nexport * from './trace/TraceState';\nexport * from './utils/environment';\nexport * from './utils/merge';\nexport * from './utils/sampling';\nexport * from './utils/timeout';\nexport * from './utils/url';\nexport * from './utils/wrap';\nexport * from './utils/callback';\nexport * from './version';\nimport { _export } from './internal/exporter';\nexport const internal = {\n  _export,\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function defaultServiceName(): string {\n  return `unknown_service:${process.argv0}`;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport { defaultServiceName } from './default-service-name';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { defaultServiceName } from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_LANGUAGE,\n  SEMRESATTRS_TELEMETRY_SDK_NAME,\n  SEMRESATTRS_TELEMETRY_SDK_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { ResourceAttributes } from './types';\nimport { defaultServiceName } from './platform';\nimport { IResource } from './IResource';\n\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nexport class Resource implements IResource {\n  static readonly EMPTY = new Resource({});\n  private _syncAttributes?: ResourceAttributes;\n  private _asyncAttributesPromise?: Promise<ResourceAttributes>;\n  private _attributes?: ResourceAttributes;\n\n  /**\n   * Check if async attributes have resolved. This is useful to avoid awaiting\n   * waitForAsyncAttributes (which will introduce asynchronous behavior) when not necessary.\n   *\n   * @returns true if the resource \"attributes\" property is not yet settled to its final value\n   */\n  public asyncAttributesPending?: boolean;\n\n  /**\n   * Returns an empty Resource\n   */\n  static empty(): IResource {\n    return Resource.EMPTY;\n  }\n\n  /**\n   * Returns a Resource that identifies the SDK in use.\n   */\n  static default(): IResource {\n    return new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: defaultServiceName(),\n      [SEMRESATTRS_TELEMETRY_SDK_LANGUAGE]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n      [SEMRESATTRS_TELEMETRY_SDK_NAME]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n      [SEMRESATTRS_TELEMETRY_SDK_VERSION]:\n        SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n    });\n  }\n\n  constructor(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes: ResourceAttributes,\n    asyncAttributesPromise?: Promise<ResourceAttributes>\n  ) {\n    this._attributes = attributes;\n    this.asyncAttributesPending = asyncAttributesPromise != null;\n    this._syncAttributes = this._attributes ?? {};\n    this._asyncAttributesPromise = asyncAttributesPromise?.then(\n      asyncAttributes => {\n        this._attributes = Object.assign({}, this._attributes, asyncAttributes);\n        this.asyncAttributesPending = false;\n        return asyncAttributes;\n      },\n      err => {\n        diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n        this.asyncAttributesPending = false;\n        return {};\n      }\n    );\n  }\n\n  get attributes(): ResourceAttributes {\n    if (this.asyncAttributesPending) {\n      diag.error(\n        'Accessing resource attributes before async attributes settled'\n      );\n    }\n\n    return this._attributes ?? {};\n  }\n\n  /**\n   * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n   * this Resource's attributes. This is useful in exporters to block until resource detection\n   * has finished.\n   */\n  async waitForAsyncAttributes?(): Promise<void> {\n    if (this.asyncAttributesPending) {\n      await this._asyncAttributesPromise;\n    }\n  }\n\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  merge(other: IResource | null): IResource {\n    if (!other) return this;\n\n    // SpanAttributes from other resource overwrite attributes from this resource.\n    const mergedSyncAttributes = {\n      ...this._syncAttributes,\n      //Support for old resource implementation where _syncAttributes is not defined\n      ...((other as Resource)._syncAttributes ?? other.attributes),\n    };\n\n    if (\n      !this._asyncAttributesPromise &&\n      !(other as Resource)._asyncAttributesPromise\n    ) {\n      return new Resource(mergedSyncAttributes);\n    }\n\n    const mergedAttributesPromise = Promise.all([\n      this._asyncAttributesPromise,\n      (other as Resource)._asyncAttributesPromise,\n    ]).then(([thisAsyncAttributes, otherAsyncAttributes]) => {\n      return {\n        ...this._syncAttributes,\n        ...thisAsyncAttributes,\n        //Support for old resource implementation where _syncAttributes is not defined\n        ...((other as Resource)._syncAttributes ?? other.attributes),\n        ...otherAsyncAttributes,\n      };\n    });\n\n    return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '../Resource';\nimport { DetectorSync, ResourceAttributes } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\n\n/**\n * EnvDetectorSync can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetectorSync implements DetectorSync {\n  // Type, attribute keys, and attribute values should not exceed 256 characters.\n  private readonly _MAX_LENGTH = 255;\n\n  // OTEL_RESOURCE_ATTRIBUTES is a comma-separated list of attributes.\n  private readonly _COMMA_SEPARATOR = ',';\n\n  // OTEL_RESOURCE_ATTRIBUTES contains key value pair separated by '='.\n  private readonly _LABEL_KEY_VALUE_SPLITTER = '=';\n\n  private readonly _ERROR_MESSAGE_INVALID_CHARS =\n    'should be a ASCII string with a length greater than 0 and not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  private readonly _ERROR_MESSAGE_INVALID_VALUE =\n    'should be a ASCII string with a length not exceed ' +\n    this._MAX_LENGTH +\n    ' characters.';\n\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes: ResourceAttributes = {};\n    const env = getEnv();\n\n    const rawAttributes = env.OTEL_RESOURCE_ATTRIBUTES;\n    const serviceName = env.OTEL_SERVICE_NAME;\n\n    if (rawAttributes) {\n      try {\n        const parsedAttributes = this._parseResourceAttributes(rawAttributes);\n        Object.assign(attributes, parsedAttributes);\n      } catch (e) {\n        diag.debug(`EnvDetector failed: ${e.message}`);\n      }\n    }\n\n    if (serviceName) {\n      attributes[SEMRESATTRS_SERVICE_NAME] = serviceName;\n    }\n\n    return new Resource(attributes);\n  }\n\n  /**\n   * Creates an attribute map from the OTEL_RESOURCE_ATTRIBUTES environment\n   * variable.\n   *\n   * OTEL_RESOURCE_ATTRIBUTES: A comma-separated list of attributes describing\n   * the source in more detail, e.g. “key1=val1,key2=val2”. Domain names and\n   * paths are accepted as attribute keys. Values may be quoted or unquoted in\n   * general. If a value contains whitespace, =, or \" characters, it must\n   * always be quoted.\n   *\n   * @param rawEnvAttributes The resource attributes as a comma-separated list\n   * of key/value pairs.\n   * @returns The sanitized resource attributes.\n   */\n  private _parseResourceAttributes(\n    rawEnvAttributes?: string\n  ): ResourceAttributes {\n    if (!rawEnvAttributes) return {};\n\n    const attributes: ResourceAttributes = {};\n    const rawAttributes: string[] = rawEnvAttributes.split(\n      this._COMMA_SEPARATOR,\n      -1\n    );\n    for (const rawAttribute of rawAttributes) {\n      const keyValuePair: string[] = rawAttribute.split(\n        this._LABEL_KEY_VALUE_SPLITTER,\n        -1\n      );\n      if (keyValuePair.length !== 2) {\n        continue;\n      }\n      let [key, value] = keyValuePair;\n      // Leading and trailing whitespaces are trimmed.\n      key = key.trim();\n      value = value.trim().split(/^\"|\"$/).join('');\n      if (!this._isValidAndNotEmpty(key)) {\n        throw new Error(`Attribute key ${this._ERROR_MESSAGE_INVALID_CHARS}`);\n      }\n      if (!this._isValid(value)) {\n        throw new Error(`Attribute value ${this._ERROR_MESSAGE_INVALID_VALUE}`);\n      }\n      attributes[key] = decodeURIComponent(value);\n    }\n    return attributes;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid.\n   */\n  private _isValid(name: string): boolean {\n    return name.length <= this._MAX_LENGTH && this._isBaggageOctetString(name);\n  }\n\n  // https://www.w3.org/TR/baggage/#definition\n  private _isBaggageOctetString(str: string): boolean {\n    for (let i = 0; i < str.length; i++) {\n      const ch = str.charCodeAt(i);\n      if (ch < 0x21 || ch === 0x2c || ch === 0x3b || ch === 0x5c || ch > 0x7e) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determines whether the given String is a valid printable ASCII string with\n   * a length greater than 0 and not exceed _MAX_LENGTH characters.\n   *\n   * @param str The String to be validated.\n   * @returns Whether the String is valid and not empty.\n   */\n  private _isValidAndNotEmpty(str: string): boolean {\n    return str.length > 0 && this._isValid(str);\n  }\n}\n\nexport const envDetectorSync = new EnvDetectorSync();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Detector } from '../types';\nimport { ResourceDetectionConfig } from '../config';\nimport { IResource } from '../IResource';\nimport { envDetectorSync } from './EnvDetectorSync';\n\n/**\n * EnvDetector can be used to detect the presence of and create a Resource\n * from the OTEL_RESOURCE_ATTRIBUTES environment variable.\n */\nclass EnvDetector implements Detector {\n  /**\n   * Returns a {@link Resource} populated with attributes from the\n   * OTEL_RESOURCE_ATTRIBUTES environment variable. Note this is an async\n   * function to conform to the Detector interface.\n   *\n   * @param config The resource detection config\n   */\n  detect(config?: ResourceDetectionConfig): Promise<IResource> {\n    return Promise.resolve(envDetectorSync.detect(config));\n  }\n}\n\nexport const envDetector = new EnvDetector();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './platform';\nexport { browserDetector } from './BrowserDetector';\nexport { envDetector } from './EnvDetector';\nexport { browserDetectorSync } from './BrowserDetectorSync';\nexport { envDetectorSync } from './EnvDetectorSync';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { Resource } from './Resource';\nexport { IResource } from './IResource';\nexport { defaultServiceName } from './platform';\nexport { DetectorSync, ResourceAttributes, Detector } from './types';\nexport { ResourceDetectionConfig } from './config';\nexport {\n  browserDetector,\n  browserDetectorSync,\n  envDetector,\n  envDetectorSync,\n  hostDetector,\n  hostDetectorSync,\n  osDetector,\n  osDetectorSync,\n  processDetector,\n  processDetectorSync,\n  serviceInstanceIdDetectorSync,\n} from './detectors';\nexport { detectResourcesSync, detectResources } from './detect-resources';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * AggregationTemporality indicates the way additive quantities are expressed.\n */\nexport enum AggregationTemporality {\n  DELTA,\n  CUMULATIVE,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes, ValueType } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { Histogram, ExponentialHistogram } from '../aggregator/types';\n\nexport interface MetricDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  /**\n   * @deprecated exporter should avoid depending on the type of the instrument\n   * as their resulting aggregator can be re-mapped with views.\n   */\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n}\n\n/**\n * Basic metric data fields.\n */\ninterface BaseMetricData {\n  readonly descriptor: MetricDescriptor;\n  readonly aggregationTemporality: AggregationTemporality;\n  /**\n   * DataPointType of the metric instrument.\n   */\n  readonly dataPointType: DataPointType;\n}\n\n/**\n * Represents a metric data aggregated by either a LastValueAggregation or\n * SumAggregation.\n */\nexport interface SumMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.SUM;\n  readonly dataPoints: DataPoint<number>[];\n  readonly isMonotonic: boolean;\n}\n\nexport interface GaugeMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.GAUGE;\n  readonly dataPoints: DataPoint<number>[];\n}\n\n/**\n * Represents a metric data aggregated by a HistogramAggregation.\n */\nexport interface HistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.HISTOGRAM;\n  readonly dataPoints: DataPoint<Histogram>[];\n}\n\n/**\n * Represents a metric data aggregated by a ExponentialHistogramAggregation.\n */\nexport interface ExponentialHistogramMetricData extends BaseMetricData {\n  readonly dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM;\n  readonly dataPoints: DataPoint<ExponentialHistogram>[];\n}\n\n/**\n * Represents an aggregated metric data.\n */\nexport type MetricData =\n  | SumMetricData\n  | GaugeMetricData\n  | HistogramMetricData\n  | ExponentialHistogramMetricData;\n\nexport interface ScopeMetrics {\n  scope: InstrumentationScope;\n  metrics: MetricData[];\n}\n\nexport interface ResourceMetrics {\n  resource: IResource;\n  scopeMetrics: ScopeMetrics[];\n}\n\n/**\n * Represents the collection result of the metrics. If there are any\n * non-critical errors in the collection, like throwing in a single observable\n * callback, these errors are aggregated in the {@link CollectionResult.errors}\n * array and other successfully collected metrics are returned.\n */\nexport interface CollectionResult {\n  /**\n   * Collected metrics.\n   */\n  resourceMetrics: ResourceMetrics;\n  /**\n   * Arbitrary JavaScript exception values.\n   */\n  errors: unknown[];\n}\n\n/**\n * The aggregated point data type.\n */\nexport enum DataPointType {\n  /**\n   * A histogram data point contains a histogram statistics of collected\n   * values with a list of explicit bucket boundaries and statistics such\n   * as min, max, count, and sum of all collected values.\n   */\n  HISTOGRAM,\n  /**\n   * An exponential histogram data point contains a histogram statistics of\n   * collected values where bucket boundaries are automatically calculated\n   * using an exponential function, and statistics such as min, max, count,\n   * and sum of all collected values.\n   */\n  EXPONENTIAL_HISTOGRAM,\n  /**\n   * A gauge metric data point has only a single numeric value.\n   */\n  GAUGE,\n  /**\n   * A sum metric data point has a single numeric value and a\n   * monotonicity-indicator.\n   */\n  SUM,\n}\n\n/**\n * Represents an aggregated point data with start time, end time and their\n * associated attributes and points.\n */\nexport interface DataPoint<T> {\n  /**\n   * The start epoch timestamp of the DataPoint, usually the time when\n   * the metric was created when the preferred AggregationTemporality is\n   * CUMULATIVE, or last collection time otherwise.\n   */\n  readonly startTime: HrTime;\n  /**\n   * The end epoch timestamp when data were collected, usually it represents\n   * the moment when `MetricReader.collect` was called.\n   */\n  readonly endTime: HrTime;\n  /**\n   * The attributes associated with this DataPoint.\n   */\n  readonly attributes: MetricAttributes;\n  /**\n   * The value for this DataPoint. The type of the value is indicated by the\n   * {@link DataPointType}.\n   */\n  readonly value: T;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport type Maybe<T> = T | undefined;\n\nexport function isNotNullish<T>(item: Maybe<T>): item is T {\n  return item !== undefined && item !== null;\n}\n\n/**\n * Converting the unordered attributes into unique identifier string.\n * @param attributes user provided unordered MetricAttributes.\n */\nexport function hashAttributes(attributes: MetricAttributes): string {\n  let keys = Object.keys(attributes);\n  if (keys.length === 0) return '';\n\n  // Return a string that is stable on key orders.\n  keys = keys.sort();\n  return JSON.stringify(keys.map(key => [key, attributes[key]]));\n}\n\n/**\n * Converting the instrumentation scope object to a unique identifier string.\n * @param instrumentationScope\n */\nexport function instrumentationScopeId(\n  instrumentationScope: InstrumentationScope\n): string {\n  return `${instrumentationScope.name}:${instrumentationScope.version ?? ''}:${\n    instrumentationScope.schemaUrl ?? ''\n  }`;\n}\n\n/**\n * Error that is thrown on timeouts.\n */\nexport class TimeoutError extends Error {\n  constructor(message?: string) {\n    super(message);\n\n    // manually adjust prototype to retain `instanceof` functionality when targeting ES5, see:\n    // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, TimeoutError.prototype);\n  }\n}\n\n/**\n * Adds a timeout to a promise and rejects if the specified timeout has elapsed. Also rejects if the specified promise\n * rejects, and resolves if the specified promise resolves.\n *\n * <p> NOTE: this operation will continue even after it throws a {@link TimeoutError}.\n *\n * @param promise promise to use with timeout.\n * @param timeout the timeout in milliseconds until the returned promise is rejected.\n */\nexport function callWithTimeout<T>(\n  promise: Promise<T>,\n  timeout: number\n): Promise<T> {\n  let timeoutHandle: ReturnType<typeof setTimeout>;\n\n  const timeoutPromise = new Promise<never>(function timeoutFunction(\n    _resolve,\n    reject\n  ) {\n    timeoutHandle = setTimeout(function timeoutHandler() {\n      reject(new TimeoutError('Operation timed out.'));\n    }, timeout);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(\n    result => {\n      clearTimeout(timeoutHandle);\n      return result;\n    },\n    reason => {\n      clearTimeout(timeoutHandle);\n      throw reason;\n    }\n  );\n}\n\nexport interface PromiseAllSettledFulfillResult<T> {\n  status: 'fulfilled';\n  value: T;\n}\n\nexport interface PromiseAllSettledRejectionResult {\n  status: 'rejected';\n  reason: unknown;\n}\n\nexport type PromiseAllSettledResult<T> =\n  | PromiseAllSettledFulfillResult<T>\n  | PromiseAllSettledRejectionResult;\n\n/**\n * Node.js v12.9 lower and browser compatible `Promise.allSettled`.\n */\nexport async function PromiseAllSettled<T>(\n  promises: Promise<T>[]\n): Promise<PromiseAllSettledResult<T>[]> {\n  return Promise.all(\n    promises.map<Promise<PromiseAllSettledResult<T>>>(async p => {\n      try {\n        const ret = await p;\n        return {\n          status: 'fulfilled',\n          value: ret,\n        };\n      } catch (e) {\n        return {\n          status: 'rejected',\n          reason: e,\n        };\n      }\n    })\n  );\n}\n\nexport function isPromiseAllSettledRejectionResult(\n  it: PromiseAllSettledResult<unknown>\n): it is PromiseAllSettledRejectionResult {\n  return it.status === 'rejected';\n}\n\n/**\n * Node.js v11.0 lower and browser compatible `Array.prototype.flatMap`.\n */\nexport function FlatMap<T, R>(arr: T[], fn: (it: T) => R[]): R[] {\n  const result: R[] = [];\n  arr.forEach(it => {\n    result.push(...fn(it));\n  });\n  return result;\n}\n\nexport function setEquals(lhs: Set<unknown>, rhs: Set<unknown>): boolean {\n  if (lhs.size !== rhs.size) {\n    return false;\n  }\n  for (const item of lhs) {\n    if (!rhs.has(item)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Binary search the sorted array to the find lower bound for the value.\n * @param arr\n * @param value\n * @returns\n */\nexport function binarySearchLB(arr: number[], value: number): number {\n  let lo = 0;\n  let hi = arr.length - 1;\n\n  while (hi - lo > 1) {\n    const mid = Math.trunc((hi + lo) / 2);\n    if (arr[mid] <= value) {\n      lo = mid;\n    } else {\n      hi = mid - 1;\n    }\n  }\n\n  if (arr[hi] <= value) {\n    return hi;\n  } else if (arr[lo] <= value) {\n    return lo;\n  }\n  return -1;\n}\n\nexport function equalsCaseInsensitive(lhs: string, rhs: string): boolean {\n  return lhs.toLowerCase() === rhs.toLowerCase();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData, MetricDescriptor } from '../export/MetricData';\nimport { Maybe } from '../utils';\n\n/** The kind of aggregator. */\nexport enum AggregatorKind {\n  DROP,\n  SUM,\n  LAST_VALUE,\n  HISTOGRAM,\n  EXPONENTIAL_HISTOGRAM,\n}\n\n/** DataPoint value type for SumAggregation. */\nexport type Sum = number;\n\n/** DataPoint value type for LastValueAggregation. */\nexport type LastValue = number;\n\n/** DataPoint value type for HistogramAggregation. */\nexport interface Histogram {\n  /**\n   * Buckets are implemented using two different arrays:\n   *  - boundaries: contains every finite bucket boundary, which are inclusive lower bounds\n   *  - counts: contains event counts for each bucket\n   *\n   * Note that we'll always have n+1 buckets, where n is the number of boundaries.\n   * This is because we need to count events that are below the lowest boundary.\n   *\n   * Example: if we measure the values: [5, 30, 5, 40, 5, 15, 15, 15, 25]\n   *  with the boundaries [ 10, 20, 30 ], we will have the following state:\n   *\n   * buckets: {\n   *\tboundaries: [10, 20, 30],\n   *\tcounts: [3, 3, 1, 2],\n   * }\n   */\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum?: number;\n  count: number;\n  min?: number;\n  max?: number;\n}\n\n/** DataPoint value type for ExponentialHistogramAggregation. */\nexport interface ExponentialHistogram {\n  count: number;\n  sum?: number;\n  scale: number;\n  zeroCount: number;\n  positive: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  negative: {\n    offset: number;\n    bucketCounts: number[];\n  };\n  min?: number;\n  max?: number;\n}\n\n/**\n * An Aggregator accumulation state.\n */\nexport interface Accumulation {\n  setStartTime(startTime: HrTime): void;\n  record(value: number): void;\n}\n\nexport type AccumulationRecord<T> = [MetricAttributes, T];\n\n/**\n * Base interface for aggregators. Aggregators are responsible for holding\n * aggregated values and taking a snapshot of these values upon export.\n */\nexport interface Aggregator<T> {\n  /** The kind of the aggregator. */\n  kind: AggregatorKind;\n\n  /**\n   * Create a clean state of accumulation.\n   */\n  createAccumulation(startTime: HrTime): T;\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * This should always assume that the accumulations do not overlap and merge together for a new\n   * cumulative report.\n   *\n   * @param previous the previously captured accumulation\n   * @param delta the newly captured (delta) accumulation\n   * @returns the result of the merge of the given accumulations\n   */\n  merge(previous: T, delta: T): T;\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * @param previous the previously captured accumulation\n   * @param current the newly captured (cumulative) accumulation\n   * @returns The resulting delta accumulation\n   */\n  diff(previous: T, current: T): T;\n\n  /**\n   * Returns the {@link MetricData} that this {@link Aggregator} will produce.\n   *\n   * @param descriptor the metric descriptor.\n   * @param aggregationTemporality the temporality of the resulting {@link MetricData}\n   * @param accumulationByAttributes the array of attributes and accumulation pairs.\n   * @param endTime the end time of the metric data.\n   * @return the {@link MetricData} that this {@link Aggregator} will produce.\n   */\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<T>[],\n    endTime: HrTime\n  ): Maybe<MetricData>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { MetricData, MetricDescriptor } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregatorKind, Aggregator, AccumulationRecord } from './types';\n\n/** Basic aggregator for None which keeps no recorded value. */\nexport class DropAggregator implements Aggregator<undefined> {\n  kind: AggregatorKind.DROP = AggregatorKind.DROP;\n\n  createAccumulation() {\n    return undefined;\n  }\n\n  merge(_previous: undefined, _delta: undefined) {\n    return undefined;\n  }\n\n  diff(_previous: undefined, _current: undefined) {\n    return undefined;\n  }\n\n  toMetricData(\n    _descriptor: MetricDescriptor,\n    _aggregationTemporality: AggregationTemporality,\n    _accumulationByAttributes: AccumulationRecord<undefined>[],\n    _endTime: HrTime\n  ): Maybe<MetricData> {\n    return undefined;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricOptions, ValueType, diag } from '@opentelemetry/api';\nimport { View } from './view/View';\nimport { equalsCaseInsensitive } from './utils';\n\n/**\n * Supported types of metric instruments.\n */\nexport enum InstrumentType {\n  COUNTER = 'COUNTER',\n  GAUGE = 'GAUGE',\n  HISTOGRAM = 'HISTOGRAM',\n  UP_DOWN_COUNTER = 'UP_DOWN_COUNTER',\n  OBSERVABLE_COUNTER = 'OBSERVABLE_COUNTER',\n  OBSERVABLE_GAUGE = 'OBSERVABLE_GAUGE',\n  OBSERVABLE_UP_DOWN_COUNTER = 'OBSERVABLE_UP_DOWN_COUNTER',\n}\n\n/**\n * An internal interface describing the instrument.\n *\n * This is intentionally distinguished from the public MetricDescriptor (a.k.a. InstrumentDescriptor)\n * which may not contains internal fields like metric advice.\n */\nexport interface InstrumentDescriptor {\n  readonly name: string;\n  readonly description: string;\n  readonly unit: string;\n  readonly type: InstrumentType;\n  readonly valueType: ValueType;\n  /**\n   * @experimental\n   *\n   * This is intentionally not using the API's type as it's only available from @opentelemetry/api 1.7.0 and up.\n   * In SDK 2.0 we'll be able to bump the minimum API version and remove this workaround.\n   */\n  readonly advice: {\n    /**\n     * Hint the explicit bucket boundaries for SDK if the metric has been\n     * aggregated with a HistogramAggregator.\n     */\n    explicitBucketBoundaries?: number[];\n  };\n}\n\nexport function createInstrumentDescriptor(\n  name: string,\n  type: InstrumentType,\n  options?: MetricOptions\n): InstrumentDescriptor {\n  if (!isValidName(name)) {\n    diag.warn(\n      `Invalid metric name: \"${name}\". The metric name should be a ASCII string with a length no greater than 255 characters.`\n    );\n  }\n  return {\n    name,\n    type,\n    description: options?.description ?? '',\n    unit: options?.unit ?? '',\n    valueType: options?.valueType ?? ValueType.DOUBLE,\n    advice: options?.advice ?? {},\n  };\n}\n\nexport function createInstrumentDescriptorWithView(\n  view: View,\n  instrument: InstrumentDescriptor\n): InstrumentDescriptor {\n  return {\n    name: view.name ?? instrument.name,\n    description: view.description ?? instrument.description,\n    type: instrument.type,\n    unit: instrument.unit,\n    valueType: instrument.valueType,\n    advice: instrument.advice,\n  };\n}\n\nexport function isDescriptorCompatibleWith(\n  descriptor: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  // Names are case-insensitive strings.\n  return (\n    equalsCaseInsensitive(descriptor.name, otherDescriptor.name) &&\n    descriptor.unit === otherDescriptor.unit &&\n    descriptor.type === otherDescriptor.type &&\n    descriptor.valueType === otherDescriptor.valueType\n  );\n}\n\n// ASCII string with a length no greater than 255 characters.\n// NB: the first character counted separately from the rest.\nconst NAME_REGEXP = /^[a-z][a-z0-9_.\\-/]{0,254}$/i;\nexport function isValidName(name: string): boolean {\n  return name.match(NAME_REGEXP) != null;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n} from './types';\nimport {\n  DataPointType,\n  HistogramMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { binarySearchLB, Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\n/**\n * Internal value type for HistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram {\n  buckets: {\n    boundaries: number[];\n    counts: number[];\n  };\n  sum: number;\n  count: number;\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n}\n\nfunction createNewEmptyCheckpoint(boundaries: number[]): InternalHistogram {\n  const counts = boundaries.map(() => 0);\n  counts.push(0);\n  return {\n    buckets: {\n      boundaries,\n      counts,\n    },\n    sum: 0,\n    count: 0,\n    hasMinMax: false,\n    min: Infinity,\n    max: -Infinity,\n  };\n}\n\nexport class HistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private readonly _boundaries: number[],\n    private _recordMinMax = true,\n    private _current: InternalHistogram = createNewEmptyCheckpoint(_boundaries)\n  ) {}\n\n  record(value: number): void {\n    // NaN does not fall into any bucket, is not zero and should not be counted,\n    // NaN is never greater than max nor less than min, therefore return as there's nothing for us to do.\n    if (Number.isNaN(value)) {\n      return;\n    }\n\n    this._current.count += 1;\n    this._current.sum += value;\n\n    if (this._recordMinMax) {\n      this._current.min = Math.min(value, this._current.min);\n      this._current.max = Math.max(value, this._current.max);\n      this._current.hasMinMax = true;\n    }\n\n    const idx = binarySearchLB(this._boundaries, value);\n    this._current.buckets.counts[idx + 1] += 1;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): InternalHistogram {\n    return this._current;\n  }\n}\n\n/**\n * Basic aggregator which observes events and counts them in pre-defined buckets\n * and provides the total sum and count of all observations.\n */\nexport class HistogramAggregator implements Aggregator<HistogramAccumulation> {\n  public kind: AggregatorKind.HISTOGRAM = AggregatorKind.HISTOGRAM;\n\n  /**\n   * @param _boundaries sorted upper bounds of recorded values.\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    private readonly _boundaries: number[],\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new HistogramAccumulation(\n      startTime,\n      this._boundaries,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two histogram accumulations. As long as one Aggregator\n   * instance produces all Accumulations with constant boundaries we don't need to worry about\n   * merging accumulations with different boundaries.\n   */\n  merge(\n    previous: HistogramAccumulation,\n    delta: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const deltaValue = delta.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const deltaCounts = deltaValue.buckets.counts;\n\n    const mergedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      mergedCounts[idx] = previousCounts[idx] + deltaCounts[idx];\n    }\n\n    let min = Infinity;\n    let max = -Infinity;\n\n    if (this._recordMinMax) {\n      if (previousValue.hasMinMax && deltaValue.hasMinMax) {\n        min = Math.min(previousValue.min, deltaValue.min);\n        max = Math.max(previousValue.max, deltaValue.max);\n      } else if (previousValue.hasMinMax) {\n        min = previousValue.min;\n        max = previousValue.max;\n      } else if (deltaValue.hasMinMax) {\n        min = deltaValue.min;\n        max = deltaValue.max;\n      }\n    }\n\n    return new HistogramAccumulation(\n      previous.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: mergedCounts,\n        },\n        count: previousValue.count + deltaValue.count,\n        sum: previousValue.sum + deltaValue.sum,\n        hasMinMax:\n          this._recordMinMax &&\n          (previousValue.hasMinMax || deltaValue.hasMinMax),\n        min: min,\n        max: max,\n      }\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: HistogramAccumulation,\n    current: HistogramAccumulation\n  ): HistogramAccumulation {\n    const previousValue = previous.toPointValue();\n    const currentValue = current.toPointValue();\n\n    const previousCounts = previousValue.buckets.counts;\n    const currentCounts = currentValue.buckets.counts;\n\n    const diffedCounts = new Array(previousCounts.length);\n    for (let idx = 0; idx < previousCounts.length; idx++) {\n      diffedCounts[idx] = currentCounts[idx] - previousCounts[idx];\n    }\n\n    return new HistogramAccumulation(\n      current.startTime,\n      previousValue.buckets.boundaries,\n      this._recordMinMax,\n      {\n        buckets: {\n          boundaries: previousValue.buckets.boundaries,\n          counts: diffedCounts,\n        },\n        count: currentValue.count - previousValue.count,\n        sum: currentValue.sum - previousValue.sum,\n        hasMinMax: false,\n        min: Infinity,\n        max: -Infinity,\n      }\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<HistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<HistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.GAUGE ||\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            buckets: pointValue.buckets,\n            count: pointValue.count,\n          },\n        };\n      }),\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class Buckets {\n  /**\n   * The term index refers to the number of the exponential histogram bucket\n   * used to determine its boundaries. The lower boundary of a bucket is\n   * determined by base ** index and the upper boundary of a bucket is\n   * determined by base ** (index + 1). index values are signed to account\n   * for values less than or equal to 1.\n   *\n   * indexBase is the index of the 0th position in the\n   * backing array, i.e., backing[0] is the count\n   * in the bucket with index `indexBase`.\n   *\n   * indexStart is the smallest index value represented\n   * in the backing array.\n   *\n   * indexEnd is the largest index value represented in\n   * the backing array.\n   */\n  constructor(\n    public backing = new BucketsBacking(),\n    public indexBase = 0,\n    public indexStart = 0,\n    public indexEnd = 0\n  ) {}\n\n  /**\n   * Offset is the bucket index of the smallest entry in the counts array\n   * @returns {number}\n   */\n  get offset(): number {\n    return this.indexStart;\n  }\n\n  /**\n   * Buckets is a view into the backing array.\n   * @returns {number}\n   */\n  get length(): number {\n    if (this.backing.length === 0) {\n      return 0;\n    }\n\n    if (this.indexEnd === this.indexStart && this.at(0) === 0) {\n      return 0;\n    }\n\n    return this.indexEnd - this.indexStart + 1;\n  }\n\n  /**\n   * An array of counts, where count[i] carries the count\n   * of the bucket at index (offset+i).  count[i] is the count of\n   * values greater than base^(offset+i) and less than or equal to\n   * base^(offset+i+1).\n   * @returns {number} The logical counts based on the backing array\n   */\n  counts(): number[] {\n    return Array.from({ length: this.length }, (_, i) => this.at(i));\n  }\n\n  /**\n   * At returns the count of the bucket at a position in the logical\n   * array of counts.\n   * @param position\n   * @returns {number}\n   */\n  at(position: number): number {\n    const bias = this.indexBase - this.indexStart;\n    if (position < bias) {\n      position += this.backing.length;\n    }\n\n    position -= bias;\n    return this.backing.countAt(position);\n  }\n\n  /**\n   * incrementBucket increments the backing array index by `increment`\n   * @param bucketIndex\n   * @param increment\n   */\n  incrementBucket(bucketIndex: number, increment: number) {\n    this.backing.increment(bucketIndex, increment);\n  }\n\n  /**\n   * decrementBucket decrements the backing array index by `decrement`\n   * if decrement is greater than the current value, it's set to 0.\n   * @param bucketIndex\n   * @param decrement\n   */\n  decrementBucket(bucketIndex: number, decrement: number) {\n    this.backing.decrement(bucketIndex, decrement);\n  }\n\n  /**\n   * trim removes leading and / or trailing zero buckets (which can occur\n   * after diffing two histos) and rotates the backing array so that the\n   * smallest non-zero index is in the 0th position of the backing array\n   */\n  trim() {\n    for (let i = 0; i < this.length; i++) {\n      if (this.at(i) !== 0) {\n        this.indexStart += i;\n        break;\n      } else if (i === this.length - 1) {\n        //the entire array is zeroed out\n        this.indexStart = this.indexEnd = this.indexBase = 0;\n        return;\n      }\n    }\n\n    for (let i = this.length - 1; i >= 0; i--) {\n      if (this.at(i) !== 0) {\n        this.indexEnd -= this.length - i - 1;\n        break;\n      }\n    }\n\n    this._rotate();\n  }\n\n  /**\n   * downscale first rotates, then collapses 2**`by`-to-1 buckets.\n   * @param by\n   */\n  downscale(by: number) {\n    this._rotate();\n\n    const size = 1 + this.indexEnd - this.indexStart;\n    const each = 1 << by;\n    let inpos = 0;\n    let outpos = 0;\n\n    for (let pos = this.indexStart; pos <= this.indexEnd; ) {\n      let mod = pos % each;\n      if (mod < 0) {\n        mod += each;\n      }\n      for (let i = mod; i < each && inpos < size; i++) {\n        this._relocateBucket(outpos, inpos);\n        inpos++;\n        pos++;\n      }\n      outpos++;\n    }\n\n    this.indexStart >>= by;\n    this.indexEnd >>= by;\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * Clone returns a deep copy of Buckets\n   * @returns {Buckets}\n   */\n  clone(): Buckets {\n    return new Buckets(\n      this.backing.clone(),\n      this.indexBase,\n      this.indexStart,\n      this.indexEnd\n    );\n  }\n\n  /**\n   * _rotate shifts the backing array contents so that indexStart ==\n   * indexBase to simplify the downscale logic.\n   */\n  private _rotate() {\n    const bias = this.indexBase - this.indexStart;\n\n    if (bias === 0) {\n      return;\n    } else if (bias > 0) {\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, bias);\n      this.backing.reverse(bias, this.backing.length);\n    } else {\n      // negative bias, this can happen when diffing two histograms\n      this.backing.reverse(0, this.backing.length);\n      this.backing.reverse(0, this.backing.length + bias);\n    }\n    this.indexBase = this.indexStart;\n  }\n\n  /**\n   * _relocateBucket adds the count in counts[src] to counts[dest] and\n   * resets count[src] to zero.\n   */\n  private _relocateBucket(dest: number, src: number) {\n    if (dest === src) {\n      return;\n    }\n    this.incrementBucket(dest, this.backing.emptyBucket(src));\n  }\n}\n\n/**\n * BucketsBacking holds the raw buckets and some utility methods to\n * manage them.\n */\nclass BucketsBacking {\n  constructor(private _counts = [0]) {}\n\n  /**\n   * length returns the physical size of the backing array, which\n   * is >= buckets.length()\n   */\n  get length(): number {\n    return this._counts.length;\n  }\n\n  /**\n   * countAt returns the count in a specific bucket\n   */\n  countAt(pos: number): number {\n    return this._counts[pos];\n  }\n\n  /**\n   * growTo grows a backing array and copies old entries\n   * into their correct new positions.\n   */\n  growTo(newSize: number, oldPositiveLimit: number, newPositiveLimit: number) {\n    const tmp = new Array<number>(newSize).fill(0);\n    tmp.splice(\n      newPositiveLimit,\n      this._counts.length - oldPositiveLimit,\n      ...this._counts.slice(oldPositiveLimit)\n    );\n    tmp.splice(0, oldPositiveLimit, ...this._counts.slice(0, oldPositiveLimit));\n    this._counts = tmp;\n  }\n\n  /**\n   * reverse the items in the backing array in the range [from, limit).\n   */\n  reverse(from: number, limit: number) {\n    const num = Math.floor((from + limit) / 2) - from;\n    for (let i = 0; i < num; i++) {\n      const tmp = this._counts[from + i];\n      this._counts[from + i] = this._counts[limit - i - 1];\n      this._counts[limit - i - 1] = tmp;\n    }\n  }\n\n  /**\n   * emptyBucket empties the count from a bucket, for\n   * moving into another.\n   */\n  emptyBucket(src: number): number {\n    const tmp = this._counts[src];\n    this._counts[src] = 0;\n    return tmp;\n  }\n\n  /**\n   * increments a bucket by `increment`\n   */\n  increment(bucketIndex: number, increment: number) {\n    this._counts[bucketIndex] += increment;\n  }\n\n  /**\n   * decrements a bucket by `decrement`\n   */\n  decrement(bucketIndex: number, decrement: number) {\n    if (this._counts[bucketIndex] >= decrement) {\n      this._counts[bucketIndex] -= decrement;\n    } else {\n      // this should not happen, but we're being defensive against\n      // negative counts.\n      this._counts[bucketIndex] = 0;\n    }\n  }\n\n  /**\n   * clone returns a deep copy of BucketsBacking\n   */\n  clone(): BucketsBacking {\n    return new BucketsBacking([...this._counts]);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The functions and constants in this file allow us to interact\n * with the internal representation of an IEEE 64-bit floating point\n * number. We need to work with all 64-bits, thus, care needs to be\n * taken when working with Javascript's bitwise operators (<<, >>, &,\n * |, etc) as they truncate operands to 32-bits. In order to work around\n * this we work with the 64-bits as two 32-bit halves, perform bitwise\n * operations on them independently, and combine the results (if needed).\n */\n\nexport const SIGNIFICAND_WIDTH = 52;\n\n/**\n * EXPONENT_MASK is set to 1 for the hi 32-bits of an IEEE 754\n * floating point exponent: 0x7ff00000.\n */\nconst EXPONENT_MASK = 0x7ff00000;\n\n/**\n * SIGNIFICAND_MASK is the mask for the significand portion of the hi 32-bits\n * of an IEEE 754 double-precision floating-point value: 0xfffff\n */\nconst SIGNIFICAND_MASK = 0xfffff;\n\n/**\n * EXPONENT_BIAS is the exponent bias specified for encoding\n * the IEEE 754 double-precision floating point exponent: 1023\n */\nconst EXPONENT_BIAS = 1023;\n\n/**\n * MIN_NORMAL_EXPONENT is the minimum exponent of a normalized\n * floating point: -1022.\n */\nexport const MIN_NORMAL_EXPONENT = -EXPONENT_BIAS + 1;\n\n/**\n * MAX_NORMAL_EXPONENT is the maximum exponent of a normalized\n * floating point: 1023.\n */\nexport const MAX_NORMAL_EXPONENT = EXPONENT_BIAS;\n\n/**\n * MIN_VALUE is the smallest normal number\n */\nexport const MIN_VALUE = Math.pow(2, -1022);\n\n/**\n * getNormalBase2 extracts the normalized base-2 fractional exponent.\n * This returns k for the equation f x 2**k where f is\n * in the range [1, 2).  Note that this function is not called for\n * subnormal numbers.\n * @param {number} value - the value to determine normalized base-2 fractional\n *    exponent for\n * @returns {number} the normalized base-2 exponent\n */\nexport function getNormalBase2(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const expBits = (hiBits & EXPONENT_MASK) >> 20;\n  return expBits - EXPONENT_BIAS;\n}\n\n/**\n * GetSignificand returns the 52 bit (unsigned) significand as a signed value.\n * @param {number} value - the floating point number to extract the significand from\n * @returns {number} The 52-bit significand\n */\nexport function getSignificand(value: number): number {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value);\n  // access the raw 64-bit float as two 32-bit uints\n  const hiBits = dv.getUint32(0);\n  const loBits = dv.getUint32(4);\n  // extract the significand bits from the hi bits and left shift 32 places note:\n  // we can't use the native << operator as it will truncate the result to 32-bits\n  const significandHiBits = (hiBits & SIGNIFICAND_MASK) * Math.pow(2, 32);\n  // combine the hi and lo bits and return\n  return significandHiBits + loBits;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Note: other languages provide this as a built in function. This is\n * a naive, but functionally correct implementation. This is used sparingly,\n * when creating a new mapping in a running application.\n *\n * ldexp returns frac × 2**exp. With the following special cases:\n *   ldexp(±0, exp) = ±0\n *   ldexp(±Inf, exp) = ±Inf\n *   ldexp(NaN, exp) = NaN\n * @param frac\n * @param exp\n * @returns {number}\n */\nexport function ldexp(frac: number, exp: number): number {\n  if (\n    frac === 0 ||\n    frac === Number.POSITIVE_INFINITY ||\n    frac === Number.NEGATIVE_INFINITY ||\n    Number.isNaN(frac)\n  ) {\n    return frac;\n  }\n  return frac * Math.pow(2, exp);\n}\n\n/**\n * Computes the next power of two that is greater than or equal to v.\n * This implementation more efficient than, but functionally equivalent\n * to Math.pow(2, Math.ceil(Math.log(x)/Math.log(2))).\n * @param v\n * @returns {number}\n */\nexport function nextGreaterSquare(v: number): number {\n  // The following expression computes the least power-of-two\n  // that is >= v.  There are a number of tricky ways to\n  // do this, see https://stackoverflow.com/questions/466204/rounding-up-to-next-power-of-2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport class MappingError extends Error {}\n\n/**\n * The mapping interface is used by the exponential histogram to determine\n * where to bucket values. The interface is implemented by ExponentMapping,\n * used for scales [-10, 0] and LogarithmMapping, used for scales [1, 20].\n */\nexport interface Mapping {\n  mapToIndex(value: number): number;\n  lowerBoundary(index: number): number;\n  get scale(): number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * ExponentMapping implements exponential mapping functions for\n * scales <=0. For scales > 0 LogarithmMapping should be used.\n */\nexport class ExponentMapping implements Mapping {\n  private readonly _shift: number;\n\n  constructor(scale: number) {\n    this._shift = -scale;\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value < ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex();\n    }\n\n    const exp = ieee754.getNormalBase2(value);\n\n    // In case the value is an exact power of two, compute a\n    // correction of -1. Note, we are using a custom _rightShift\n    // to accommodate a 52-bit argument, which the native bitwise\n    // operators do not support\n    const correction = this._rightShift(\n      ieee754.getSignificand(value) - 1,\n      ieee754.SIGNIFICAND_WIDTH\n    );\n\n    return (exp + correction) >> this._shift;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index < minIndex) {\n      throw new MappingError(\n        `underflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index > maxIndex) {\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    return util.ldexp(1, index << this._shift);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    if (this._shift === 0) {\n      return 0;\n    }\n    return -this._shift;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    let index = ieee754.MIN_NORMAL_EXPONENT >> this._shift;\n    if (this._shift < 2) {\n      index--;\n    }\n\n    return index;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ieee754.MAX_NORMAL_EXPONENT >> this._shift;\n  }\n\n  private _rightShift(value: number, shift: number): number {\n    return Math.floor(value * Math.pow(2, -shift));\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as ieee754 from './ieee754';\nimport * as util from '../util';\nimport { Mapping, MappingError } from './types';\n\n/**\n * LogarithmMapping implements exponential mapping functions for scale > 0.\n * For scales <= 0 the exponent mapping should be used.\n */\nexport class LogarithmMapping implements Mapping {\n  private readonly _scale: number;\n  private readonly _scaleFactor: number;\n  private readonly _inverseFactor: number;\n\n  constructor(scale: number) {\n    this._scale = scale;\n    this._scaleFactor = util.ldexp(Math.LOG2E, scale);\n    this._inverseFactor = util.ldexp(Math.LN2, -scale);\n  }\n\n  /**\n   * Maps positive floating point values to indexes corresponding to scale\n   * @param value\n   * @returns {number} index for provided value at the current scale\n   */\n  mapToIndex(value: number): number {\n    if (value <= ieee754.MIN_VALUE) {\n      return this._minNormalLowerBoundaryIndex() - 1;\n    }\n\n    // exact power of two special case\n    if (ieee754.getSignificand(value) === 0) {\n      const exp = ieee754.getNormalBase2(value);\n      return (exp << this._scale) - 1;\n    }\n\n    // non-power of two cases. use Math.floor to round the scaled logarithm\n    const index = Math.floor(Math.log(value) * this._scaleFactor);\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      return maxIndex;\n    }\n\n    return index;\n  }\n\n  /**\n   * Returns the lower bucket boundary for the given index for scale\n   *\n   * @param index\n   * @returns {number}\n   */\n  lowerBoundary(index: number): number {\n    const maxIndex = this._maxNormalLowerBoundaryIndex();\n    if (index >= maxIndex) {\n      if (index === maxIndex) {\n        return 2 * Math.exp((index - (1 << this._scale)) / this._scaleFactor);\n      }\n      throw new MappingError(\n        `overflow: ${index} is > maximum lower boundary: ${maxIndex}`\n      );\n    }\n\n    const minIndex = this._minNormalLowerBoundaryIndex();\n    if (index <= minIndex) {\n      if (index === minIndex) {\n        return ieee754.MIN_VALUE;\n      } else if (index === minIndex - 1) {\n        return Math.exp((index + (1 << this._scale)) / this._scaleFactor) / 2;\n      }\n      throw new MappingError(\n        `overflow: ${index} is < minimum lower boundary: ${minIndex}`\n      );\n    }\n\n    return Math.exp(index * this._inverseFactor);\n  }\n\n  /**\n   * The scale used by this mapping\n   * @returns {number}\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  private _minNormalLowerBoundaryIndex(): number {\n    return ieee754.MIN_NORMAL_EXPONENT << this._scale;\n  }\n\n  private _maxNormalLowerBoundaryIndex(): number {\n    return ((ieee754.MAX_NORMAL_EXPONENT + 1) << this._scale) - 1;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExponentMapping } from './ExponentMapping';\nimport { LogarithmMapping } from './LogarithmMapping';\nimport { MappingError, Mapping } from './types';\n\nconst MIN_SCALE = -10;\nconst MAX_SCALE = 20;\nconst PREBUILT_MAPPINGS = Array.from({ length: 31 }, (_, i) => {\n  if (i > 10) {\n    return new LogarithmMapping(i - 10);\n  }\n  return new ExponentMapping(i - 10);\n});\n\n/**\n * getMapping returns an appropriate mapping for the given scale. For scales -10\n * to 0 the underlying type will be ExponentMapping. For scales 1 to 20 the\n * underlying type will be LogarithmMapping.\n * @param scale a number in the range [-10, 20]\n * @returns {Mapping}\n */\nexport function getMapping(scale: number): Mapping {\n  if (scale > MAX_SCALE || scale < MIN_SCALE) {\n    throw new MappingError(\n      `expected scale >= ${MIN_SCALE} && <= ${MAX_SCALE}, got: ${scale}`\n    );\n  }\n  // mappings are offset by 10. scale -10 is at position 0 and scale 20 is at 30\n  return PREBUILT_MAPPINGS[scale + 10];\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  ExponentialHistogram,\n} from './types';\nimport {\n  DataPointType,\n  ExponentialHistogramMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { diag, HrTime } from '@opentelemetry/api';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Buckets } from './exponential-histogram/Buckets';\nimport { getMapping } from './exponential-histogram/mapping/getMapping';\nimport { Mapping } from './exponential-histogram/mapping/types';\nimport { nextGreaterSquare } from './exponential-histogram/util';\n\n/**\n * Internal value type for ExponentialHistogramAggregation.\n * Differs from the exported type as undefined sum/min/max complicate arithmetic\n * performed by this aggregation, but are required to be undefined in the exported types.\n */\ninterface InternalHistogram extends ExponentialHistogram {\n  hasMinMax: boolean;\n  min: number;\n  max: number;\n  sum: number;\n}\n\n// HighLow is a utility class used for computing a common scale for\n// two exponential histogram accumulations\nclass HighLow {\n  static combine(h1: HighLow, h2: HighLow): HighLow {\n    return new HighLow(Math.min(h1.low, h2.low), Math.max(h1.high, h2.high));\n  }\n  constructor(\n    public low: number,\n    public high: number\n  ) {}\n}\n\nconst MAX_SCALE = 20;\nconst DEFAULT_MAX_SIZE = 160;\nconst MIN_MAX_SIZE = 2;\n\nexport class ExponentialHistogramAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime = startTime,\n    private _maxSize = DEFAULT_MAX_SIZE,\n    private _recordMinMax = true,\n    private _sum = 0,\n    private _count = 0,\n    private _zeroCount = 0,\n    private _min = Number.POSITIVE_INFINITY,\n    private _max = Number.NEGATIVE_INFINITY,\n    private _positive = new Buckets(),\n    private _negative = new Buckets(),\n    private _mapping: Mapping = getMapping(MAX_SCALE)\n  ) {\n    if (this._maxSize < MIN_MAX_SIZE) {\n      diag.warn(`Exponential Histogram Max Size set to ${this._maxSize}, \\\n                changing to the minimum size of: ${MIN_MAX_SIZE}`);\n      this._maxSize = MIN_MAX_SIZE;\n    }\n  }\n\n  /**\n   * record updates a histogram with a single count\n   * @param {Number} value\n   */\n  record(value: number) {\n    this.updateByIncrement(value, 1);\n  }\n\n  /**\n   * Sets the start time for this accumulation\n   * @param {HrTime} startTime\n   */\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  /**\n   * Returns the datapoint representation of this accumulation\n   * @param {HrTime} startTime\n   */\n  toPointValue(): InternalHistogram {\n    return {\n      hasMinMax: this._recordMinMax,\n      min: this.min,\n      max: this.max,\n      sum: this.sum,\n      positive: {\n        offset: this.positive.offset,\n        bucketCounts: this.positive.counts(),\n      },\n      negative: {\n        offset: this.negative.offset,\n        bucketCounts: this.negative.counts(),\n      },\n      count: this.count,\n      scale: this.scale,\n      zeroCount: this.zeroCount,\n    };\n  }\n\n  /**\n   * @returns {Number} The sum of values recorded by this accumulation\n   */\n  get sum(): number {\n    return this._sum;\n  }\n\n  /**\n   * @returns {Number} The minimum value recorded by this accumulation\n   */\n  get min(): number {\n    return this._min;\n  }\n\n  /**\n   * @returns {Number} The maximum value recorded by this accumulation\n   */\n  get max(): number {\n    return this._max;\n  }\n\n  /**\n   * @returns {Number} The count of values recorded by this accumulation\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * @returns {Number} The number of 0 values recorded by this accumulation\n   */\n  get zeroCount(): number {\n    return this._zeroCount;\n  }\n\n  /**\n   * @returns {Number} The scale used by this accumulation\n   */\n  get scale(): number {\n    if (this._count === this._zeroCount) {\n      // all zeros! scale doesn't matter, use zero\n      return 0;\n    }\n    return this._mapping.scale;\n  }\n\n  /**\n   * positive holds the positive values\n   * @returns {Buckets}\n   */\n  get positive(): Buckets {\n    return this._positive;\n  }\n\n  /**\n   * negative holds the negative values by their absolute value\n   * @returns {Buckets}\n   */\n  get negative(): Buckets {\n    return this._negative;\n  }\n\n  /**\n   * updateByIncr supports updating a histogram with a non-negative\n   * increment.\n   * @param value\n   * @param increment\n   */\n  updateByIncrement(value: number, increment: number) {\n    // NaN does not fall into any bucket, is not zero and should not be counted,\n    // NaN is never greater than max nor less than min, therefore return as there's nothing for us to do.\n    if (Number.isNaN(value)) {\n      return;\n    }\n\n    if (value > this._max) {\n      this._max = value;\n    }\n    if (value < this._min) {\n      this._min = value;\n    }\n\n    this._count += increment;\n\n    if (value === 0) {\n      this._zeroCount += increment;\n      return;\n    }\n\n    this._sum += value * increment;\n\n    if (value > 0) {\n      this._updateBuckets(this._positive, value, increment);\n    } else {\n      this._updateBuckets(this._negative, -value, increment);\n    }\n  }\n\n  /**\n   * merge combines data from previous value into self\n   * @param {ExponentialHistogramAccumulation} previous\n   */\n  merge(previous: ExponentialHistogramAccumulation) {\n    if (this._count === 0) {\n      this._min = previous.min;\n      this._max = previous.max;\n    } else if (previous.count !== 0) {\n      if (previous.min < this.min) {\n        this._min = previous.min;\n      }\n      if (previous.max > this.max) {\n        this._max = previous.max;\n      }\n    }\n\n    this.startTime = previous.startTime;\n    this._sum += previous.sum;\n    this._count += previous.count;\n    this._zeroCount += previous.zeroCount;\n\n    const minScale = this._minScale(previous);\n\n    this._downscale(this.scale - minScale);\n\n    this._mergeBuckets(this.positive, previous, previous.positive, minScale);\n    this._mergeBuckets(this.negative, previous, previous.negative, minScale);\n  }\n\n  /**\n   * diff subtracts other from self\n   * @param {ExponentialHistogramAccumulation} other\n   */\n  diff(other: ExponentialHistogramAccumulation) {\n    this._min = Infinity;\n    this._max = -Infinity;\n    this._sum -= other.sum;\n    this._count -= other.count;\n    this._zeroCount -= other.zeroCount;\n\n    const minScale = this._minScale(other);\n\n    this._downscale(this.scale - minScale);\n\n    this._diffBuckets(this.positive, other, other.positive, minScale);\n    this._diffBuckets(this.negative, other, other.negative, minScale);\n  }\n\n  /**\n   * clone returns a deep copy of self\n   * @returns {ExponentialHistogramAccumulation}\n   */\n  clone(): ExponentialHistogramAccumulation {\n    return new ExponentialHistogramAccumulation(\n      this.startTime,\n      this._maxSize,\n      this._recordMinMax,\n      this._sum,\n      this._count,\n      this._zeroCount,\n      this._min,\n      this._max,\n      this.positive.clone(),\n      this.negative.clone(),\n      this._mapping\n    );\n  }\n\n  /**\n   * _updateBuckets maps the incoming value to a bucket index for the current\n   * scale. If the bucket index is outside of the range of the backing array,\n   * it will rescale the backing array and update the mapping for the new scale.\n   */\n  private _updateBuckets(buckets: Buckets, value: number, increment: number) {\n    let index = this._mapping.mapToIndex(value);\n\n    // rescale the mapping if needed\n    let rescalingNeeded = false;\n    let high = 0;\n    let low = 0;\n\n    if (buckets.length === 0) {\n      buckets.indexStart = index;\n      buckets.indexEnd = buckets.indexStart;\n      buckets.indexBase = buckets.indexStart;\n    } else if (\n      index < buckets.indexStart &&\n      buckets.indexEnd - index >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = index;\n      high = buckets.indexEnd;\n    } else if (\n      index > buckets.indexEnd &&\n      index - buckets.indexStart >= this._maxSize\n    ) {\n      rescalingNeeded = true;\n      low = buckets.indexStart;\n      high = index;\n    }\n\n    // rescale and compute index at new scale\n    if (rescalingNeeded) {\n      const change = this._changeScale(high, low);\n      this._downscale(change);\n      index = this._mapping.mapToIndex(value);\n    }\n\n    this._incrementIndexBy(buckets, index, increment);\n  }\n\n  /**\n   * _incrementIndexBy increments the count of the bucket specified by `index`.\n   * If the index is outside of the range [buckets.indexStart, buckets.indexEnd]\n   * the boundaries of the backing array will be adjusted and more buckets will\n   * be added if needed.\n   */\n  private _incrementIndexBy(\n    buckets: Buckets,\n    index: number,\n    increment: number\n  ) {\n    if (increment === 0) {\n      // nothing to do for a zero increment, can happen during a merge operation\n      return;\n    }\n\n    if (buckets.length === 0) {\n      buckets.indexStart = buckets.indexEnd = buckets.indexBase = index;\n    }\n\n    if (index < buckets.indexStart) {\n      const span = buckets.indexEnd - index;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexStart = index;\n    } else if (index > buckets.indexEnd) {\n      const span = index - buckets.indexStart;\n      if (span >= buckets.backing.length) {\n        this._grow(buckets, span + 1);\n      }\n      buckets.indexEnd = index;\n    }\n\n    let bucketIndex = index - buckets.indexBase;\n    if (bucketIndex < 0) {\n      bucketIndex += buckets.backing.length;\n    }\n    buckets.incrementBucket(bucketIndex, increment);\n  }\n\n  /**\n   * grow resizes the backing array by doubling in size up to maxSize.\n   * This extends the array with a bunch of zeros and copies the\n   * existing counts to the same position.\n   */\n  private _grow(buckets: Buckets, needed: number) {\n    const size = buckets.backing.length;\n    const bias = buckets.indexBase - buckets.indexStart;\n    const oldPositiveLimit = size - bias;\n    let newSize = nextGreaterSquare(needed);\n    if (newSize > this._maxSize) {\n      newSize = this._maxSize;\n    }\n    const newPositiveLimit = newSize - bias;\n    buckets.backing.growTo(newSize, oldPositiveLimit, newPositiveLimit);\n  }\n\n  /**\n   * _changeScale computes how much downscaling is needed by shifting the\n   * high and low values until they are separated by no more than size.\n   */\n  private _changeScale(high: number, low: number): number {\n    let change = 0;\n    while (high - low >= this._maxSize) {\n      high >>= 1;\n      low >>= 1;\n      change++;\n    }\n    return change;\n  }\n\n  /**\n   * _downscale subtracts `change` from the current mapping scale.\n   */\n  private _downscale(change: number) {\n    if (change === 0) {\n      return;\n    }\n    if (change < 0) {\n      // Note: this should be impossible. If we get here it's because\n      // there is a bug in the implementation.\n      throw new Error(`impossible change of scale: ${this.scale}`);\n    }\n    const newScale = this._mapping.scale - change;\n\n    this._positive.downscale(change);\n    this._negative.downscale(change);\n\n    this._mapping = getMapping(newScale);\n  }\n\n  /**\n   * _minScale is used by diff and merge to compute an ideal combined scale\n   */\n  private _minScale(other: ExponentialHistogramAccumulation): number {\n    const minScale = Math.min(this.scale, other.scale);\n\n    const highLowPos = HighLow.combine(\n      this._highLowAtScale(this.positive, this.scale, minScale),\n      this._highLowAtScale(other.positive, other.scale, minScale)\n    );\n\n    const highLowNeg = HighLow.combine(\n      this._highLowAtScale(this.negative, this.scale, minScale),\n      this._highLowAtScale(other.negative, other.scale, minScale)\n    );\n\n    return Math.min(\n      minScale - this._changeScale(highLowPos.high, highLowPos.low),\n      minScale - this._changeScale(highLowNeg.high, highLowNeg.low)\n    );\n  }\n\n  /**\n   * _highLowAtScale is used by diff and merge to compute an ideal combined scale.\n   */\n  private _highLowAtScale(\n    buckets: Buckets,\n    currentScale: number,\n    newScale: number\n  ): HighLow {\n    if (buckets.length === 0) {\n      return new HighLow(0, -1);\n    }\n    const shift = currentScale - newScale;\n    return new HighLow(buckets.indexStart >> shift, buckets.indexEnd >> shift);\n  }\n\n  /**\n   * _mergeBuckets translates index values from another histogram and\n   * adds the values into the corresponding buckets of this histogram.\n   */\n  private _mergeBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      this._incrementIndexBy(\n        ours,\n        (theirOffset + i) >> theirChange,\n        theirs.at(i)\n      );\n    }\n  }\n\n  /**\n   * _diffBuckets translates index values from another histogram and\n   * subtracts the values in the corresponding buckets of this histogram.\n   */\n  private _diffBuckets(\n    ours: Buckets,\n    other: ExponentialHistogramAccumulation,\n    theirs: Buckets,\n    scale: number\n  ) {\n    const theirOffset = theirs.offset;\n    const theirChange = other.scale - scale;\n\n    for (let i = 0; i < theirs.length; i++) {\n      const ourIndex = (theirOffset + i) >> theirChange;\n      let bucketIndex = ourIndex - ours.indexBase;\n      if (bucketIndex < 0) {\n        bucketIndex += ours.backing.length;\n      }\n      ours.decrementBucket(bucketIndex, theirs.at(i));\n    }\n\n    ours.trim();\n  }\n}\n\n/**\n * Aggregator for ExponentialHistogramAccumulations\n */\nexport class ExponentialHistogramAggregator\n  implements Aggregator<ExponentialHistogramAccumulation>\n{\n  public kind: AggregatorKind.EXPONENTIAL_HISTOGRAM =\n    AggregatorKind.EXPONENTIAL_HISTOGRAM;\n\n  /**\n   * @param _maxSize Maximum number of buckets for each of the positive\n   *    and negative ranges, exclusive of the zero-bucket.\n   * @param _recordMinMax If set to true, min and max will be recorded.\n   *    Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    readonly _maxSize: number,\n    private readonly _recordMinMax: boolean\n  ) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new ExponentialHistogramAccumulation(\n      startTime,\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n\n  /**\n   * Return the result of the merge of two exponential histogram accumulations.\n   */\n  merge(\n    previous: ExponentialHistogramAccumulation,\n    delta: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = delta.clone();\n    result.merge(previous);\n\n    return result;\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(\n    previous: ExponentialHistogramAccumulation,\n    current: ExponentialHistogramAccumulation\n  ): ExponentialHistogramAccumulation {\n    const result = current.clone();\n    result.diff(previous);\n\n    return result;\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<ExponentialHistogramAccumulation>[],\n    endTime: HrTime\n  ): Maybe<ExponentialHistogramMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.EXPONENTIAL_HISTOGRAM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        const pointValue = accumulation.toPointValue();\n\n        // determine if instrument allows negative values.\n        const allowsNegativeValues =\n          descriptor.type === InstrumentType.GAUGE ||\n          descriptor.type === InstrumentType.UP_DOWN_COUNTER ||\n          descriptor.type === InstrumentType.OBSERVABLE_GAUGE ||\n          descriptor.type === InstrumentType.OBSERVABLE_UP_DOWN_COUNTER;\n\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: {\n            min: pointValue.hasMinMax ? pointValue.min : undefined,\n            max: pointValue.hasMinMax ? pointValue.max : undefined,\n            sum: !allowsNegativeValues ? pointValue.sum : undefined,\n            positive: {\n              offset: pointValue.positive.offset,\n              bucketCounts: pointValue.positive.bucketCounts,\n            },\n            negative: {\n              offset: pointValue.negative.offset,\n              bucketCounts: pointValue.negative.bucketCounts,\n            },\n            count: pointValue.count,\n            scale: pointValue.scale,\n            zeroCount: pointValue.zeroCount,\n          },\n        };\n      }),\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n  AggregatorKind,\n  LastValue,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { millisToHrTime, hrTimeToMicroseconds } from '@opentelemetry/core';\nimport {\n  DataPointType,\n  GaugeMetricData,\n  MetricDescriptor,\n} from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class LastValueAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    private _current: number = 0,\n    public sampleTime: HrTime = [0, 0]\n  ) {}\n\n  record(value: number): void {\n    this._current = value;\n    this.sampleTime = millisToHrTime(Date.now());\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): LastValue {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a LastValue from individual measurements. */\nexport class LastValueAggregator implements Aggregator<LastValueAccumulation> {\n  public kind: AggregatorKind.LAST_VALUE = AggregatorKind.LAST_VALUE;\n\n  createAccumulation(startTime: HrTime) {\n    return new LastValueAccumulation(startTime);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   *\n   * Return the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  merge(\n    previous: LastValueAccumulation,\n    delta: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(delta.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? delta\n        : previous;\n    return new LastValueAccumulation(\n      previous.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   *\n   * A delta aggregation is not meaningful to LastValueAggregator, just return\n   * the newly captured (delta) accumulation for LastValueAggregator.\n   */\n  diff(\n    previous: LastValueAccumulation,\n    current: LastValueAccumulation\n  ): LastValueAccumulation {\n    // nanoseconds may lose precisions.\n    const latestAccumulation =\n      hrTimeToMicroseconds(current.sampleTime) >=\n      hrTimeToMicroseconds(previous.sampleTime)\n        ? current\n        : previous;\n    return new LastValueAccumulation(\n      current.startTime,\n      latestAccumulation.toPointValue(),\n      latestAccumulation.sampleTime\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<LastValueAccumulation>[],\n    endTime: HrTime\n  ): Maybe<GaugeMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.GAUGE,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Sum,\n  AggregatorKind,\n  Aggregator,\n  Accumulation,\n  AccumulationRecord,\n} from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  DataPointType,\n  MetricDescriptor,\n  SumMetricData,\n} from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\n\nexport class SumAccumulation implements Accumulation {\n  constructor(\n    public startTime: HrTime,\n    public monotonic: boolean,\n    private _current: number = 0,\n    public reset = false\n  ) {}\n\n  record(value: number): void {\n    if (this.monotonic && value < 0) {\n      return;\n    }\n    this._current += value;\n  }\n\n  setStartTime(startTime: HrTime): void {\n    this.startTime = startTime;\n  }\n\n  toPointValue(): Sum {\n    return this._current;\n  }\n}\n\n/** Basic aggregator which calculates a Sum from individual measurements. */\nexport class SumAggregator implements Aggregator<SumAccumulation> {\n  public kind: AggregatorKind.SUM = AggregatorKind.SUM;\n\n  constructor(public monotonic: boolean) {}\n\n  createAccumulation(startTime: HrTime) {\n    return new SumAccumulation(startTime, this.monotonic);\n  }\n\n  /**\n   * Returns the result of the merge of the given accumulations.\n   */\n  merge(previous: SumAccumulation, delta: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const deltaPv = delta.toPointValue();\n    if (delta.reset) {\n      return new SumAccumulation(\n        delta.startTime,\n        this.monotonic,\n        deltaPv,\n        delta.reset\n      );\n    }\n    return new SumAccumulation(\n      previous.startTime,\n      this.monotonic,\n      prevPv + deltaPv\n    );\n  }\n\n  /**\n   * Returns a new DELTA aggregation by comparing two cumulative measurements.\n   */\n  diff(previous: SumAccumulation, current: SumAccumulation): SumAccumulation {\n    const prevPv = previous.toPointValue();\n    const currPv = current.toPointValue();\n    /**\n     * If the SumAggregator is a monotonic one and the previous point value is\n     * greater than the current one, a reset is deemed to be happened.\n     * Return the current point value to prevent the value from been reset.\n     */\n    if (this.monotonic && prevPv > currPv) {\n      return new SumAccumulation(\n        current.startTime,\n        this.monotonic,\n        currPv,\n        true\n      );\n    }\n    return new SumAccumulation(\n      current.startTime,\n      this.monotonic,\n      currPv - prevPv\n    );\n  }\n\n  toMetricData(\n    descriptor: MetricDescriptor,\n    aggregationTemporality: AggregationTemporality,\n    accumulationByAttributes: AccumulationRecord<SumAccumulation>[],\n    endTime: HrTime\n  ): Maybe<SumMetricData> {\n    return {\n      descriptor,\n      aggregationTemporality,\n      dataPointType: DataPointType.SUM,\n      dataPoints: accumulationByAttributes.map(([attributes, accumulation]) => {\n        return {\n          attributes,\n          startTime: accumulation.startTime,\n          endTime,\n          value: accumulation.toPointValue(),\n        };\n      }),\n      isMonotonic: this.monotonic,\n    };\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Drop';\nexport * from './Histogram';\nexport * from './ExponentialHistogram';\nexport * from './LastValue';\nexport * from './Sum';\nexport { Aggregator } from './types';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  Aggregator,\n  SumAggregator,\n  DropAggregator,\n  LastValueAggregator,\n  HistogramAggregator,\n  ExponentialHistogramAggregator,\n} from '../aggregator';\nimport { Accumulation } from '../aggregator/types';\nimport { InstrumentDescriptor, InstrumentType } from '../InstrumentDescriptor';\nimport { Maybe } from '../utils';\n\n/**\n * Configures how measurements are combined into metrics for views.\n *\n * Aggregation provides a set of built-in aggregations via static methods.\n */\nexport abstract class Aggregation {\n  abstract createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>>;\n\n  static Drop(): Aggregation {\n    return DROP_AGGREGATION;\n  }\n\n  static Sum(): Aggregation {\n    return SUM_AGGREGATION;\n  }\n\n  static LastValue(): Aggregation {\n    return LAST_VALUE_AGGREGATION;\n  }\n\n  static Histogram(): Aggregation {\n    return HISTOGRAM_AGGREGATION;\n  }\n\n  static ExponentialHistogram(): Aggregation {\n    return EXPONENTIAL_HISTOGRAM_AGGREGATION;\n  }\n\n  static Default(): Aggregation {\n    return DEFAULT_AGGREGATION;\n  }\n}\n\n/**\n * The default drop aggregation.\n */\nexport class DropAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new DropAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return DropAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default sum aggregation.\n */\nexport class SumAggregation extends Aggregation {\n  private static MONOTONIC_INSTANCE = new SumAggregator(true);\n  private static NON_MONOTONIC_INSTANCE = new SumAggregator(false);\n  createAggregator(instrument: InstrumentDescriptor) {\n    switch (instrument.type) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.HISTOGRAM: {\n        return SumAggregation.MONOTONIC_INSTANCE;\n      }\n      default: {\n        return SumAggregation.NON_MONOTONIC_INSTANCE;\n      }\n    }\n  }\n}\n\n/**\n * The default last value aggregation.\n */\nexport class LastValueAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new LastValueAggregator();\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return LastValueAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The default histogram aggregation.\n */\nexport class HistogramAggregation extends Aggregation {\n  private static DEFAULT_INSTANCE = new HistogramAggregator(\n    [0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000],\n    true\n  );\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return HistogramAggregation.DEFAULT_INSTANCE;\n  }\n}\n\n/**\n * The explicit bucket histogram aggregation.\n */\nexport class ExplicitBucketHistogramAggregation extends Aggregation {\n  private _boundaries: number[];\n\n  /**\n   * @param boundaries the bucket boundaries of the histogram aggregation\n   * @param _recordMinMax If set to true, min and max will be recorded. Otherwise, min and max will not be recorded.\n   */\n  constructor(\n    boundaries: number[],\n    private readonly _recordMinMax = true\n  ) {\n    super();\n    if (boundaries == null) {\n      throw new Error(\n        'ExplicitBucketHistogramAggregation should be created with explicit boundaries, if a single bucket histogram is required, please pass an empty array'\n      );\n    }\n    // Copy the boundaries array for modification.\n    boundaries = boundaries.concat();\n    // We need to an ordered set to be able to correctly compute count for each\n    // boundary since we'll iterate on each in order.\n    boundaries = boundaries.sort((a, b) => a - b);\n    // Remove all Infinity from the boundaries.\n    const minusInfinityIndex = boundaries.lastIndexOf(-Infinity);\n    let infinityIndex: number | undefined = boundaries.indexOf(Infinity);\n    if (infinityIndex === -1) {\n      infinityIndex = undefined;\n    }\n    this._boundaries = boundaries.slice(minusInfinityIndex + 1, infinityIndex);\n  }\n\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new HistogramAggregator(this._boundaries, this._recordMinMax);\n  }\n}\n\nexport class ExponentialHistogramAggregation extends Aggregation {\n  constructor(\n    private readonly _maxSize: number = 160,\n    private readonly _recordMinMax = true\n  ) {\n    super();\n  }\n  createAggregator(_instrument: InstrumentDescriptor) {\n    return new ExponentialHistogramAggregator(\n      this._maxSize,\n      this._recordMinMax\n    );\n  }\n}\n\n/**\n * The default aggregation.\n */\nexport class DefaultAggregation extends Aggregation {\n  private _resolve(instrument: InstrumentDescriptor): Aggregation {\n    // cast to unknown to disable complaints on the (unreachable) fallback.\n    switch (instrument.type as unknown) {\n      case InstrumentType.COUNTER:\n      case InstrumentType.UP_DOWN_COUNTER:\n      case InstrumentType.OBSERVABLE_COUNTER:\n      case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER: {\n        return SUM_AGGREGATION;\n      }\n      case InstrumentType.GAUGE:\n      case InstrumentType.OBSERVABLE_GAUGE: {\n        return LAST_VALUE_AGGREGATION;\n      }\n      case InstrumentType.HISTOGRAM: {\n        if (instrument.advice.explicitBucketBoundaries) {\n          return new ExplicitBucketHistogramAggregation(\n            instrument.advice.explicitBucketBoundaries\n          );\n        }\n        return HISTOGRAM_AGGREGATION;\n      }\n    }\n    api.diag.warn(`Unable to recognize instrument type: ${instrument.type}`);\n    return DROP_AGGREGATION;\n  }\n\n  createAggregator(\n    instrument: InstrumentDescriptor\n  ): Aggregator<Maybe<Accumulation>> {\n    return this._resolve(instrument).createAggregator(instrument);\n  }\n}\n\nconst DROP_AGGREGATION = new DropAggregation();\nconst SUM_AGGREGATION = new SumAggregation();\nconst LAST_VALUE_AGGREGATION = new LastValueAggregation();\nconst HISTOGRAM_AGGREGATION = new HistogramAggregation();\nconst EXPONENTIAL_HISTOGRAM_AGGREGATION = new ExponentialHistogramAggregation();\nconst DEFAULT_AGGREGATION = new DefaultAggregation();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { Aggregation } from '../view/Aggregation';\nimport { AggregationTemporality } from './AggregationTemporality';\n\n/**\n * Aggregation selector based on metric instrument types.\n */\nexport type AggregationSelector = (\n  instrumentType: InstrumentType\n) => Aggregation;\n\n/**\n * Aggregation temporality selector based on metric instrument types.\n */\nexport type AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => AggregationTemporality;\n\nexport const DEFAULT_AGGREGATION_SELECTOR: AggregationSelector =\n  _instrumentType => Aggregation.Default();\nexport const DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR: AggregationTemporalitySelector =\n  _instrumentType => AggregationTemporality.CUMULATIVE;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { MetricProducer } from './MetricProducer';\nimport { CollectionResult } from './MetricData';\nimport { FlatMap, callWithTimeout } from '../utils';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport {\n  CollectionOptions,\n  ForceFlushOptions,\n  ShutdownOptions,\n} from '../types';\nimport { Aggregation } from '../view/Aggregation';\nimport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_SELECTOR,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\nexport interface MetricReaderOptions {\n  /**\n   * Aggregation selector based on metric instrument types. If no views are\n   * configured for a metric instrument, a per-metric-reader aggregation is\n   * selected with this selector.\n   */\n  aggregationSelector?: AggregationSelector;\n  /**\n   * Aggregation temporality selector based on metric instrument types. If\n   * not configured, cumulative is used for all instruments.\n   */\n  aggregationTemporalitySelector?: AggregationTemporalitySelector;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n}\n\n/**\n * A registered reader of metrics that, when linked to a {@link MetricProducer}, offers global\n * control over metrics.\n */\nexport abstract class MetricReader {\n  // Tracks the shutdown state.\n  // TODO: use BindOncePromise here once a new version of @opentelemetry/core is available.\n  private _shutdown = false;\n  // Additional MetricProducers which will be combined with the SDK's output\n  private _metricProducers: MetricProducer[];\n  // MetricProducer used by this instance which produces metrics from the SDK\n  private _sdkMetricProducer?: MetricProducer;\n  private readonly _aggregationTemporalitySelector: AggregationTemporalitySelector;\n  private readonly _aggregationSelector: AggregationSelector;\n\n  constructor(options?: MetricReaderOptions) {\n    this._aggregationSelector =\n      options?.aggregationSelector ?? DEFAULT_AGGREGATION_SELECTOR;\n    this._aggregationTemporalitySelector =\n      options?.aggregationTemporalitySelector ??\n      DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n    this._metricProducers = options?.metricProducers ?? [];\n  }\n\n  /**\n   * Set the {@link MetricProducer} used by this instance. **This should only be called by the\n   * SDK and should be considered internal.**\n   *\n   * To add additional {@link MetricProducer}s to a {@link MetricReader}, pass them to the\n   * constructor as {@link MetricReaderOptions.metricProducers}.\n   *\n   * @internal\n   * @param metricProducer\n   */\n  setMetricProducer(metricProducer: MetricProducer) {\n    if (this._sdkMetricProducer) {\n      throw new Error(\n        'MetricReader can not be bound to a MeterProvider again.'\n      );\n    }\n    this._sdkMetricProducer = metricProducer;\n    this.onInitialized();\n  }\n\n  /**\n   * Select the {@link Aggregation} for the given {@link InstrumentType} for this\n   * reader.\n   */\n  selectAggregation(instrumentType: InstrumentType): Aggregation {\n    return this._aggregationSelector(instrumentType);\n  }\n\n  /**\n   * Select the {@link AggregationTemporality} for the given\n   * {@link InstrumentType} for this reader.\n   */\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n\n  /**\n   * Handle once the SDK has initialized this {@link MetricReader}\n   * Overriding this method is optional.\n   */\n  protected onInitialized(): void {\n    // Default implementation is empty.\n  }\n\n  /**\n   * Handle a shutdown signal by the SDK.\n   *\n   * <p> For push exporters, this should shut down any intervals and close any open connections.\n   * @protected\n   */\n  protected abstract onShutdown(): Promise<void>;\n\n  /**\n   * Handle a force flush signal by the SDK.\n   *\n   * <p> In all scenarios metrics should be collected via {@link collect()}.\n   * <p> For push exporters, this should collect and report metrics.\n   * @protected\n   */\n  protected abstract onForceFlush(): Promise<void>;\n\n  /**\n   * Collect all metrics from the associated {@link MetricProducer}\n   */\n  async collect(options?: CollectionOptions): Promise<CollectionResult> {\n    if (this._sdkMetricProducer === undefined) {\n      throw new Error('MetricReader is not bound to a MetricProducer');\n    }\n\n    // Subsequent invocations to collect are not allowed. SDKs SHOULD return some failure for these calls.\n    if (this._shutdown) {\n      throw new Error('MetricReader is shutdown');\n    }\n\n    const [sdkCollectionResults, ...additionalCollectionResults] =\n      await Promise.all([\n        this._sdkMetricProducer.collect({\n          timeoutMillis: options?.timeoutMillis,\n        }),\n        ...this._metricProducers.map(producer =>\n          producer.collect({\n            timeoutMillis: options?.timeoutMillis,\n          })\n        ),\n      ]);\n\n    // Merge the results, keeping the SDK's Resource\n    const errors = sdkCollectionResults.errors.concat(\n      FlatMap(additionalCollectionResults, result => result.errors)\n    );\n    const resource = sdkCollectionResults.resourceMetrics.resource;\n    const scopeMetrics =\n      sdkCollectionResults.resourceMetrics.scopeMetrics.concat(\n        FlatMap(\n          additionalCollectionResults,\n          result => result.resourceMetrics.scopeMetrics\n        )\n      );\n    return {\n      resourceMetrics: {\n        resource,\n        scopeMetrics,\n      },\n      errors,\n    };\n  }\n\n  /**\n   * Shuts down the metric reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    // Do not call shutdown again if it has already been called.\n    if (this._shutdown) {\n      api.diag.error('Cannot call shutdown twice.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onShutdown();\n    } else {\n      await callWithTimeout(this.onShutdown(), options.timeoutMillis);\n    }\n\n    this._shutdown = true;\n  }\n\n  /**\n   * Flushes metrics read by this reader, the promise will reject after the optional timeout or resolve after completion.\n   *\n   * <p> NOTE: this operation will continue even after the promise rejects due to a timeout.\n   * @param options options with timeout.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    if (this._shutdown) {\n      api.diag.warn('Cannot forceFlush on already shutdown MetricReader.');\n      return;\n    }\n\n    // No timeout if timeoutMillis is undefined or null.\n    if (options?.timeoutMillis == null) {\n      await this.onForceFlush();\n      return;\n    }\n\n    await callWithTimeout(this.onForceFlush(), options.timeoutMillis);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { MetricReader } from './MetricReader';\nimport { PushMetricExporter } from './MetricExporter';\nimport { callWithTimeout, TimeoutError } from '../utils';\nimport { diag } from '@opentelemetry/api';\nimport { MetricProducer } from './MetricProducer';\n\nexport type PeriodicExportingMetricReaderOptions = {\n  /**\n   * The backing exporter for the metric reader.\n   */\n  exporter: PushMetricExporter;\n  /**\n   * An internal milliseconds for the metric reader to initiate metric\n   * collection.\n   */\n  exportIntervalMillis?: number;\n  /**\n   * Milliseconds for the async observable callback to timeout.\n   */\n  exportTimeoutMillis?: number;\n  /**\n   * **Note, this option is experimental**. Additional MetricProducers to use as a source of\n   * aggregated metric data in addition to the SDK's metric data. The resource returned by\n   * these MetricProducers is ignored; the SDK's resource will be used instead.\n   * @experimental\n   */\n  metricProducers?: MetricProducer[];\n};\n\n/**\n * {@link MetricReader} which collects metrics based on a user-configurable time interval, and passes the metrics to\n * the configured {@link PushMetricExporter}\n */\nexport class PeriodicExportingMetricReader extends MetricReader {\n  private _interval?: ReturnType<typeof setInterval>;\n  private _exporter: PushMetricExporter;\n  private readonly _exportInterval: number;\n  private readonly _exportTimeout: number;\n\n  constructor(options: PeriodicExportingMetricReaderOptions) {\n    super({\n      aggregationSelector: options.exporter.selectAggregation?.bind(\n        options.exporter\n      ),\n      aggregationTemporalitySelector:\n        options.exporter.selectAggregationTemporality?.bind(options.exporter),\n      metricProducers: options.metricProducers,\n    });\n\n    if (\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis <= 0\n    ) {\n      throw Error('exportIntervalMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportTimeoutMillis <= 0\n    ) {\n      throw Error('exportTimeoutMillis must be greater than 0');\n    }\n\n    if (\n      options.exportTimeoutMillis !== undefined &&\n      options.exportIntervalMillis !== undefined &&\n      options.exportIntervalMillis < options.exportTimeoutMillis\n    ) {\n      throw Error(\n        'exportIntervalMillis must be greater than or equal to exportTimeoutMillis'\n      );\n    }\n\n    this._exportInterval = options.exportIntervalMillis ?? 60000;\n    this._exportTimeout = options.exportTimeoutMillis ?? 30000;\n    this._exporter = options.exporter;\n  }\n\n  private async _runOnce(): Promise<void> {\n    try {\n      await callWithTimeout(this._doRun(), this._exportTimeout);\n    } catch (err) {\n      if (err instanceof TimeoutError) {\n        api.diag.error(\n          'Export took longer than %s milliseconds and timed out.',\n          this._exportTimeout\n        );\n        return;\n      }\n\n      globalErrorHandler(err);\n    }\n  }\n\n  private async _doRun(): Promise<void> {\n    const { resourceMetrics, errors } = await this.collect({\n      timeoutMillis: this._exportTimeout,\n    });\n\n    if (errors.length > 0) {\n      api.diag.error(\n        'PeriodicExportingMetricReader: metrics collection errors',\n        ...errors\n      );\n    }\n\n    const doExport = async () => {\n      const result = await internal._export(this._exporter, resourceMetrics);\n      if (result.code !== ExportResultCode.SUCCESS) {\n        throw new Error(\n          `PeriodicExportingMetricReader: metrics export failed (error ${result.error})`\n        );\n      }\n    };\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (resourceMetrics.resource.asyncAttributesPending) {\n      resourceMetrics.resource\n        .waitForAsyncAttributes?.()\n        .then(doExport, err =>\n          diag.debug('Error while resolving async portion of resource: ', err)\n        );\n    } else {\n      await doExport();\n    }\n  }\n\n  protected override onInitialized(): void {\n    // start running the interval as soon as this reader is initialized and keep handle for shutdown.\n    this._interval = setInterval(() => {\n      // this._runOnce never rejects. Using void operator to suppress @typescript-eslint/no-floating-promises.\n      void this._runOnce();\n    }, this._exportInterval);\n    unrefTimer(this._interval);\n  }\n\n  protected async onForceFlush(): Promise<void> {\n    await this._runOnce();\n    await this._exporter.forceFlush();\n  }\n\n  protected async onShutdown(): Promise<void> {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    await this._exporter.shutdown();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResultCode } from '@opentelemetry/core';\nimport { ExportResult } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\n\n/**\n * In-memory Metrics Exporter is a Push Metric Exporter\n * which accumulates metrics data in the local memory and\n * allows to inspect it (useful for e.g. unit tests).\n */\nexport class InMemoryMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _aggregationTemporality: AggregationTemporality;\n  private _metrics: ResourceMetrics[] = [];\n\n  constructor(aggregationTemporality: AggregationTemporality) {\n    this._aggregationTemporality = aggregationTemporality;\n  }\n\n  /**\n   * @inheritedDoc\n   */\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    // Avoid storing metrics when exporter is shutdown\n    if (this._shutdown) {\n      setTimeout(() => resultCallback({ code: ExportResultCode.FAILED }), 0);\n      return;\n    }\n\n    this._metrics.push(metrics);\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  /**\n   * Returns all the collected resource metrics\n   * @returns ResourceMetrics[]\n   */\n  public getMetrics(): ResourceMetrics[] {\n    return this._metrics;\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset() {\n    this._metrics = [];\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporality;\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from './AggregationTemporality';\nimport { ResourceMetrics } from './MetricData';\nimport { PushMetricExporter } from './MetricExporter';\nimport {\n  AggregationTemporalitySelector,\n  DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR,\n} from './AggregationSelector';\n\ninterface ConsoleMetricExporterOptions {\n  temporalitySelector?: AggregationTemporalitySelector;\n}\n\n/* eslint-disable no-console */\nexport class ConsoleMetricExporter implements PushMetricExporter {\n  protected _shutdown = false;\n  protected _temporalitySelector: AggregationTemporalitySelector;\n\n  constructor(options?: ConsoleMetricExporterOptions) {\n    this._temporalitySelector =\n      options?.temporalitySelector ?? DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR;\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdown) {\n      // If the exporter is shutting down, by spec, we need to return FAILED as export result\n      setImmediate(resultCallback, { code: ExportResultCode.FAILED });\n      return;\n    }\n\n    return ConsoleMetricExporter._sendMetrics(metrics, resultCallback);\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregationTemporality(\n    _instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._temporalitySelector(_instrumentType);\n  }\n\n  shutdown(): Promise<void> {\n    this._shutdown = true;\n    return Promise.resolve();\n  }\n\n  private static _sendMetrics(\n    metrics: ResourceMetrics,\n    done: (result: ExportResult) => void\n  ): void {\n    for (const scopeMetrics of metrics.scopeMetrics) {\n      for (const metric of scopeMetrics.metrics) {\n        console.dir(\n          {\n            descriptor: metric.descriptor,\n            dataPointType: metric.dataPointType,\n            dataPoints: metric.dataPoints,\n          },\n          { depth: null }\n        );\n      }\n    }\n\n    done({ code: ExportResultCode.SUCCESS });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { View } from './View';\n\nexport class ViewRegistry {\n  private _registeredViews: View[] = [];\n\n  addView(view: View) {\n    this._registeredViews.push(view);\n  }\n\n  findViews(\n    instrument: InstrumentDescriptor,\n    meter: InstrumentationScope\n  ): View[] {\n    const views = this._registeredViews.filter(registeredView => {\n      return (\n        this._matchInstrument(registeredView.instrumentSelector, instrument) &&\n        this._matchMeter(registeredView.meterSelector, meter)\n      );\n    });\n\n    return views;\n  }\n\n  private _matchInstrument(\n    selector: InstrumentSelector,\n    instrument: InstrumentDescriptor\n  ): boolean {\n    return (\n      (selector.getType() === undefined ||\n        instrument.type === selector.getType()) &&\n      selector.getNameFilter().match(instrument.name) &&\n      selector.getUnitFilter().match(instrument.unit)\n    );\n  }\n\n  private _matchMeter(\n    selector: MeterSelector,\n    meter: InstrumentationScope\n  ): boolean {\n    return (\n      selector.getNameFilter().match(meter.name) &&\n      (meter.version === undefined ||\n        selector.getVersionFilter().match(meter.version)) &&\n      (meter.schemaUrl === undefined ||\n        selector.getSchemaUrlFilter().match(meter.schemaUrl))\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context as contextApi,\n  diag,\n  Context,\n  MetricAttributes,\n  ValueType,\n  UpDownCounter,\n  Counter,\n  Histogram,\n  Observable,\n  ObservableCallback,\n  ObservableCounter,\n  ObservableGauge,\n  ObservableUpDownCounter,\n} from '@opentelemetry/api';\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { InstrumentDescriptor } from './InstrumentDescriptor';\nimport { ObservableRegistry } from './state/ObservableRegistry';\nimport {\n  AsyncWritableMetricStorage,\n  WritableMetricStorage,\n} from './state/WritableMetricStorage';\nimport { Gauge } from './types';\n\nexport class SyncInstrument {\n  constructor(\n    private _writableMetricStorage: WritableMetricStorage,\n    protected _descriptor: InstrumentDescriptor\n  ) {}\n\n  protected _record(\n    value: number,\n    attributes: MetricAttributes = {},\n    context: Context = contextApi.active()\n  ) {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      this._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._writableMetricStorage.record(\n      value,\n      attributes,\n      context,\n      millisToHrTime(Date.now())\n    );\n  }\n}\n\n/**\n * The class implements {@link UpDownCounter} interface.\n */\nexport class UpDownCounterInstrument\n  extends SyncInstrument\n  implements UpDownCounter\n{\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Counter} interface.\n */\nexport class CounterInstrument extends SyncInstrument implements Counter {\n  /**\n   * Increment value of counter by the input. Inputs may not be negative.\n   */\n  add(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to counter ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Gauge} interface.\n */\nexport class GaugeInstrument extends SyncInstrument implements Gauge {\n  /**\n   * Records a measurement.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    this._record(value, attributes, ctx);\n  }\n}\n\n/**\n * The class implements {@link Histogram} interface.\n */\nexport class HistogramInstrument extends SyncInstrument implements Histogram {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: MetricAttributes, ctx?: Context): void {\n    if (value < 0) {\n      diag.warn(\n        `negative value provided to histogram ${this._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    this._record(value, attributes, ctx);\n  }\n}\n\nexport class ObservableInstrument implements Observable {\n  /** @internal */\n  _metricStorages: AsyncWritableMetricStorage[];\n  /** @internal */\n  _descriptor: InstrumentDescriptor;\n\n  constructor(\n    descriptor: InstrumentDescriptor,\n    metricStorages: AsyncWritableMetricStorage[],\n    private _observableRegistry: ObservableRegistry\n  ) {\n    this._descriptor = descriptor;\n    this._metricStorages = metricStorages;\n  }\n\n  /**\n   * @see {Observable.addCallback}\n   */\n  addCallback(callback: ObservableCallback) {\n    this._observableRegistry.addCallback(callback, this);\n  }\n\n  /**\n   * @see {Observable.removeCallback}\n   */\n  removeCallback(callback: ObservableCallback) {\n    this._observableRegistry.removeCallback(callback, this);\n  }\n}\n\nexport class ObservableCounterInstrument\n  extends ObservableInstrument\n  implements ObservableCounter {}\nexport class ObservableGaugeInstrument\n  extends ObservableInstrument\n  implements ObservableGauge {}\nexport class ObservableUpDownCounterInstrument\n  extends ObservableInstrument\n  implements ObservableUpDownCounter {}\n\nexport function isObservableInstrument(\n  it: unknown\n): it is ObservableInstrument {\n  return it instanceof ObservableInstrument;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Meter as IMeter,\n  MetricOptions,\n  Histogram,\n  Counter,\n  UpDownCounter,\n  ObservableGauge,\n  ObservableCounter,\n  ObservableUpDownCounter,\n  BatchObservableCallback,\n  Observable,\n} from '@opentelemetry/api';\nimport {\n  createInstrumentDescriptor,\n  InstrumentType,\n} from './InstrumentDescriptor';\nimport {\n  CounterInstrument,\n  GaugeInstrument,\n  HistogramInstrument,\n  ObservableCounterInstrument,\n  ObservableGaugeInstrument,\n  ObservableUpDownCounterInstrument,\n  UpDownCounterInstrument,\n} from './Instruments';\nimport { MeterSharedState } from './state/MeterSharedState';\nimport { Gauge } from './types';\n\n/**\n * This class implements the {@link IMeter} interface.\n */\nexport class Meter implements IMeter {\n  constructor(private _meterSharedState: MeterSharedState) {}\n\n  /**\n   * Create a {@link Gauge} instrument.\n   */\n  createGauge(name: string, options?: MetricOptions): Gauge {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.GAUGE,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new GaugeInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link Histogram} instrument.\n   */\n  createHistogram(name: string, options?: MetricOptions): Histogram {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.HISTOGRAM,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link Counter} instrument.\n   */\n  createCounter(name: string, options?: MetricOptions): Counter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link UpDownCounter} instrument.\n   */\n  createUpDownCounter(name: string, options?: MetricOptions): UpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.UP_DOWN_COUNTER,\n      options\n    );\n    const storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  }\n\n  /**\n   * Create a {@link ObservableGauge} instrument.\n   */\n  createObservableGauge(\n    name: string,\n    options?: MetricOptions\n  ): ObservableGauge {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_GAUGE,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableGaugeInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableCounter} instrument.\n   */\n  createObservableCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * Create a {@link ObservableUpDownCounter} instrument.\n   */\n  createObservableUpDownCounter(\n    name: string,\n    options?: MetricOptions\n  ): ObservableUpDownCounter {\n    const descriptor = createInstrumentDescriptor(\n      name,\n      InstrumentType.OBSERVABLE_UP_DOWN_COUNTER,\n      options\n    );\n    const storages =\n      this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableUpDownCounterInstrument(\n      descriptor,\n      storages,\n      this._meterSharedState.observableRegistry\n    );\n  }\n\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  addBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.addBatchCallback(\n      callback,\n      observables\n    );\n  }\n\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  removeBatchObservableCallback(\n    callback: BatchObservableCallback,\n    observables: Observable[]\n  ) {\n    this._meterSharedState.observableRegistry.removeBatchCallback(\n      callback,\n      observables\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { MetricData } from '../export/MetricData';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport {\n  createInstrumentDescriptor,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\n\n/**\n * Internal interface.\n *\n * Represents a storage from which we can collect metrics.\n */\nexport abstract class MetricStorage {\n  constructor(protected _instrumentDescriptor: InstrumentDescriptor) {}\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  abstract collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData>;\n\n  getInstrumentDescriptor(): Readonly<InstrumentDescriptor> {\n    return this._instrumentDescriptor;\n  }\n\n  updateDescription(description: string): void {\n    this._instrumentDescriptor = createInstrumentDescriptor(\n      this._instrumentDescriptor.name,\n      this._instrumentDescriptor.type,\n      {\n        description: description,\n        valueType: this._instrumentDescriptor.valueType,\n        unit: this._instrumentDescriptor.unit,\n        advice: this._instrumentDescriptor.advice,\n      }\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricAttributes } from '@opentelemetry/api';\nimport { hashAttributes } from '../utils';\n\nexport interface Hash<ValueType, HashCodeType> {\n  (value: ValueType): HashCodeType;\n}\n\nexport class HashMap<KeyType, ValueType, HashCodeType> {\n  private _valueMap = new Map<HashCodeType, ValueType>();\n  private _keyMap = new Map<HashCodeType, KeyType>();\n\n  constructor(private _hash: Hash<KeyType, HashCodeType>) {}\n\n  get(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.get(hashCode);\n  }\n\n  getOrDefault(key: KeyType, defaultFactory: () => ValueType) {\n    const hash = this._hash(key);\n    if (this._valueMap.has(hash)) {\n      return this._valueMap.get(hash);\n    }\n    const val = defaultFactory();\n    if (!this._keyMap.has(hash)) {\n      this._keyMap.set(hash, key);\n    }\n    this._valueMap.set(hash, val);\n    return val;\n  }\n\n  set(key: KeyType, value: ValueType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    if (!this._keyMap.has(hashCode)) {\n      this._keyMap.set(hashCode, key);\n    }\n    this._valueMap.set(hashCode, value);\n  }\n\n  has(key: KeyType, hashCode?: HashCodeType) {\n    hashCode ??= this._hash(key);\n    return this._valueMap.has(hashCode);\n  }\n\n  *keys(): IterableIterator<[KeyType, HashCodeType]> {\n    const keyIterator = this._keyMap.entries();\n    let next = keyIterator.next();\n    while (next.done !== true) {\n      yield [next.value[1], next.value[0]];\n      next = keyIterator.next();\n    }\n  }\n\n  *entries(): IterableIterator<[KeyType, ValueType, HashCodeType]> {\n    const valueIterator = this._valueMap.entries();\n    let next = valueIterator.next();\n    while (next.done !== true) {\n      // next.value[0] here can not be undefined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      yield [this._keyMap.get(next.value[0])!, next.value[1], next.value[0]];\n      next = valueIterator.next();\n    }\n  }\n\n  get size() {\n    return this._valueMap.size;\n  }\n}\n\nexport class AttributeHashMap<ValueType> extends HashMap<\n  MetricAttributes,\n  ValueType,\n  string\n> {\n  constructor() {\n    super(hashAttributes);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { Maybe } from '../utils';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Internal interface.\n *\n * Allows synchronous collection of metrics. This processor should allow\n * allocation of new aggregation cells for metrics and convert cumulative\n * recording to delta data points.\n */\nexport class DeltaMetricProcessor<T extends Maybe<Accumulation>> {\n  private _activeCollectionStorage = new AttributeHashMap<T>();\n  // TODO: find a reasonable mean to clean the memo;\n  // https://github.com/open-telemetry/opentelemetry-specification/pull/2208\n  private _cumulativeMemoStorage = new AttributeHashMap<T>();\n\n  constructor(private _aggregator: Aggregator<T>) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    _context: Context,\n    collectionTime: HrTime\n  ) {\n    const accumulation = this._activeCollectionStorage.getOrDefault(\n      attributes,\n      () => this._aggregator.createAccumulation(collectionTime)\n    );\n    accumulation?.record(value);\n  }\n\n  batchCumulate(\n    measurements: AttributeHashMap<number>,\n    collectionTime: HrTime\n  ) {\n    Array.from(measurements.entries()).forEach(\n      ([attributes, value, hashCode]) => {\n        const accumulation =\n          this._aggregator.createAccumulation(collectionTime);\n        accumulation?.record(value);\n        let delta = accumulation;\n        // Diff with recorded cumulative memo.\n        if (this._cumulativeMemoStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const previous = this._cumulativeMemoStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.diff(previous, accumulation);\n        }\n        // Merge with uncollected active delta.\n        if (this._activeCollectionStorage.has(attributes, hashCode)) {\n          // has() returned true, previous is present.\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const active = this._activeCollectionStorage.get(\n            attributes,\n            hashCode\n          )!;\n          delta = this._aggregator.merge(active, delta);\n        }\n\n        // Save the current record and the delta record.\n        this._cumulativeMemoStorage.set(attributes, accumulation, hashCode);\n        this._activeCollectionStorage.set(attributes, delta, hashCode);\n      }\n    );\n  }\n\n  /**\n   * Returns a collection of delta metrics. Start time is the when first\n   * time event collected.\n   */\n  collect() {\n    const unreportedDelta = this._activeCollectionStorage;\n    this._activeCollectionStorage = new AttributeHashMap();\n    return unreportedDelta;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport {\n  Accumulation,\n  AccumulationRecord,\n  Aggregator,\n} from '../aggregator/types';\nimport { MetricData } from '../export/MetricData';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AggregationTemporality } from '../export/AggregationTemporality';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\n\n/**\n * Remembers what was presented to a specific exporter.\n */\ninterface LastReportedHistory<T extends Maybe<Accumulation>> {\n  /**\n   * The last accumulation of metric data.\n   */\n  accumulations: AttributeHashMap<T>;\n  /**\n   * The timestamp the data was reported.\n   */\n  collectionTime: HrTime;\n  /**\n   * The AggregationTemporality used to aggregate reports.\n   */\n  aggregationTemporality: AggregationTemporality;\n}\n\n/**\n * Internal interface.\n *\n * Provides unique reporting for each collector. Allows synchronous collection\n * of metrics and reports given temporality values.\n */\nexport class TemporalMetricProcessor<T extends Maybe<Accumulation>> {\n  private _unreportedAccumulations = new Map<\n    MetricCollectorHandle,\n    AttributeHashMap<T>[]\n  >();\n  private _reportHistory = new Map<\n    MetricCollectorHandle,\n    LastReportedHistory<T>\n  >();\n\n  constructor(\n    private _aggregator: Aggregator<T>,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    collectorHandles.forEach(handle => {\n      this._unreportedAccumulations.set(handle, []);\n    });\n  }\n\n  /**\n   * Builds the {@link MetricData} streams to report against a specific MetricCollector.\n   * @param collector The information of the MetricCollector.\n   * @param collectors The registered collectors.\n   * @param instrumentDescriptor The instrumentation descriptor that these metrics generated with.\n   * @param currentAccumulations The current accumulation of metric data from instruments.\n   * @param collectionTime The current collection timestamp.\n   * @returns The {@link MetricData} points or `null`.\n   */\n  buildMetrics(\n    collector: MetricCollectorHandle,\n    instrumentDescriptor: InstrumentDescriptor,\n    currentAccumulations: AttributeHashMap<T>,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    this._stashAccumulations(currentAccumulations);\n    const unreportedAccumulations =\n      this._getMergedUnreportedAccumulations(collector);\n\n    let result = unreportedAccumulations;\n    let aggregationTemporality: AggregationTemporality;\n    // Check our last report time.\n    if (this._reportHistory.has(collector)) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const last = this._reportHistory.get(collector)!;\n      const lastCollectionTime = last.collectionTime;\n      aggregationTemporality = last.aggregationTemporality;\n\n      // Use aggregation temporality + instrument to determine if we do a merge or a diff of\n      // previous. We have the following four scenarios:\n      // 1. Cumulative Aggregation (temporality) + Delta recording (sync instrument).\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 2. Cumulative Aggregation + Cumulative recording (async instrument).\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Here we merge with our last record to get a cumulative aggregation.\n      // 3. Delta Aggregation + Delta recording\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      // 4. Delta Aggregation + Cumulative recording.\n      //    Cumulative records are converted to delta recording with DeltaMetricProcessor.\n      //    Calibrate the startTime of metric streams to be the reader's lastCollectionTime.\n      if (aggregationTemporality === AggregationTemporality.CUMULATIVE) {\n        // We need to make sure the current delta recording gets merged into the previous cumulative\n        // for the next cumulative recording.\n        result = TemporalMetricProcessor.merge(\n          last.accumulations,\n          unreportedAccumulations,\n          this._aggregator\n        );\n      } else {\n        result = TemporalMetricProcessor.calibrateStartTime(\n          last.accumulations,\n          unreportedAccumulations,\n          lastCollectionTime\n        );\n      }\n    } else {\n      // Call into user code to select aggregation temporality for the instrument.\n      aggregationTemporality = collector.selectAggregationTemporality(\n        instrumentDescriptor.type\n      );\n    }\n\n    // Update last reported (cumulative) accumulation.\n    this._reportHistory.set(collector, {\n      accumulations: result,\n      collectionTime,\n      aggregationTemporality,\n    });\n\n    const accumulationRecords = AttributesMapToAccumulationRecords(result);\n\n    // do not convert to metric data if there is nothing to convert.\n    if (accumulationRecords.length === 0) {\n      return undefined;\n    }\n\n    return this._aggregator.toMetricData(\n      instrumentDescriptor,\n      aggregationTemporality,\n      accumulationRecords,\n      /* endTime */ collectionTime\n    );\n  }\n\n  private _stashAccumulations(currentAccumulation: AttributeHashMap<T>) {\n    const registeredCollectors = this._unreportedAccumulations.keys();\n    for (const collector of registeredCollectors) {\n      let stash = this._unreportedAccumulations.get(collector);\n      if (stash === undefined) {\n        stash = [];\n        this._unreportedAccumulations.set(collector, stash);\n      }\n      stash.push(currentAccumulation);\n    }\n  }\n\n  private _getMergedUnreportedAccumulations(collector: MetricCollectorHandle) {\n    let result = new AttributeHashMap<T>();\n    const unreportedList = this._unreportedAccumulations.get(collector);\n    this._unreportedAccumulations.set(collector, []);\n    if (unreportedList === undefined) {\n      return result;\n    }\n    for (const it of unreportedList) {\n      result = TemporalMetricProcessor.merge(result, it, this._aggregator);\n    }\n    return result;\n  }\n\n  static merge<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    aggregator: Aggregator<T>\n  ) {\n    const result = last;\n    const iterator = current.entries();\n    let next = iterator.next();\n    while (next.done !== true) {\n      const [key, record, hash] = next.value;\n      if (last.has(key, hash)) {\n        const lastAccumulation = last.get(key, hash);\n        // last.has() returned true, lastAccumulation is present.\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const accumulation = aggregator.merge(lastAccumulation!, record);\n        result.set(key, accumulation, hash);\n      } else {\n        result.set(key, record, hash);\n      }\n\n      next = iterator.next();\n    }\n    return result;\n  }\n\n  /**\n   * Calibrate the reported metric streams' startTime to lastCollectionTime. Leaves\n   * the new stream to be the initial observation time unchanged.\n   */\n  static calibrateStartTime<T extends Maybe<Accumulation>>(\n    last: AttributeHashMap<T>,\n    current: AttributeHashMap<T>,\n    lastCollectionTime: HrTime\n  ) {\n    for (const [key, hash] of last.keys()) {\n      const currentAccumulation = current.get(key, hash);\n      currentAccumulation?.setStartTime(lastCollectionTime);\n    }\n    return current;\n  }\n}\n\n// TypeScript complains about converting 3 elements tuple to AccumulationRecord<T>.\nfunction AttributesMapToAccumulationRecords<T>(\n  map: AttributeHashMap<T>\n): AccumulationRecord<T>[] {\n  return Array.from(map.entries()) as unknown as AccumulationRecord<T>[];\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { AttributeHashMap } from './HashMap';\nimport { AsyncWritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for asynchronous instruments.\n */\nexport class AsyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements AsyncWritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    _instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(_instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(measurements: AttributeHashMap<number>, observationTime: HrTime) {\n    const processed = new AttributeHashMap<number>();\n    Array.from(measurements.entries()).forEach(([attributes, value]) => {\n      processed.set(this._attributesProcessor.process(attributes), value);\n    });\n    this._deltaMetricStorage.batchCumulate(processed, observationTime);\n  }\n\n  /**\n   * Collects the metrics from this storage. The ObservableCallback is invoked\n   * during the collection.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentSelectorCriteria } from './InstrumentSelector';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\n\nexport function getIncompatibilityDetails(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  let incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += `\\t- Unit '${existing.unit}' does not match '${otherDescriptor.unit}'\\n`;\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += `\\t- Type '${existing.type}' does not match '${otherDescriptor.type}'\\n`;\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += `\\t- Value Type '${existing.valueType}' does not match '${otherDescriptor.valueType}'\\n`;\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += `\\t- Description '${existing.description}' does not match '${otherDescriptor.description}'\\n`;\n  }\n\n  return incompatibility;\n}\n\nexport function getValueTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use valueType '${existing.valueType}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getUnitConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  return `\\t- use unit '${existing.unit}' on instrument creation or use an instrument name other than '${otherDescriptor.name}'`;\n}\n\nexport function getTypeConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n) {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'`;\n}\n\nexport function getDescriptionResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  const selector: InstrumentSelectorCriteria = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type,\n    unit: otherDescriptor.unit,\n  };\n\n  const selectorString = JSON.stringify(selector);\n\n  return `\\t- create a new view with a name other than '${existing.name}' and InstrumentSelector '${selectorString}'\n    \\t- OR - create a new view with the name ${existing.name} and description '${existing.description}' and InstrumentSelector ${selectorString}\n    \\t- OR - create a new view with the name ${otherDescriptor.name} and description '${existing.description}' and InstrumentSelector ${selectorString}`;\n}\n\nexport function getConflictResolutionRecipe(\n  existing: InstrumentDescriptor,\n  otherDescriptor: InstrumentDescriptor\n): string {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n\n  return '';\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricStorage } from './MetricStorage';\nimport {\n  InstrumentDescriptor,\n  isDescriptorCompatibleWith,\n} from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport {\n  getConflictResolutionRecipe,\n  getIncompatibilityDetails,\n} from '../view/RegistrationConflicts';\nimport { MetricCollectorHandle } from './MetricCollector';\n\ntype StorageMap = Map<string, MetricStorage[]>;\n\n/**\n * Internal class for storing {@link MetricStorage}\n */\nexport class MetricStorageRegistry {\n  private readonly _sharedRegistry: StorageMap = new Map();\n  private readonly _perCollectorRegistry = new Map<\n    MetricCollectorHandle,\n    StorageMap\n  >();\n\n  static create() {\n    return new MetricStorageRegistry();\n  }\n\n  getStorages(collector: MetricCollectorHandle): MetricStorage[] {\n    let storages: MetricStorage[] = [];\n    for (const metricStorages of this._sharedRegistry.values()) {\n      storages = storages.concat(metricStorages);\n    }\n\n    const perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      for (const metricStorages of perCollectorStorages.values()) {\n        storages = storages.concat(metricStorages);\n      }\n    }\n\n    return storages;\n  }\n\n  register(storage: MetricStorage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  }\n\n  registerForCollector(\n    collector: MetricCollectorHandle,\n    storage: MetricStorage\n  ) {\n    let storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  }\n\n  findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  findOrUpdateCompatibleCollectorStorage<T extends MetricStorage>(\n    collector: MetricCollectorHandle,\n    expectedDescriptor: InstrumentDescriptor\n  ): T | null {\n    const storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n\n    const storages = storageMap.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage<T>(expectedDescriptor, storages);\n  }\n\n  private _registerStorage(storage: MetricStorage, storageMap: StorageMap) {\n    const descriptor = storage.getInstrumentDescriptor();\n    const storages = storageMap.get(descriptor.name);\n\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n\n    storages.push(storage);\n  }\n\n  private _findOrUpdateCompatibleStorage<T extends MetricStorage>(\n    expectedDescriptor: InstrumentDescriptor,\n    existingStorages: MetricStorage[]\n  ): T | null {\n    let compatibleStorage = null;\n\n    for (const existingStorage of existingStorages) {\n      const existingDescriptor = existingStorage.getInstrumentDescriptor();\n\n      if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n        // Use the longer description if it does not match.\n        if (existingDescriptor.description !== expectedDescriptor.description) {\n          if (\n            expectedDescriptor.description.length >\n            existingDescriptor.description.length\n          ) {\n            existingStorage.updateDescription(expectedDescriptor.description);\n          }\n\n          api.diag.warn(\n            'A view or instrument with the name ',\n            expectedDescriptor.name,\n            ' has already been registered, but has a different description and is incompatible with another registered view.\\n',\n            'Details:\\n',\n            getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n            'The longer description will be used.\\nTo resolve the conflict:',\n            getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n          );\n        }\n        // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n        compatibleStorage = existingStorage as T;\n      } else {\n        // The implementation SHOULD warn about duplicate instrument registration\n        // conflicts after applying View configuration.\n        api.diag.warn(\n          'A view or instrument with the name ',\n          expectedDescriptor.name,\n          ' has already been registered and is incompatible with another registered view.\\n',\n          'Details:\\n',\n          getIncompatibilityDetails(existingDescriptor, expectedDescriptor),\n          'To resolve the conflict:\\n',\n          getConflictResolutionRecipe(existingDescriptor, expectedDescriptor)\n        );\n      }\n    }\n\n    return compatibleStorage;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\n\n/**\n * Internal interface.\n */\nexport class MultiMetricStorage implements WritableMetricStorage {\n  constructor(private readonly _backingStorages: WritableMetricStorage[]) {}\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    this._backingStorages.forEach(it => {\n      it.record(value, attributes, context, recordTime);\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  ObservableResult,\n  MetricAttributes,\n  ValueType,\n  BatchObservableResult,\n  Observable,\n} from '@opentelemetry/api';\nimport { AttributeHashMap } from './state/HashMap';\nimport { isObservableInstrument, ObservableInstrument } from './Instruments';\n\n/**\n * The class implements {@link ObservableResult} interface.\n */\nexport class ObservableResultImpl implements ObservableResult {\n  /**\n   * @internal\n   */\n  _buffer = new AttributeHashMap<number>();\n\n  constructor(\n    private _instrumentName: string,\n    private _valueType: ValueType\n  ) {}\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(value: number, attributes: MetricAttributes = {}): void {\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${this._instrumentName}: ${value}`\n      );\n      return;\n    }\n    if (this._valueType === ValueType.INT && !Number.isInteger(value)) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${this._instrumentName}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    this._buffer.set(attributes, value);\n  }\n}\n\n/**\n * The class implements {@link BatchObservableCallback} interface.\n */\nexport class BatchObservableResultImpl implements BatchObservableResult {\n  /**\n   * @internal\n   */\n  _buffer: Map<ObservableInstrument, AttributeHashMap<number>> = new Map();\n\n  /**\n   * Observe a measurement of the value associated with the given attributes.\n   */\n  observe(\n    metric: Observable,\n    value: number,\n    attributes: MetricAttributes = {}\n  ): void {\n    if (!isObservableInstrument(metric)) {\n      return;\n    }\n    let map = this._buffer.get(metric);\n    if (map == null) {\n      map = new AttributeHashMap();\n      this._buffer.set(metric, map);\n    }\n    if (typeof value !== 'number') {\n      diag.warn(\n        `non-number value provided to metric ${metric._descriptor.name}: ${value}`\n      );\n      return;\n    }\n    if (\n      metric._descriptor.valueType === ValueType.INT &&\n      !Number.isInteger(value)\n    ) {\n      diag.warn(\n        `INT value type cannot accept a floating-point value for ${metric._descriptor.name}, ignoring the fractional digits.`\n      );\n      value = Math.trunc(value);\n      // ignore non-finite values.\n      if (!Number.isInteger(value)) {\n        return;\n      }\n    }\n    map.set(attributes, value);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  HrTime,\n  BatchObservableCallback,\n  Observable,\n  ObservableCallback,\n} from '@opentelemetry/api';\nimport { isObservableInstrument, ObservableInstrument } from '../Instruments';\nimport {\n  BatchObservableResultImpl,\n  ObservableResultImpl,\n} from '../ObservableResult';\nimport {\n  callWithTimeout,\n  PromiseAllSettled,\n  isPromiseAllSettledRejectionResult,\n  setEquals,\n} from '../utils';\n\n/**\n * Records for single instrument observable callback.\n */\ninterface ObservableCallbackRecord {\n  callback: ObservableCallback;\n  instrument: ObservableInstrument;\n}\n\n/**\n * Records for multiple instruments observable callback.\n */\ninterface BatchObservableCallbackRecord {\n  callback: BatchObservableCallback;\n  instruments: Set<ObservableInstrument>;\n}\n\n/**\n * An internal interface for managing ObservableCallbacks.\n *\n * Every registered callback associated with a set of instruments are be evaluated\n * exactly once during collection prior to reading data for that instrument.\n */\nexport class ObservableRegistry {\n  private _callbacks: ObservableCallbackRecord[] = [];\n  private _batchCallbacks: BatchObservableCallbackRecord[] = [];\n\n  addCallback(callback: ObservableCallback, instrument: ObservableInstrument) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx >= 0) {\n      return;\n    }\n    this._callbacks.push({ callback, instrument });\n  }\n\n  removeCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    const idx = this._findCallback(callback, instrument);\n    if (idx < 0) {\n      return;\n    }\n    this._callbacks.splice(idx, 1);\n  }\n\n  addBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    if (observableInstruments.size === 0) {\n      diag.error(\n        'BatchObservableCallback is not associated with valid instruments',\n        instruments\n      );\n      return;\n    }\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx >= 0) {\n      return;\n    }\n    this._batchCallbacks.push({ callback, instruments: observableInstruments });\n  }\n\n  removeBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Observable[]\n  ) {\n    // Create a set of unique instruments.\n    const observableInstruments = new Set(\n      instruments.filter(isObservableInstrument)\n    );\n    const idx = this._findBatchCallback(callback, observableInstruments);\n    if (idx < 0) {\n      return;\n    }\n    this._batchCallbacks.splice(idx, 1);\n  }\n\n  /**\n   * @returns a promise of rejected reasons for invoking callbacks.\n   */\n  async observe(\n    collectionTime: HrTime,\n    timeoutMillis?: number\n  ): Promise<unknown[]> {\n    const callbackFutures = this._observeCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n    const batchCallbackFutures = this._observeBatchCallbacks(\n      collectionTime,\n      timeoutMillis\n    );\n\n    const results = await PromiseAllSettled([\n      ...callbackFutures,\n      ...batchCallbackFutures,\n    ]);\n\n    const rejections = results\n      .filter(isPromiseAllSettledRejectionResult)\n      .map(it => it.reason);\n    return rejections;\n  }\n\n  private _observeCallbacks(observationTime: HrTime, timeoutMillis?: number) {\n    return this._callbacks.map(async ({ callback, instrument }) => {\n      const observableResult = new ObservableResultImpl(\n        instrument._descriptor.name,\n        instrument._descriptor.valueType\n      );\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instrument._metricStorages.forEach(metricStorage => {\n        metricStorage.record(observableResult._buffer, observationTime);\n      });\n    });\n  }\n\n  private _observeBatchCallbacks(\n    observationTime: HrTime,\n    timeoutMillis?: number\n  ) {\n    return this._batchCallbacks.map(async ({ callback, instruments }) => {\n      const observableResult = new BatchObservableResultImpl();\n      let callPromise: Promise<void> = Promise.resolve(\n        callback(observableResult)\n      );\n      if (timeoutMillis != null) {\n        callPromise = callWithTimeout(callPromise, timeoutMillis);\n      }\n      await callPromise;\n      instruments.forEach(instrument => {\n        const buffer = observableResult._buffer.get(instrument);\n        if (buffer == null) {\n          return;\n        }\n        instrument._metricStorages.forEach(metricStorage => {\n          metricStorage.record(buffer, observationTime);\n        });\n      });\n    });\n  }\n\n  private _findCallback(\n    callback: ObservableCallback,\n    instrument: ObservableInstrument\n  ) {\n    return this._callbacks.findIndex(record => {\n      return record.callback === callback && record.instrument === instrument;\n    });\n  }\n\n  private _findBatchCallback(\n    callback: BatchObservableCallback,\n    instruments: Set<ObservableInstrument>\n  ) {\n    return this._batchCallbacks.findIndex(record => {\n      return (\n        record.callback === callback &&\n        setEquals(record.instruments, instruments)\n      );\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, HrTime, MetricAttributes } from '@opentelemetry/api';\nimport { WritableMetricStorage } from './WritableMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { InstrumentDescriptor } from '../InstrumentDescriptor';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\nimport { MetricData } from '../export/MetricData';\nimport { DeltaMetricProcessor } from './DeltaMetricProcessor';\nimport { TemporalMetricProcessor } from './TemporalMetricProcessor';\nimport { Maybe } from '../utils';\nimport { MetricCollectorHandle } from './MetricCollector';\n\n/**\n * Internal interface.\n *\n * Stores and aggregates {@link MetricData} for synchronous instruments.\n */\nexport class SyncMetricStorage<T extends Maybe<Accumulation>>\n  extends MetricStorage\n  implements WritableMetricStorage\n{\n  private _deltaMetricStorage: DeltaMetricProcessor<T>;\n  private _temporalMetricStorage: TemporalMetricProcessor<T>;\n\n  constructor(\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<T>,\n    private _attributesProcessor: AttributesProcessor,\n    collectorHandles: MetricCollectorHandle[]\n  ) {\n    super(instrumentDescriptor);\n    this._deltaMetricStorage = new DeltaMetricProcessor(aggregator);\n    this._temporalMetricStorage = new TemporalMetricProcessor(\n      aggregator,\n      collectorHandles\n    );\n  }\n\n  record(\n    value: number,\n    attributes: MetricAttributes,\n    context: Context,\n    recordTime: HrTime\n  ) {\n    attributes = this._attributesProcessor.process(attributes, context);\n    this._deltaMetricStorage.record(value, attributes, context, recordTime);\n  }\n\n  /**\n   * Collects the metrics from this storage.\n   *\n   * Note: This is a stateful operation and may reset any interval-related\n   * state for the MetricCollector.\n   */\n  collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime\n  ): Maybe<MetricData> {\n    const accumulations = this._deltaMetricStorage.collect();\n\n    return this._temporalMetricStorage.buildMetrics(\n      collector,\n      this._instrumentDescriptor,\n      accumulations,\n      collectionTime\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, MetricAttributes } from '@opentelemetry/api';\n\n/**\n * The {@link AttributesProcessor} is responsible for customizing which\n * attribute(s) are to be reported as metrics dimension(s) and adding\n * additional dimension(s) from the {@link Context}.\n */\nexport abstract class AttributesProcessor {\n  /**\n   * Process the metric instrument attributes.\n   *\n   * @param incoming The metric instrument attributes.\n   * @param context The active context when the instrument is synchronous.\n   * `undefined` otherwise.\n   */\n  abstract process(\n    incoming: MetricAttributes,\n    context?: Context\n  ): MetricAttributes;\n\n  static Noop() {\n    return NOOP;\n  }\n}\n\nexport class NoopAttributesProcessor extends AttributesProcessor {\n  process(incoming: MetricAttributes, _context?: Context) {\n    return incoming;\n  }\n}\n\n/**\n * {@link AttributesProcessor} that filters by allowed attribute names and drops any names that are not in the\n * allow list.\n */\nexport class FilteringAttributesProcessor extends AttributesProcessor {\n  constructor(private _allowedAttributeNames: string[]) {\n    super();\n  }\n\n  process(incoming: MetricAttributes, _context: Context): MetricAttributes {\n    const filteredAttributes: MetricAttributes = {};\n    Object.keys(incoming)\n      .filter(attributeName =>\n        this._allowedAttributeNames.includes(attributeName)\n      )\n      .forEach(\n        attributeName =>\n          (filteredAttributes[attributeName] = incoming[attributeName])\n      );\n    return filteredAttributes;\n  }\n}\n\nconst NOOP = new NoopAttributesProcessor();\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { MetricCollectOptions } from '../export/MetricProducer';\nimport { ScopeMetrics } from '../export/MetricData';\nimport {\n  createInstrumentDescriptorWithView,\n  InstrumentDescriptor,\n} from '../InstrumentDescriptor';\nimport { Meter } from '../Meter';\nimport { isNotNullish, Maybe } from '../utils';\nimport { AsyncMetricStorage } from './AsyncMetricStorage';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\nimport { MetricCollectorHandle } from './MetricCollector';\nimport { MetricStorageRegistry } from './MetricStorageRegistry';\nimport { MultiMetricStorage } from './MultiWritableMetricStorage';\nimport { ObservableRegistry } from './ObservableRegistry';\nimport { SyncMetricStorage } from './SyncMetricStorage';\nimport { Accumulation, Aggregator } from '../aggregator/types';\nimport { AttributesProcessor } from '../view/AttributesProcessor';\nimport { MetricStorage } from './MetricStorage';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterSharedState {\n  metricStorageRegistry = new MetricStorageRegistry();\n  observableRegistry = new ObservableRegistry();\n  meter: Meter;\n\n  constructor(\n    private _meterProviderSharedState: MeterProviderSharedState,\n    private _instrumentationScope: InstrumentationScope\n  ) {\n    this.meter = new Meter(this);\n  }\n\n  registerMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(descriptor, SyncMetricStorage);\n\n    if (storages.length === 1) {\n      return storages[0];\n    }\n    return new MultiMetricStorage(storages);\n  }\n\n  registerAsyncMetricStorage(descriptor: InstrumentDescriptor) {\n    const storages = this._registerMetricStorage(\n      descriptor,\n      AsyncMetricStorage\n    );\n\n    return storages;\n  }\n\n  /**\n   * @param collector opaque handle of {@link MetricCollector} which initiated the collection.\n   * @param collectionTime the HrTime at which the collection was initiated.\n   * @param options options for collection.\n   * @returns the list of metric data collected.\n   */\n  async collect(\n    collector: MetricCollectorHandle,\n    collectionTime: HrTime,\n    options?: MetricCollectOptions\n  ): Promise<ScopeMetricsResult | null> {\n    /**\n     * 1. Call all observable callbacks first.\n     * 2. Collect metric result for the collector.\n     */\n    const errors = await this.observableRegistry.observe(\n      collectionTime,\n      options?.timeoutMillis\n    );\n    const storages = this.metricStorageRegistry.getStorages(collector);\n\n    // prevent more allocations if there are no storages.\n    if (storages.length === 0) {\n      return null;\n    }\n\n    const metricDataList = storages\n      .map(metricStorage => {\n        return metricStorage.collect(collector, collectionTime);\n      })\n      .filter(isNotNullish);\n\n    // skip this scope if no data was collected (storage created, but no data observed)\n    if (metricDataList.length === 0) {\n      return { errors };\n    }\n\n    return {\n      scopeMetrics: {\n        scope: this._instrumentationScope,\n        metrics: metricDataList,\n      },\n      errors,\n    };\n  }\n\n  private _registerMetricStorage<\n    MetricStorageType extends MetricStorageConstructor,\n    R extends InstanceType<MetricStorageType>,\n  >(\n    descriptor: InstrumentDescriptor,\n    MetricStorageType: MetricStorageType\n  ): R[] {\n    const views = this._meterProviderSharedState.viewRegistry.findViews(\n      descriptor,\n      this._instrumentationScope\n    );\n    let storages = views.map(view => {\n      const viewDescriptor = createInstrumentDescriptorWithView(\n        view,\n        descriptor\n      );\n      const compatibleStorage =\n        this.metricStorageRegistry.findOrUpdateCompatibleStorage<R>(\n          viewDescriptor\n        );\n      if (compatibleStorage != null) {\n        return compatibleStorage;\n      }\n      const aggregator = view.aggregation.createAggregator(viewDescriptor);\n      const viewStorage = new MetricStorageType(\n        viewDescriptor,\n        aggregator,\n        view.attributesProcessor,\n        this._meterProviderSharedState.metricCollectors\n      ) as R;\n      this.metricStorageRegistry.register(viewStorage);\n      return viewStorage;\n    });\n\n    // Fallback to the per-collector aggregations if no view is configured for the instrument.\n    if (storages.length === 0) {\n      const perCollectorAggregations =\n        this._meterProviderSharedState.selectAggregations(descriptor.type);\n      const collectorStorages = perCollectorAggregations.map(\n        ([collector, aggregation]) => {\n          const compatibleStorage =\n            this.metricStorageRegistry.findOrUpdateCompatibleCollectorStorage<R>(\n              collector,\n              descriptor\n            );\n          if (compatibleStorage != null) {\n            return compatibleStorage;\n          }\n          const aggregator = aggregation.createAggregator(descriptor);\n          const storage = new MetricStorageType(\n            descriptor,\n            aggregator,\n            AttributesProcessor.Noop(),\n            [collector]\n          ) as R;\n          this.metricStorageRegistry.registerForCollector(collector, storage);\n          return storage;\n        }\n      );\n      storages = storages.concat(collectorStorages);\n    }\n\n    return storages;\n  }\n}\n\ninterface ScopeMetricsResult {\n  scopeMetrics?: ScopeMetrics;\n  errors: unknown[];\n}\n\ninterface MetricStorageConstructor {\n  new (\n    instrumentDescriptor: InstrumentDescriptor,\n    aggregator: Aggregator<Maybe<Accumulation>>,\n    attributesProcessor: AttributesProcessor,\n    collectors: MetricCollectorHandle[]\n  ): MetricStorage;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentationScope } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { Aggregation, InstrumentType } from '..';\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\nimport { MetricCollector, MetricCollectorHandle } from './MetricCollector';\n\n/**\n * An internal record for shared meter provider states.\n */\nexport class MeterProviderSharedState {\n  viewRegistry = new ViewRegistry();\n\n  metricCollectors: MetricCollector[] = [];\n\n  meterSharedStates: Map<string, MeterSharedState> = new Map();\n\n  constructor(public resource: IResource) {}\n\n  getMeterSharedState(instrumentationScope: InstrumentationScope) {\n    const id = instrumentationScopeId(instrumentationScope);\n    let meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  }\n\n  selectAggregations(instrumentType: InstrumentType) {\n    const result: [MetricCollectorHandle, Aggregation][] = [];\n    for (const collector of this.metricCollectors) {\n      result.push([collector, collector.selectAggregation(instrumentType)]);\n    }\n    return result;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { millisToHrTime } from '@opentelemetry/core';\nimport { AggregationTemporalitySelector } from '../export/AggregationSelector';\nimport { CollectionResult, ScopeMetrics } from '../export/MetricData';\nimport { MetricProducer, MetricCollectOptions } from '../export/MetricProducer';\nimport { MetricReader } from '../export/MetricReader';\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ForceFlushOptions, ShutdownOptions } from '../types';\nimport { MeterProviderSharedState } from './MeterProviderSharedState';\n\n/**\n * An internal opaque interface that the MetricReader receives as\n * MetricProducer. It acts as the storage key to the internal metric stream\n * state for each MetricReader.\n */\nexport class MetricCollector implements MetricProducer {\n  constructor(\n    private _sharedState: MeterProviderSharedState,\n    private _metricReader: MetricReader\n  ) {}\n\n  async collect(options?: MetricCollectOptions): Promise<CollectionResult> {\n    const collectionTime = millisToHrTime(Date.now());\n    const scopeMetrics: ScopeMetrics[] = [];\n    const errors: unknown[] = [];\n\n    const meterCollectionPromises = Array.from(\n      this._sharedState.meterSharedStates.values()\n    ).map(async meterSharedState => {\n      const current = await meterSharedState.collect(\n        this,\n        collectionTime,\n        options\n      );\n\n      // only add scope metrics if available\n      if (current?.scopeMetrics != null) {\n        scopeMetrics.push(current.scopeMetrics);\n      }\n\n      // only add errors if available\n      if (current?.errors != null) {\n        errors.push(...current.errors);\n      }\n    });\n    await Promise.all(meterCollectionPromises);\n\n    return {\n      resourceMetrics: {\n        resource: this._sharedState.resource,\n        scopeMetrics: scopeMetrics,\n      },\n      errors: errors,\n    };\n  }\n\n  /**\n   * Delegates for MetricReader.forceFlush.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    await this._metricReader.forceFlush(options);\n  }\n\n  /**\n   * Delegates for MetricReader.shutdown.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    await this._metricReader.shutdown(options);\n  }\n\n  selectAggregationTemporality(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregationTemporality(instrumentType);\n  }\n\n  selectAggregation(instrumentType: InstrumentType) {\n    return this._metricReader.selectAggregation(instrumentType);\n  }\n}\n\n/**\n * An internal interface for MetricCollector. Exposes the necessary\n * information for metric collection.\n */\nexport interface MetricCollectorHandle {\n  selectAggregationTemporality: AggregationTemporalitySelector;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  MeterProvider as IMeterProvider,\n  Meter as IMeter,\n  MeterOptions,\n  createNoopMeter,\n} from '@opentelemetry/api';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { MetricReader } from './export/MetricReader';\nimport { MeterProviderSharedState } from './state/MeterProviderSharedState';\nimport { MetricCollector } from './state/MetricCollector';\nimport { ForceFlushOptions, ShutdownOptions } from './types';\nimport { View } from './view/View';\n\n/**\n * MeterProviderOptions provides an interface for configuring a MeterProvider.\n */\nexport interface MeterProviderOptions {\n  /** Resource associated with metric telemetry  */\n  resource?: IResource;\n  views?: View[];\n  readers?: MetricReader[];\n}\n\n/**\n * This class implements the {@link MeterProvider} interface.\n */\nexport class MeterProvider implements IMeterProvider {\n  private _sharedState: MeterProviderSharedState;\n  private _shutdown = false;\n\n  constructor(options?: MeterProviderOptions) {\n    const resource = Resource.default().merge(\n      options?.resource ?? Resource.empty()\n    );\n    this._sharedState = new MeterProviderSharedState(resource);\n    if (options?.views != null && options.views.length > 0) {\n      for (const view of options.views) {\n        this._sharedState.viewRegistry.addView(view);\n      }\n    }\n\n    if (options?.readers != null && options.readers.length > 0) {\n      for (const metricReader of options.readers) {\n        this.addMetricReader(metricReader);\n      }\n    }\n  }\n\n  /**\n   * Get a meter with the configuration of the MeterProvider.\n   */\n  getMeter(name: string, version = '', options: MeterOptions = {}): IMeter {\n    // https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/metrics/sdk.md#meter-creation\n    if (this._shutdown) {\n      diag.warn('A shutdown MeterProvider cannot provide a Meter');\n      return createNoopMeter();\n    }\n\n    return this._sharedState.getMeterSharedState({\n      name,\n      version,\n      schemaUrl: options.schemaUrl,\n    }).meter;\n  }\n\n  /**\n   * Register a {@link MetricReader} to the meter provider. After the\n   * registration, the MetricReader can start metrics collection.\n   *\n   * <p> NOTE: {@link MetricReader} instances MUST be added before creating any instruments.\n   * A {@link MetricReader} instance registered later may receive no or incomplete metric data.\n   *\n   * @param metricReader the metric reader to be registered.\n   *\n   * @deprecated This method will be removed in SDK 2.0. Please use\n   * {@link MeterProviderOptions.readers} via the {@link MeterProvider} constructor instead\n   */\n  addMetricReader(metricReader: MetricReader) {\n    const collector = new MetricCollector(this._sharedState, metricReader);\n    metricReader.setMetricProducer(collector);\n    this._sharedState.metricCollectors.push(collector);\n  }\n\n  /**\n   * Flush all buffered data and shut down the MeterProvider and all registered\n   * MetricReaders.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async shutdown(options?: ShutdownOptions): Promise<void> {\n    if (this._shutdown) {\n      diag.warn('shutdown may only be called once per MeterProvider');\n      return;\n    }\n\n    this._shutdown = true;\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.shutdown(options);\n      })\n    );\n  }\n\n  /**\n   * Notifies all registered MetricReaders to flush any buffered data.\n   *\n   * Returns a promise which is resolved when all flushes are complete.\n   */\n  async forceFlush(options?: ForceFlushOptions): Promise<void> {\n    // do not flush after shutdown\n    if (this._shutdown) {\n      diag.warn('invalid attempt to force flush after MeterProvider shutdown');\n      return;\n    }\n\n    await Promise.all(\n      this._sharedState.metricCollectors.map(collector => {\n        return collector.forceFlush(options);\n      })\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// https://tc39.es/proposal-regex-escaping\n// escape ^ $ \\ .  + ? ( ) [ ] { } |\n// do not need to escape * as we interpret it as wildcard\nconst ESCAPE = /[\\^$\\\\.+?()[\\]{}|]/g;\n\nexport interface Predicate {\n  match(str: string): boolean;\n}\n\n/**\n * Wildcard pattern predicate, supports patterns like `*`, `foo*`, `*bar`.\n */\nexport class PatternPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _regexp: RegExp;\n\n  constructor(pattern: string) {\n    if (pattern === '*') {\n      this._matchAll = true;\n      this._regexp = /.*/;\n    } else {\n      this._matchAll = false;\n      this._regexp = new RegExp(PatternPredicate.escapePattern(pattern));\n    }\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n\n    return this._regexp.test(str);\n  }\n\n  static escapePattern(pattern: string): string {\n    return `^${pattern.replace(ESCAPE, '\\\\$&').replace('*', '.*')}$`;\n  }\n\n  static hasWildcard(pattern: string): boolean {\n    return pattern.includes('*');\n  }\n}\n\nexport class ExactPredicate implements Predicate {\n  private _matchAll: boolean;\n  private _pattern?: string;\n\n  constructor(pattern?: string) {\n    this._matchAll = pattern === undefined;\n    this._pattern = pattern;\n  }\n\n  match(str: string): boolean {\n    if (this._matchAll) {\n      return true;\n    }\n    if (str === this._pattern) {\n      return true;\n    }\n    return false;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InstrumentType } from '../InstrumentDescriptor';\nimport { ExactPredicate, PatternPredicate, Predicate } from './Predicate';\n\nexport interface InstrumentSelectorCriteria {\n  name?: string;\n  type?: InstrumentType;\n  unit?: string;\n}\n\nexport class InstrumentSelector {\n  private _nameFilter: Predicate;\n  private _type?: InstrumentType;\n  private _unitFilter: Predicate;\n\n  constructor(criteria?: InstrumentSelectorCriteria) {\n    this._nameFilter = new PatternPredicate(criteria?.name ?? '*');\n    this._type = criteria?.type;\n    this._unitFilter = new ExactPredicate(criteria?.unit);\n  }\n\n  getType() {\n    return this._type;\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  getUnitFilter() {\n    return this._unitFilter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExactPredicate, Predicate } from './Predicate';\n\nexport interface MeterSelectorCriteria {\n  name?: string;\n  version?: string;\n  schemaUrl?: string;\n}\n\nexport class MeterSelector {\n  private _nameFilter: Predicate;\n  private _versionFilter: Predicate;\n  private _schemaUrlFilter: Predicate;\n\n  constructor(criteria?: MeterSelectorCriteria) {\n    this._nameFilter = new ExactPredicate(criteria?.name);\n    this._versionFilter = new ExactPredicate(criteria?.version);\n    this._schemaUrlFilter = new ExactPredicate(criteria?.schemaUrl);\n  }\n\n  getNameFilter() {\n    return this._nameFilter;\n  }\n\n  /**\n   * TODO: semver filter? no spec yet.\n   */\n  getVersionFilter() {\n    return this._versionFilter;\n  }\n\n  getSchemaUrlFilter() {\n    return this._schemaUrlFilter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PatternPredicate } from './Predicate';\nimport {\n  AttributesProcessor,\n  FilteringAttributesProcessor,\n} from './AttributesProcessor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { Aggregation } from './Aggregation';\nimport { InstrumentType } from '../InstrumentDescriptor';\n\nexport type ViewOptions = {\n  /**\n   *  Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   */\n  name?: string;\n  /**\n   * Alters the metric stream:\n   * This will be used as the description of the metrics stream.\n   * If not provided, the original Instrument description will be used by default.\n   *\n   * @example <caption>changes the description of all selected instruments to 'sample description'</caption>\n   * description: 'sample description'\n   */\n  description?: string;\n  /**\n   * Alters the metric stream:\n   * If provided, the attributes that are not in the list will be ignored.\n   * If not provided, all attribute keys will be used by default.\n   *\n   * @example <caption>drops all attributes with top-level keys except for 'myAttr' and 'myOtherAttr'</caption>\n   * attributeKeys: ['myAttr', 'myOtherAttr']\n   * @example <caption>drops all attributes</caption>\n   * attributeKeys: []\n   */\n  attributeKeys?: string[];\n  /**\n   * Alters the metric stream:\n   * Alters the {@link Aggregation} of the metric stream.\n   *\n   * @example <caption>changes the aggregation of the selected instrument(s) to ExplicitBucketHistogramAggregation</caption>\n   * aggregation: new ExplicitBucketHistogramAggregation([1, 10, 100])\n   * @example <caption>changes the aggregation of the selected instrument(s) to LastValueAggregation</caption>\n   * aggregation: new LastValueAggregation()\n   */\n  aggregation?: Aggregation;\n  /**\n   * Instrument selection criteria:\n   * The original type of the Instrument(s).\n   *\n   * @example <caption>selects all counters</caption>\n   * instrumentType: InstrumentType.COUNTER\n   * @example <caption>selects all histograms</caption>\n   * instrumentType: InstrumentType.HISTOGRAM\n   */\n  instrumentType?: InstrumentType;\n  /**\n   * Instrument selection criteria:\n   * Original name of the Instrument(s) with wildcard support.\n   *\n   * @example <caption>select all instruments</caption>\n   * instrumentName: '*'\n   * @example <caption>select all instruments starting with 'my.instruments.'</caption>\n   * instrumentName: 'my.instruments.*'\n   * @example <caption>select all instruments named 'my.instrument.requests' exactly</caption>\n   * instrumentName: 'my.instruments.requests'\n   */\n  instrumentName?: string;\n  /**\n   * Instrument selection criteria:\n   * The unit of the Instrument(s).\n   *\n   * @example <caption>select all instruments with unit 'ms'</caption>\n   * instrumentUnit: 'ms'\n   */\n  instrumentUnit?: string;\n  /**\n   * Instrument selection criteria:\n   * The name of the Meter. No wildcard support, name must match the meter exactly.\n   *\n   * @example <caption>select all meters named 'example.component.app' exactly</caption>\n   * meterName: 'example.component.app'\n   */\n  meterName?: string;\n  /**\n   * Instrument selection criteria:\n   * The version of the Meter. No wildcard support, version must match exactly.\n   *\n   * @example\n   * meterVersion: '1.0.1'\n   */\n  meterVersion?: string;\n  /**\n   * Instrument selection criteria:\n   * The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example <caption>Select all meters with schema URL 'https://example.com/schema' exactly.</caption>\n   * meterSchemaUrl: 'https://example.com/schema'\n   */\n  meterSchemaUrl?: string;\n};\n\nfunction isSelectorNotProvided(options: ViewOptions): boolean {\n  return (\n    options.instrumentName == null &&\n    options.instrumentType == null &&\n    options.instrumentUnit == null &&\n    options.meterName == null &&\n    options.meterVersion == null &&\n    options.meterSchemaUrl == null\n  );\n}\n\n/**\n * Can be passed to a {@link MeterProvider} to select instruments and alter their metric stream.\n */\nexport class View {\n  readonly name?: string;\n  readonly description?: string;\n  readonly aggregation: Aggregation;\n  readonly attributesProcessor: AttributesProcessor;\n  readonly instrumentSelector: InstrumentSelector;\n  readonly meterSelector: MeterSelector;\n\n  /**\n   * Create a new {@link View} instance.\n   *\n   * Parameters can be categorized as two types:\n   *  Instrument selection criteria: Used to describe the instrument(s) this view will be applied to.\n   *  Will be treated as additive (the Instrument has to meet all the provided criteria to be selected).\n   *\n   *  Metric stream altering: Alter the metric stream of instruments selected by instrument selection criteria.\n   *\n   * @param viewOptions {@link ViewOptions} for altering the metric stream and instrument selection.\n   * @param viewOptions.name\n   * Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   * @param viewOptions.description\n   * Alters the metric stream:\n   *  This will be used as the description of the metrics stream.\n   *  If not provided, the original Instrument description will be used by default.\n   * @param viewOptions.attributeKeys\n   * Alters the metric stream:\n   *  If provided, the attributes that are not in the list will be ignored.\n   *  If not provided, all attribute keys will be used by default.\n   * @param viewOptions.aggregation\n   * Alters the metric stream:\n   *  Alters the {@link Aggregation} of the metric stream.\n   * @param viewOptions.instrumentName\n   * Instrument selection criteria:\n   *  Original name of the Instrument(s) with wildcard support.\n   * @param viewOptions.instrumentType\n   * Instrument selection criteria:\n   *  The original type of the Instrument(s).\n   * @param viewOptions.instrumentUnit\n   * Instrument selection criteria:\n   *  The unit of the Instrument(s).\n   * @param viewOptions.meterName\n   * Instrument selection criteria:\n   *  The name of the Meter. No wildcard support, name must match the meter exactly.\n   * @param viewOptions.meterVersion\n   * Instrument selection criteria:\n   *  The version of the Meter. No wildcard support, version must match exactly.\n   * @param viewOptions.meterSchemaUrl\n   * Instrument selection criteria:\n   *  The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example\n   * // Create a view that changes the Instrument 'my.instrument' to use to an\n   * // ExplicitBucketHistogramAggregation with the boundaries [20, 30, 40]\n   * new View({\n   *   aggregation: new ExplicitBucketHistogramAggregation([20, 30, 40]),\n   *   instrumentName: 'my.instrument'\n   * })\n   */\n  constructor(viewOptions: ViewOptions) {\n    // If no criteria is provided, the SDK SHOULD treat it as an error.\n    // It is recommended that the SDK implementations fail fast.\n    if (isSelectorNotProvided(viewOptions)) {\n      throw new Error('Cannot create view with no selector arguments supplied');\n    }\n\n    // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n    // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n    if (\n      viewOptions.name != null &&\n      (viewOptions?.instrumentName == null ||\n        PatternPredicate.hasWildcard(viewOptions.instrumentName))\n    ) {\n      throw new Error(\n        'Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.'\n      );\n    }\n\n    // Create AttributesProcessor if attributeKeys are defined set.\n    if (viewOptions.attributeKeys != null) {\n      this.attributesProcessor = new FilteringAttributesProcessor(\n        viewOptions.attributeKeys\n      );\n    } else {\n      this.attributesProcessor = AttributesProcessor.Noop();\n    }\n\n    this.name = viewOptions.name;\n    this.description = viewOptions.description;\n    this.aggregation = viewOptions.aggregation ?? Aggregation.Default();\n    this.instrumentSelector = new InstrumentSelector({\n      name: viewOptions.instrumentName,\n      type: viewOptions.instrumentType,\n      unit: viewOptions.instrumentUnit,\n    });\n    this.meterSelector = new MeterSelector({\n      name: viewOptions.meterName,\n      version: viewOptions.meterVersion,\n      schemaUrl: viewOptions.meterSchemaUrl,\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetricDescriptor } from './export/MetricData';\n\nexport {\n  Sum,\n  LastValue,\n  Histogram,\n  ExponentialHistogram,\n} from './aggregator/types';\n\nexport {\n  AggregationSelector,\n  AggregationTemporalitySelector,\n} from './export/AggregationSelector';\n\nexport { AggregationTemporality } from './export/AggregationTemporality';\n\nexport {\n  DataPoint,\n  DataPointType,\n  SumMetricData,\n  GaugeMetricData,\n  HistogramMetricData,\n  ExponentialHistogramMetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n  MetricData,\n  MetricDescriptor,\n  CollectionResult,\n} from './export/MetricData';\n\nexport { PushMetricExporter } from './export/MetricExporter';\n\nexport { MetricReader, MetricReaderOptions } from './export/MetricReader';\n\nexport {\n  PeriodicExportingMetricReader,\n  PeriodicExportingMetricReaderOptions,\n} from './export/PeriodicExportingMetricReader';\n\nexport { InMemoryMetricExporter } from './export/InMemoryMetricExporter';\n\nexport { ConsoleMetricExporter } from './export/ConsoleMetricExporter';\n\nexport { MetricCollectOptions, MetricProducer } from './export/MetricProducer';\n\nexport { InstrumentType } from './InstrumentDescriptor';\n/**\n * @deprecated Use {@link MetricDescriptor} instead.\n */\nexport type InstrumentDescriptor = MetricDescriptor;\n\nexport { MeterProvider, MeterProviderOptions } from './MeterProvider';\n\nexport {\n  DefaultAggregation,\n  ExplicitBucketHistogramAggregation,\n  ExponentialHistogramAggregation,\n  DropAggregation,\n  HistogramAggregation,\n  LastValueAggregation,\n  SumAggregation,\n  Aggregation,\n} from './view/Aggregation';\n\nexport { View, ViewOptions } from './view/View';\n\nexport { TimeoutError } from './utils';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterConfigBase } from '@opentelemetry/otlp-exporter-base';\nimport {\n  AggregationTemporality,\n  AggregationSelector,\n} from '@opentelemetry/sdk-metrics';\n\nexport interface OTLPMetricExporterOptions extends OTLPExporterConfigBase {\n  temporalityPreference?:\n    | AggregationTemporalityPreference\n    | AggregationTemporality;\n  aggregationPreference?: AggregationSelector;\n}\n\nexport enum AggregationTemporalityPreference {\n  DELTA,\n  CUMULATIVE,\n  LOWMEMORY,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResult, getEnv } from '@opentelemetry/core';\nimport {\n  AggregationTemporality,\n  AggregationTemporalitySelector,\n  InstrumentType,\n  PushMetricExporter,\n  ResourceMetrics,\n  Aggregation,\n  AggregationSelector,\n} from '@opentelemetry/sdk-metrics';\nimport {\n  AggregationTemporalityPreference,\n  OTLPMetricExporterOptions,\n} from './OTLPMetricExporterOptions';\nimport { OTLPExporterBase } from '@opentelemetry/otlp-exporter-base';\nimport { diag } from '@opentelemetry/api';\n\nexport const CumulativeTemporalitySelector: AggregationTemporalitySelector =\n  () => AggregationTemporality.CUMULATIVE;\n\nexport const DeltaTemporalitySelector: AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => {\n  switch (instrumentType) {\n    case InstrumentType.COUNTER:\n    case InstrumentType.OBSERVABLE_COUNTER:\n    case InstrumentType.GAUGE:\n    case InstrumentType.HISTOGRAM:\n    case InstrumentType.OBSERVABLE_GAUGE:\n      return AggregationTemporality.DELTA;\n    case InstrumentType.UP_DOWN_COUNTER:\n    case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER:\n      return AggregationTemporality.CUMULATIVE;\n  }\n};\n\nexport const LowMemoryTemporalitySelector: AggregationTemporalitySelector = (\n  instrumentType: InstrumentType\n) => {\n  switch (instrumentType) {\n    case InstrumentType.COUNTER:\n    case InstrumentType.HISTOGRAM:\n      return AggregationTemporality.DELTA;\n    case InstrumentType.GAUGE:\n    case InstrumentType.UP_DOWN_COUNTER:\n    case InstrumentType.OBSERVABLE_UP_DOWN_COUNTER:\n    case InstrumentType.OBSERVABLE_COUNTER:\n    case InstrumentType.OBSERVABLE_GAUGE:\n      return AggregationTemporality.CUMULATIVE;\n  }\n};\n\nfunction chooseTemporalitySelectorFromEnvironment() {\n  const env = getEnv();\n  const configuredTemporality =\n    env.OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE.trim().toLowerCase();\n\n  if (configuredTemporality === 'cumulative') {\n    return CumulativeTemporalitySelector;\n  }\n  if (configuredTemporality === 'delta') {\n    return DeltaTemporalitySelector;\n  }\n  if (configuredTemporality === 'lowmemory') {\n    return LowMemoryTemporalitySelector;\n  }\n\n  diag.warn(\n    `OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE is set to '${env.OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE}', but only 'cumulative' and 'delta' are allowed. Using default ('cumulative') instead.`\n  );\n  return CumulativeTemporalitySelector;\n}\n\nfunction chooseTemporalitySelector(\n  temporalityPreference?:\n    | AggregationTemporalityPreference\n    | AggregationTemporality\n): AggregationTemporalitySelector {\n  // Directly passed preference has priority.\n  if (temporalityPreference != null) {\n    if (temporalityPreference === AggregationTemporalityPreference.DELTA) {\n      return DeltaTemporalitySelector;\n    } else if (\n      temporalityPreference === AggregationTemporalityPreference.LOWMEMORY\n    ) {\n      return LowMemoryTemporalitySelector;\n    }\n    return CumulativeTemporalitySelector;\n  }\n\n  return chooseTemporalitySelectorFromEnvironment();\n}\n\nfunction chooseAggregationSelector(\n  config: OTLPMetricExporterOptions | undefined\n) {\n  if (config?.aggregationPreference) {\n    return config.aggregationPreference;\n  } else {\n    return (_instrumentType: any) => Aggregation.Default();\n  }\n}\n\nexport class OTLPMetricExporterBase<\n  T extends OTLPExporterBase<OTLPMetricExporterOptions, ResourceMetrics>,\n> implements PushMetricExporter\n{\n  public _otlpExporter: T;\n  private _aggregationTemporalitySelector: AggregationTemporalitySelector;\n  private _aggregationSelector: AggregationSelector;\n\n  constructor(exporter: T, config?: OTLPMetricExporterOptions) {\n    this._otlpExporter = exporter;\n    this._aggregationSelector = chooseAggregationSelector(config);\n    this._aggregationTemporalitySelector = chooseTemporalitySelector(\n      config?.temporalityPreference\n    );\n  }\n\n  export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    this._otlpExporter.export([metrics], resultCallback);\n  }\n\n  async shutdown(): Promise<void> {\n    await this._otlpExporter.shutdown();\n  }\n\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  selectAggregation(instrumentType: InstrumentType): Aggregation {\n    return this._aggregationSelector(instrumentType);\n  }\n\n  selectAggregationTemporality(\n    instrumentType: InstrumentType\n  ): AggregationTemporality {\n    return this._aggregationTemporalitySelector(instrumentType);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\n\nconst DEFAULT_TRACE_TIMEOUT = 10000;\nexport const DEFAULT_EXPORT_MAX_ATTEMPTS = 5;\nexport const DEFAULT_EXPORT_INITIAL_BACKOFF = 1000;\nexport const DEFAULT_EXPORT_MAX_BACKOFF = 5000;\nexport const DEFAULT_EXPORT_BACKOFF_MULTIPLIER = 1.5;\n\n/**\n * Parses headers from config leaving only those that have defined values\n * @param partialHeaders\n */\nexport function parseHeaders(\n  partialHeaders: Partial<Record<string, unknown>> = {}\n): Record<string, string> {\n  const headers: Record<string, string> = {};\n  Object.entries(partialHeaders).forEach(([key, value]) => {\n    if (typeof value !== 'undefined') {\n      headers[key] = String(value);\n    } else {\n      diag.warn(\n        `Header \"${key}\" has invalid value (${value}) and will be ignored`\n      );\n    }\n  });\n  return headers;\n}\n\n/**\n * Adds path (version + signal) to a no per-signal endpoint\n * @param url\n * @param path\n * @returns url + path\n */\nexport function appendResourcePathToUrl(url: string, path: string): string {\n  if (!url.endsWith('/')) {\n    url = url + '/';\n  }\n  return url + path;\n}\n\n/**\n * Adds root path to signal specific endpoint when endpoint contains no path part and no root path\n * @param url\n * @returns url\n */\nexport function appendRootPathToUrlIfNeeded(url: string): string {\n  try {\n    const parsedUrl = new URL(url);\n    if (parsedUrl.pathname === '') {\n      parsedUrl.pathname = parsedUrl.pathname + '/';\n    }\n    return parsedUrl.toString();\n  } catch {\n    diag.warn(`Could not parse export URL: '${url}'`);\n    return url;\n  }\n}\n\n/**\n * Configure exporter trace timeout value from passed in value or environment variables\n * @param timeoutMillis\n * @returns timeout value in milliseconds\n */\nexport function configureExporterTimeout(\n  timeoutMillis: number | undefined\n): number {\n  if (typeof timeoutMillis === 'number') {\n    if (timeoutMillis <= 0) {\n      // OTLP exporter configured timeout - using default value of 10000ms\n      return invalidTimeout(timeoutMillis, DEFAULT_TRACE_TIMEOUT);\n    }\n    return timeoutMillis;\n  } else {\n    return getExporterTimeoutFromEnv();\n  }\n}\n\nfunction getExporterTimeoutFromEnv(): number {\n  const definedTimeout = Number(\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT ??\n      getEnv().OTEL_EXPORTER_OTLP_TIMEOUT\n  );\n\n  if (definedTimeout <= 0) {\n    // OTLP exporter configured timeout - using default value of 10000ms\n    return invalidTimeout(definedTimeout, DEFAULT_TRACE_TIMEOUT);\n  } else {\n    return definedTimeout;\n  }\n}\n\n// OTLP exporter configured timeout - using default value of 10000ms\nexport function invalidTimeout(\n  timeout: number,\n  defaultTimeout: number\n): number {\n  diag.warn('Timeout must be greater than 0', timeout);\n\n  return defaultTimeout;\n}\n\nexport function isExportRetryable(statusCode: number): boolean {\n  const retryCodes = [429, 502, 503, 504];\n\n  return retryCodes.includes(statusCode);\n}\n\nexport function parseRetryAfterToMills(retryAfter?: string | null): number {\n  if (retryAfter == null) {\n    return -1;\n  }\n  const seconds = Number.parseInt(retryAfter, 10);\n  if (Number.isInteger(seconds)) {\n    return seconds > 0 ? seconds * 1000 : -1;\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After#directives\n  const delay = new Date(retryAfter).getTime() - Date.now();\n\n  if (delay >= 0) {\n    return delay;\n  }\n  return 0;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  ExportResult,\n  ExportResultCode,\n  BindOnceFuture,\n} from '@opentelemetry/core';\nimport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nimport { configureExporterTimeout } from './util';\n\n/**\n * Collector Exporter abstract base class\n */\nexport abstract class OTLPExporterBase<\n  T extends OTLPExporterConfigBase,\n  ExportItem,\n> {\n  public readonly url: string;\n  public readonly hostname: string | undefined;\n  public readonly timeoutMillis: number;\n  protected _concurrencyLimit: number;\n  protected _sendingPromises: Promise<unknown>[] = [];\n  protected _shutdownOnce: BindOnceFuture<void>;\n\n  /**\n   * @param config\n   */\n  constructor(config: T = {} as T) {\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    this._concurrencyLimit =\n      typeof config.concurrencyLimit === 'number'\n        ? config.concurrencyLimit\n        : 30;\n\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n\n    // platform dependent\n    this.onInit(config);\n  }\n\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  export(\n    items: ExportItem[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown'),\n      });\n      return;\n    }\n\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached'),\n      });\n      return;\n    }\n\n    this._export(items)\n      .then(() => {\n        resultCallback({ code: ExportResultCode.SUCCESS });\n      })\n      .catch((error: ExportServiceError) => {\n        resultCallback({ code: ExportResultCode.FAILED, error });\n      });\n  }\n\n  private _export(items: ExportItem[]): Promise<unknown> {\n    return new Promise<void>((resolve, reject) => {\n      try {\n        diag.debug('items to be sent', items);\n        this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.all(this._sendingPromises).then(() => {\n      /** ignore resolved values */\n    });\n  }\n\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  private _shutdown(): Promise<void> {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return this.forceFlush();\n  }\n\n  abstract onShutdown(): void;\n  abstract onInit(config: T): void;\n  abstract send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void;\n  abstract getDefaultUrl(config: T): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterConfigBase } from '../../types';\n\n/**\n * Collector Exporter node base config\n */\nexport interface OTLPExporterNodeConfigBase extends OTLPExporterConfigBase {\n  keepAlive?: boolean;\n  compression?: CompressionAlgorithm;\n  httpAgentOptions?: http.AgentOptions | https.AgentOptions;\n}\n\nexport enum CompressionAlgorithm {\n  NONE = 'none',\n  GZIP = 'gzip',\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Interface for handling error\n */\nexport class OTLPExporterError extends Error {\n  readonly code?: number;\n  override readonly name: string = 'OTLPExporterError';\n  readonly data?: string;\n\n  constructor(message?: string, code?: number, data?: string) {\n    super(message);\n    this.data = data;\n    this.code = code;\n  }\n}\n\n/**\n * Interface for handling export service errors\n */\nexport interface ExportServiceError {\n  name: string;\n  code: number;\n  details: string;\n  metadata: { [key: string]: unknown };\n  message: string;\n  stack: string;\n}\n\n/**\n * Collector Exporter base config\n */\nexport interface OTLPExporterConfigBase {\n  headers?: Partial<Record<string, unknown>>;\n  hostname?: string;\n  url?: string;\n  concurrencyLimit?: number;\n  /** Maximum time the OTLP exporter will wait for each batch export.\n   * The default value is 10000ms. */\n  timeoutMillis?: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as url from 'url';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as zlib from 'zlib';\nimport { Readable } from 'stream';\nimport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nimport { OTLPExporterNodeConfigBase } from '.';\nimport { diag } from '@opentelemetry/api';\nimport { CompressionAlgorithm } from './types';\nimport { getEnv } from '@opentelemetry/core';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Sends data using http\n * @param collector\n * @param data\n * @param contentType\n * @param onSuccess\n * @param onError\n */\nexport function sendWithHttp<ExportItem, ServiceResponse>(\n  collector: OTLPExporterNodeBase<ExportItem, ServiceResponse>,\n  data: string | Uint8Array,\n  contentType: string,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  const exporterTimeout = collector.timeoutMillis;\n  const parsedUrl = new url.URL(collector.url);\n  const nodeVersion = Number(process.versions.node.split('.')[0]);\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let req: http.ClientRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (req.destroyed) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      // req.abort() was deprecated since v14\n      nodeVersion >= 14 ? req.destroy() : req.abort();\n    }\n  }, exporterTimeout);\n\n  const options: http.RequestOptions | https.RequestOptions = {\n    hostname: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.pathname,\n    method: 'POST',\n    headers: {\n      'Content-Type': contentType,\n      ...collector.headers,\n    },\n    agent: collector.agent,\n  };\n\n  const request = parsedUrl.protocol === 'http:' ? http.request : https.request;\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    req = request(options, (res: http.IncomingMessage) => {\n      let responseData = '';\n      res.on('data', chunk => (responseData += chunk));\n\n      res.on('aborted', () => {\n        if (reqIsDestroyed) {\n          const err = new OTLPExporterError('Request Timeout');\n          onError(err);\n        }\n      });\n\n      res.on('end', () => {\n        if (reqIsDestroyed === false) {\n          if (res.statusCode && res.statusCode < 299) {\n            diag.debug(`statusCode: ${res.statusCode}`, responseData);\n            onSuccess();\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          } else if (\n            res.statusCode &&\n            isExportRetryable(res.statusCode) &&\n            retries > 0\n          ) {\n            let retryTime: number;\n            minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n            // retry after interval specified in Retry-After header\n            if (res.headers['retry-after']) {\n              retryTime = parseRetryAfterToMills(res.headers['retry-after']!);\n            } else {\n              // exponential backoff with jitter\n              retryTime = Math.round(\n                Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) +\n                  minDelay\n              );\n            }\n\n            retryTimer = setTimeout(() => {\n              sendWithRetry(retries - 1, minDelay);\n            }, retryTime);\n          } else {\n            const error = new OTLPExporterError(\n              res.statusMessage,\n              res.statusCode,\n              responseData\n            );\n            onError(error);\n            // clear all timers since request was completed and promise was resolved\n            clearTimeout(exporterTimer);\n            clearTimeout(retryTimer);\n          }\n        }\n      });\n    });\n\n    req.on('error', (error: Error | any) => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout', error.code);\n        onError(err);\n      } else {\n        onError(error);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    req.on('abort', () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    });\n\n    switch (collector.compression) {\n      case CompressionAlgorithm.GZIP: {\n        req.setHeader('Content-Encoding', 'gzip');\n        const dataStream = readableFromUnit8Array(data);\n        dataStream\n          .on('error', onError)\n          .pipe(zlib.createGzip())\n          .on('error', onError)\n          .pipe(req);\n\n        break;\n      }\n      default:\n        req.end(Buffer.from(data));\n        break;\n    }\n  };\n  sendWithRetry();\n}\n\nfunction readableFromUnit8Array(buff: string | Uint8Array): Readable {\n  const readable = new Readable();\n  readable.push(buff);\n  readable.push(null);\n\n  return readable;\n}\n\nexport function createHttpAgent(\n  config: OTLPExporterNodeConfigBase\n): http.Agent | https.Agent | undefined {\n  if (config.httpAgentOptions && config.keepAlive === false) {\n    diag.warn('httpAgentOptions is used only when keepAlive is true');\n    return undefined;\n  }\n\n  if (config.keepAlive === false || !config.url) return undefined;\n\n  try {\n    const parsedUrl = new url.URL(config.url as string);\n    const Agent = parsedUrl.protocol === 'http:' ? http.Agent : https.Agent;\n    return new Agent({ keepAlive: true, ...config.httpAgentOptions });\n  } catch (err) {\n    diag.error(\n      `collector exporter failed to create http agent. err: ${err.message}`\n    );\n    return undefined;\n  }\n}\n\nexport function configureCompression(\n  compression: CompressionAlgorithm | undefined\n): CompressionAlgorithm {\n  if (compression) {\n    return compression;\n  } else {\n    const definedCompression =\n      getEnv().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION ||\n      getEnv().OTEL_EXPORTER_OTLP_COMPRESSION;\n    return definedCompression === CompressionAlgorithm.GZIP\n      ? CompressionAlgorithm.GZIP\n      : CompressionAlgorithm.NONE;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { createHttpAgent, sendWithHttp, configureCompression } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { ISerializer } from '@opentelemetry/otlp-transformer';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterNodeBase<\n  ExportItem,\n  ServiceResponse,\n> extends OTLPExporterBase<OTLPExporterNodeConfigBase, ExportItem> {\n  DEFAULT_HEADERS: Record<string, string> = {};\n  headers: Record<string, string>;\n  agent: http.Agent | https.Agent | undefined;\n  compression: CompressionAlgorithm;\n  private _serializer: ISerializer<ExportItem[], ServiceResponse>;\n  private _contentType: string;\n\n  constructor(\n    config: OTLPExporterNodeConfigBase = {},\n    serializer: ISerializer<ExportItem[], ServiceResponse>,\n    contentType: string\n  ) {\n    super(config);\n    this._contentType = contentType;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if ((config as any).metadata) {\n      diag.warn('Metadata cannot be set when using http');\n    }\n    this.headers = Object.assign(\n      this.DEFAULT_HEADERS,\n      parseHeaders(config.headers),\n      baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS)\n    );\n    this.agent = createHttpAgent(config);\n    this.compression = configureCompression(config.compression);\n    this._serializer = serializer;\n  }\n\n  onInit(_config: OTLPExporterNodeConfigBase): void {}\n\n  send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n\n    const promise = new Promise<void>((resolve, reject) => {\n      sendWithHttp(\n        this,\n        this._serializer.serializeRequest(objects) ?? new Uint8Array(),\n        this._contentType,\n        resolve,\n        reject\n      );\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n\n  onShutdown(): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPExporterNodeBase } from './OTLPExporterNodeBase';\nexport { sendWithHttp, createHttpAgent, configureCompression } from './util';\nexport { OTLPExporterNodeConfigBase, CompressionAlgorithm } from './types';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { OTLPExporterError } from '../../types';\nimport {\n  DEFAULT_EXPORT_MAX_ATTEMPTS,\n  DEFAULT_EXPORT_INITIAL_BACKOFF,\n  DEFAULT_EXPORT_BACKOFF_MULTIPLIER,\n  DEFAULT_EXPORT_MAX_BACKOFF,\n  isExportRetryable,\n  parseRetryAfterToMills,\n} from '../../util';\n\n/**\n * Send metrics/spans using browser navigator.sendBeacon\n * @param body\n * @param url\n * @param blobPropertyBag\n * @param onSuccess\n * @param onError\n */\nexport function sendWithBeacon(\n  body: Uint8Array,\n  url: string,\n  blobPropertyBag: BlobPropertyBag,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  if (navigator.sendBeacon(url, new Blob([body], blobPropertyBag))) {\n    diag.debug('sendBeacon - can send', body);\n    onSuccess();\n  } else {\n    const error = new OTLPExporterError(`sendBeacon - cannot send ${body}`);\n    onError(error);\n  }\n}\n\n/**\n * function to send metrics/spans using browser XMLHttpRequest\n *     used when navigator.sendBeacon is not available\n * @param body\n * @param url\n * @param headers\n * @param onSuccess\n * @param onError\n */\nexport function sendWithXhr(\n  body: Uint8Array,\n  url: string,\n  headers: Record<string, string>,\n  exporterTimeout: number,\n  onSuccess: () => void,\n  onError: (error: OTLPExporterError) => void\n): void {\n  let retryTimer: ReturnType<typeof setTimeout>;\n  let xhr: XMLHttpRequest;\n  let reqIsDestroyed = false;\n\n  const exporterTimer = setTimeout(() => {\n    clearTimeout(retryTimer);\n    reqIsDestroyed = true;\n\n    if (xhr.readyState === XMLHttpRequest.DONE) {\n      const err = new OTLPExporterError('Request Timeout');\n      onError(err);\n    } else {\n      xhr.abort();\n    }\n  }, exporterTimeout);\n\n  const sendWithRetry = (\n    retries = DEFAULT_EXPORT_MAX_ATTEMPTS,\n    minDelay = DEFAULT_EXPORT_INITIAL_BACKOFF\n  ) => {\n    xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n\n    const defaultHeaders = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    Object.entries({\n      ...defaultHeaders,\n      ...headers,\n    }).forEach(([k, v]) => {\n      xhr.setRequestHeader(k, v);\n    });\n\n    xhr.send(body);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === XMLHttpRequest.DONE && reqIsDestroyed === false) {\n        if (xhr.status >= 200 && xhr.status <= 299) {\n          diag.debug('xhr success', body);\n          onSuccess();\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        } else if (xhr.status && isExportRetryable(xhr.status) && retries > 0) {\n          let retryTime: number;\n          minDelay = DEFAULT_EXPORT_BACKOFF_MULTIPLIER * minDelay;\n\n          // retry after interval specified in Retry-After header\n          if (xhr.getResponseHeader('Retry-After')) {\n            retryTime = parseRetryAfterToMills(\n              xhr.getResponseHeader('Retry-After')!\n            );\n          } else {\n            // exponential backoff with jitter\n            retryTime = Math.round(\n              Math.random() * (DEFAULT_EXPORT_MAX_BACKOFF - minDelay) + minDelay\n            );\n          }\n\n          retryTimer = setTimeout(() => {\n            sendWithRetry(retries - 1, minDelay);\n          }, retryTime);\n        } else {\n          const error = new OTLPExporterError(\n            `Failed to export with XHR (status: ${xhr.status})`,\n            xhr.status\n          );\n          onError(error);\n          clearTimeout(exporterTimer);\n          clearTimeout(retryTimer);\n        }\n      }\n    };\n\n    xhr.onabort = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n\n    xhr.onerror = () => {\n      if (reqIsDestroyed) {\n        const err = new OTLPExporterError('Request Timeout');\n        onError(err);\n      }\n      clearTimeout(exporterTimer);\n      clearTimeout(retryTimer);\n    };\n  };\n\n  sendWithRetry();\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { OTLPExporterConfigBase } from '../../types';\nimport * as otlpTypes from '../../types';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { ISerializer } from '@opentelemetry/otlp-transformer';\n\n/**\n * Collector Metric Exporter abstract base class\n */\nexport abstract class OTLPExporterBrowserBase<\n  ExportItem,\n  ServiceResponse,\n> extends OTLPExporterBase<OTLPExporterConfigBase, ExportItem> {\n  protected _headers: Record<string, string>;\n  private _useXHR: boolean = false;\n  private _contentType: string;\n  private _serializer: ISerializer<ExportItem[], ServiceResponse>;\n\n  /**\n   * @param config\n   * @param serializer\n   * @param contentType\n   */\n  constructor(\n    config: OTLPExporterConfigBase = {},\n    serializer: ISerializer<ExportItem[], ServiceResponse>,\n    contentType: string\n  ) {\n    super(config);\n    this._serializer = serializer;\n    this._contentType = contentType;\n    this._useXHR =\n      !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (this._useXHR) {\n      this._headers = Object.assign(\n        {},\n        parseHeaders(config.headers),\n        baggageUtils.parseKeyPairsIntoRecord(\n          getEnv().OTEL_EXPORTER_OTLP_HEADERS\n        )\n      );\n    } else {\n      this._headers = {};\n    }\n  }\n\n  onInit(): void {}\n\n  onShutdown(): void {}\n\n  send(\n    items: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: otlpTypes.OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    const body = this._serializer.serializeRequest(items) ?? new Uint8Array();\n\n    const promise = new Promise<void>((resolve, reject) => {\n      if (this._useXHR) {\n        sendWithXhr(\n          body,\n          this.url,\n          {\n            ...this._headers,\n            'Content-Type': this._contentType,\n          },\n          this.timeoutMillis,\n          resolve,\n          reject\n        );\n      } else {\n        sendWithBeacon(\n          body,\n          this.url,\n          { type: this._contentType },\n          resolve,\n          reject\n        );\n      }\n    }).then(onSuccess, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPExporterBrowserBase } from './OTLPExporterBrowserBase';\nexport { sendWithXhr } from './util';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  OTLPExporterNodeBase,\n  sendWithHttp,\n  createHttpAgent,\n  configureCompression,\n  OTLPExporterNodeConfigBase,\n  CompressionAlgorithm,\n} from './node';\nexport { OTLPExporterBrowserBase, sendWithXhr } from './browser';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport * from './platform';\nexport { OTLPExporterBase } from './OTLPExporterBase';\nexport {\n  OTLPExporterError,\n  OTLPExporterConfigBase,\n  ExportServiceError,\n} from './types';\nexport {\n  parseHeaders,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  configureExporterTimeout,\n  invalidTimeout,\n} from './util';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { OtlpEncodingOptions, Fixed64, LongBits } from './types';\nimport { HrTime } from '@opentelemetry/api';\nimport { hexToBinary, hrTimeToNanoseconds } from '@opentelemetry/core';\n\nexport function hrTimeToNanos(hrTime: HrTime): bigint {\n  const NANOSECONDS = BigInt(1_000_000_000);\n  return BigInt(hrTime[0]) * NANOSECONDS + BigInt(hrTime[1]);\n}\n\nexport function toLongBits(value: bigint): LongBits {\n  const low = Number(BigInt.asUintN(32, value));\n  const high = Number(BigInt.asUintN(32, value >> BigInt(32)));\n  return { low, high };\n}\n\nexport function encodeAsLongBits(hrTime: HrTime): LongBits {\n  const nanos = hrTimeToNanos(hrTime);\n  return toLongBits(nanos);\n}\n\nexport function encodeAsString(hrTime: HrTime): string {\n  const nanos = hrTimeToNanos(hrTime);\n  return nanos.toString();\n}\n\nconst encodeTimestamp =\n  typeof BigInt !== 'undefined' ? encodeAsString : hrTimeToNanoseconds;\n\nexport type HrTimeEncodeFunction = (hrTime: HrTime) => Fixed64;\nexport type SpanContextEncodeFunction = (\n  spanContext: string\n) => string | Uint8Array;\nexport type OptionalSpanContextEncodeFunction = (\n  spanContext: string | undefined\n) => string | Uint8Array | undefined;\n\nexport interface Encoder {\n  encodeHrTime: HrTimeEncodeFunction;\n  encodeSpanContext: SpanContextEncodeFunction;\n  encodeOptionalSpanContext: OptionalSpanContextEncodeFunction;\n}\n\nfunction identity<T>(value: T): T {\n  return value;\n}\n\nfunction optionalHexToBinary(str: string | undefined): Uint8Array | undefined {\n  if (str === undefined) return undefined;\n  return hexToBinary(str);\n}\n\nconst DEFAULT_ENCODER: Encoder = {\n  encodeHrTime: encodeAsLongBits,\n  encodeSpanContext: hexToBinary,\n  encodeOptionalSpanContext: optionalHexToBinary,\n};\n\nexport function getOtlpEncoder(options?: OtlpEncodingOptions): Encoder {\n  if (options === undefined) {\n    return DEFAULT_ENCODER;\n  }\n\n  const useLongBits = options.useLongBits ?? true;\n  const useHex = options.useHex ?? false;\n  return {\n    encodeHrTime: useLongBits ? encodeAsLongBits : encodeTimestamp,\n    encodeSpanContext: useHex ? identity : hexToBinary,\n    encodeOptionalSpanContext: useHex ? identity : optionalHexToBinary,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Fixed64, IInstrumentationScope, IKeyValue } from '../common/types';\nimport { IResource } from '../resource/types';\n\n/** Properties of an ExportTraceServiceRequest. */\nexport interface IExportTraceServiceRequest {\n  /** ExportTraceServiceRequest resourceSpans */\n  resourceSpans?: IResourceSpans[];\n}\n\nexport interface IExportTraceServiceResponse {\n  /** ExportTraceServiceResponse partialSuccess */\n  partialSuccess?: IExportTracePartialSuccess;\n}\n\nexport interface IExportTracePartialSuccess {\n  /** ExportLogsServiceResponse rejectedLogRecords */\n  rejectedSpans?: number;\n\n  /** ExportLogsServiceResponse errorMessage */\n  errorMessage?: string;\n}\n\n/** Properties of a ResourceSpans. */\nexport interface IResourceSpans {\n  /** ResourceSpans resource */\n  resource?: IResource;\n\n  /** ResourceSpans scopeSpans */\n  scopeSpans: IScopeSpans[];\n\n  /** ResourceSpans schemaUrl */\n  schemaUrl?: string;\n}\n\n/** Properties of an ScopeSpans. */\nexport interface IScopeSpans {\n  /** IScopeSpans scope */\n  scope?: IInstrumentationScope;\n\n  /** IScopeSpans spans */\n  spans?: ISpan[];\n\n  /** IScopeSpans schemaUrl */\n  schemaUrl?: string | null;\n}\n\n/** Properties of a Span. */\nexport interface ISpan {\n  /** Span traceId */\n  traceId: string | Uint8Array;\n\n  /** Span spanId */\n  spanId: string | Uint8Array;\n\n  /** Span traceState */\n  traceState?: string | null;\n\n  /** Span parentSpanId */\n  parentSpanId?: string | Uint8Array;\n\n  /** Span name */\n  name: string;\n\n  /** Span kind */\n  kind: ESpanKind;\n\n  /** Span startTimeUnixNano */\n  startTimeUnixNano: Fixed64;\n\n  /** Span endTimeUnixNano */\n  endTimeUnixNano: Fixed64;\n\n  /** Span attributes */\n  attributes: IKeyValue[];\n\n  /** Span droppedAttributesCount */\n  droppedAttributesCount: number;\n\n  /** Span events */\n  events: IEvent[];\n\n  /** Span droppedEventsCount */\n  droppedEventsCount: number;\n\n  /** Span links */\n  links: ILink[];\n\n  /** Span droppedLinksCount */\n  droppedLinksCount: number;\n\n  /** Span status */\n  status: IStatus;\n}\n\n/**\n * SpanKind is the type of span. Can be used to specify additional relationships between spans\n * in addition to a parent/child relationship.\n */\nexport enum ESpanKind {\n  /** Unspecified. Do NOT use as default. Implementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED. */\n  SPAN_KIND_UNSPECIFIED = 0,\n\n  /** Indicates that the span represents an internal operation within an application,\n   * as opposed to an operation happening at the boundaries. Default value.\n   */\n  SPAN_KIND_INTERNAL = 1,\n\n  /** Indicates that the span covers server-side handling of an RPC or other\n   * remote network request.\n   */\n  SPAN_KIND_SERVER = 2,\n\n  /** Indicates that the span describes a request to some remote service.\n   */\n  SPAN_KIND_CLIENT = 3,\n\n  /** Indicates that the span describes a producer sending a message to a broker.\n   * Unlike CLIENT and SERVER, there is often no direct critical path latency relationship\n   * between producer and consumer spans. A PRODUCER span ends when the message was accepted\n   * by the broker while the logical processing of the message might span a much longer time.\n   */\n  SPAN_KIND_PRODUCER = 4,\n\n  /** Indicates that the span describes consumer receiving a message from a broker.\n   * Like the PRODUCER kind, there is often no direct critical path latency relationship\n   * between producer and consumer spans.\n   */\n  SPAN_KIND_CONSUMER = 5,\n}\n\n/** Properties of a Status. */\nexport interface IStatus {\n  /** Status message */\n  message?: string;\n\n  /** Status code */\n  code: EStatusCode;\n}\n\n/** StatusCode enum. */\nexport const enum EStatusCode {\n  /** The default status. */\n  STATUS_CODE_UNSET = 0,\n  /** The Span has been evaluated by an Application developers or Operator to have completed successfully. */\n  STATUS_CODE_OK = 1,\n  /** The Span contains an error. */\n  STATUS_CODE_ERROR = 2,\n}\n\n/** Properties of an Event. */\nexport interface IEvent {\n  /** Event timeUnixNano */\n  timeUnixNano: Fixed64;\n\n  /** Event name */\n  name: string;\n\n  /** Event attributes */\n  attributes: IKeyValue[];\n\n  /** Event droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n\n/** Properties of a Link. */\nexport interface ILink {\n  /** Link traceId */\n  traceId: string | Uint8Array;\n\n  /** Link spanId */\n  spanId: string | Uint8Array;\n\n  /** Link traceState */\n  traceState?: string;\n\n  /** Link attributes */\n  attributes: IKeyValue[];\n\n  /** Link droppedAttributesCount */\n  droppedAttributesCount: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IAnyValue, IInstrumentationScope, IKeyValue } from './types';\nimport { Attributes } from '@opentelemetry/api';\nimport { InstrumentationScope } from '@opentelemetry/core';\n\nexport function createInstrumentationScope(\n  scope: InstrumentationScope\n): IInstrumentationScope {\n  return {\n    name: scope.name,\n    version: scope.version,\n  };\n}\n\nexport function toAttributes(attributes: Attributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n\nexport function toKeyValue(key: string, value: unknown): IKeyValue {\n  return {\n    key: key,\n    value: toAnyValue(value),\n  };\n}\n\nexport function toAnyValue(value: unknown): IAnyValue {\n  const t = typeof value;\n  if (t === 'string') return { stringValue: value as string };\n  if (t === 'number') {\n    if (!Number.isInteger(value)) return { doubleValue: value as number };\n    return { intValue: value as number };\n  }\n  if (t === 'boolean') return { boolValue: value as boolean };\n  if (value instanceof Uint8Array) return { bytesValue: value };\n  if (Array.isArray(value))\n    return { arrayValue: { values: value.map(toAnyValue) } };\n  if (t === 'object' && value != null)\n    return {\n      kvlistValue: {\n        values: Object.entries(value as object).map(([k, v]) =>\n          toKeyValue(k, v)\n        ),\n      },\n    };\n\n  return {};\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport type { Encoder } from '../common';\nimport { toAttributes } from '../common/internal';\nimport { EStatusCode, IEvent, ILink, ISpan } from './types';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, encoder: Encoder): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  return {\n    traceId: encoder.encodeSpanContext(ctx.traceId),\n    spanId: encoder.encodeSpanContext(ctx.spanId),\n    parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n    endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(event => toOtlpSpanEvent(event, encoder)),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, encoder)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, encoder: Encoder): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: encoder.encodeSpanContext(link.context.spanId),\n    traceId: encoder.encodeSpanContext(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(\n  timedEvent: TimedEvent,\n  encoder: Encoder\n): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { IResource as ISdkResource } from '@opentelemetry/resources';\nimport { toAttributes } from '../common/internal';\nimport { IResource } from './types';\n\nexport function createResource(resource: ISdkResource): IResource {\n  return {\n    attributes: toAttributes(resource.attributes),\n    droppedAttributesCount: 0,\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { IResource } from '@opentelemetry/resources';\nimport type { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { sdkSpanToOtlpSpan } from './internal';\nimport {\n  IExportTraceServiceRequest,\n  IResourceSpans,\n  IScopeSpans,\n} from './types';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport { createInstrumentationScope } from '../common/internal';\nimport { createResource } from '../resource/internal';\n\nexport function createExportTraceServiceRequest(\n  spans: ReadableSpan[],\n  options?: OtlpEncodingOptions\n): IExportTraceServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, encoder),\n  };\n}\n\nfunction createResourceMap(readableSpans: ReadableSpan[]) {\n  const resourceMap: Map<IResource, Map<string, ReadableSpan[]>> = new Map();\n  for (const record of readableSpans) {\n    let ilmMap = resourceMap.get(record.resource);\n\n    if (!ilmMap) {\n      ilmMap = new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n\n    // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n    const instrumentationLibraryKey = `${record.instrumentationLibrary.name}@${\n      record.instrumentationLibrary.version || ''\n    }:${record.instrumentationLibrary.schemaUrl || ''}`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n\n    records.push(record);\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(\n  readableSpans: ReadableSpan[],\n  encoder: Encoder\n): IResourceSpans[] {\n  const resourceMap = createResourceMap(readableSpans);\n  const out: IResourceSpans[] = [];\n\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    const scopeResourceSpans: IScopeSpans[] = [];\n    const ilmIterator = ilmMap.values();\n    let ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      const scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        const spans = scopeSpans.map(readableSpan =>\n          sdkSpanToOtlpSpan(readableSpan, encoder)\n        );\n\n        scopeResourceSpans.push({\n          scope: createInstrumentationScope(\n            scopeSpans[0].instrumentationLibrary\n          ),\n          spans: spans,\n          schemaUrl: scopeSpans[0].instrumentationLibrary.schemaUrl,\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    // TODO SDK types don't provide resource schema URL at this time\n    const transformedSpans: IResourceSpans = {\n      resource: createResource(resource),\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined,\n    };\n\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { ValueType } from '@opentelemetry/api';\nimport {\n  AggregationTemporality,\n  DataPoint,\n  DataPointType,\n  ExponentialHistogram,\n  Histogram,\n  MetricData,\n  ResourceMetrics,\n  ScopeMetrics,\n} from '@opentelemetry/sdk-metrics';\nimport {\n  EAggregationTemporality,\n  IExponentialHistogramDataPoint,\n  IHistogramDataPoint,\n  IMetric,\n  INumberDataPoint,\n  IResourceMetrics,\n  IScopeMetrics,\n} from './types';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport { createInstrumentationScope, toAttributes } from '../common/internal';\nimport { createResource } from '../resource/internal';\n\nexport function toResourceMetrics(\n  resourceMetrics: ResourceMetrics,\n  options?: OtlpEncodingOptions\n): IResourceMetrics {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resource: createResource(resourceMetrics.resource),\n    schemaUrl: undefined,\n    scopeMetrics: toScopeMetrics(resourceMetrics.scopeMetrics, encoder),\n  };\n}\n\nexport function toScopeMetrics(\n  scopeMetrics: ScopeMetrics[],\n  encoder: Encoder\n): IScopeMetrics[] {\n  return Array.from(\n    scopeMetrics.map(metrics => ({\n      scope: createInstrumentationScope(metrics.scope),\n      metrics: metrics.metrics.map(metricData => toMetric(metricData, encoder)),\n      schemaUrl: metrics.scope.schemaUrl,\n    }))\n  );\n}\n\nexport function toMetric(metricData: MetricData, encoder: Encoder): IMetric {\n  const out: IMetric = {\n    name: metricData.descriptor.name,\n    description: metricData.descriptor.description,\n    unit: metricData.descriptor.unit,\n  };\n\n  const aggregationTemporality = toAggregationTemporality(\n    metricData.aggregationTemporality\n  );\n\n  switch (metricData.dataPointType) {\n    case DataPointType.SUM:\n      out.sum = {\n        aggregationTemporality,\n        isMonotonic: metricData.isMonotonic,\n        dataPoints: toSingularDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.GAUGE:\n      out.gauge = {\n        dataPoints: toSingularDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.HISTOGRAM:\n      out.histogram = {\n        aggregationTemporality,\n        dataPoints: toHistogramDataPoints(metricData, encoder),\n      };\n      break;\n    case DataPointType.EXPONENTIAL_HISTOGRAM:\n      out.exponentialHistogram = {\n        aggregationTemporality,\n        dataPoints: toExponentialHistogramDataPoints(metricData, encoder),\n      };\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoint(\n  dataPoint:\n    | DataPoint<number>\n    | DataPoint<Histogram>\n    | DataPoint<ExponentialHistogram>,\n  valueType: ValueType,\n  encoder: Encoder\n) {\n  const out: INumberDataPoint = {\n    attributes: toAttributes(dataPoint.attributes),\n    startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n    timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n  };\n\n  switch (valueType) {\n    case ValueType.INT:\n      out.asInt = dataPoint.value as number;\n      break;\n    case ValueType.DOUBLE:\n      out.asDouble = dataPoint.value as number;\n      break;\n  }\n\n  return out;\n}\n\nfunction toSingularDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): INumberDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    return toSingularDataPoint(\n      dataPoint,\n      metricData.descriptor.valueType,\n      encoder\n    );\n  });\n}\n\nfunction toHistogramDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): IHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as Histogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      bucketCounts: histogram.buckets.counts,\n      explicitBounds: histogram.buckets.boundaries,\n      count: histogram.count,\n      sum: histogram.sum,\n      min: histogram.min,\n      max: histogram.max,\n      startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n      timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toExponentialHistogramDataPoints(\n  metricData: MetricData,\n  encoder: Encoder\n): IExponentialHistogramDataPoint[] {\n  return metricData.dataPoints.map(dataPoint => {\n    const histogram = dataPoint.value as ExponentialHistogram;\n    return {\n      attributes: toAttributes(dataPoint.attributes),\n      count: histogram.count,\n      min: histogram.min,\n      max: histogram.max,\n      sum: histogram.sum,\n      positive: {\n        offset: histogram.positive.offset,\n        bucketCounts: histogram.positive.bucketCounts,\n      },\n      negative: {\n        offset: histogram.negative.offset,\n        bucketCounts: histogram.negative.bucketCounts,\n      },\n      scale: histogram.scale,\n      zeroCount: histogram.zeroCount,\n      startTimeUnixNano: encoder.encodeHrTime(dataPoint.startTime),\n      timeUnixNano: encoder.encodeHrTime(dataPoint.endTime),\n    };\n  });\n}\n\nfunction toAggregationTemporality(\n  temporality: AggregationTemporality\n): EAggregationTemporality {\n  switch (temporality) {\n    case AggregationTemporality.DELTA:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_DELTA;\n    case AggregationTemporality.CUMULATIVE:\n      return EAggregationTemporality.AGGREGATION_TEMPORALITY_CUMULATIVE;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport type { IExportMetricsServiceRequest } from './types';\nimport type { OtlpEncodingOptions } from '../common/types';\nimport { toResourceMetrics } from './internal';\n\nexport function createExportMetricsServiceRequest(\n  resourceMetrics: ResourceMetrics[],\n  options?: OtlpEncodingOptions\n): IExportMetricsServiceRequest {\n  return {\n    resourceMetrics: resourceMetrics.map(metrics =>\n      toResourceMetrics(metrics, options)\n    ),\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport {\n  ESeverityNumber,\n  IExportLogsServiceRequest,\n  ILogRecord,\n  IResourceLogs,\n} from './types';\nimport { IResource } from '@opentelemetry/resources';\nimport { Encoder, getOtlpEncoder } from '../common';\nimport {\n  createInstrumentationScope,\n  toAnyValue,\n  toKeyValue,\n} from '../common/internal';\nimport { SeverityNumber } from '@opentelemetry/api-logs';\nimport { OtlpEncodingOptions, IKeyValue } from '../common/types';\nimport { LogAttributes } from '@opentelemetry/api-logs';\nimport { createResource } from '../resource/internal';\n\nexport function createExportLogsServiceRequest(\n  logRecords: ReadableLogRecord[],\n  options?: OtlpEncodingOptions\n): IExportLogsServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceLogs: logRecordsToResourceLogs(logRecords, encoder),\n  };\n}\n\nfunction createResourceMap(\n  logRecords: ReadableLogRecord[]\n): Map<IResource, Map<string, ReadableLogRecord[]>> {\n  const resourceMap: Map<\n    IResource,\n    Map<string, ReadableLogRecord[]>\n  > = new Map();\n\n  for (const record of logRecords) {\n    const {\n      resource,\n      instrumentationScope: { name, version = '', schemaUrl = '' },\n    } = record;\n\n    let ismMap = resourceMap.get(resource);\n    if (!ismMap) {\n      ismMap = new Map();\n      resourceMap.set(resource, ismMap);\n    }\n\n    const ismKey = `${name}@${version}:${schemaUrl}`;\n    let records = ismMap.get(ismKey);\n    if (!records) {\n      records = [];\n      ismMap.set(ismKey, records);\n    }\n    records.push(record);\n  }\n  return resourceMap;\n}\n\nfunction logRecordsToResourceLogs(\n  logRecords: ReadableLogRecord[],\n  encoder: Encoder\n): IResourceLogs[] {\n  const resourceMap = createResourceMap(logRecords);\n  return Array.from(resourceMap, ([resource, ismMap]) => ({\n    resource: createResource(resource),\n    scopeLogs: Array.from(ismMap, ([, scopeLogs]) => {\n      return {\n        scope: createInstrumentationScope(scopeLogs[0].instrumentationScope),\n        logRecords: scopeLogs.map(log => toLogRecord(log, encoder)),\n        schemaUrl: scopeLogs[0].instrumentationScope.schemaUrl,\n      };\n    }),\n    schemaUrl: undefined,\n  }));\n}\n\nfunction toLogRecord(log: ReadableLogRecord, encoder: Encoder): ILogRecord {\n  return {\n    timeUnixNano: encoder.encodeHrTime(log.hrTime),\n    observedTimeUnixNano: encoder.encodeHrTime(log.hrTimeObserved),\n    severityNumber: toSeverityNumber(log.severityNumber),\n    severityText: log.severityText,\n    body: toAnyValue(log.body),\n    attributes: toLogAttributes(log.attributes),\n    droppedAttributesCount: log.droppedAttributesCount,\n    flags: log.spanContext?.traceFlags,\n    traceId: encoder.encodeOptionalSpanContext(log.spanContext?.traceId),\n    spanId: encoder.encodeOptionalSpanContext(log.spanContext?.spanId),\n  };\n}\n\nfunction toSeverityNumber(\n  severityNumber: SeverityNumber | undefined\n): ESeverityNumber | undefined {\n  return severityNumber as number | undefined as ESeverityNumber | undefined;\n}\n\nexport function toLogAttributes(attributes: LogAttributes): IKeyValue[] {\n  return Object.keys(attributes).map(key => toKeyValue(key, attributes[key]));\n}\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.opentelemetry = (function() {\n\n    /**\n     * Namespace opentelemetry.\n     * @exports opentelemetry\n     * @namespace\n     */\n    var opentelemetry = {};\n\n    opentelemetry.proto = (function() {\n\n        /**\n         * Namespace proto.\n         * @memberof opentelemetry\n         * @namespace\n         */\n        var proto = {};\n\n        proto.common = (function() {\n\n            /**\n             * Namespace common.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var common = {};\n\n            common.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.common\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.AnyValue = (function() {\n\n                    /**\n                     * Properties of an AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IAnyValue\n                     * @property {string|null} [stringValue] AnyValue stringValue\n                     * @property {boolean|null} [boolValue] AnyValue boolValue\n                     * @property {number|Long|null} [intValue] AnyValue intValue\n                     * @property {number|null} [doubleValue] AnyValue doubleValue\n                     * @property {opentelemetry.proto.common.v1.IArrayValue|null} [arrayValue] AnyValue arrayValue\n                     * @property {opentelemetry.proto.common.v1.IKeyValueList|null} [kvlistValue] AnyValue kvlistValue\n                     * @property {Uint8Array|null} [bytesValue] AnyValue bytesValue\n                     */\n\n                    /**\n                     * Constructs a new AnyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an AnyValue.\n                     * @implements IAnyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     */\n                    function AnyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * AnyValue stringValue.\n                     * @member {string|null|undefined} stringValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.stringValue = null;\n\n                    /**\n                     * AnyValue boolValue.\n                     * @member {boolean|null|undefined} boolValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.boolValue = null;\n\n                    /**\n                     * AnyValue intValue.\n                     * @member {number|Long|null|undefined} intValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.intValue = null;\n\n                    /**\n                     * AnyValue doubleValue.\n                     * @member {number|null|undefined} doubleValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.doubleValue = null;\n\n                    /**\n                     * AnyValue arrayValue.\n                     * @member {opentelemetry.proto.common.v1.IArrayValue|null|undefined} arrayValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.arrayValue = null;\n\n                    /**\n                     * AnyValue kvlistValue.\n                     * @member {opentelemetry.proto.common.v1.IKeyValueList|null|undefined} kvlistValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.kvlistValue = null;\n\n                    /**\n                     * AnyValue bytesValue.\n                     * @member {Uint8Array|null|undefined} bytesValue\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    AnyValue.prototype.bytesValue = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * AnyValue value.\n                     * @member {\"stringValue\"|\"boolValue\"|\"intValue\"|\"doubleValue\"|\"arrayValue\"|\"kvlistValue\"|\"bytesValue\"|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     */\n                    Object.defineProperty(AnyValue.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"stringValue\", \"boolValue\", \"intValue\", \"doubleValue\", \"arrayValue\", \"kvlistValue\", \"bytesValue\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new AnyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue instance\n                     */\n                    AnyValue.create = function create(properties) {\n                        return new AnyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.stringValue != null && Object.hasOwnProperty.call(message, \"stringValue\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.stringValue);\n                        if (message.boolValue != null && Object.hasOwnProperty.call(message, \"boolValue\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.boolValue);\n                        if (message.intValue != null && Object.hasOwnProperty.call(message, \"intValue\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.intValue);\n                        if (message.doubleValue != null && Object.hasOwnProperty.call(message, \"doubleValue\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.doubleValue);\n                        if (message.arrayValue != null && Object.hasOwnProperty.call(message, \"arrayValue\"))\n                            $root.opentelemetry.proto.common.v1.ArrayValue.encode(message.arrayValue, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.kvlistValue != null && Object.hasOwnProperty.call(message, \"kvlistValue\"))\n                            $root.opentelemetry.proto.common.v1.KeyValueList.encode(message.kvlistValue, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.bytesValue != null && Object.hasOwnProperty.call(message, \"bytesValue\"))\n                            writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.bytesValue);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified AnyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.AnyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IAnyValue} message AnyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    AnyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.stringValue = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.boolValue = reader.bool();\n                                    break;\n                                }\n                            case 3: {\n                                    message.intValue = reader.int64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.doubleValue = reader.double();\n                                    break;\n                                }\n                            case 5: {\n                                    message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.bytesValue = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an AnyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    AnyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an AnyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    AnyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            properties.value = 1;\n                            if (!$util.isString(message.stringValue))\n                                return \"stringValue: string expected\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.boolValue !== \"boolean\")\n                                return \"boolValue: boolean expected\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.intValue) && !(message.intValue && $util.isInteger(message.intValue.low) && $util.isInteger(message.intValue.high)))\n                                return \"intValue: integer|Long expected\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (typeof message.doubleValue !== \"number\")\n                                return \"doubleValue: number expected\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.ArrayValue.verify(message.arrayValue);\n                                if (error)\n                                    return \"arrayValue.\" + error;\n                            }\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValueList.verify(message.kvlistValue);\n                                if (error)\n                                    return \"kvlistValue.\" + error;\n                            }\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!(message.bytesValue && typeof message.bytesValue.length === \"number\" || $util.isString(message.bytesValue)))\n                                return \"bytesValue: buffer expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an AnyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.AnyValue} AnyValue\n                     */\n                    AnyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.AnyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.AnyValue();\n                        if (object.stringValue != null)\n                            message.stringValue = String(object.stringValue);\n                        if (object.boolValue != null)\n                            message.boolValue = Boolean(object.boolValue);\n                        if (object.intValue != null)\n                            if ($util.Long)\n                                (message.intValue = $util.Long.fromValue(object.intValue)).unsigned = false;\n                            else if (typeof object.intValue === \"string\")\n                                message.intValue = parseInt(object.intValue, 10);\n                            else if (typeof object.intValue === \"number\")\n                                message.intValue = object.intValue;\n                            else if (typeof object.intValue === \"object\")\n                                message.intValue = new $util.LongBits(object.intValue.low >>> 0, object.intValue.high >>> 0).toNumber();\n                        if (object.doubleValue != null)\n                            message.doubleValue = Number(object.doubleValue);\n                        if (object.arrayValue != null) {\n                            if (typeof object.arrayValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.arrayValue: object expected\");\n                            message.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.fromObject(object.arrayValue);\n                        }\n                        if (object.kvlistValue != null) {\n                            if (typeof object.kvlistValue !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.AnyValue.kvlistValue: object expected\");\n                            message.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.fromObject(object.kvlistValue);\n                        }\n                        if (object.bytesValue != null)\n                            if (typeof object.bytesValue === \"string\")\n                                $util.base64.decode(object.bytesValue, message.bytesValue = $util.newBuffer($util.base64.length(object.bytesValue)), 0);\n                            else if (object.bytesValue.length >= 0)\n                                message.bytesValue = object.bytesValue;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an AnyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.AnyValue} message AnyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    AnyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (message.stringValue != null && message.hasOwnProperty(\"stringValue\")) {\n                            object.stringValue = message.stringValue;\n                            if (options.oneofs)\n                                object.value = \"stringValue\";\n                        }\n                        if (message.boolValue != null && message.hasOwnProperty(\"boolValue\")) {\n                            object.boolValue = message.boolValue;\n                            if (options.oneofs)\n                                object.value = \"boolValue\";\n                        }\n                        if (message.intValue != null && message.hasOwnProperty(\"intValue\")) {\n                            if (typeof message.intValue === \"number\")\n                                object.intValue = options.longs === String ? String(message.intValue) : message.intValue;\n                            else\n                                object.intValue = options.longs === String ? $util.Long.prototype.toString.call(message.intValue) : options.longs === Number ? new $util.LongBits(message.intValue.low >>> 0, message.intValue.high >>> 0).toNumber() : message.intValue;\n                            if (options.oneofs)\n                                object.value = \"intValue\";\n                        }\n                        if (message.doubleValue != null && message.hasOwnProperty(\"doubleValue\")) {\n                            object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;\n                            if (options.oneofs)\n                                object.value = \"doubleValue\";\n                        }\n                        if (message.arrayValue != null && message.hasOwnProperty(\"arrayValue\")) {\n                            object.arrayValue = $root.opentelemetry.proto.common.v1.ArrayValue.toObject(message.arrayValue, options);\n                            if (options.oneofs)\n                                object.value = \"arrayValue\";\n                        }\n                        if (message.kvlistValue != null && message.hasOwnProperty(\"kvlistValue\")) {\n                            object.kvlistValue = $root.opentelemetry.proto.common.v1.KeyValueList.toObject(message.kvlistValue, options);\n                            if (options.oneofs)\n                                object.value = \"kvlistValue\";\n                        }\n                        if (message.bytesValue != null && message.hasOwnProperty(\"bytesValue\")) {\n                            object.bytesValue = options.bytes === String ? $util.base64.encode(message.bytesValue, 0, message.bytesValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytesValue) : message.bytesValue;\n                            if (options.oneofs)\n                                object.value = \"bytesValue\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this AnyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    AnyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for AnyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.AnyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    AnyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.AnyValue\";\n                    };\n\n                    return AnyValue;\n                })();\n\n                v1.ArrayValue = (function() {\n\n                    /**\n                     * Properties of an ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IArrayValue\n                     * @property {Array.<opentelemetry.proto.common.v1.IAnyValue>|null} [values] ArrayValue values\n                     */\n\n                    /**\n                     * Constructs a new ArrayValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an ArrayValue.\n                     * @implements IArrayValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     */\n                    function ArrayValue(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ArrayValue values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IAnyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     */\n                    ArrayValue.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new ArrayValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue instance\n                     */\n                    ArrayValue.create = function create(properties) {\n                        return new ArrayValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.AnyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ArrayValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.ArrayValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IArrayValue} message ArrayValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ArrayValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ArrayValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ArrayValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ArrayValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ArrayValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ArrayValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.ArrayValue} ArrayValue\n                     */\n                    ArrayValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.ArrayValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.ArrayValue();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.ArrayValue.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ArrayValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.ArrayValue} message ArrayValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ArrayValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ArrayValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ArrayValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ArrayValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.ArrayValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ArrayValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.ArrayValue\";\n                    };\n\n                    return ArrayValue;\n                })();\n\n                v1.KeyValueList = (function() {\n\n                    /**\n                     * Properties of a KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValueList\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [values] KeyValueList values\n                     */\n\n                    /**\n                     * Constructs a new KeyValueList.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValueList.\n                     * @implements IKeyValueList\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     */\n                    function KeyValueList(properties) {\n                        this.values = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValueList values.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} values\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     */\n                    KeyValueList.prototype.values = $util.emptyArray;\n\n                    /**\n                     * Creates a new KeyValueList instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList instance\n                     */\n                    KeyValueList.create = function create(properties) {\n                        return new KeyValueList(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.values != null && message.values.length)\n                            for (var i = 0; i < message.values.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.values[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValueList message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValueList.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValueList} message KeyValueList message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValueList.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.values && message.values.length))\n                                        message.values = [];\n                                    message.values.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValueList message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValueList.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValueList message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValueList.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.values != null && message.hasOwnProperty(\"values\")) {\n                            if (!Array.isArray(message.values))\n                                return \"values: array expected\";\n                            for (var i = 0; i < message.values.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.values[i]);\n                                if (error)\n                                    return \"values.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValueList message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValueList} KeyValueList\n                     */\n                    KeyValueList.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValueList)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValueList();\n                        if (object.values) {\n                            if (!Array.isArray(object.values))\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: array expected\");\n                            message.values = [];\n                            for (var i = 0; i < object.values.length; ++i) {\n                                if (typeof object.values[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.KeyValueList.values: object expected\");\n                                message.values[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.values[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValueList message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValueList} message KeyValueList\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValueList.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.values = [];\n                        if (message.values && message.values.length) {\n                            object.values = [];\n                            for (var j = 0; j < message.values.length; ++j)\n                                object.values[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.values[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValueList to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValueList.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValueList\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValueList\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValueList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValueList\";\n                    };\n\n                    return KeyValueList;\n                })();\n\n                v1.KeyValue = (function() {\n\n                    /**\n                     * Properties of a KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IKeyValue\n                     * @property {string|null} [key] KeyValue key\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [value] KeyValue value\n                     */\n\n                    /**\n                     * Constructs a new KeyValue.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents a KeyValue.\n                     * @implements IKeyValue\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     */\n                    function KeyValue(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * KeyValue key.\n                     * @member {string|null|undefined} key\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.key = null;\n\n                    /**\n                     * KeyValue value.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} value\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     */\n                    KeyValue.prototype.value = null;\n\n                    /**\n                     * Creates a new KeyValue instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue instance\n                     */\n                    KeyValue.create = function create(properties) {\n                        return new KeyValue(properties);\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n                        if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.value, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified KeyValue message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.KeyValue.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IKeyValue} message KeyValue message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    KeyValue.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.key = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.value = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a KeyValue message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    KeyValue.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a KeyValue message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    KeyValue.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            if (!$util.isString(message.key))\n                                return \"key: string expected\";\n                        if (message.value != null && message.hasOwnProperty(\"value\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.value);\n                            if (error)\n                                return \"value.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a KeyValue message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.KeyValue} KeyValue\n                     */\n                    KeyValue.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.KeyValue)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.KeyValue();\n                        if (object.key != null)\n                            message.key = String(object.key);\n                        if (object.value != null) {\n                            if (typeof object.value !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.common.v1.KeyValue.value: object expected\");\n                            message.value = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.value);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a KeyValue message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.KeyValue} message KeyValue\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    KeyValue.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.key = \"\";\n                            object.value = null;\n                        }\n                        if (message.key != null && message.hasOwnProperty(\"key\"))\n                            object.key = message.key;\n                        if (message.value != null && message.hasOwnProperty(\"value\"))\n                            object.value = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.value, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this KeyValue to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    KeyValue.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for KeyValue\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.KeyValue\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.KeyValue\";\n                    };\n\n                    return KeyValue;\n                })();\n\n                v1.InstrumentationScope = (function() {\n\n                    /**\n                     * Properties of an InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @interface IInstrumentationScope\n                     * @property {string|null} [name] InstrumentationScope name\n                     * @property {string|null} [version] InstrumentationScope version\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] InstrumentationScope attributes\n                     * @property {number|null} [droppedAttributesCount] InstrumentationScope droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new InstrumentationScope.\n                     * @memberof opentelemetry.proto.common.v1\n                     * @classdesc Represents an InstrumentationScope.\n                     * @implements IInstrumentationScope\n                     * @constructor\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     */\n                    function InstrumentationScope(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * InstrumentationScope name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.name = null;\n\n                    /**\n                     * InstrumentationScope version.\n                     * @member {string|null|undefined} version\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.version = null;\n\n                    /**\n                     * InstrumentationScope attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * InstrumentationScope droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     */\n                    InstrumentationScope.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new InstrumentationScope instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope instance\n                     */\n                    InstrumentationScope.create = function create(properties) {\n                        return new InstrumentationScope(properties);\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified InstrumentationScope message, length delimited. Does not implicitly {@link opentelemetry.proto.common.v1.InstrumentationScope.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.IInstrumentationScope} message InstrumentationScope message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    InstrumentationScope.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.version = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 4: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an InstrumentationScope message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    InstrumentationScope.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an InstrumentationScope message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    InstrumentationScope.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            if (!$util.isString(message.version))\n                                return \"version: string expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an InstrumentationScope message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.common.v1.InstrumentationScope} InstrumentationScope\n                     */\n                    InstrumentationScope.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.common.v1.InstrumentationScope)\n                            return object;\n                        var message = new $root.opentelemetry.proto.common.v1.InstrumentationScope();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.version != null)\n                            message.version = String(object.version);\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.common.v1.InstrumentationScope.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an InstrumentationScope message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {opentelemetry.proto.common.v1.InstrumentationScope} message InstrumentationScope\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    InstrumentationScope.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.version = \"\";\n                            object.droppedAttributesCount = 0;\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.version != null && message.hasOwnProperty(\"version\"))\n                            object.version = message.version;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this InstrumentationScope to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    InstrumentationScope.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for InstrumentationScope\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.common.v1.InstrumentationScope\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    InstrumentationScope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.common.v1.InstrumentationScope\";\n                    };\n\n                    return InstrumentationScope;\n                })();\n\n                return v1;\n            })();\n\n            return common;\n        })();\n\n        proto.resource = (function() {\n\n            /**\n             * Namespace resource.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var resource = {};\n\n            resource.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.resource\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.Resource = (function() {\n\n                    /**\n                     * Properties of a Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @interface IResource\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Resource attributes\n                     * @property {number|null} [droppedAttributesCount] Resource droppedAttributesCount\n                     */\n\n                    /**\n                     * Constructs a new Resource.\n                     * @memberof opentelemetry.proto.resource.v1\n                     * @classdesc Represents a Resource.\n                     * @implements IResource\n                     * @constructor\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     */\n                    function Resource(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Resource attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Resource droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     */\n                    Resource.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Creates a new Resource instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource instance\n                     */\n                    Resource.create = function create(properties) {\n                        return new Resource(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Resource message. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.droppedAttributesCount);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Resource message, length delimited. Does not implicitly {@link opentelemetry.proto.resource.v1.Resource.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.IResource} message Resource message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Resource.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Resource message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Resource.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Resource message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Resource.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Resource message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.resource.v1.Resource} Resource\n                     */\n                    Resource.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.resource.v1.Resource)\n                            return object;\n                        var message = new $root.opentelemetry.proto.resource.v1.Resource();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.resource.v1.Resource.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Resource message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {opentelemetry.proto.resource.v1.Resource} message Resource\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Resource.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults)\n                            object.droppedAttributesCount = 0;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Resource to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Resource.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Resource\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.resource.v1.Resource\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Resource.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.resource.v1.Resource\";\n                    };\n\n                    return Resource;\n                })();\n\n                return v1;\n            })();\n\n            return resource;\n        })();\n\n        proto.trace = (function() {\n\n            /**\n             * Namespace trace.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var trace = {};\n\n            trace.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.trace\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.TracesData = (function() {\n\n                    /**\n                     * Properties of a TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ITracesData\n                     * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] TracesData resourceSpans\n                     */\n\n                    /**\n                     * Constructs a new TracesData.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a TracesData.\n                     * @implements ITracesData\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     */\n                    function TracesData(properties) {\n                        this.resourceSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * TracesData resourceSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     */\n                    TracesData.prototype.resourceSpans = $util.emptyArray;\n\n                    /**\n                     * Creates a new TracesData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData instance\n                     */\n                    TracesData.create = function create(properties) {\n                        return new TracesData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceSpans != null && message.resourceSpans.length)\n                            for (var i = 0; i < message.resourceSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified TracesData message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.TracesData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ITracesData} message TracesData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    TracesData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceSpans && message.resourceSpans.length))\n                                        message.resourceSpans = [];\n                                    message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a TracesData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    TracesData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a TracesData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    TracesData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                            if (!Array.isArray(message.resourceSpans))\n                                return \"resourceSpans: array expected\";\n                            for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                if (error)\n                                    return \"resourceSpans.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a TracesData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.TracesData} TracesData\n                     */\n                    TracesData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.TracesData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.TracesData();\n                        if (object.resourceSpans) {\n                            if (!Array.isArray(object.resourceSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: array expected\");\n                            message.resourceSpans = [];\n                            for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                if (typeof object.resourceSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.TracesData.resourceSpans: object expected\");\n                                message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a TracesData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.TracesData} message TracesData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    TracesData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceSpans = [];\n                        if (message.resourceSpans && message.resourceSpans.length) {\n                            object.resourceSpans = [];\n                            for (var j = 0; j < message.resourceSpans.length; ++j)\n                                object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this TracesData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    TracesData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for TracesData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.TracesData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    TracesData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.TracesData\";\n                    };\n\n                    return TracesData;\n                })();\n\n                v1.ResourceSpans = (function() {\n\n                    /**\n                     * Properties of a ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IResourceSpans\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceSpans resource\n                     * @property {Array.<opentelemetry.proto.trace.v1.IScopeSpans>|null} [scopeSpans] ResourceSpans scopeSpans\n                     * @property {string|null} [schemaUrl] ResourceSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ResourceSpans.\n                     * @implements IResourceSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     */\n                    function ResourceSpans(properties) {\n                        this.scopeSpans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceSpans resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.resource = null;\n\n                    /**\n                     * ResourceSpans scopeSpans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.IScopeSpans>} scopeSpans\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.scopeSpans = $util.emptyArray;\n\n                    /**\n                     * ResourceSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     */\n                    ResourceSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans instance\n                     */\n                    ResourceSpans.create = function create(properties) {\n                        return new ResourceSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeSpans != null && message.scopeSpans.length)\n                            for (var i = 0; i < message.scopeSpans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.ScopeSpans.encode(message.scopeSpans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ResourceSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IResourceSpans} message ResourceSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeSpans && message.scopeSpans.length))\n                                        message.scopeSpans = [];\n                                    message.scopeSpans.push($root.opentelemetry.proto.trace.v1.ScopeSpans.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeSpans != null && message.hasOwnProperty(\"scopeSpans\")) {\n                            if (!Array.isArray(message.scopeSpans))\n                                return \"scopeSpans: array expected\";\n                            for (var i = 0; i < message.scopeSpans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.ScopeSpans.verify(message.scopeSpans[i]);\n                                if (error)\n                                    return \"scopeSpans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ResourceSpans} ResourceSpans\n                     */\n                    ResourceSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ResourceSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ResourceSpans();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeSpans) {\n                            if (!Array.isArray(object.scopeSpans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: array expected\");\n                            message.scopeSpans = [];\n                            for (var i = 0; i < object.scopeSpans.length; ++i) {\n                                if (typeof object.scopeSpans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ResourceSpans.scopeSpans: object expected\");\n                                message.scopeSpans[i] = $root.opentelemetry.proto.trace.v1.ScopeSpans.fromObject(object.scopeSpans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ResourceSpans} message ResourceSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeSpans = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeSpans && message.scopeSpans.length) {\n                            object.scopeSpans = [];\n                            for (var j = 0; j < message.scopeSpans.length; ++j)\n                                object.scopeSpans[j] = $root.opentelemetry.proto.trace.v1.ScopeSpans.toObject(message.scopeSpans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ResourceSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ResourceSpans\";\n                    };\n\n                    return ResourceSpans;\n                })();\n\n                v1.ScopeSpans = (function() {\n\n                    /**\n                     * Properties of a ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IScopeSpans\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeSpans scope\n                     * @property {Array.<opentelemetry.proto.trace.v1.ISpan>|null} [spans] ScopeSpans spans\n                     * @property {string|null} [schemaUrl] ScopeSpans schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeSpans.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a ScopeSpans.\n                     * @implements IScopeSpans\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     */\n                    function ScopeSpans(properties) {\n                        this.spans = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeSpans scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.scope = null;\n\n                    /**\n                     * ScopeSpans spans.\n                     * @member {Array.<opentelemetry.proto.trace.v1.ISpan>} spans\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.spans = $util.emptyArray;\n\n                    /**\n                     * ScopeSpans schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     */\n                    ScopeSpans.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeSpans instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans instance\n                     */\n                    ScopeSpans.create = function create(properties) {\n                        return new ScopeSpans(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.spans != null && message.spans.length)\n                            for (var i = 0; i < message.spans.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.encode(message.spans[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeSpans message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.ScopeSpans.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IScopeSpans} message ScopeSpans message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeSpans.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.spans && message.spans.length))\n                                        message.spans = [];\n                                    message.spans.push($root.opentelemetry.proto.trace.v1.Span.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeSpans message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeSpans.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeSpans message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeSpans.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.spans != null && message.hasOwnProperty(\"spans\")) {\n                            if (!Array.isArray(message.spans))\n                                return \"spans: array expected\";\n                            for (var i = 0; i < message.spans.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.verify(message.spans[i]);\n                                if (error)\n                                    return \"spans.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeSpans message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.ScopeSpans} ScopeSpans\n                     */\n                    ScopeSpans.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.ScopeSpans)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.ScopeSpans();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.spans) {\n                            if (!Array.isArray(object.spans))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: array expected\");\n                            message.spans = [];\n                            for (var i = 0; i < object.spans.length; ++i) {\n                                if (typeof object.spans[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.ScopeSpans.spans: object expected\");\n                                message.spans[i] = $root.opentelemetry.proto.trace.v1.Span.fromObject(object.spans[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeSpans message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ScopeSpans} message ScopeSpans\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeSpans.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.spans = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.spans && message.spans.length) {\n                            object.spans = [];\n                            for (var j = 0; j < message.spans.length; ++j)\n                                object.spans[j] = $root.opentelemetry.proto.trace.v1.Span.toObject(message.spans[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeSpans to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeSpans.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeSpans\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.ScopeSpans\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeSpans.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.ScopeSpans\";\n                    };\n\n                    return ScopeSpans;\n                })();\n\n                v1.Span = (function() {\n\n                    /**\n                     * Properties of a Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface ISpan\n                     * @property {Uint8Array|null} [traceId] Span traceId\n                     * @property {Uint8Array|null} [spanId] Span spanId\n                     * @property {string|null} [traceState] Span traceState\n                     * @property {Uint8Array|null} [parentSpanId] Span parentSpanId\n                     * @property {string|null} [name] Span name\n                     * @property {opentelemetry.proto.trace.v1.Span.SpanKind|null} [kind] Span kind\n                     * @property {number|Long|null} [startTimeUnixNano] Span startTimeUnixNano\n                     * @property {number|Long|null} [endTimeUnixNano] Span endTimeUnixNano\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Span attributes\n                     * @property {number|null} [droppedAttributesCount] Span droppedAttributesCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.IEvent>|null} [events] Span events\n                     * @property {number|null} [droppedEventsCount] Span droppedEventsCount\n                     * @property {Array.<opentelemetry.proto.trace.v1.Span.ILink>|null} [links] Span links\n                     * @property {number|null} [droppedLinksCount] Span droppedLinksCount\n                     * @property {opentelemetry.proto.trace.v1.IStatus|null} [status] Span status\n                     */\n\n                    /**\n                     * Constructs a new Span.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Span.\n                     * @implements ISpan\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     */\n                    function Span(properties) {\n                        this.attributes = [];\n                        this.events = [];\n                        this.links = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Span traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceId = null;\n\n                    /**\n                     * Span spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.spanId = null;\n\n                    /**\n                     * Span traceState.\n                     * @member {string|null|undefined} traceState\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.traceState = null;\n\n                    /**\n                     * Span parentSpanId.\n                     * @member {Uint8Array|null|undefined} parentSpanId\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.parentSpanId = null;\n\n                    /**\n                     * Span name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.name = null;\n\n                    /**\n                     * Span kind.\n                     * @member {opentelemetry.proto.trace.v1.Span.SpanKind|null|undefined} kind\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.kind = null;\n\n                    /**\n                     * Span startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * Span endTimeUnixNano.\n                     * @member {number|Long|null|undefined} endTimeUnixNano\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.endTimeUnixNano = null;\n\n                    /**\n                     * Span attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * Span droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * Span events.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.IEvent>} events\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.events = $util.emptyArray;\n\n                    /**\n                     * Span droppedEventsCount.\n                     * @member {number|null|undefined} droppedEventsCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedEventsCount = null;\n\n                    /**\n                     * Span links.\n                     * @member {Array.<opentelemetry.proto.trace.v1.Span.ILink>} links\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.links = $util.emptyArray;\n\n                    /**\n                     * Span droppedLinksCount.\n                     * @member {number|null|undefined} droppedLinksCount\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.droppedLinksCount = null;\n\n                    /**\n                     * Span status.\n                     * @member {opentelemetry.proto.trace.v1.IStatus|null|undefined} status\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     */\n                    Span.prototype.status = null;\n\n                    /**\n                     * Creates a new Span instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span instance\n                     */\n                    Span.create = function create(properties) {\n                        return new Span(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Span message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                        if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                        if (message.parentSpanId != null && Object.hasOwnProperty.call(message, \"parentSpanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.parentSpanId);\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);\n                        if (message.kind != null && Object.hasOwnProperty.call(message, \"kind\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.kind);\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.startTimeUnixNano);\n                        if (message.endTimeUnixNano != null && Object.hasOwnProperty.call(message, \"endTimeUnixNano\"))\n                            writer.uint32(/* id 8, wireType 1 =*/65).fixed64(message.endTimeUnixNano);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.droppedAttributesCount);\n                        if (message.events != null && message.events.length)\n                            for (var i = 0; i < message.events.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Event.encode(message.events[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.droppedEventsCount != null && Object.hasOwnProperty.call(message, \"droppedEventsCount\"))\n                            writer.uint32(/* id 12, wireType 0 =*/96).uint32(message.droppedEventsCount);\n                        if (message.links != null && message.links.length)\n                            for (var i = 0; i < message.links.length; ++i)\n                                $root.opentelemetry.proto.trace.v1.Span.Link.encode(message.links[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n                        if (message.droppedLinksCount != null && Object.hasOwnProperty.call(message, \"droppedLinksCount\"))\n                            writer.uint32(/* id 14, wireType 0 =*/112).uint32(message.droppedLinksCount);\n                        if (message.status != null && Object.hasOwnProperty.call(message, \"status\"))\n                            $root.opentelemetry.proto.trace.v1.Status.encode(message.status, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Span message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.ISpan} message Span message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Span.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 2: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 3: {\n                                    message.traceState = reader.string();\n                                    break;\n                                }\n                            case 4: {\n                                    message.parentSpanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 6: {\n                                    message.kind = reader.int32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.endTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.events && message.events.length))\n                                        message.events = [];\n                                    message.events.push($root.opentelemetry.proto.trace.v1.Span.Event.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.droppedEventsCount = reader.uint32();\n                                    break;\n                                }\n                            case 13: {\n                                    if (!(message.links && message.links.length))\n                                        message.links = [];\n                                    message.links.push($root.opentelemetry.proto.trace.v1.Span.Link.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 14: {\n                                    message.droppedLinksCount = reader.uint32();\n                                    break;\n                                }\n                            case 15: {\n                                    message.status = $root.opentelemetry.proto.trace.v1.Status.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Span message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Span.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Span message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Span.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            if (!$util.isString(message.traceState))\n                                return \"traceState: string expected\";\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            if (!(message.parentSpanId && typeof message.parentSpanId.length === \"number\" || $util.isString(message.parentSpanId)))\n                                return \"parentSpanId: buffer expected\";\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            switch (message.kind) {\n                            default:\n                                return \"kind: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                                break;\n                            }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (!$util.isInteger(message.endTimeUnixNano) && !(message.endTimeUnixNano && $util.isInteger(message.endTimeUnixNano.low) && $util.isInteger(message.endTimeUnixNano.high)))\n                                return \"endTimeUnixNano: integer|Long expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.events != null && message.hasOwnProperty(\"events\")) {\n                            if (!Array.isArray(message.events))\n                                return \"events: array expected\";\n                            for (var i = 0; i < message.events.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Event.verify(message.events[i]);\n                                if (error)\n                                    return \"events.\" + error;\n                            }\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            if (!$util.isInteger(message.droppedEventsCount))\n                                return \"droppedEventsCount: integer expected\";\n                        if (message.links != null && message.hasOwnProperty(\"links\")) {\n                            if (!Array.isArray(message.links))\n                                return \"links: array expected\";\n                            for (var i = 0; i < message.links.length; ++i) {\n                                var error = $root.opentelemetry.proto.trace.v1.Span.Link.verify(message.links[i]);\n                                if (error)\n                                    return \"links.\" + error;\n                            }\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            if (!$util.isInteger(message.droppedLinksCount))\n                                return \"droppedLinksCount: integer expected\";\n                        if (message.status != null && message.hasOwnProperty(\"status\")) {\n                            var error = $root.opentelemetry.proto.trace.v1.Status.verify(message.status);\n                            if (error)\n                                return \"status.\" + error;\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Span message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Span} Span\n                     */\n                    Span.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Span)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Span();\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceState != null)\n                            message.traceState = String(object.traceState);\n                        if (object.parentSpanId != null)\n                            if (typeof object.parentSpanId === \"string\")\n                                $util.base64.decode(object.parentSpanId, message.parentSpanId = $util.newBuffer($util.base64.length(object.parentSpanId)), 0);\n                            else if (object.parentSpanId.length >= 0)\n                                message.parentSpanId = object.parentSpanId;\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        switch (object.kind) {\n                        default:\n                            if (typeof object.kind === \"number\") {\n                                message.kind = object.kind;\n                                break;\n                            }\n                            break;\n                        case \"SPAN_KIND_UNSPECIFIED\":\n                        case 0:\n                            message.kind = 0;\n                            break;\n                        case \"SPAN_KIND_INTERNAL\":\n                        case 1:\n                            message.kind = 1;\n                            break;\n                        case \"SPAN_KIND_SERVER\":\n                        case 2:\n                            message.kind = 2;\n                            break;\n                        case \"SPAN_KIND_CLIENT\":\n                        case 3:\n                            message.kind = 3;\n                            break;\n                        case \"SPAN_KIND_PRODUCER\":\n                        case 4:\n                            message.kind = 4;\n                            break;\n                        case \"SPAN_KIND_CONSUMER\":\n                        case 5:\n                            message.kind = 5;\n                            break;\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.endTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.endTimeUnixNano = $util.Long.fromValue(object.endTimeUnixNano)).unsigned = false;\n                            else if (typeof object.endTimeUnixNano === \"string\")\n                                message.endTimeUnixNano = parseInt(object.endTimeUnixNano, 10);\n                            else if (typeof object.endTimeUnixNano === \"number\")\n                                message.endTimeUnixNano = object.endTimeUnixNano;\n                            else if (typeof object.endTimeUnixNano === \"object\")\n                                message.endTimeUnixNano = new $util.LongBits(object.endTimeUnixNano.low >>> 0, object.endTimeUnixNano.high >>> 0).toNumber();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.events) {\n                            if (!Array.isArray(object.events))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: array expected\");\n                            message.events = [];\n                            for (var i = 0; i < object.events.length; ++i) {\n                                if (typeof object.events[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.events: object expected\");\n                                message.events[i] = $root.opentelemetry.proto.trace.v1.Span.Event.fromObject(object.events[i]);\n                            }\n                        }\n                        if (object.droppedEventsCount != null)\n                            message.droppedEventsCount = object.droppedEventsCount >>> 0;\n                        if (object.links) {\n                            if (!Array.isArray(object.links))\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: array expected\");\n                            message.links = [];\n                            for (var i = 0; i < object.links.length; ++i) {\n                                if (typeof object.links[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.links: object expected\");\n                                message.links[i] = $root.opentelemetry.proto.trace.v1.Span.Link.fromObject(object.links[i]);\n                            }\n                        }\n                        if (object.droppedLinksCount != null)\n                            message.droppedLinksCount = object.droppedLinksCount >>> 0;\n                        if (object.status != null) {\n                            if (typeof object.status !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.trace.v1.Span.status: object expected\");\n                            message.status = $root.opentelemetry.proto.trace.v1.Status.fromObject(object.status);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Span message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Span} message Span\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Span.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.events = [];\n                            object.links = [];\n                        }\n                        if (options.defaults) {\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            object.traceState = \"\";\n                            if (options.bytes === String)\n                                object.parentSpanId = \"\";\n                            else {\n                                object.parentSpanId = [];\n                                if (options.bytes !== Array)\n                                    object.parentSpanId = $util.newBuffer(object.parentSpanId);\n                            }\n                            object.name = \"\";\n                            object.kind = options.enums === String ? \"SPAN_KIND_UNSPECIFIED\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.endTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.endTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.droppedAttributesCount = 0;\n                            object.droppedEventsCount = 0;\n                            object.droppedLinksCount = 0;\n                            object.status = null;\n                        }\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                            object.traceState = message.traceState;\n                        if (message.parentSpanId != null && message.hasOwnProperty(\"parentSpanId\"))\n                            object.parentSpanId = options.bytes === String ? $util.base64.encode(message.parentSpanId, 0, message.parentSpanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.parentSpanId) : message.parentSpanId;\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.kind != null && message.hasOwnProperty(\"kind\"))\n                            object.kind = options.enums === String ? $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] === undefined ? message.kind : $root.opentelemetry.proto.trace.v1.Span.SpanKind[message.kind] : message.kind;\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.endTimeUnixNano != null && message.hasOwnProperty(\"endTimeUnixNano\"))\n                            if (typeof message.endTimeUnixNano === \"number\")\n                                object.endTimeUnixNano = options.longs === String ? String(message.endTimeUnixNano) : message.endTimeUnixNano;\n                            else\n                                object.endTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.endTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.endTimeUnixNano.low >>> 0, message.endTimeUnixNano.high >>> 0).toNumber() : message.endTimeUnixNano;\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.events && message.events.length) {\n                            object.events = [];\n                            for (var j = 0; j < message.events.length; ++j)\n                                object.events[j] = $root.opentelemetry.proto.trace.v1.Span.Event.toObject(message.events[j], options);\n                        }\n                        if (message.droppedEventsCount != null && message.hasOwnProperty(\"droppedEventsCount\"))\n                            object.droppedEventsCount = message.droppedEventsCount;\n                        if (message.links && message.links.length) {\n                            object.links = [];\n                            for (var j = 0; j < message.links.length; ++j)\n                                object.links[j] = $root.opentelemetry.proto.trace.v1.Span.Link.toObject(message.links[j], options);\n                        }\n                        if (message.droppedLinksCount != null && message.hasOwnProperty(\"droppedLinksCount\"))\n                            object.droppedLinksCount = message.droppedLinksCount;\n                        if (message.status != null && message.hasOwnProperty(\"status\"))\n                            object.status = $root.opentelemetry.proto.trace.v1.Status.toObject(message.status, options);\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Span to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Span.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Span\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Span\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Span.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span\";\n                    };\n\n                    /**\n                     * SpanKind enum.\n                     * @name opentelemetry.proto.trace.v1.Span.SpanKind\n                     * @enum {number}\n                     * @property {number} SPAN_KIND_UNSPECIFIED=0 SPAN_KIND_UNSPECIFIED value\n                     * @property {number} SPAN_KIND_INTERNAL=1 SPAN_KIND_INTERNAL value\n                     * @property {number} SPAN_KIND_SERVER=2 SPAN_KIND_SERVER value\n                     * @property {number} SPAN_KIND_CLIENT=3 SPAN_KIND_CLIENT value\n                     * @property {number} SPAN_KIND_PRODUCER=4 SPAN_KIND_PRODUCER value\n                     * @property {number} SPAN_KIND_CONSUMER=5 SPAN_KIND_CONSUMER value\n                     */\n                    Span.SpanKind = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"SPAN_KIND_UNSPECIFIED\"] = 0;\n                        values[valuesById[1] = \"SPAN_KIND_INTERNAL\"] = 1;\n                        values[valuesById[2] = \"SPAN_KIND_SERVER\"] = 2;\n                        values[valuesById[3] = \"SPAN_KIND_CLIENT\"] = 3;\n                        values[valuesById[4] = \"SPAN_KIND_PRODUCER\"] = 4;\n                        values[valuesById[5] = \"SPAN_KIND_CONSUMER\"] = 5;\n                        return values;\n                    })();\n\n                    Span.Event = (function() {\n\n                        /**\n                         * Properties of an Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface IEvent\n                         * @property {number|Long|null} [timeUnixNano] Event timeUnixNano\n                         * @property {string|null} [name] Event name\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Event attributes\n                         * @property {number|null} [droppedAttributesCount] Event droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Event.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents an Event.\n                         * @implements IEvent\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         */\n                        function Event(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Event timeUnixNano.\n                         * @member {number|Long|null|undefined} timeUnixNano\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.timeUnixNano = null;\n\n                        /**\n                         * Event name.\n                         * @member {string|null|undefined} name\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.name = null;\n\n                        /**\n                         * Event attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Event droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         */\n                        Event.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Event instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event instance\n                         */\n                        Event.create = function create(properties) {\n                            return new Event(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Event message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Event message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Event.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.IEvent} message Event message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Event.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.timeUnixNano = reader.fixed64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.name = reader.string();\n                                        break;\n                                    }\n                                case 3: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 4: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an Event message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Event.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an Event message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Event.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                    return \"timeUnixNano: integer|Long expected\";\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                if (!$util.isString(message.name))\n                                    return \"name: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an Event message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Event} Event\n                         */\n                        Event.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Event)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Event();\n                            if (object.timeUnixNano != null)\n                                if ($util.Long)\n                                    (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                                else if (typeof object.timeUnixNano === \"string\")\n                                    message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                                else if (typeof object.timeUnixNano === \"number\")\n                                    message.timeUnixNano = object.timeUnixNano;\n                                else if (typeof object.timeUnixNano === \"object\")\n                                    message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                            if (object.name != null)\n                                message.name = String(object.name);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Event.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an Event message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Event} message Event\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Event.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                                object.name = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                                if (typeof message.timeUnixNano === \"number\")\n                                    object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                                else\n                                    object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                            if (message.name != null && message.hasOwnProperty(\"name\"))\n                                object.name = message.name;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Event to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Event.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Event\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Event\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Event.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Event\";\n                        };\n\n                        return Event;\n                    })();\n\n                    Span.Link = (function() {\n\n                        /**\n                         * Properties of a Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @interface ILink\n                         * @property {Uint8Array|null} [traceId] Link traceId\n                         * @property {Uint8Array|null} [spanId] Link spanId\n                         * @property {string|null} [traceState] Link traceState\n                         * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] Link attributes\n                         * @property {number|null} [droppedAttributesCount] Link droppedAttributesCount\n                         */\n\n                        /**\n                         * Constructs a new Link.\n                         * @memberof opentelemetry.proto.trace.v1.Span\n                         * @classdesc Represents a Link.\n                         * @implements ILink\n                         * @constructor\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         */\n                        function Link(properties) {\n                            this.attributes = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Link traceId.\n                         * @member {Uint8Array|null|undefined} traceId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceId = null;\n\n                        /**\n                         * Link spanId.\n                         * @member {Uint8Array|null|undefined} spanId\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.spanId = null;\n\n                        /**\n                         * Link traceState.\n                         * @member {string|null|undefined} traceState\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.traceState = null;\n\n                        /**\n                         * Link attributes.\n                         * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.attributes = $util.emptyArray;\n\n                        /**\n                         * Link droppedAttributesCount.\n                         * @member {number|null|undefined} droppedAttributesCount\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         */\n                        Link.prototype.droppedAttributesCount = null;\n\n                        /**\n                         * Creates a new Link instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link instance\n                         */\n                        Link.create = function create(properties) {\n                            return new Link(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Link message. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.traceId);\n                            if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.spanId);\n                            if (message.traceState != null && Object.hasOwnProperty.call(message, \"traceState\"))\n                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.traceState);\n                            if (message.attributes != null && message.attributes.length)\n                                for (var i = 0; i < message.attributes.length; ++i)\n                                    $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                            if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.droppedAttributesCount);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Link message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Span.Link.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.ILink} message Link message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Link.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.traceId = reader.bytes();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.spanId = reader.bytes();\n                                        break;\n                                    }\n                                case 3: {\n                                        message.traceState = reader.string();\n                                        break;\n                                    }\n                                case 4: {\n                                        if (!(message.attributes && message.attributes.length))\n                                            message.attributes = [];\n                                        message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                case 5: {\n                                        message.droppedAttributesCount = reader.uint32();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Link message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Link.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Link message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Link.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                    return \"traceId: buffer expected\";\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                    return \"spanId: buffer expected\";\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                if (!$util.isString(message.traceState))\n                                    return \"traceState: string expected\";\n                            if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                                if (!Array.isArray(message.attributes))\n                                    return \"attributes: array expected\";\n                                for (var i = 0; i < message.attributes.length; ++i) {\n                                    var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                    if (error)\n                                        return \"attributes.\" + error;\n                                }\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                if (!$util.isInteger(message.droppedAttributesCount))\n                                    return \"droppedAttributesCount: integer expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Link message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.trace.v1.Span.Link} Link\n                         */\n                        Link.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.trace.v1.Span.Link)\n                                return object;\n                            var message = new $root.opentelemetry.proto.trace.v1.Span.Link();\n                            if (object.traceId != null)\n                                if (typeof object.traceId === \"string\")\n                                    $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                                else if (object.traceId.length >= 0)\n                                    message.traceId = object.traceId;\n                            if (object.spanId != null)\n                                if (typeof object.spanId === \"string\")\n                                    $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                                else if (object.spanId.length >= 0)\n                                    message.spanId = object.spanId;\n                            if (object.traceState != null)\n                                message.traceState = String(object.traceState);\n                            if (object.attributes) {\n                                if (!Array.isArray(object.attributes))\n                                    throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: array expected\");\n                                message.attributes = [];\n                                for (var i = 0; i < object.attributes.length; ++i) {\n                                    if (typeof object.attributes[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.trace.v1.Span.Link.attributes: object expected\");\n                                    message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                                }\n                            }\n                            if (object.droppedAttributesCount != null)\n                                message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Link message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {opentelemetry.proto.trace.v1.Span.Link} message Link\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Link.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.attributes = [];\n                            if (options.defaults) {\n                                if (options.bytes === String)\n                                    object.traceId = \"\";\n                                else {\n                                    object.traceId = [];\n                                    if (options.bytes !== Array)\n                                        object.traceId = $util.newBuffer(object.traceId);\n                                }\n                                if (options.bytes === String)\n                                    object.spanId = \"\";\n                                else {\n                                    object.spanId = [];\n                                    if (options.bytes !== Array)\n                                        object.spanId = $util.newBuffer(object.spanId);\n                                }\n                                object.traceState = \"\";\n                                object.droppedAttributesCount = 0;\n                            }\n                            if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                                object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                            if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                                object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                            if (message.traceState != null && message.hasOwnProperty(\"traceState\"))\n                                object.traceState = message.traceState;\n                            if (message.attributes && message.attributes.length) {\n                                object.attributes = [];\n                                for (var j = 0; j < message.attributes.length; ++j)\n                                    object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                            }\n                            if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                                object.droppedAttributesCount = message.droppedAttributesCount;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Link to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Link.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Link\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.trace.v1.Span.Link\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Link.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Span.Link\";\n                        };\n\n                        return Link;\n                    })();\n\n                    return Span;\n                })();\n\n                v1.Status = (function() {\n\n                    /**\n                     * Properties of a Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @interface IStatus\n                     * @property {string|null} [message] Status message\n                     * @property {opentelemetry.proto.trace.v1.Status.StatusCode|null} [code] Status code\n                     */\n\n                    /**\n                     * Constructs a new Status.\n                     * @memberof opentelemetry.proto.trace.v1\n                     * @classdesc Represents a Status.\n                     * @implements IStatus\n                     * @constructor\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     */\n                    function Status(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Status message.\n                     * @member {string|null|undefined} message\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.message = null;\n\n                    /**\n                     * Status code.\n                     * @member {opentelemetry.proto.trace.v1.Status.StatusCode|null|undefined} code\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     */\n                    Status.prototype.code = null;\n\n                    /**\n                     * Creates a new Status instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status instance\n                     */\n                    Status.create = function create(properties) {\n                        return new Status(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Status message. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);\n                        if (message.code != null && Object.hasOwnProperty.call(message, \"code\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.code);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Status message, length delimited. Does not implicitly {@link opentelemetry.proto.trace.v1.Status.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.IStatus} message Status message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Status.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.trace.v1.Status();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 2: {\n                                    message.message = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.code = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Status message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Status.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Status message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Status.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            if (!$util.isString(message.message))\n                                return \"message: string expected\";\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            switch (message.code) {\n                            default:\n                                return \"code: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Status message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.trace.v1.Status} Status\n                     */\n                    Status.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.trace.v1.Status)\n                            return object;\n                        var message = new $root.opentelemetry.proto.trace.v1.Status();\n                        if (object.message != null)\n                            message.message = String(object.message);\n                        switch (object.code) {\n                        default:\n                            if (typeof object.code === \"number\") {\n                                message.code = object.code;\n                                break;\n                            }\n                            break;\n                        case \"STATUS_CODE_UNSET\":\n                        case 0:\n                            message.code = 0;\n                            break;\n                        case \"STATUS_CODE_OK\":\n                        case 1:\n                            message.code = 1;\n                            break;\n                        case \"STATUS_CODE_ERROR\":\n                        case 2:\n                            message.code = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Status message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {opentelemetry.proto.trace.v1.Status} message Status\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Status.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.message = \"\";\n                            object.code = options.enums === String ? \"STATUS_CODE_UNSET\" : 0;\n                        }\n                        if (message.message != null && message.hasOwnProperty(\"message\"))\n                            object.message = message.message;\n                        if (message.code != null && message.hasOwnProperty(\"code\"))\n                            object.code = options.enums === String ? $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] === undefined ? message.code : $root.opentelemetry.proto.trace.v1.Status.StatusCode[message.code] : message.code;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Status to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Status.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Status\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.trace.v1.Status\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Status.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.trace.v1.Status\";\n                    };\n\n                    /**\n                     * StatusCode enum.\n                     * @name opentelemetry.proto.trace.v1.Status.StatusCode\n                     * @enum {number}\n                     * @property {number} STATUS_CODE_UNSET=0 STATUS_CODE_UNSET value\n                     * @property {number} STATUS_CODE_OK=1 STATUS_CODE_OK value\n                     * @property {number} STATUS_CODE_ERROR=2 STATUS_CODE_ERROR value\n                     */\n                    Status.StatusCode = (function() {\n                        var valuesById = {}, values = Object.create(valuesById);\n                        values[valuesById[0] = \"STATUS_CODE_UNSET\"] = 0;\n                        values[valuesById[1] = \"STATUS_CODE_OK\"] = 1;\n                        values[valuesById[2] = \"STATUS_CODE_ERROR\"] = 2;\n                        return values;\n                    })();\n\n                    return Status;\n                })();\n\n                return v1;\n            })();\n\n            return trace;\n        })();\n\n        proto.collector = (function() {\n\n            /**\n             * Namespace collector.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var collector = {};\n\n            collector.trace = (function() {\n\n                /**\n                 * Namespace trace.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var trace = {};\n\n                trace.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.trace\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.TraceService = (function() {\n\n                        /**\n                         * Constructs a new TraceService service.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents a TraceService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function TraceService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (TraceService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = TraceService;\n\n                        /**\n                         * Creates new TraceService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {TraceService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        TraceService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.trace.v1.TraceService#export_}.\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} [response] ExportTraceServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.trace.v1.TraceService.ExportCallback} callback Node-style callback called with the error, if any, and ExportTraceServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(TraceService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest, $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.trace.v1.TraceService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} request ExportTraceServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return TraceService;\n                    })();\n\n                    v1.ExportTraceServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceRequest\n                         * @property {Array.<opentelemetry.proto.trace.v1.IResourceSpans>|null} [resourceSpans] ExportTraceServiceRequest resourceSpans\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceRequest.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceRequest.\n                         * @implements IExportTraceServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceRequest(properties) {\n                            this.resourceSpans = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceRequest resourceSpans.\n                         * @member {Array.<opentelemetry.proto.trace.v1.IResourceSpans>} resourceSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         */\n                        ExportTraceServiceRequest.prototype.resourceSpans = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportTraceServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest instance\n                         */\n                        ExportTraceServiceRequest.create = function create(properties) {\n                            return new ExportTraceServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceSpans != null && message.resourceSpans.length)\n                                for (var i = 0; i < message.resourceSpans.length; ++i)\n                                    $root.opentelemetry.proto.trace.v1.ResourceSpans.encode(message.resourceSpans[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceRequest} message ExportTraceServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceSpans && message.resourceSpans.length))\n                                            message.resourceSpans = [];\n                                        message.resourceSpans.push($root.opentelemetry.proto.trace.v1.ResourceSpans.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceSpans != null && message.hasOwnProperty(\"resourceSpans\")) {\n                                if (!Array.isArray(message.resourceSpans))\n                                    return \"resourceSpans: array expected\";\n                                for (var i = 0; i < message.resourceSpans.length; ++i) {\n                                    var error = $root.opentelemetry.proto.trace.v1.ResourceSpans.verify(message.resourceSpans[i]);\n                                    if (error)\n                                        return \"resourceSpans.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} ExportTraceServiceRequest\n                         */\n                        ExportTraceServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest();\n                            if (object.resourceSpans) {\n                                if (!Array.isArray(object.resourceSpans))\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: array expected\");\n                                message.resourceSpans = [];\n                                for (var i = 0; i < object.resourceSpans.length; ++i) {\n                                    if (typeof object.resourceSpans[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.resourceSpans: object expected\");\n                                    message.resourceSpans[i] = $root.opentelemetry.proto.trace.v1.ResourceSpans.fromObject(object.resourceSpans[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest} message ExportTraceServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceSpans = [];\n                            if (message.resourceSpans && message.resourceSpans.length) {\n                                object.resourceSpans = [];\n                                for (var j = 0; j < message.resourceSpans.length; ++j)\n                                    object.resourceSpans[j] = $root.opentelemetry.proto.trace.v1.ResourceSpans.toObject(message.resourceSpans[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest\";\n                        };\n\n                        return ExportTraceServiceRequest;\n                    })();\n\n                    v1.ExportTraceServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTraceServiceResponse\n                         * @property {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null} [partialSuccess] ExportTraceServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportTraceServiceResponse.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTraceServiceResponse.\n                         * @implements IExportTraceServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportTraceServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTraceServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         */\n                        ExportTraceServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportTraceServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse instance\n                         */\n                        ExportTraceServiceResponse.create = function create(properties) {\n                            return new ExportTraceServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTraceServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTraceServiceResponse} message ExportTraceServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTraceServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTraceServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTraceServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTraceServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTraceServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTraceServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} ExportTraceServiceResponse\n                         */\n                        ExportTraceServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTraceServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse} message ExportTraceServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTraceServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTraceServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTraceServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTraceServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTraceServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse\";\n                        };\n\n                        return ExportTraceServiceResponse;\n                    })();\n\n                    v1.ExportTracePartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @interface IExportTracePartialSuccess\n                         * @property {number|Long|null} [rejectedSpans] ExportTracePartialSuccess rejectedSpans\n                         * @property {string|null} [errorMessage] ExportTracePartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportTracePartialSuccess.\n                         * @memberof opentelemetry.proto.collector.trace.v1\n                         * @classdesc Represents an ExportTracePartialSuccess.\n                         * @implements IExportTracePartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportTracePartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportTracePartialSuccess rejectedSpans.\n                         * @member {number|Long|null|undefined} rejectedSpans\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.rejectedSpans = null;\n\n                        /**\n                         * ExportTracePartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         */\n                        ExportTracePartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportTracePartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess instance\n                         */\n                        ExportTracePartialSuccess.create = function create(properties) {\n                            return new ExportTracePartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedSpans != null && Object.hasOwnProperty.call(message, \"rejectedSpans\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedSpans);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportTracePartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.IExportTracePartialSuccess} message ExportTracePartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportTracePartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedSpans = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportTracePartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportTracePartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportTracePartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportTracePartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (!$util.isInteger(message.rejectedSpans) && !(message.rejectedSpans && $util.isInteger(message.rejectedSpans.low) && $util.isInteger(message.rejectedSpans.high)))\n                                    return \"rejectedSpans: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportTracePartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} ExportTracePartialSuccess\n                         */\n                        ExportTracePartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess();\n                            if (object.rejectedSpans != null)\n                                if ($util.Long)\n                                    (message.rejectedSpans = $util.Long.fromValue(object.rejectedSpans)).unsigned = false;\n                                else if (typeof object.rejectedSpans === \"string\")\n                                    message.rejectedSpans = parseInt(object.rejectedSpans, 10);\n                                else if (typeof object.rejectedSpans === \"number\")\n                                    message.rejectedSpans = object.rejectedSpans;\n                                else if (typeof object.rejectedSpans === \"object\")\n                                    message.rejectedSpans = new $util.LongBits(object.rejectedSpans.low >>> 0, object.rejectedSpans.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportTracePartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess} message ExportTracePartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportTracePartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedSpans = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedSpans = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedSpans != null && message.hasOwnProperty(\"rejectedSpans\"))\n                                if (typeof message.rejectedSpans === \"number\")\n                                    object.rejectedSpans = options.longs === String ? String(message.rejectedSpans) : message.rejectedSpans;\n                                else\n                                    object.rejectedSpans = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedSpans) : options.longs === Number ? new $util.LongBits(message.rejectedSpans.low >>> 0, message.rejectedSpans.high >>> 0).toNumber() : message.rejectedSpans;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportTracePartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportTracePartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportTracePartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportTracePartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess\";\n                        };\n\n                        return ExportTracePartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return trace;\n            })();\n\n            collector.metrics = (function() {\n\n                /**\n                 * Namespace metrics.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var metrics = {};\n\n                metrics.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.metrics\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.MetricsService = (function() {\n\n                        /**\n                         * Constructs a new MetricsService service.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents a MetricsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function MetricsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (MetricsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = MetricsService;\n\n                        /**\n                         * Creates new MetricsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {MetricsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        MetricsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.metrics.v1.MetricsService#export_}.\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} [response] ExportMetricsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.metrics.v1.MetricsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportMetricsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(MetricsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest, $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.metrics.v1.MetricsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} request ExportMetricsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return MetricsService;\n                    })();\n\n                    v1.ExportMetricsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceRequest\n                         * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] ExportMetricsServiceRequest resourceMetrics\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceRequest.\n                         * @implements IExportMetricsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceRequest(properties) {\n                            this.resourceMetrics = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceRequest resourceMetrics.\n                         * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         */\n                        ExportMetricsServiceRequest.prototype.resourceMetrics = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportMetricsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest instance\n                         */\n                        ExportMetricsServiceRequest.create = function create(properties) {\n                            return new ExportMetricsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceMetrics != null && message.resourceMetrics.length)\n                                for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                    $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceRequest} message ExportMetricsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                            message.resourceMetrics = [];\n                                        message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                                if (!Array.isArray(message.resourceMetrics))\n                                    return \"resourceMetrics: array expected\";\n                                for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                    var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                    if (error)\n                                        return \"resourceMetrics.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} ExportMetricsServiceRequest\n                         */\n                        ExportMetricsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest();\n                            if (object.resourceMetrics) {\n                                if (!Array.isArray(object.resourceMetrics))\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: array expected\");\n                                message.resourceMetrics = [];\n                                for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                    if (typeof object.resourceMetrics[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resourceMetrics: object expected\");\n                                    message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest} message ExportMetricsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceMetrics = [];\n                            if (message.resourceMetrics && message.resourceMetrics.length) {\n                                object.resourceMetrics = [];\n                                for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                    object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\";\n                        };\n\n                        return ExportMetricsServiceRequest;\n                    })();\n\n                    v1.ExportMetricsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsServiceResponse\n                         * @property {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null} [partialSuccess] ExportMetricsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsServiceResponse.\n                         * @implements IExportMetricsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportMetricsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         */\n                        ExportMetricsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportMetricsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse instance\n                         */\n                        ExportMetricsServiceResponse.create = function create(properties) {\n                            return new ExportMetricsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsServiceResponse} message ExportMetricsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} ExportMetricsServiceResponse\n                         */\n                        ExportMetricsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse} message ExportMetricsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\";\n                        };\n\n                        return ExportMetricsServiceResponse;\n                    })();\n\n                    v1.ExportMetricsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @interface IExportMetricsPartialSuccess\n                         * @property {number|Long|null} [rejectedDataPoints] ExportMetricsPartialSuccess rejectedDataPoints\n                         * @property {string|null} [errorMessage] ExportMetricsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportMetricsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.metrics.v1\n                         * @classdesc Represents an ExportMetricsPartialSuccess.\n                         * @implements IExportMetricsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportMetricsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportMetricsPartialSuccess rejectedDataPoints.\n                         * @member {number|Long|null|undefined} rejectedDataPoints\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.rejectedDataPoints = null;\n\n                        /**\n                         * ExportMetricsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         */\n                        ExportMetricsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportMetricsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess instance\n                         */\n                        ExportMetricsPartialSuccess.create = function create(properties) {\n                            return new ExportMetricsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedDataPoints != null && Object.hasOwnProperty.call(message, \"rejectedDataPoints\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedDataPoints);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportMetricsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.IExportMetricsPartialSuccess} message ExportMetricsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportMetricsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedDataPoints = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportMetricsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportMetricsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportMetricsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportMetricsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (!$util.isInteger(message.rejectedDataPoints) && !(message.rejectedDataPoints && $util.isInteger(message.rejectedDataPoints.low) && $util.isInteger(message.rejectedDataPoints.high)))\n                                    return \"rejectedDataPoints: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportMetricsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} ExportMetricsPartialSuccess\n                         */\n                        ExportMetricsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess();\n                            if (object.rejectedDataPoints != null)\n                                if ($util.Long)\n                                    (message.rejectedDataPoints = $util.Long.fromValue(object.rejectedDataPoints)).unsigned = false;\n                                else if (typeof object.rejectedDataPoints === \"string\")\n                                    message.rejectedDataPoints = parseInt(object.rejectedDataPoints, 10);\n                                else if (typeof object.rejectedDataPoints === \"number\")\n                                    message.rejectedDataPoints = object.rejectedDataPoints;\n                                else if (typeof object.rejectedDataPoints === \"object\")\n                                    message.rejectedDataPoints = new $util.LongBits(object.rejectedDataPoints.low >>> 0, object.rejectedDataPoints.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportMetricsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess} message ExportMetricsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportMetricsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedDataPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedDataPoints = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedDataPoints != null && message.hasOwnProperty(\"rejectedDataPoints\"))\n                                if (typeof message.rejectedDataPoints === \"number\")\n                                    object.rejectedDataPoints = options.longs === String ? String(message.rejectedDataPoints) : message.rejectedDataPoints;\n                                else\n                                    object.rejectedDataPoints = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedDataPoints) : options.longs === Number ? new $util.LongBits(message.rejectedDataPoints.low >>> 0, message.rejectedDataPoints.high >>> 0).toNumber() : message.rejectedDataPoints;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportMetricsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportMetricsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportMetricsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportMetricsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess\";\n                        };\n\n                        return ExportMetricsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return metrics;\n            })();\n\n            collector.logs = (function() {\n\n                /**\n                 * Namespace logs.\n                 * @memberof opentelemetry.proto.collector\n                 * @namespace\n                 */\n                var logs = {};\n\n                logs.v1 = (function() {\n\n                    /**\n                     * Namespace v1.\n                     * @memberof opentelemetry.proto.collector.logs\n                     * @namespace\n                     */\n                    var v1 = {};\n\n                    v1.LogsService = (function() {\n\n                        /**\n                         * Constructs a new LogsService service.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents a LogsService\n                         * @extends $protobuf.rpc.Service\n                         * @constructor\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         */\n                        function LogsService(rpcImpl, requestDelimited, responseDelimited) {\n                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);\n                        }\n\n                        (LogsService.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = LogsService;\n\n                        /**\n                         * Creates new LogsService service using the specified rpc implementation.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @static\n                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation\n                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n                         * @returns {LogsService} RPC service. Useful where requests and/or responses are streamed.\n                         */\n                        LogsService.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n                            return new this(rpcImpl, requestDelimited, responseDelimited);\n                        };\n\n                        /**\n                         * Callback as used by {@link opentelemetry.proto.collector.logs.v1.LogsService#export_}.\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @typedef ExportCallback\n                         * @type {function}\n                         * @param {Error|null} error Error, if any\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} [response] ExportLogsServiceResponse\n                         */\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @param {opentelemetry.proto.collector.logs.v1.LogsService.ExportCallback} callback Node-style callback called with the error, if any, and ExportLogsServiceResponse\n                         * @returns {undefined}\n                         * @variation 1\n                         */\n                        Object.defineProperty(LogsService.prototype[\"export\"] = function export_(request, callback) {\n                            return this.rpcCall(export_, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest, $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse, request, callback);\n                        }, \"name\", { value: \"Export\" });\n\n                        /**\n                         * Calls Export.\n                         * @function export\n                         * @memberof opentelemetry.proto.collector.logs.v1.LogsService\n                         * @instance\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} request ExportLogsServiceRequest message or plain object\n                         * @returns {Promise<opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse>} Promise\n                         * @variation 2\n                         */\n\n                        return LogsService;\n                    })();\n\n                    v1.ExportLogsServiceRequest = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceRequest\n                         * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] ExportLogsServiceRequest resourceLogs\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceRequest.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceRequest.\n                         * @implements IExportLogsServiceRequest\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceRequest(properties) {\n                            this.resourceLogs = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceRequest resourceLogs.\n                         * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         */\n                        ExportLogsServiceRequest.prototype.resourceLogs = $util.emptyArray;\n\n                        /**\n                         * Creates a new ExportLogsServiceRequest instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest instance\n                         */\n                        ExportLogsServiceRequest.create = function create(properties) {\n                            return new ExportLogsServiceRequest(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.resourceLogs != null && message.resourceLogs.length)\n                                for (var i = 0; i < message.resourceLogs.length; ++i)\n                                    $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceRequest message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceRequest} message ExportLogsServiceRequest message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceRequest.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        if (!(message.resourceLogs && message.resourceLogs.length))\n                                            message.resourceLogs = [];\n                                        message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceRequest message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceRequest.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceRequest message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceRequest.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                                if (!Array.isArray(message.resourceLogs))\n                                    return \"resourceLogs: array expected\";\n                                for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                    var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                    if (error)\n                                        return \"resourceLogs.\" + error;\n                                }\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceRequest message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} ExportLogsServiceRequest\n                         */\n                        ExportLogsServiceRequest.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest();\n                            if (object.resourceLogs) {\n                                if (!Array.isArray(object.resourceLogs))\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: array expected\");\n                                message.resourceLogs = [];\n                                for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                    if (typeof object.resourceLogs[i] !== \"object\")\n                                        throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.resourceLogs: object expected\");\n                                    message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceRequest message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest} message ExportLogsServiceRequest\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceRequest.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.resourceLogs = [];\n                            if (message.resourceLogs && message.resourceLogs.length) {\n                                object.resourceLogs = [];\n                                for (var j = 0; j < message.resourceLogs.length; ++j)\n                                    object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceRequest to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceRequest.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceRequest\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest\";\n                        };\n\n                        return ExportLogsServiceRequest;\n                    })();\n\n                    v1.ExportLogsServiceResponse = (function() {\n\n                        /**\n                         * Properties of an ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsServiceResponse\n                         * @property {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null} [partialSuccess] ExportLogsServiceResponse partialSuccess\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsServiceResponse.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsServiceResponse.\n                         * @implements IExportLogsServiceResponse\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         */\n                        function ExportLogsServiceResponse(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsServiceResponse partialSuccess.\n                         * @member {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess|null|undefined} partialSuccess\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         */\n                        ExportLogsServiceResponse.prototype.partialSuccess = null;\n\n                        /**\n                         * Creates a new ExportLogsServiceResponse instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse instance\n                         */\n                        ExportLogsServiceResponse.create = function create(properties) {\n                            return new ExportLogsServiceResponse(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.partialSuccess != null && Object.hasOwnProperty.call(message, \"partialSuccess\"))\n                                $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.encode(message.partialSuccess, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsServiceResponse message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsServiceResponse} message ExportLogsServiceResponse message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsServiceResponse.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.decode(reader, reader.uint32());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsServiceResponse message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsServiceResponse.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsServiceResponse message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsServiceResponse.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\")) {\n                                var error = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify(message.partialSuccess);\n                                if (error)\n                                    return \"partialSuccess.\" + error;\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsServiceResponse message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} ExportLogsServiceResponse\n                         */\n                        ExportLogsServiceResponse.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse();\n                            if (object.partialSuccess != null) {\n                                if (typeof object.partialSuccess !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.partialSuccess: object expected\");\n                                message.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.fromObject(object.partialSuccess);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsServiceResponse message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse} message ExportLogsServiceResponse\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsServiceResponse.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults)\n                                object.partialSuccess = null;\n                            if (message.partialSuccess != null && message.hasOwnProperty(\"partialSuccess\"))\n                                object.partialSuccess = $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.toObject(message.partialSuccess, options);\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsServiceResponse to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsServiceResponse.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsServiceResponse\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsServiceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse\";\n                        };\n\n                        return ExportLogsServiceResponse;\n                    })();\n\n                    v1.ExportLogsPartialSuccess = (function() {\n\n                        /**\n                         * Properties of an ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @interface IExportLogsPartialSuccess\n                         * @property {number|Long|null} [rejectedLogRecords] ExportLogsPartialSuccess rejectedLogRecords\n                         * @property {string|null} [errorMessage] ExportLogsPartialSuccess errorMessage\n                         */\n\n                        /**\n                         * Constructs a new ExportLogsPartialSuccess.\n                         * @memberof opentelemetry.proto.collector.logs.v1\n                         * @classdesc Represents an ExportLogsPartialSuccess.\n                         * @implements IExportLogsPartialSuccess\n                         * @constructor\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         */\n                        function ExportLogsPartialSuccess(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ExportLogsPartialSuccess rejectedLogRecords.\n                         * @member {number|Long|null|undefined} rejectedLogRecords\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.rejectedLogRecords = null;\n\n                        /**\n                         * ExportLogsPartialSuccess errorMessage.\n                         * @member {string|null|undefined} errorMessage\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         */\n                        ExportLogsPartialSuccess.prototype.errorMessage = null;\n\n                        /**\n                         * Creates a new ExportLogsPartialSuccess instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess instance\n                         */\n                        ExportLogsPartialSuccess.create = function create(properties) {\n                            return new ExportLogsPartialSuccess(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.rejectedLogRecords != null && Object.hasOwnProperty.call(message, \"rejectedLogRecords\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.rejectedLogRecords);\n                            if (message.errorMessage != null && Object.hasOwnProperty.call(message, \"errorMessage\"))\n                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.errorMessage);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ExportLogsPartialSuccess message, length delimited. Does not implicitly {@link opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.IExportLogsPartialSuccess} message ExportLogsPartialSuccess message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ExportLogsPartialSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.rejectedLogRecords = reader.int64();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.errorMessage = reader.string();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes an ExportLogsPartialSuccess message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ExportLogsPartialSuccess.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies an ExportLogsPartialSuccess message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ExportLogsPartialSuccess.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (!$util.isInteger(message.rejectedLogRecords) && !(message.rejectedLogRecords && $util.isInteger(message.rejectedLogRecords.low) && $util.isInteger(message.rejectedLogRecords.high)))\n                                    return \"rejectedLogRecords: integer|Long expected\";\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                if (!$util.isString(message.errorMessage))\n                                    return \"errorMessage: string expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates an ExportLogsPartialSuccess message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} ExportLogsPartialSuccess\n                         */\n                        ExportLogsPartialSuccess.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess)\n                                return object;\n                            var message = new $root.opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess();\n                            if (object.rejectedLogRecords != null)\n                                if ($util.Long)\n                                    (message.rejectedLogRecords = $util.Long.fromValue(object.rejectedLogRecords)).unsigned = false;\n                                else if (typeof object.rejectedLogRecords === \"string\")\n                                    message.rejectedLogRecords = parseInt(object.rejectedLogRecords, 10);\n                                else if (typeof object.rejectedLogRecords === \"number\")\n                                    message.rejectedLogRecords = object.rejectedLogRecords;\n                                else if (typeof object.rejectedLogRecords === \"object\")\n                                    message.rejectedLogRecords = new $util.LongBits(object.rejectedLogRecords.low >>> 0, object.rejectedLogRecords.high >>> 0).toNumber();\n                            if (object.errorMessage != null)\n                                message.errorMessage = String(object.errorMessage);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from an ExportLogsPartialSuccess message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess} message ExportLogsPartialSuccess\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ExportLogsPartialSuccess.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                if ($util.Long) {\n                                    var long = new $util.Long(0, 0, false);\n                                    object.rejectedLogRecords = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                                } else\n                                    object.rejectedLogRecords = options.longs === String ? \"0\" : 0;\n                                object.errorMessage = \"\";\n                            }\n                            if (message.rejectedLogRecords != null && message.hasOwnProperty(\"rejectedLogRecords\"))\n                                if (typeof message.rejectedLogRecords === \"number\")\n                                    object.rejectedLogRecords = options.longs === String ? String(message.rejectedLogRecords) : message.rejectedLogRecords;\n                                else\n                                    object.rejectedLogRecords = options.longs === String ? $util.Long.prototype.toString.call(message.rejectedLogRecords) : options.longs === Number ? new $util.LongBits(message.rejectedLogRecords.low >>> 0, message.rejectedLogRecords.high >>> 0).toNumber() : message.rejectedLogRecords;\n                            if (message.errorMessage != null && message.hasOwnProperty(\"errorMessage\"))\n                                object.errorMessage = message.errorMessage;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ExportLogsPartialSuccess to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ExportLogsPartialSuccess.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ExportLogsPartialSuccess\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ExportLogsPartialSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess\";\n                        };\n\n                        return ExportLogsPartialSuccess;\n                    })();\n\n                    return v1;\n                })();\n\n                return logs;\n            })();\n\n            return collector;\n        })();\n\n        proto.metrics = (function() {\n\n            /**\n             * Namespace metrics.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var metrics = {};\n\n            metrics.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.metrics\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.MetricsData = (function() {\n\n                    /**\n                     * Properties of a MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetricsData\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>|null} [resourceMetrics] MetricsData resourceMetrics\n                     */\n\n                    /**\n                     * Constructs a new MetricsData.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a MetricsData.\n                     * @implements IMetricsData\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     */\n                    function MetricsData(properties) {\n                        this.resourceMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * MetricsData resourceMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IResourceMetrics>} resourceMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     */\n                    MetricsData.prototype.resourceMetrics = $util.emptyArray;\n\n                    /**\n                     * Creates a new MetricsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData instance\n                     */\n                    MetricsData.create = function create(properties) {\n                        return new MetricsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceMetrics != null && message.resourceMetrics.length)\n                            for (var i = 0; i < message.resourceMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ResourceMetrics.encode(message.resourceMetrics[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified MetricsData message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.MetricsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetricsData} message MetricsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    MetricsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceMetrics && message.resourceMetrics.length))\n                                        message.resourceMetrics = [];\n                                    message.resourceMetrics.push($root.opentelemetry.proto.metrics.v1.ResourceMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a MetricsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    MetricsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a MetricsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    MetricsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceMetrics != null && message.hasOwnProperty(\"resourceMetrics\")) {\n                            if (!Array.isArray(message.resourceMetrics))\n                                return \"resourceMetrics: array expected\";\n                            for (var i = 0; i < message.resourceMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.verify(message.resourceMetrics[i]);\n                                if (error)\n                                    return \"resourceMetrics.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a MetricsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.MetricsData} MetricsData\n                     */\n                    MetricsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.MetricsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.MetricsData();\n                        if (object.resourceMetrics) {\n                            if (!Array.isArray(object.resourceMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: array expected\");\n                            message.resourceMetrics = [];\n                            for (var i = 0; i < object.resourceMetrics.length; ++i) {\n                                if (typeof object.resourceMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.MetricsData.resourceMetrics: object expected\");\n                                message.resourceMetrics[i] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.fromObject(object.resourceMetrics[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a MetricsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.MetricsData} message MetricsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    MetricsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceMetrics = [];\n                        if (message.resourceMetrics && message.resourceMetrics.length) {\n                            object.resourceMetrics = [];\n                            for (var j = 0; j < message.resourceMetrics.length; ++j)\n                                object.resourceMetrics[j] = $root.opentelemetry.proto.metrics.v1.ResourceMetrics.toObject(message.resourceMetrics[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this MetricsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    MetricsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for MetricsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.MetricsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    MetricsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.MetricsData\";\n                    };\n\n                    return MetricsData;\n                })();\n\n                v1.ResourceMetrics = (function() {\n\n                    /**\n                     * Properties of a ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IResourceMetrics\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceMetrics resource\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>|null} [scopeMetrics] ResourceMetrics scopeMetrics\n                     * @property {string|null} [schemaUrl] ResourceMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ResourceMetrics.\n                     * @implements IResourceMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     */\n                    function ResourceMetrics(properties) {\n                        this.scopeMetrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceMetrics resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.resource = null;\n\n                    /**\n                     * ResourceMetrics scopeMetrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IScopeMetrics>} scopeMetrics\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.scopeMetrics = $util.emptyArray;\n\n                    /**\n                     * ResourceMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     */\n                    ResourceMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics instance\n                     */\n                    ResourceMetrics.create = function create(properties) {\n                        return new ResourceMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeMetrics != null && message.scopeMetrics.length)\n                            for (var i = 0; i < message.scopeMetrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ScopeMetrics.encode(message.scopeMetrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ResourceMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IResourceMetrics} message ResourceMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeMetrics && message.scopeMetrics.length))\n                                        message.scopeMetrics = [];\n                                    message.scopeMetrics.push($root.opentelemetry.proto.metrics.v1.ScopeMetrics.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeMetrics != null && message.hasOwnProperty(\"scopeMetrics\")) {\n                            if (!Array.isArray(message.scopeMetrics))\n                                return \"scopeMetrics: array expected\";\n                            for (var i = 0; i < message.scopeMetrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.verify(message.scopeMetrics[i]);\n                                if (error)\n                                    return \"scopeMetrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ResourceMetrics} ResourceMetrics\n                     */\n                    ResourceMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ResourceMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ResourceMetrics();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeMetrics) {\n                            if (!Array.isArray(object.scopeMetrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: array expected\");\n                            message.scopeMetrics = [];\n                            for (var i = 0; i < object.scopeMetrics.length; ++i) {\n                                if (typeof object.scopeMetrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ResourceMetrics.scopeMetrics: object expected\");\n                                message.scopeMetrics[i] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.fromObject(object.scopeMetrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ResourceMetrics} message ResourceMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeMetrics = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeMetrics && message.scopeMetrics.length) {\n                            object.scopeMetrics = [];\n                            for (var j = 0; j < message.scopeMetrics.length; ++j)\n                                object.scopeMetrics[j] = $root.opentelemetry.proto.metrics.v1.ScopeMetrics.toObject(message.scopeMetrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ResourceMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ResourceMetrics\";\n                    };\n\n                    return ResourceMetrics;\n                })();\n\n                v1.ScopeMetrics = (function() {\n\n                    /**\n                     * Properties of a ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IScopeMetrics\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeMetrics scope\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IMetric>|null} [metrics] ScopeMetrics metrics\n                     * @property {string|null} [schemaUrl] ScopeMetrics schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeMetrics.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a ScopeMetrics.\n                     * @implements IScopeMetrics\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     */\n                    function ScopeMetrics(properties) {\n                        this.metrics = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeMetrics scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.scope = null;\n\n                    /**\n                     * ScopeMetrics metrics.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IMetric>} metrics\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.metrics = $util.emptyArray;\n\n                    /**\n                     * ScopeMetrics schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     */\n                    ScopeMetrics.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeMetrics instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics instance\n                     */\n                    ScopeMetrics.create = function create(properties) {\n                        return new ScopeMetrics(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.metrics != null && message.metrics.length)\n                            for (var i = 0; i < message.metrics.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Metric.encode(message.metrics[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeMetrics message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ScopeMetrics.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IScopeMetrics} message ScopeMetrics message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeMetrics.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.metrics && message.metrics.length))\n                                        message.metrics = [];\n                                    message.metrics.push($root.opentelemetry.proto.metrics.v1.Metric.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeMetrics message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeMetrics.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeMetrics message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeMetrics.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.metrics != null && message.hasOwnProperty(\"metrics\")) {\n                            if (!Array.isArray(message.metrics))\n                                return \"metrics: array expected\";\n                            for (var i = 0; i < message.metrics.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Metric.verify(message.metrics[i]);\n                                if (error)\n                                    return \"metrics.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeMetrics message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ScopeMetrics} ScopeMetrics\n                     */\n                    ScopeMetrics.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ScopeMetrics)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ScopeMetrics();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.metrics) {\n                            if (!Array.isArray(object.metrics))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: array expected\");\n                            message.metrics = [];\n                            for (var i = 0; i < object.metrics.length; ++i) {\n                                if (typeof object.metrics[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ScopeMetrics.metrics: object expected\");\n                                message.metrics[i] = $root.opentelemetry.proto.metrics.v1.Metric.fromObject(object.metrics[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeMetrics message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ScopeMetrics} message ScopeMetrics\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeMetrics.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.metrics = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.metrics && message.metrics.length) {\n                            object.metrics = [];\n                            for (var j = 0; j < message.metrics.length; ++j)\n                                object.metrics[j] = $root.opentelemetry.proto.metrics.v1.Metric.toObject(message.metrics[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeMetrics to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeMetrics.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeMetrics\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ScopeMetrics\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeMetrics.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ScopeMetrics\";\n                    };\n\n                    return ScopeMetrics;\n                })();\n\n                v1.Metric = (function() {\n\n                    /**\n                     * Properties of a Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IMetric\n                     * @property {string|null} [name] Metric name\n                     * @property {string|null} [description] Metric description\n                     * @property {string|null} [unit] Metric unit\n                     * @property {opentelemetry.proto.metrics.v1.IGauge|null} [gauge] Metric gauge\n                     * @property {opentelemetry.proto.metrics.v1.ISum|null} [sum] Metric sum\n                     * @property {opentelemetry.proto.metrics.v1.IHistogram|null} [histogram] Metric histogram\n                     * @property {opentelemetry.proto.metrics.v1.IExponentialHistogram|null} [exponentialHistogram] Metric exponentialHistogram\n                     * @property {opentelemetry.proto.metrics.v1.ISummary|null} [summary] Metric summary\n                     */\n\n                    /**\n                     * Constructs a new Metric.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Metric.\n                     * @implements IMetric\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     */\n                    function Metric(properties) {\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Metric name.\n                     * @member {string|null|undefined} name\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.name = null;\n\n                    /**\n                     * Metric description.\n                     * @member {string|null|undefined} description\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.description = null;\n\n                    /**\n                     * Metric unit.\n                     * @member {string|null|undefined} unit\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.unit = null;\n\n                    /**\n                     * Metric gauge.\n                     * @member {opentelemetry.proto.metrics.v1.IGauge|null|undefined} gauge\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.gauge = null;\n\n                    /**\n                     * Metric sum.\n                     * @member {opentelemetry.proto.metrics.v1.ISum|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.sum = null;\n\n                    /**\n                     * Metric histogram.\n                     * @member {opentelemetry.proto.metrics.v1.IHistogram|null|undefined} histogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.histogram = null;\n\n                    /**\n                     * Metric exponentialHistogram.\n                     * @member {opentelemetry.proto.metrics.v1.IExponentialHistogram|null|undefined} exponentialHistogram\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.exponentialHistogram = null;\n\n                    /**\n                     * Metric summary.\n                     * @member {opentelemetry.proto.metrics.v1.ISummary|null|undefined} summary\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Metric.prototype.summary = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Metric data.\n                     * @member {\"gauge\"|\"sum\"|\"histogram\"|\"exponentialHistogram\"|\"summary\"|undefined} data\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     */\n                    Object.defineProperty(Metric.prototype, \"data\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"gauge\", \"sum\", \"histogram\", \"exponentialHistogram\", \"summary\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Metric instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric instance\n                     */\n                    Metric.create = function create(properties) {\n                        return new Metric(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Metric message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n                        if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);\n                        if (message.unit != null && Object.hasOwnProperty.call(message, \"unit\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.unit);\n                        if (message.gauge != null && Object.hasOwnProperty.call(message, \"gauge\"))\n                            $root.opentelemetry.proto.metrics.v1.Gauge.encode(message.gauge, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            $root.opentelemetry.proto.metrics.v1.Sum.encode(message.sum, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.histogram != null && Object.hasOwnProperty.call(message, \"histogram\"))\n                            $root.opentelemetry.proto.metrics.v1.Histogram.encode(message.histogram, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.exponentialHistogram != null && Object.hasOwnProperty.call(message, \"exponentialHistogram\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.encode(message.exponentialHistogram, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n                        if (message.summary != null && Object.hasOwnProperty.call(message, \"summary\"))\n                            $root.opentelemetry.proto.metrics.v1.Summary.encode(message.summary, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Metric message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Metric.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IMetric} message Metric message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Metric.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.name = reader.string();\n                                    break;\n                                }\n                            case 2: {\n                                    message.description = reader.string();\n                                    break;\n                                }\n                            case 3: {\n                                    message.unit = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 7: {\n                                    message.sum = $root.opentelemetry.proto.metrics.v1.Sum.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 11: {\n                                    message.summary = $root.opentelemetry.proto.metrics.v1.Summary.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Metric message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Metric.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Metric message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Metric.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            if (!$util.isString(message.name))\n                                return \"name: string expected\";\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            if (!$util.isString(message.description))\n                                return \"description: string expected\";\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            if (!$util.isString(message.unit))\n                                return \"unit: string expected\";\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Gauge.verify(message.gauge);\n                                if (error)\n                                    return \"gauge.\" + error;\n                            }\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Sum.verify(message.sum);\n                                if (error)\n                                    return \"sum.\" + error;\n                            }\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Histogram.verify(message.histogram);\n                                if (error)\n                                    return \"histogram.\" + error;\n                            }\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.verify(message.exponentialHistogram);\n                                if (error)\n                                    return \"exponentialHistogram.\" + error;\n                            }\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            if (properties.data === 1)\n                                return \"data: multiple values\";\n                            properties.data = 1;\n                            {\n                                var error = $root.opentelemetry.proto.metrics.v1.Summary.verify(message.summary);\n                                if (error)\n                                    return \"summary.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Metric message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Metric} Metric\n                     */\n                    Metric.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Metric)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Metric();\n                        if (object.name != null)\n                            message.name = String(object.name);\n                        if (object.description != null)\n                            message.description = String(object.description);\n                        if (object.unit != null)\n                            message.unit = String(object.unit);\n                        if (object.gauge != null) {\n                            if (typeof object.gauge !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.gauge: object expected\");\n                            message.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.fromObject(object.gauge);\n                        }\n                        if (object.sum != null) {\n                            if (typeof object.sum !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.sum: object expected\");\n                            message.sum = $root.opentelemetry.proto.metrics.v1.Sum.fromObject(object.sum);\n                        }\n                        if (object.histogram != null) {\n                            if (typeof object.histogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.histogram: object expected\");\n                            message.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.fromObject(object.histogram);\n                        }\n                        if (object.exponentialHistogram != null) {\n                            if (typeof object.exponentialHistogram !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.exponentialHistogram: object expected\");\n                            message.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.fromObject(object.exponentialHistogram);\n                        }\n                        if (object.summary != null) {\n                            if (typeof object.summary !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Metric.summary: object expected\");\n                            message.summary = $root.opentelemetry.proto.metrics.v1.Summary.fromObject(object.summary);\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Metric message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Metric} message Metric\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Metric.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.defaults) {\n                            object.name = \"\";\n                            object.description = \"\";\n                            object.unit = \"\";\n                        }\n                        if (message.name != null && message.hasOwnProperty(\"name\"))\n                            object.name = message.name;\n                        if (message.description != null && message.hasOwnProperty(\"description\"))\n                            object.description = message.description;\n                        if (message.unit != null && message.hasOwnProperty(\"unit\"))\n                            object.unit = message.unit;\n                        if (message.gauge != null && message.hasOwnProperty(\"gauge\")) {\n                            object.gauge = $root.opentelemetry.proto.metrics.v1.Gauge.toObject(message.gauge, options);\n                            if (options.oneofs)\n                                object.data = \"gauge\";\n                        }\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = $root.opentelemetry.proto.metrics.v1.Sum.toObject(message.sum, options);\n                            if (options.oneofs)\n                                object.data = \"sum\";\n                        }\n                        if (message.histogram != null && message.hasOwnProperty(\"histogram\")) {\n                            object.histogram = $root.opentelemetry.proto.metrics.v1.Histogram.toObject(message.histogram, options);\n                            if (options.oneofs)\n                                object.data = \"histogram\";\n                        }\n                        if (message.exponentialHistogram != null && message.hasOwnProperty(\"exponentialHistogram\")) {\n                            object.exponentialHistogram = $root.opentelemetry.proto.metrics.v1.ExponentialHistogram.toObject(message.exponentialHistogram, options);\n                            if (options.oneofs)\n                                object.data = \"exponentialHistogram\";\n                        }\n                        if (message.summary != null && message.hasOwnProperty(\"summary\")) {\n                            object.summary = $root.opentelemetry.proto.metrics.v1.Summary.toObject(message.summary, options);\n                            if (options.oneofs)\n                                object.data = \"summary\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Metric to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Metric.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Metric\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Metric\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Metric.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Metric\";\n                    };\n\n                    return Metric;\n                })();\n\n                v1.Gauge = (function() {\n\n                    /**\n                     * Properties of a Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IGauge\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Gauge dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Gauge.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Gauge.\n                     * @implements IGauge\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     */\n                    function Gauge(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Gauge dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     */\n                    Gauge.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Gauge instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge instance\n                     */\n                    Gauge.create = function create(properties) {\n                        return new Gauge(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Gauge message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Gauge.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IGauge} message Gauge message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Gauge.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Gauge message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Gauge.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Gauge message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Gauge.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Gauge message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Gauge} Gauge\n                     */\n                    Gauge.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Gauge)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Gauge();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Gauge.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Gauge message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Gauge} message Gauge\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Gauge.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Gauge to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Gauge.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Gauge\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Gauge\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Gauge.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Gauge\";\n                    };\n\n                    return Gauge;\n                })();\n\n                v1.Sum = (function() {\n\n                    /**\n                     * Properties of a Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>|null} [dataPoints] Sum dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Sum aggregationTemporality\n                     * @property {boolean|null} [isMonotonic] Sum isMonotonic\n                     */\n\n                    /**\n                     * Constructs a new Sum.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Sum.\n                     * @implements ISum\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     */\n                    function Sum(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Sum dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.INumberDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Sum aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Sum isMonotonic.\n                     * @member {boolean|null|undefined} isMonotonic\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     */\n                    Sum.prototype.isMonotonic = null;\n\n                    /**\n                     * Creates a new Sum instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum instance\n                     */\n                    Sum.create = function create(properties) {\n                        return new Sum(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Sum message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.NumberDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        if (message.isMonotonic != null && Object.hasOwnProperty.call(message, \"isMonotonic\"))\n                            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isMonotonic);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Sum message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Sum.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISum} message Sum message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Sum.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.NumberDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.isMonotonic = reader.bool();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Sum message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Sum.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Sum message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Sum.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            if (typeof message.isMonotonic !== \"boolean\")\n                                return \"isMonotonic: boolean expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Sum message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Sum} Sum\n                     */\n                    Sum.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Sum)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Sum();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Sum.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        if (object.isMonotonic != null)\n                            message.isMonotonic = Boolean(object.isMonotonic);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Sum message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Sum} message Sum\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Sum.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults) {\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                            object.isMonotonic = false;\n                        }\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.NumberDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        if (message.isMonotonic != null && message.hasOwnProperty(\"isMonotonic\"))\n                            object.isMonotonic = message.isMonotonic;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Sum to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Sum.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Sum\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Sum\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Sum.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Sum\";\n                    };\n\n                    return Sum;\n                })();\n\n                v1.Histogram = (function() {\n\n                    /**\n                     * Properties of a Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>|null} [dataPoints] Histogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] Histogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new Histogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Histogram.\n                     * @implements IHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     */\n                    function Histogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Histogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Histogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     */\n                    Histogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new Histogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram instance\n                     */\n                    Histogram.create = function create(properties) {\n                        return new Histogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Histogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Histogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogram} message Histogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Histogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.HistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Histogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Histogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Histogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Histogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Histogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Histogram} Histogram\n                     */\n                    Histogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Histogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Histogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Histogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Histogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Histogram} message Histogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Histogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.HistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Histogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Histogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Histogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Histogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Histogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Histogram\";\n                    };\n\n                    return Histogram;\n                })();\n\n                v1.ExponentialHistogram = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogram\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>|null} [dataPoints] ExponentialHistogram dataPoints\n                     * @property {opentelemetry.proto.metrics.v1.AggregationTemporality|null} [aggregationTemporality] ExponentialHistogram aggregationTemporality\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogram.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogram.\n                     * @implements IExponentialHistogram\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     */\n                    function ExponentialHistogram(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogram dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogram aggregationTemporality.\n                     * @member {opentelemetry.proto.metrics.v1.AggregationTemporality|null|undefined} aggregationTemporality\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     */\n                    ExponentialHistogram.prototype.aggregationTemporality = null;\n\n                    /**\n                     * Creates a new ExponentialHistogram instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram instance\n                     */\n                    ExponentialHistogram.create = function create(properties) {\n                        return new ExponentialHistogram(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.aggregationTemporality != null && Object.hasOwnProperty.call(message, \"aggregationTemporality\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.aggregationTemporality);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogram message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogram.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogram} message ExponentialHistogram message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogram.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.aggregationTemporality = reader.int32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogram message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogram.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogram message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogram.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            switch (message.aggregationTemporality) {\n                            default:\n                                return \"aggregationTemporality: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                                break;\n                            }\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogram message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogram} ExponentialHistogram\n                     */\n                    ExponentialHistogram.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogram)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogram();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogram.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        switch (object.aggregationTemporality) {\n                        default:\n                            if (typeof object.aggregationTemporality === \"number\") {\n                                message.aggregationTemporality = object.aggregationTemporality;\n                                break;\n                            }\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_UNSPECIFIED\":\n                        case 0:\n                            message.aggregationTemporality = 0;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_DELTA\":\n                        case 1:\n                            message.aggregationTemporality = 1;\n                            break;\n                        case \"AGGREGATION_TEMPORALITY_CUMULATIVE\":\n                        case 2:\n                            message.aggregationTemporality = 2;\n                            break;\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogram message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogram} message ExponentialHistogram\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogram.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (options.defaults)\n                            object.aggregationTemporality = options.enums === String ? \"AGGREGATION_TEMPORALITY_UNSPECIFIED\" : 0;\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        if (message.aggregationTemporality != null && message.hasOwnProperty(\"aggregationTemporality\"))\n                            object.aggregationTemporality = options.enums === String ? $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] === undefined ? message.aggregationTemporality : $root.opentelemetry.proto.metrics.v1.AggregationTemporality[message.aggregationTemporality] : message.aggregationTemporality;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogram to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogram.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogram\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogram\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogram.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogram\";\n                    };\n\n                    return ExponentialHistogram;\n                })();\n\n                v1.Summary = (function() {\n\n                    /**\n                     * Properties of a Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummary\n                     * @property {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>|null} [dataPoints] Summary dataPoints\n                     */\n\n                    /**\n                     * Constructs a new Summary.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a Summary.\n                     * @implements ISummary\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     */\n                    function Summary(properties) {\n                        this.dataPoints = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Summary dataPoints.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.ISummaryDataPoint>} dataPoints\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     */\n                    Summary.prototype.dataPoints = $util.emptyArray;\n\n                    /**\n                     * Creates a new Summary instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary instance\n                     */\n                    Summary.create = function create(properties) {\n                        return new Summary(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Summary message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.dataPoints != null && message.dataPoints.length)\n                            for (var i = 0; i < message.dataPoints.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.encode(message.dataPoints[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Summary message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Summary.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummary} message Summary message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Summary.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.dataPoints && message.dataPoints.length))\n                                        message.dataPoints = [];\n                                    message.dataPoints.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a Summary message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Summary.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a Summary message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Summary.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.dataPoints != null && message.hasOwnProperty(\"dataPoints\")) {\n                            if (!Array.isArray(message.dataPoints))\n                                return \"dataPoints: array expected\";\n                            for (var i = 0; i < message.dataPoints.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.verify(message.dataPoints[i]);\n                                if (error)\n                                    return \"dataPoints.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a Summary message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Summary} Summary\n                     */\n                    Summary.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Summary)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Summary();\n                        if (object.dataPoints) {\n                            if (!Array.isArray(object.dataPoints))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: array expected\");\n                            message.dataPoints = [];\n                            for (var i = 0; i < object.dataPoints.length; ++i) {\n                                if (typeof object.dataPoints[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Summary.dataPoints: object expected\");\n                                message.dataPoints[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.fromObject(object.dataPoints[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a Summary message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Summary} message Summary\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Summary.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.dataPoints = [];\n                        if (message.dataPoints && message.dataPoints.length) {\n                            object.dataPoints = [];\n                            for (var j = 0; j < message.dataPoints.length; ++j)\n                                object.dataPoints[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.toObject(message.dataPoints[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Summary to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Summary.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Summary\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Summary\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Summary.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Summary\";\n                    };\n\n                    return Summary;\n                })();\n\n                /**\n                 * AggregationTemporality enum.\n                 * @name opentelemetry.proto.metrics.v1.AggregationTemporality\n                 * @enum {number}\n                 * @property {number} AGGREGATION_TEMPORALITY_UNSPECIFIED=0 AGGREGATION_TEMPORALITY_UNSPECIFIED value\n                 * @property {number} AGGREGATION_TEMPORALITY_DELTA=1 AGGREGATION_TEMPORALITY_DELTA value\n                 * @property {number} AGGREGATION_TEMPORALITY_CUMULATIVE=2 AGGREGATION_TEMPORALITY_CUMULATIVE value\n                 */\n                v1.AggregationTemporality = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"AGGREGATION_TEMPORALITY_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"AGGREGATION_TEMPORALITY_DELTA\"] = 1;\n                    values[valuesById[2] = \"AGGREGATION_TEMPORALITY_CUMULATIVE\"] = 2;\n                    return values;\n                })();\n\n                /**\n                 * DataPointFlags enum.\n                 * @name opentelemetry.proto.metrics.v1.DataPointFlags\n                 * @enum {number}\n                 * @property {number} DATA_POINT_FLAGS_DO_NOT_USE=0 DATA_POINT_FLAGS_DO_NOT_USE value\n                 * @property {number} DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK=1 DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK value\n                 */\n                v1.DataPointFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"DATA_POINT_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[1] = \"DATA_POINT_FLAGS_NO_RECORDED_VALUE_MASK\"] = 1;\n                    return values;\n                })();\n\n                v1.NumberDataPoint = (function() {\n\n                    /**\n                     * Properties of a NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface INumberDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] NumberDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] NumberDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] NumberDataPoint timeUnixNano\n                     * @property {number|null} [asDouble] NumberDataPoint asDouble\n                     * @property {number|Long|null} [asInt] NumberDataPoint asInt\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] NumberDataPoint exemplars\n                     * @property {number|null} [flags] NumberDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new NumberDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a NumberDataPoint.\n                     * @implements INumberDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     */\n                    function NumberDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * NumberDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * NumberDataPoint asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asDouble = null;\n\n                    /**\n                     * NumberDataPoint asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.asInt = null;\n\n                    /**\n                     * NumberDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * NumberDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    NumberDataPoint.prototype.flags = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * NumberDataPoint value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(NumberDataPoint.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new NumberDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint instance\n                     */\n                    NumberDataPoint.create = function create(properties) {\n                        return new NumberDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).double(message.asDouble);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified NumberDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.NumberDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.INumberDataPoint} message NumberDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    NumberDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a NumberDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    NumberDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a NumberDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    NumberDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a NumberDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.NumberDataPoint} NumberDataPoint\n                     */\n                    NumberDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.NumberDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.NumberDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.NumberDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a NumberDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.NumberDataPoint} message NumberDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    NumberDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this NumberDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    NumberDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for NumberDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.NumberDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    NumberDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.NumberDataPoint\";\n                    };\n\n                    return NumberDataPoint;\n                })();\n\n                v1.HistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of a HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] HistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] HistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] HistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] HistogramDataPoint count\n                     * @property {number|null} [sum] HistogramDataPoint sum\n                     * @property {Array.<number|Long>|null} [bucketCounts] HistogramDataPoint bucketCounts\n                     * @property {Array.<number>|null} [explicitBounds] HistogramDataPoint explicitBounds\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] HistogramDataPoint exemplars\n                     * @property {number|null} [flags] HistogramDataPoint flags\n                     * @property {number|null} [min] HistogramDataPoint min\n                     * @property {number|null} [max] HistogramDataPoint max\n                     */\n\n                    /**\n                     * Constructs a new HistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a HistogramDataPoint.\n                     * @implements IHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function HistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.bucketCounts = [];\n                        this.explicitBounds = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * HistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * HistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * HistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * HistogramDataPoint bucketCounts.\n                     * @member {Array.<number|Long>} bucketCounts\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.bucketCounts = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint explicitBounds.\n                     * @member {Array.<number>} explicitBounds\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.explicitBounds = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * HistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * HistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * HistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    HistogramDataPoint.prototype.max = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * HistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * HistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(HistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new HistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint instance\n                     */\n                    HistogramDataPoint.create = function create(properties) {\n                        return new HistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.bucketCounts != null && message.bucketCounts.length) {\n                            writer.uint32(/* id 6, wireType 2 =*/50).fork();\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                writer.fixed64(message.bucketCounts[i]);\n                            writer.ldelim();\n                        }\n                        if (message.explicitBounds != null && message.explicitBounds.length) {\n                            writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                writer.double(message.explicitBounds[i]);\n                            writer.ldelim();\n                        }\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.max);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified HistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.HistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IHistogramDataPoint} message HistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    HistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 9: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.bucketCounts && message.bucketCounts.length))\n                                        message.bucketCounts = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.bucketCounts.push(reader.fixed64());\n                                    } else\n                                        message.bucketCounts.push(reader.fixed64());\n                                    break;\n                                }\n                            case 7: {\n                                    if (!(message.explicitBounds && message.explicitBounds.length))\n                                        message.explicitBounds = [];\n                                    if ((tag & 7) === 2) {\n                                        var end2 = reader.uint32() + reader.pos;\n                                        while (reader.pos < end2)\n                                            message.explicitBounds.push(reader.double());\n                                    } else\n                                        message.explicitBounds.push(reader.double());\n                                    break;\n                                }\n                            case 8: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 12: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a HistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    HistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a HistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    HistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                            if (!Array.isArray(message.bucketCounts))\n                                return \"bucketCounts: array expected\";\n                            for (var i = 0; i < message.bucketCounts.length; ++i)\n                                if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                    return \"bucketCounts: integer|Long[] expected\";\n                        }\n                        if (message.explicitBounds != null && message.hasOwnProperty(\"explicitBounds\")) {\n                            if (!Array.isArray(message.explicitBounds))\n                                return \"explicitBounds: array expected\";\n                            for (var i = 0; i < message.explicitBounds.length; ++i)\n                                if (typeof message.explicitBounds[i] !== \"number\")\n                                    return \"explicitBounds: number[] expected\";\n                        }\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a HistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.HistogramDataPoint} HistogramDataPoint\n                     */\n                    HistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.HistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.HistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.bucketCounts) {\n                            if (!Array.isArray(object.bucketCounts))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.bucketCounts: array expected\");\n                            message.bucketCounts = [];\n                            for (var i = 0; i < object.bucketCounts.length; ++i)\n                                if ($util.Long)\n                                    (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = false;\n                                else if (typeof object.bucketCounts[i] === \"string\")\n                                    message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                else if (typeof object.bucketCounts[i] === \"number\")\n                                    message.bucketCounts[i] = object.bucketCounts[i];\n                                else if (typeof object.bucketCounts[i] === \"object\")\n                                    message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber();\n                        }\n                        if (object.explicitBounds) {\n                            if (!Array.isArray(object.explicitBounds))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.explicitBounds: array expected\");\n                            message.explicitBounds = [];\n                            for (var i = 0; i < object.explicitBounds.length; ++i)\n                                message.explicitBounds[i] = Number(object.explicitBounds[i]);\n                        }\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.HistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a HistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.HistogramDataPoint} message HistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    HistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.bucketCounts = [];\n                            object.explicitBounds = [];\n                            object.exemplars = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.bucketCounts && message.bucketCounts.length) {\n                            object.bucketCounts = [];\n                            for (var j = 0; j < message.bucketCounts.length; ++j)\n                                if (typeof message.bucketCounts[j] === \"number\")\n                                    object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                else\n                                    object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber() : message.bucketCounts[j];\n                        }\n                        if (message.explicitBounds && message.explicitBounds.length) {\n                            object.explicitBounds = [];\n                            for (var j = 0; j < message.explicitBounds.length; ++j)\n                                object.explicitBounds[j] = options.json && !isFinite(message.explicitBounds[j]) ? String(message.explicitBounds[j]) : message.explicitBounds[j];\n                        }\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this HistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    HistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for HistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.HistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    HistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.HistogramDataPoint\";\n                    };\n\n                    return HistogramDataPoint;\n                })();\n\n                v1.ExponentialHistogramDataPoint = (function() {\n\n                    /**\n                     * Properties of an ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExponentialHistogramDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] ExponentialHistogramDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] ExponentialHistogramDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] ExponentialHistogramDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] ExponentialHistogramDataPoint count\n                     * @property {number|null} [sum] ExponentialHistogramDataPoint sum\n                     * @property {number|null} [scale] ExponentialHistogramDataPoint scale\n                     * @property {number|Long|null} [zeroCount] ExponentialHistogramDataPoint zeroCount\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [positive] ExponentialHistogramDataPoint positive\n                     * @property {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null} [negative] ExponentialHistogramDataPoint negative\n                     * @property {number|null} [flags] ExponentialHistogramDataPoint flags\n                     * @property {Array.<opentelemetry.proto.metrics.v1.IExemplar>|null} [exemplars] ExponentialHistogramDataPoint exemplars\n                     * @property {number|null} [min] ExponentialHistogramDataPoint min\n                     * @property {number|null} [max] ExponentialHistogramDataPoint max\n                     * @property {number|null} [zeroThreshold] ExponentialHistogramDataPoint zeroThreshold\n                     */\n\n                    /**\n                     * Constructs a new ExponentialHistogramDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an ExponentialHistogramDataPoint.\n                     * @implements IExponentialHistogramDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     */\n                    function ExponentialHistogramDataPoint(properties) {\n                        this.attributes = [];\n                        this.exemplars = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ExponentialHistogramDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.count = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.sum = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint scale.\n                     * @member {number|null|undefined} scale\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.scale = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroCount.\n                     * @member {number|Long|null|undefined} zeroCount\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroCount = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint positive.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} positive\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.positive = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint negative.\n                     * @member {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets|null|undefined} negative\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.negative = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.flags = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint exemplars.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.IExemplar>} exemplars\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.exemplars = $util.emptyArray;\n\n                    /**\n                     * ExponentialHistogramDataPoint min.\n                     * @member {number|null|undefined} min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.min = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint max.\n                     * @member {number|null|undefined} max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.max = null;\n\n                    /**\n                     * ExponentialHistogramDataPoint zeroThreshold.\n                     * @member {number|null|undefined} zeroThreshold\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    ExponentialHistogramDataPoint.prototype.zeroThreshold = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * ExponentialHistogramDataPoint _sum.\n                     * @member {\"sum\"|undefined} _sum\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_sum\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"sum\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _min.\n                     * @member {\"min\"|undefined} _min\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_min\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"min\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * ExponentialHistogramDataPoint _max.\n                     * @member {\"max\"|undefined} _max\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     */\n                    Object.defineProperty(ExponentialHistogramDataPoint.prototype, \"_max\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"max\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new ExponentialHistogramDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint instance\n                     */\n                    ExponentialHistogramDataPoint.create = function create(properties) {\n                        return new ExponentialHistogramDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.scale != null && Object.hasOwnProperty.call(message, \"scale\"))\n                            writer.uint32(/* id 6, wireType 0 =*/48).sint32(message.scale);\n                        if (message.zeroCount != null && Object.hasOwnProperty.call(message, \"zeroCount\"))\n                            writer.uint32(/* id 7, wireType 1 =*/57).fixed64(message.zeroCount);\n                        if (message.positive != null && Object.hasOwnProperty.call(message, \"positive\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.positive, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n                        if (message.negative != null && Object.hasOwnProperty.call(message, \"negative\"))\n                            $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.encode(message.negative, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 10, wireType 0 =*/80).uint32(message.flags);\n                        if (message.exemplars != null && message.exemplars.length)\n                            for (var i = 0; i < message.exemplars.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.Exemplar.encode(message.exemplars[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n                        if (message.min != null && Object.hasOwnProperty.call(message, \"min\"))\n                            writer.uint32(/* id 12, wireType 1 =*/97).double(message.min);\n                        if (message.max != null && Object.hasOwnProperty.call(message, \"max\"))\n                            writer.uint32(/* id 13, wireType 1 =*/105).double(message.max);\n                        if (message.zeroThreshold != null && Object.hasOwnProperty.call(message, \"zeroThreshold\"))\n                            writer.uint32(/* id 14, wireType 1 =*/113).double(message.zeroThreshold);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ExponentialHistogramDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExponentialHistogramDataPoint} message ExponentialHistogramDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ExponentialHistogramDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.scale = reader.sint32();\n                                    break;\n                                }\n                            case 7: {\n                                    message.zeroCount = reader.fixed64();\n                                    break;\n                                }\n                            case 8: {\n                                    message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 9: {\n                                    message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 10: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            case 11: {\n                                    if (!(message.exemplars && message.exemplars.length))\n                                        message.exemplars = [];\n                                    message.exemplars.push($root.opentelemetry.proto.metrics.v1.Exemplar.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 12: {\n                                    message.min = reader.double();\n                                    break;\n                                }\n                            case 13: {\n                                    message.max = reader.double();\n                                    break;\n                                }\n                            case 14: {\n                                    message.zeroThreshold = reader.double();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an ExponentialHistogramDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ExponentialHistogramDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an ExponentialHistogramDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ExponentialHistogramDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            properties._sum = 1;\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            if (!$util.isInteger(message.scale))\n                                return \"scale: integer expected\";\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (!$util.isInteger(message.zeroCount) && !(message.zeroCount && $util.isInteger(message.zeroCount.low) && $util.isInteger(message.zeroCount.high)))\n                                return \"zeroCount: integer|Long expected\";\n                        if (message.positive != null && message.hasOwnProperty(\"positive\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.positive);\n                            if (error)\n                                return \"positive.\" + error;\n                        }\n                        if (message.negative != null && message.hasOwnProperty(\"negative\")) {\n                            var error = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify(message.negative);\n                            if (error)\n                                return \"negative.\" + error;\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.exemplars != null && message.hasOwnProperty(\"exemplars\")) {\n                            if (!Array.isArray(message.exemplars))\n                                return \"exemplars: array expected\";\n                            for (var i = 0; i < message.exemplars.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.Exemplar.verify(message.exemplars[i]);\n                                if (error)\n                                    return \"exemplars.\" + error;\n                            }\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            properties._min = 1;\n                            if (typeof message.min !== \"number\")\n                                return \"min: number expected\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            properties._max = 1;\n                            if (typeof message.max !== \"number\")\n                                return \"max: number expected\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            if (typeof message.zeroThreshold !== \"number\")\n                                return \"zeroThreshold: number expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an ExponentialHistogramDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} ExponentialHistogramDataPoint\n                     */\n                    ExponentialHistogramDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.scale != null)\n                            message.scale = object.scale | 0;\n                        if (object.zeroCount != null)\n                            if ($util.Long)\n                                (message.zeroCount = $util.Long.fromValue(object.zeroCount)).unsigned = false;\n                            else if (typeof object.zeroCount === \"string\")\n                                message.zeroCount = parseInt(object.zeroCount, 10);\n                            else if (typeof object.zeroCount === \"number\")\n                                message.zeroCount = object.zeroCount;\n                            else if (typeof object.zeroCount === \"object\")\n                                message.zeroCount = new $util.LongBits(object.zeroCount.low >>> 0, object.zeroCount.high >>> 0).toNumber();\n                        if (object.positive != null) {\n                            if (typeof object.positive !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.positive: object expected\");\n                            message.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.positive);\n                        }\n                        if (object.negative != null) {\n                            if (typeof object.negative !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.negative: object expected\");\n                            message.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.fromObject(object.negative);\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.exemplars) {\n                            if (!Array.isArray(object.exemplars))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: array expected\");\n                            message.exemplars = [];\n                            for (var i = 0; i < object.exemplars.length; ++i) {\n                                if (typeof object.exemplars[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.exemplars: object expected\");\n                                message.exemplars[i] = $root.opentelemetry.proto.metrics.v1.Exemplar.fromObject(object.exemplars[i]);\n                            }\n                        }\n                        if (object.min != null)\n                            message.min = Number(object.min);\n                        if (object.max != null)\n                            message.max = Number(object.max);\n                        if (object.zeroThreshold != null)\n                            message.zeroThreshold = Number(object.zeroThreshold);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an ExponentialHistogramDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint} message ExponentialHistogramDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ExponentialHistogramDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.attributes = [];\n                            object.exemplars = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.scale = 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.zeroCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.zeroCount = options.longs === String ? \"0\" : 0;\n                            object.positive = null;\n                            object.negative = null;\n                            object.flags = 0;\n                            object.zeroThreshold = 0;\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\")) {\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                            if (options.oneofs)\n                                object._sum = \"sum\";\n                        }\n                        if (message.scale != null && message.hasOwnProperty(\"scale\"))\n                            object.scale = message.scale;\n                        if (message.zeroCount != null && message.hasOwnProperty(\"zeroCount\"))\n                            if (typeof message.zeroCount === \"number\")\n                                object.zeroCount = options.longs === String ? String(message.zeroCount) : message.zeroCount;\n                            else\n                                object.zeroCount = options.longs === String ? $util.Long.prototype.toString.call(message.zeroCount) : options.longs === Number ? new $util.LongBits(message.zeroCount.low >>> 0, message.zeroCount.high >>> 0).toNumber() : message.zeroCount;\n                        if (message.positive != null && message.hasOwnProperty(\"positive\"))\n                            object.positive = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.positive, options);\n                        if (message.negative != null && message.hasOwnProperty(\"negative\"))\n                            object.negative = $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.toObject(message.negative, options);\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.exemplars && message.exemplars.length) {\n                            object.exemplars = [];\n                            for (var j = 0; j < message.exemplars.length; ++j)\n                                object.exemplars[j] = $root.opentelemetry.proto.metrics.v1.Exemplar.toObject(message.exemplars[j], options);\n                        }\n                        if (message.min != null && message.hasOwnProperty(\"min\")) {\n                            object.min = options.json && !isFinite(message.min) ? String(message.min) : message.min;\n                            if (options.oneofs)\n                                object._min = \"min\";\n                        }\n                        if (message.max != null && message.hasOwnProperty(\"max\")) {\n                            object.max = options.json && !isFinite(message.max) ? String(message.max) : message.max;\n                            if (options.oneofs)\n                                object._max = \"max\";\n                        }\n                        if (message.zeroThreshold != null && message.hasOwnProperty(\"zeroThreshold\"))\n                            object.zeroThreshold = options.json && !isFinite(message.zeroThreshold) ? String(message.zeroThreshold) : message.zeroThreshold;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ExponentialHistogramDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ExponentialHistogramDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ExponentialHistogramDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ExponentialHistogramDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\";\n                    };\n\n                    ExponentialHistogramDataPoint.Buckets = (function() {\n\n                        /**\n                         * Properties of a Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @interface IBuckets\n                         * @property {number|null} [offset] Buckets offset\n                         * @property {Array.<number|Long>|null} [bucketCounts] Buckets bucketCounts\n                         */\n\n                        /**\n                         * Constructs a new Buckets.\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint\n                         * @classdesc Represents a Buckets.\n                         * @implements IBuckets\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         */\n                        function Buckets(properties) {\n                            this.bucketCounts = [];\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * Buckets offset.\n                         * @member {number|null|undefined} offset\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.offset = null;\n\n                        /**\n                         * Buckets bucketCounts.\n                         * @member {Array.<number|Long>} bucketCounts\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         */\n                        Buckets.prototype.bucketCounts = $util.emptyArray;\n\n                        /**\n                         * Creates a new Buckets instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets instance\n                         */\n                        Buckets.create = function create(properties) {\n                            return new Buckets(properties);\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\"))\n                                writer.uint32(/* id 1, wireType 0 =*/8).sint32(message.offset);\n                            if (message.bucketCounts != null && message.bucketCounts.length) {\n                                writer.uint32(/* id 2, wireType 2 =*/18).fork();\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    writer.uint64(message.bucketCounts[i]);\n                                writer.ldelim();\n                            }\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified Buckets message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.IBuckets} message Buckets message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        Buckets.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.offset = reader.sint32();\n                                        break;\n                                    }\n                                case 2: {\n                                        if (!(message.bucketCounts && message.bucketCounts.length))\n                                            message.bucketCounts = [];\n                                        if ((tag & 7) === 2) {\n                                            var end2 = reader.uint32() + reader.pos;\n                                            while (reader.pos < end2)\n                                                message.bucketCounts.push(reader.uint64());\n                                        } else\n                                            message.bucketCounts.push(reader.uint64());\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a Buckets message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        Buckets.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a Buckets message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        Buckets.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                if (!$util.isInteger(message.offset))\n                                    return \"offset: integer expected\";\n                            if (message.bucketCounts != null && message.hasOwnProperty(\"bucketCounts\")) {\n                                if (!Array.isArray(message.bucketCounts))\n                                    return \"bucketCounts: array expected\";\n                                for (var i = 0; i < message.bucketCounts.length; ++i)\n                                    if (!$util.isInteger(message.bucketCounts[i]) && !(message.bucketCounts[i] && $util.isInteger(message.bucketCounts[i].low) && $util.isInteger(message.bucketCounts[i].high)))\n                                        return \"bucketCounts: integer|Long[] expected\";\n                            }\n                            return null;\n                        };\n\n                        /**\n                         * Creates a Buckets message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} Buckets\n                         */\n                        Buckets.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets();\n                            if (object.offset != null)\n                                message.offset = object.offset | 0;\n                            if (object.bucketCounts) {\n                                if (!Array.isArray(object.bucketCounts))\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets.bucketCounts: array expected\");\n                                message.bucketCounts = [];\n                                for (var i = 0; i < object.bucketCounts.length; ++i)\n                                    if ($util.Long)\n                                        (message.bucketCounts[i] = $util.Long.fromValue(object.bucketCounts[i])).unsigned = true;\n                                    else if (typeof object.bucketCounts[i] === \"string\")\n                                        message.bucketCounts[i] = parseInt(object.bucketCounts[i], 10);\n                                    else if (typeof object.bucketCounts[i] === \"number\")\n                                        message.bucketCounts[i] = object.bucketCounts[i];\n                                    else if (typeof object.bucketCounts[i] === \"object\")\n                                        message.bucketCounts[i] = new $util.LongBits(object.bucketCounts[i].low >>> 0, object.bucketCounts[i].high >>> 0).toNumber(true);\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a Buckets message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets} message Buckets\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        Buckets.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.arrays || options.defaults)\n                                object.bucketCounts = [];\n                            if (options.defaults)\n                                object.offset = 0;\n                            if (message.offset != null && message.hasOwnProperty(\"offset\"))\n                                object.offset = message.offset;\n                            if (message.bucketCounts && message.bucketCounts.length) {\n                                object.bucketCounts = [];\n                                for (var j = 0; j < message.bucketCounts.length; ++j)\n                                    if (typeof message.bucketCounts[j] === \"number\")\n                                        object.bucketCounts[j] = options.longs === String ? String(message.bucketCounts[j]) : message.bucketCounts[j];\n                                    else\n                                        object.bucketCounts[j] = options.longs === String ? $util.Long.prototype.toString.call(message.bucketCounts[j]) : options.longs === Number ? new $util.LongBits(message.bucketCounts[j].low >>> 0, message.bucketCounts[j].high >>> 0).toNumber(true) : message.bucketCounts[j];\n                            }\n                            return object;\n                        };\n\n                        /**\n                         * Converts this Buckets to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        Buckets.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for Buckets\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        Buckets.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.ExponentialHistogramDataPoint.Buckets\";\n                        };\n\n                        return Buckets;\n                    })();\n\n                    return ExponentialHistogramDataPoint;\n                })();\n\n                v1.SummaryDataPoint = (function() {\n\n                    /**\n                     * Properties of a SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface ISummaryDataPoint\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] SummaryDataPoint attributes\n                     * @property {number|Long|null} [startTimeUnixNano] SummaryDataPoint startTimeUnixNano\n                     * @property {number|Long|null} [timeUnixNano] SummaryDataPoint timeUnixNano\n                     * @property {number|Long|null} [count] SummaryDataPoint count\n                     * @property {number|null} [sum] SummaryDataPoint sum\n                     * @property {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>|null} [quantileValues] SummaryDataPoint quantileValues\n                     * @property {number|null} [flags] SummaryDataPoint flags\n                     */\n\n                    /**\n                     * Constructs a new SummaryDataPoint.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents a SummaryDataPoint.\n                     * @implements ISummaryDataPoint\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     */\n                    function SummaryDataPoint(properties) {\n                        this.attributes = [];\n                        this.quantileValues = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * SummaryDataPoint attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint startTimeUnixNano.\n                     * @member {number|Long|null|undefined} startTimeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.startTimeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.timeUnixNano = null;\n\n                    /**\n                     * SummaryDataPoint count.\n                     * @member {number|Long|null|undefined} count\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.count = null;\n\n                    /**\n                     * SummaryDataPoint sum.\n                     * @member {number|null|undefined} sum\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.sum = null;\n\n                    /**\n                     * SummaryDataPoint quantileValues.\n                     * @member {Array.<opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile>} quantileValues\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.quantileValues = $util.emptyArray;\n\n                    /**\n                     * SummaryDataPoint flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     */\n                    SummaryDataPoint.prototype.flags = null;\n\n                    /**\n                     * Creates a new SummaryDataPoint instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint instance\n                     */\n                    SummaryDataPoint.create = function create(properties) {\n                        return new SummaryDataPoint(properties);\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.startTimeUnixNano != null && Object.hasOwnProperty.call(message, \"startTimeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.startTimeUnixNano);\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.timeUnixNano);\n                        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n                            writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.count);\n                        if (message.sum != null && Object.hasOwnProperty.call(message, \"sum\"))\n                            writer.uint32(/* id 5, wireType 1 =*/41).double(message.sum);\n                        if (message.quantileValues != null && message.quantileValues.length)\n                            for (var i = 0; i < message.quantileValues.length; ++i)\n                                $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.encode(message.quantileValues[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.flags);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified SummaryDataPoint message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.ISummaryDataPoint} message SummaryDataPoint message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    SummaryDataPoint.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.startTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.count = reader.fixed64();\n                                    break;\n                                }\n                            case 5: {\n                                    message.sum = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.quantileValues && message.quantileValues.length))\n                                        message.quantileValues = [];\n                                    message.quantileValues.push($root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.uint32();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a SummaryDataPoint message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    SummaryDataPoint.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a SummaryDataPoint message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    SummaryDataPoint.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (!$util.isInteger(message.startTimeUnixNano) && !(message.startTimeUnixNano && $util.isInteger(message.startTimeUnixNano.low) && $util.isInteger(message.startTimeUnixNano.high)))\n                                return \"startTimeUnixNano: integer|Long expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                                return \"count: integer|Long expected\";\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            if (typeof message.sum !== \"number\")\n                                return \"sum: number expected\";\n                        if (message.quantileValues != null && message.hasOwnProperty(\"quantileValues\")) {\n                            if (!Array.isArray(message.quantileValues))\n                                return \"quantileValues: array expected\";\n                            for (var i = 0; i < message.quantileValues.length; ++i) {\n                                var error = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify(message.quantileValues[i]);\n                                if (error)\n                                    return \"quantileValues.\" + error;\n                            }\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a SummaryDataPoint message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint} SummaryDataPoint\n                     */\n                    SummaryDataPoint.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint();\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.startTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.startTimeUnixNano = $util.Long.fromValue(object.startTimeUnixNano)).unsigned = false;\n                            else if (typeof object.startTimeUnixNano === \"string\")\n                                message.startTimeUnixNano = parseInt(object.startTimeUnixNano, 10);\n                            else if (typeof object.startTimeUnixNano === \"number\")\n                                message.startTimeUnixNano = object.startTimeUnixNano;\n                            else if (typeof object.startTimeUnixNano === \"object\")\n                                message.startTimeUnixNano = new $util.LongBits(object.startTimeUnixNano.low >>> 0, object.startTimeUnixNano.high >>> 0).toNumber();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.count != null)\n                            if ($util.Long)\n                                (message.count = $util.Long.fromValue(object.count)).unsigned = false;\n                            else if (typeof object.count === \"string\")\n                                message.count = parseInt(object.count, 10);\n                            else if (typeof object.count === \"number\")\n                                message.count = object.count;\n                            else if (typeof object.count === \"object\")\n                                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();\n                        if (object.sum != null)\n                            message.sum = Number(object.sum);\n                        if (object.quantileValues) {\n                            if (!Array.isArray(object.quantileValues))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: array expected\");\n                            message.quantileValues = [];\n                            for (var i = 0; i < object.quantileValues.length; ++i) {\n                                if (typeof object.quantileValues[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.SummaryDataPoint.quantileValues: object expected\");\n                                message.quantileValues[i] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.fromObject(object.quantileValues[i]);\n                            }\n                        }\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a SummaryDataPoint message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint} message SummaryDataPoint\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    SummaryDataPoint.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults) {\n                            object.quantileValues = [];\n                            object.attributes = [];\n                        }\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.startTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.startTimeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.count = options.longs === String ? \"0\" : 0;\n                            object.sum = 0;\n                            object.flags = 0;\n                        }\n                        if (message.startTimeUnixNano != null && message.hasOwnProperty(\"startTimeUnixNano\"))\n                            if (typeof message.startTimeUnixNano === \"number\")\n                                object.startTimeUnixNano = options.longs === String ? String(message.startTimeUnixNano) : message.startTimeUnixNano;\n                            else\n                                object.startTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.startTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.startTimeUnixNano.low >>> 0, message.startTimeUnixNano.high >>> 0).toNumber() : message.startTimeUnixNano;\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.count != null && message.hasOwnProperty(\"count\"))\n                            if (typeof message.count === \"number\")\n                                object.count = options.longs === String ? String(message.count) : message.count;\n                            else\n                                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;\n                        if (message.sum != null && message.hasOwnProperty(\"sum\"))\n                            object.sum = options.json && !isFinite(message.sum) ? String(message.sum) : message.sum;\n                        if (message.quantileValues && message.quantileValues.length) {\n                            object.quantileValues = [];\n                            for (var j = 0; j < message.quantileValues.length; ++j)\n                                object.quantileValues[j] = $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.toObject(message.quantileValues[j], options);\n                        }\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this SummaryDataPoint to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    SummaryDataPoint.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for SummaryDataPoint\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    SummaryDataPoint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint\";\n                    };\n\n                    SummaryDataPoint.ValueAtQuantile = (function() {\n\n                        /**\n                         * Properties of a ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @interface IValueAtQuantile\n                         * @property {number|null} [quantile] ValueAtQuantile quantile\n                         * @property {number|null} [value] ValueAtQuantile value\n                         */\n\n                        /**\n                         * Constructs a new ValueAtQuantile.\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint\n                         * @classdesc Represents a ValueAtQuantile.\n                         * @implements IValueAtQuantile\n                         * @constructor\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         */\n                        function ValueAtQuantile(properties) {\n                            if (properties)\n                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                    if (properties[keys[i]] != null)\n                                        this[keys[i]] = properties[keys[i]];\n                        }\n\n                        /**\n                         * ValueAtQuantile quantile.\n                         * @member {number|null|undefined} quantile\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.quantile = null;\n\n                        /**\n                         * ValueAtQuantile value.\n                         * @member {number|null|undefined} value\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         */\n                        ValueAtQuantile.prototype.value = null;\n\n                        /**\n                         * Creates a new ValueAtQuantile instance using the specified properties.\n                         * @function create\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile=} [properties] Properties to set\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile instance\n                         */\n                        ValueAtQuantile.create = function create(properties) {\n                            return new ValueAtQuantile(properties);\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encode = function encode(message, writer) {\n                            if (!writer)\n                                writer = $Writer.create();\n                            if (message.quantile != null && Object.hasOwnProperty.call(message, \"quantile\"))\n                                writer.uint32(/* id 1, wireType 1 =*/9).double(message.quantile);\n                            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                                writer.uint32(/* id 2, wireType 1 =*/17).double(message.value);\n                            return writer;\n                        };\n\n                        /**\n                         * Encodes the specified ValueAtQuantile message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile.verify|verify} messages.\n                         * @function encodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.IValueAtQuantile} message ValueAtQuantile message or plain object to encode\n                         * @param {$protobuf.Writer} [writer] Writer to encode to\n                         * @returns {$protobuf.Writer} Writer\n                         */\n                        ValueAtQuantile.encodeDelimited = function encodeDelimited(message, writer) {\n                            return this.encode(message, writer).ldelim();\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer.\n                         * @function decode\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @param {number} [length] Message length if known beforehand\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decode = function decode(reader, length) {\n                            if (!(reader instanceof $Reader))\n                                reader = $Reader.create(reader);\n                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            while (reader.pos < end) {\n                                var tag = reader.uint32();\n                                switch (tag >>> 3) {\n                                case 1: {\n                                        message.quantile = reader.double();\n                                        break;\n                                    }\n                                case 2: {\n                                        message.value = reader.double();\n                                        break;\n                                    }\n                                default:\n                                    reader.skipType(tag & 7);\n                                    break;\n                                }\n                            }\n                            return message;\n                        };\n\n                        /**\n                         * Decodes a ValueAtQuantile message from the specified reader or buffer, length delimited.\n                         * @function decodeDelimited\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         * @throws {Error} If the payload is not a reader or valid buffer\n                         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                         */\n                        ValueAtQuantile.decodeDelimited = function decodeDelimited(reader) {\n                            if (!(reader instanceof $Reader))\n                                reader = new $Reader(reader);\n                            return this.decode(reader, reader.uint32());\n                        };\n\n                        /**\n                         * Verifies a ValueAtQuantile message.\n                         * @function verify\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} message Plain object to verify\n                         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                         */\n                        ValueAtQuantile.verify = function verify(message) {\n                            if (typeof message !== \"object\" || message === null)\n                                return \"object expected\";\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                if (typeof message.quantile !== \"number\")\n                                    return \"quantile: number expected\";\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                if (typeof message.value !== \"number\")\n                                    return \"value: number expected\";\n                            return null;\n                        };\n\n                        /**\n                         * Creates a ValueAtQuantile message from a plain object. Also converts values to their respective internal types.\n                         * @function fromObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {Object.<string,*>} object Plain object\n                         * @returns {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} ValueAtQuantile\n                         */\n                        ValueAtQuantile.fromObject = function fromObject(object) {\n                            if (object instanceof $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile)\n                                return object;\n                            var message = new $root.opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile();\n                            if (object.quantile != null)\n                                message.quantile = Number(object.quantile);\n                            if (object.value != null)\n                                message.value = Number(object.value);\n                            return message;\n                        };\n\n                        /**\n                         * Creates a plain object from a ValueAtQuantile message. Also converts values to other types if specified.\n                         * @function toObject\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile} message ValueAtQuantile\n                         * @param {$protobuf.IConversionOptions} [options] Conversion options\n                         * @returns {Object.<string,*>} Plain object\n                         */\n                        ValueAtQuantile.toObject = function toObject(message, options) {\n                            if (!options)\n                                options = {};\n                            var object = {};\n                            if (options.defaults) {\n                                object.quantile = 0;\n                                object.value = 0;\n                            }\n                            if (message.quantile != null && message.hasOwnProperty(\"quantile\"))\n                                object.quantile = options.json && !isFinite(message.quantile) ? String(message.quantile) : message.quantile;\n                            if (message.value != null && message.hasOwnProperty(\"value\"))\n                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;\n                            return object;\n                        };\n\n                        /**\n                         * Converts this ValueAtQuantile to JSON.\n                         * @function toJSON\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @instance\n                         * @returns {Object.<string,*>} JSON object\n                         */\n                        ValueAtQuantile.prototype.toJSON = function toJSON() {\n                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                        };\n\n                        /**\n                         * Gets the default type url for ValueAtQuantile\n                         * @function getTypeUrl\n                         * @memberof opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\n                         * @static\n                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                         * @returns {string} The default type url\n                         */\n                        ValueAtQuantile.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                            if (typeUrlPrefix === undefined) {\n                                typeUrlPrefix = \"type.googleapis.com\";\n                            }\n                            return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.SummaryDataPoint.ValueAtQuantile\";\n                        };\n\n                        return ValueAtQuantile;\n                    })();\n\n                    return SummaryDataPoint;\n                })();\n\n                v1.Exemplar = (function() {\n\n                    /**\n                     * Properties of an Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @interface IExemplar\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [filteredAttributes] Exemplar filteredAttributes\n                     * @property {number|Long|null} [timeUnixNano] Exemplar timeUnixNano\n                     * @property {number|null} [asDouble] Exemplar asDouble\n                     * @property {number|Long|null} [asInt] Exemplar asInt\n                     * @property {Uint8Array|null} [spanId] Exemplar spanId\n                     * @property {Uint8Array|null} [traceId] Exemplar traceId\n                     */\n\n                    /**\n                     * Constructs a new Exemplar.\n                     * @memberof opentelemetry.proto.metrics.v1\n                     * @classdesc Represents an Exemplar.\n                     * @implements IExemplar\n                     * @constructor\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     */\n                    function Exemplar(properties) {\n                        this.filteredAttributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * Exemplar filteredAttributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} filteredAttributes\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.filteredAttributes = $util.emptyArray;\n\n                    /**\n                     * Exemplar timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.timeUnixNano = null;\n\n                    /**\n                     * Exemplar asDouble.\n                     * @member {number|null|undefined} asDouble\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asDouble = null;\n\n                    /**\n                     * Exemplar asInt.\n                     * @member {number|Long|null|undefined} asInt\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.asInt = null;\n\n                    /**\n                     * Exemplar spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.spanId = null;\n\n                    /**\n                     * Exemplar traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Exemplar.prototype.traceId = null;\n\n                    // OneOf field names bound to virtual getters and setters\n                    var $oneOfFields;\n\n                    /**\n                     * Exemplar value.\n                     * @member {\"asDouble\"|\"asInt\"|undefined} value\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     */\n                    Object.defineProperty(Exemplar.prototype, \"value\", {\n                        get: $util.oneOfGetter($oneOfFields = [\"asDouble\", \"asInt\"]),\n                        set: $util.oneOfSetter($oneOfFields)\n                    });\n\n                    /**\n                     * Creates a new Exemplar instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar instance\n                     */\n                    Exemplar.create = function create(properties) {\n                        return new Exemplar(properties);\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.timeUnixNano);\n                        if (message.asDouble != null && Object.hasOwnProperty.call(message, \"asDouble\"))\n                            writer.uint32(/* id 3, wireType 1 =*/25).double(message.asDouble);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.spanId);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.traceId);\n                        if (message.asInt != null && Object.hasOwnProperty.call(message, \"asInt\"))\n                            writer.uint32(/* id 6, wireType 1 =*/49).sfixed64(message.asInt);\n                        if (message.filteredAttributes != null && message.filteredAttributes.length)\n                            for (var i = 0; i < message.filteredAttributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.filteredAttributes[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified Exemplar message, length delimited. Does not implicitly {@link opentelemetry.proto.metrics.v1.Exemplar.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.IExemplar} message Exemplar message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    Exemplar.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 7: {\n                                    if (!(message.filteredAttributes && message.filteredAttributes.length))\n                                        message.filteredAttributes = [];\n                                    message.filteredAttributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 2: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 3: {\n                                    message.asDouble = reader.double();\n                                    break;\n                                }\n                            case 6: {\n                                    message.asInt = reader.sfixed64();\n                                    break;\n                                }\n                            case 4: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            case 5: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes an Exemplar message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    Exemplar.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies an Exemplar message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    Exemplar.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        var properties = {};\n                        if (message.filteredAttributes != null && message.hasOwnProperty(\"filteredAttributes\")) {\n                            if (!Array.isArray(message.filteredAttributes))\n                                return \"filteredAttributes: array expected\";\n                            for (var i = 0; i < message.filteredAttributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.filteredAttributes[i]);\n                                if (error)\n                                    return \"filteredAttributes.\" + error;\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            properties.value = 1;\n                            if (typeof message.asDouble !== \"number\")\n                                return \"asDouble: number expected\";\n                        }\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (properties.value === 1)\n                                return \"value: multiple values\";\n                            properties.value = 1;\n                            if (!$util.isInteger(message.asInt) && !(message.asInt && $util.isInteger(message.asInt.low) && $util.isInteger(message.asInt.high)))\n                                return \"asInt: integer|Long expected\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates an Exemplar message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.metrics.v1.Exemplar} Exemplar\n                     */\n                    Exemplar.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.metrics.v1.Exemplar)\n                            return object;\n                        var message = new $root.opentelemetry.proto.metrics.v1.Exemplar();\n                        if (object.filteredAttributes) {\n                            if (!Array.isArray(object.filteredAttributes))\n                                throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: array expected\");\n                            message.filteredAttributes = [];\n                            for (var i = 0; i < object.filteredAttributes.length; ++i) {\n                                if (typeof object.filteredAttributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.metrics.v1.Exemplar.filteredAttributes: object expected\");\n                                message.filteredAttributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.filteredAttributes[i]);\n                            }\n                        }\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.asDouble != null)\n                            message.asDouble = Number(object.asDouble);\n                        if (object.asInt != null)\n                            if ($util.Long)\n                                (message.asInt = $util.Long.fromValue(object.asInt)).unsigned = false;\n                            else if (typeof object.asInt === \"string\")\n                                message.asInt = parseInt(object.asInt, 10);\n                            else if (typeof object.asInt === \"number\")\n                                message.asInt = object.asInt;\n                            else if (typeof object.asInt === \"object\")\n                                message.asInt = new $util.LongBits(object.asInt.low >>> 0, object.asInt.high >>> 0).toNumber();\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from an Exemplar message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {opentelemetry.proto.metrics.v1.Exemplar} message Exemplar\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    Exemplar.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.filteredAttributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.asDouble != null && message.hasOwnProperty(\"asDouble\")) {\n                            object.asDouble = options.json && !isFinite(message.asDouble) ? String(message.asDouble) : message.asDouble;\n                            if (options.oneofs)\n                                object.value = \"asDouble\";\n                        }\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.asInt != null && message.hasOwnProperty(\"asInt\")) {\n                            if (typeof message.asInt === \"number\")\n                                object.asInt = options.longs === String ? String(message.asInt) : message.asInt;\n                            else\n                                object.asInt = options.longs === String ? $util.Long.prototype.toString.call(message.asInt) : options.longs === Number ? new $util.LongBits(message.asInt.low >>> 0, message.asInt.high >>> 0).toNumber() : message.asInt;\n                            if (options.oneofs)\n                                object.value = \"asInt\";\n                        }\n                        if (message.filteredAttributes && message.filteredAttributes.length) {\n                            object.filteredAttributes = [];\n                            for (var j = 0; j < message.filteredAttributes.length; ++j)\n                                object.filteredAttributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.filteredAttributes[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this Exemplar to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    Exemplar.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for Exemplar\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.metrics.v1.Exemplar\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    Exemplar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.metrics.v1.Exemplar\";\n                    };\n\n                    return Exemplar;\n                })();\n\n                return v1;\n            })();\n\n            return metrics;\n        })();\n\n        proto.logs = (function() {\n\n            /**\n             * Namespace logs.\n             * @memberof opentelemetry.proto\n             * @namespace\n             */\n            var logs = {};\n\n            logs.v1 = (function() {\n\n                /**\n                 * Namespace v1.\n                 * @memberof opentelemetry.proto.logs\n                 * @namespace\n                 */\n                var v1 = {};\n\n                v1.LogsData = (function() {\n\n                    /**\n                     * Properties of a LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogsData\n                     * @property {Array.<opentelemetry.proto.logs.v1.IResourceLogs>|null} [resourceLogs] LogsData resourceLogs\n                     */\n\n                    /**\n                     * Constructs a new LogsData.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogsData.\n                     * @implements ILogsData\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     */\n                    function LogsData(properties) {\n                        this.resourceLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogsData resourceLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IResourceLogs>} resourceLogs\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     */\n                    LogsData.prototype.resourceLogs = $util.emptyArray;\n\n                    /**\n                     * Creates a new LogsData instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData instance\n                     */\n                    LogsData.create = function create(properties) {\n                        return new LogsData(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resourceLogs != null && message.resourceLogs.length)\n                            for (var i = 0; i < message.resourceLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ResourceLogs.encode(message.resourceLogs[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogsData message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogsData.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogsData} message LogsData message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogsData.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    if (!(message.resourceLogs && message.resourceLogs.length))\n                                        message.resourceLogs = [];\n                                    message.resourceLogs.push($root.opentelemetry.proto.logs.v1.ResourceLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogsData message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogsData.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogsData message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogsData.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resourceLogs != null && message.hasOwnProperty(\"resourceLogs\")) {\n                            if (!Array.isArray(message.resourceLogs))\n                                return \"resourceLogs: array expected\";\n                            for (var i = 0; i < message.resourceLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ResourceLogs.verify(message.resourceLogs[i]);\n                                if (error)\n                                    return \"resourceLogs.\" + error;\n                            }\n                        }\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogsData message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogsData} LogsData\n                     */\n                    LogsData.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogsData)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogsData();\n                        if (object.resourceLogs) {\n                            if (!Array.isArray(object.resourceLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: array expected\");\n                            message.resourceLogs = [];\n                            for (var i = 0; i < object.resourceLogs.length; ++i) {\n                                if (typeof object.resourceLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogsData.resourceLogs: object expected\");\n                                message.resourceLogs[i] = $root.opentelemetry.proto.logs.v1.ResourceLogs.fromObject(object.resourceLogs[i]);\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogsData message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogsData} message LogsData\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogsData.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.resourceLogs = [];\n                        if (message.resourceLogs && message.resourceLogs.length) {\n                            object.resourceLogs = [];\n                            for (var j = 0; j < message.resourceLogs.length; ++j)\n                                object.resourceLogs[j] = $root.opentelemetry.proto.logs.v1.ResourceLogs.toObject(message.resourceLogs[j], options);\n                        }\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogsData to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogsData.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogsData\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogsData\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogsData.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogsData\";\n                    };\n\n                    return LogsData;\n                })();\n\n                v1.ResourceLogs = (function() {\n\n                    /**\n                     * Properties of a ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IResourceLogs\n                     * @property {opentelemetry.proto.resource.v1.IResource|null} [resource] ResourceLogs resource\n                     * @property {Array.<opentelemetry.proto.logs.v1.IScopeLogs>|null} [scopeLogs] ResourceLogs scopeLogs\n                     * @property {string|null} [schemaUrl] ResourceLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ResourceLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ResourceLogs.\n                     * @implements IResourceLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     */\n                    function ResourceLogs(properties) {\n                        this.scopeLogs = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ResourceLogs resource.\n                     * @member {opentelemetry.proto.resource.v1.IResource|null|undefined} resource\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.resource = null;\n\n                    /**\n                     * ResourceLogs scopeLogs.\n                     * @member {Array.<opentelemetry.proto.logs.v1.IScopeLogs>} scopeLogs\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.scopeLogs = $util.emptyArray;\n\n                    /**\n                     * ResourceLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     */\n                    ResourceLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ResourceLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs instance\n                     */\n                    ResourceLogs.create = function create(properties) {\n                        return new ResourceLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.resource != null && Object.hasOwnProperty.call(message, \"resource\"))\n                            $root.opentelemetry.proto.resource.v1.Resource.encode(message.resource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.scopeLogs != null && message.scopeLogs.length)\n                            for (var i = 0; i < message.scopeLogs.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.ScopeLogs.encode(message.scopeLogs[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ResourceLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ResourceLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IResourceLogs} message ResourceLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ResourceLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.resource = $root.opentelemetry.proto.resource.v1.Resource.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.scopeLogs && message.scopeLogs.length))\n                                        message.scopeLogs = [];\n                                    message.scopeLogs.push($root.opentelemetry.proto.logs.v1.ScopeLogs.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ResourceLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ResourceLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ResourceLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ResourceLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.resource != null && message.hasOwnProperty(\"resource\")) {\n                            var error = $root.opentelemetry.proto.resource.v1.Resource.verify(message.resource);\n                            if (error)\n                                return \"resource.\" + error;\n                        }\n                        if (message.scopeLogs != null && message.hasOwnProperty(\"scopeLogs\")) {\n                            if (!Array.isArray(message.scopeLogs))\n                                return \"scopeLogs: array expected\";\n                            for (var i = 0; i < message.scopeLogs.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.ScopeLogs.verify(message.scopeLogs[i]);\n                                if (error)\n                                    return \"scopeLogs.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ResourceLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ResourceLogs} ResourceLogs\n                     */\n                    ResourceLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ResourceLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ResourceLogs();\n                        if (object.resource != null) {\n                            if (typeof object.resource !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.resource: object expected\");\n                            message.resource = $root.opentelemetry.proto.resource.v1.Resource.fromObject(object.resource);\n                        }\n                        if (object.scopeLogs) {\n                            if (!Array.isArray(object.scopeLogs))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: array expected\");\n                            message.scopeLogs = [];\n                            for (var i = 0; i < object.scopeLogs.length; ++i) {\n                                if (typeof object.scopeLogs[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ResourceLogs.scopeLogs: object expected\");\n                                message.scopeLogs[i] = $root.opentelemetry.proto.logs.v1.ScopeLogs.fromObject(object.scopeLogs[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ResourceLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ResourceLogs} message ResourceLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ResourceLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.scopeLogs = [];\n                        if (options.defaults) {\n                            object.resource = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.resource != null && message.hasOwnProperty(\"resource\"))\n                            object.resource = $root.opentelemetry.proto.resource.v1.Resource.toObject(message.resource, options);\n                        if (message.scopeLogs && message.scopeLogs.length) {\n                            object.scopeLogs = [];\n                            for (var j = 0; j < message.scopeLogs.length; ++j)\n                                object.scopeLogs[j] = $root.opentelemetry.proto.logs.v1.ScopeLogs.toObject(message.scopeLogs[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ResourceLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ResourceLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ResourceLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ResourceLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ResourceLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ResourceLogs\";\n                    };\n\n                    return ResourceLogs;\n                })();\n\n                v1.ScopeLogs = (function() {\n\n                    /**\n                     * Properties of a ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface IScopeLogs\n                     * @property {opentelemetry.proto.common.v1.IInstrumentationScope|null} [scope] ScopeLogs scope\n                     * @property {Array.<opentelemetry.proto.logs.v1.ILogRecord>|null} [logRecords] ScopeLogs logRecords\n                     * @property {string|null} [schemaUrl] ScopeLogs schemaUrl\n                     */\n\n                    /**\n                     * Constructs a new ScopeLogs.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a ScopeLogs.\n                     * @implements IScopeLogs\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     */\n                    function ScopeLogs(properties) {\n                        this.logRecords = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * ScopeLogs scope.\n                     * @member {opentelemetry.proto.common.v1.IInstrumentationScope|null|undefined} scope\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.scope = null;\n\n                    /**\n                     * ScopeLogs logRecords.\n                     * @member {Array.<opentelemetry.proto.logs.v1.ILogRecord>} logRecords\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.logRecords = $util.emptyArray;\n\n                    /**\n                     * ScopeLogs schemaUrl.\n                     * @member {string|null|undefined} schemaUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     */\n                    ScopeLogs.prototype.schemaUrl = null;\n\n                    /**\n                     * Creates a new ScopeLogs instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs instance\n                     */\n                    ScopeLogs.create = function create(properties) {\n                        return new ScopeLogs(properties);\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                            $root.opentelemetry.proto.common.v1.InstrumentationScope.encode(message.scope, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                        if (message.logRecords != null && message.logRecords.length)\n                            for (var i = 0; i < message.logRecords.length; ++i)\n                                $root.opentelemetry.proto.logs.v1.LogRecord.encode(message.logRecords[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                        if (message.schemaUrl != null && Object.hasOwnProperty.call(message, \"schemaUrl\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.schemaUrl);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified ScopeLogs message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.ScopeLogs.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.IScopeLogs} message ScopeLogs message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    ScopeLogs.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 2: {\n                                    if (!(message.logRecords && message.logRecords.length))\n                                        message.logRecords = [];\n                                    message.logRecords.push($root.opentelemetry.proto.logs.v1.LogRecord.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 3: {\n                                    message.schemaUrl = reader.string();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a ScopeLogs message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    ScopeLogs.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a ScopeLogs message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    ScopeLogs.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.scope != null && message.hasOwnProperty(\"scope\")) {\n                            var error = $root.opentelemetry.proto.common.v1.InstrumentationScope.verify(message.scope);\n                            if (error)\n                                return \"scope.\" + error;\n                        }\n                        if (message.logRecords != null && message.hasOwnProperty(\"logRecords\")) {\n                            if (!Array.isArray(message.logRecords))\n                                return \"logRecords: array expected\";\n                            for (var i = 0; i < message.logRecords.length; ++i) {\n                                var error = $root.opentelemetry.proto.logs.v1.LogRecord.verify(message.logRecords[i]);\n                                if (error)\n                                    return \"logRecords.\" + error;\n                            }\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            if (!$util.isString(message.schemaUrl))\n                                return \"schemaUrl: string expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a ScopeLogs message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.ScopeLogs} ScopeLogs\n                     */\n                    ScopeLogs.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.ScopeLogs)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.ScopeLogs();\n                        if (object.scope != null) {\n                            if (typeof object.scope !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.scope: object expected\");\n                            message.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.fromObject(object.scope);\n                        }\n                        if (object.logRecords) {\n                            if (!Array.isArray(object.logRecords))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: array expected\");\n                            message.logRecords = [];\n                            for (var i = 0; i < object.logRecords.length; ++i) {\n                                if (typeof object.logRecords[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.ScopeLogs.logRecords: object expected\");\n                                message.logRecords[i] = $root.opentelemetry.proto.logs.v1.LogRecord.fromObject(object.logRecords[i]);\n                            }\n                        }\n                        if (object.schemaUrl != null)\n                            message.schemaUrl = String(object.schemaUrl);\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a ScopeLogs message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ScopeLogs} message ScopeLogs\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    ScopeLogs.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.logRecords = [];\n                        if (options.defaults) {\n                            object.scope = null;\n                            object.schemaUrl = \"\";\n                        }\n                        if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                            object.scope = $root.opentelemetry.proto.common.v1.InstrumentationScope.toObject(message.scope, options);\n                        if (message.logRecords && message.logRecords.length) {\n                            object.logRecords = [];\n                            for (var j = 0; j < message.logRecords.length; ++j)\n                                object.logRecords[j] = $root.opentelemetry.proto.logs.v1.LogRecord.toObject(message.logRecords[j], options);\n                        }\n                        if (message.schemaUrl != null && message.hasOwnProperty(\"schemaUrl\"))\n                            object.schemaUrl = message.schemaUrl;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this ScopeLogs to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    ScopeLogs.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for ScopeLogs\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.ScopeLogs\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    ScopeLogs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.ScopeLogs\";\n                    };\n\n                    return ScopeLogs;\n                })();\n\n                /**\n                 * SeverityNumber enum.\n                 * @name opentelemetry.proto.logs.v1.SeverityNumber\n                 * @enum {number}\n                 * @property {number} SEVERITY_NUMBER_UNSPECIFIED=0 SEVERITY_NUMBER_UNSPECIFIED value\n                 * @property {number} SEVERITY_NUMBER_TRACE=1 SEVERITY_NUMBER_TRACE value\n                 * @property {number} SEVERITY_NUMBER_TRACE2=2 SEVERITY_NUMBER_TRACE2 value\n                 * @property {number} SEVERITY_NUMBER_TRACE3=3 SEVERITY_NUMBER_TRACE3 value\n                 * @property {number} SEVERITY_NUMBER_TRACE4=4 SEVERITY_NUMBER_TRACE4 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG=5 SEVERITY_NUMBER_DEBUG value\n                 * @property {number} SEVERITY_NUMBER_DEBUG2=6 SEVERITY_NUMBER_DEBUG2 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG3=7 SEVERITY_NUMBER_DEBUG3 value\n                 * @property {number} SEVERITY_NUMBER_DEBUG4=8 SEVERITY_NUMBER_DEBUG4 value\n                 * @property {number} SEVERITY_NUMBER_INFO=9 SEVERITY_NUMBER_INFO value\n                 * @property {number} SEVERITY_NUMBER_INFO2=10 SEVERITY_NUMBER_INFO2 value\n                 * @property {number} SEVERITY_NUMBER_INFO3=11 SEVERITY_NUMBER_INFO3 value\n                 * @property {number} SEVERITY_NUMBER_INFO4=12 SEVERITY_NUMBER_INFO4 value\n                 * @property {number} SEVERITY_NUMBER_WARN=13 SEVERITY_NUMBER_WARN value\n                 * @property {number} SEVERITY_NUMBER_WARN2=14 SEVERITY_NUMBER_WARN2 value\n                 * @property {number} SEVERITY_NUMBER_WARN3=15 SEVERITY_NUMBER_WARN3 value\n                 * @property {number} SEVERITY_NUMBER_WARN4=16 SEVERITY_NUMBER_WARN4 value\n                 * @property {number} SEVERITY_NUMBER_ERROR=17 SEVERITY_NUMBER_ERROR value\n                 * @property {number} SEVERITY_NUMBER_ERROR2=18 SEVERITY_NUMBER_ERROR2 value\n                 * @property {number} SEVERITY_NUMBER_ERROR3=19 SEVERITY_NUMBER_ERROR3 value\n                 * @property {number} SEVERITY_NUMBER_ERROR4=20 SEVERITY_NUMBER_ERROR4 value\n                 * @property {number} SEVERITY_NUMBER_FATAL=21 SEVERITY_NUMBER_FATAL value\n                 * @property {number} SEVERITY_NUMBER_FATAL2=22 SEVERITY_NUMBER_FATAL2 value\n                 * @property {number} SEVERITY_NUMBER_FATAL3=23 SEVERITY_NUMBER_FATAL3 value\n                 * @property {number} SEVERITY_NUMBER_FATAL4=24 SEVERITY_NUMBER_FATAL4 value\n                 */\n                v1.SeverityNumber = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"SEVERITY_NUMBER_UNSPECIFIED\"] = 0;\n                    values[valuesById[1] = \"SEVERITY_NUMBER_TRACE\"] = 1;\n                    values[valuesById[2] = \"SEVERITY_NUMBER_TRACE2\"] = 2;\n                    values[valuesById[3] = \"SEVERITY_NUMBER_TRACE3\"] = 3;\n                    values[valuesById[4] = \"SEVERITY_NUMBER_TRACE4\"] = 4;\n                    values[valuesById[5] = \"SEVERITY_NUMBER_DEBUG\"] = 5;\n                    values[valuesById[6] = \"SEVERITY_NUMBER_DEBUG2\"] = 6;\n                    values[valuesById[7] = \"SEVERITY_NUMBER_DEBUG3\"] = 7;\n                    values[valuesById[8] = \"SEVERITY_NUMBER_DEBUG4\"] = 8;\n                    values[valuesById[9] = \"SEVERITY_NUMBER_INFO\"] = 9;\n                    values[valuesById[10] = \"SEVERITY_NUMBER_INFO2\"] = 10;\n                    values[valuesById[11] = \"SEVERITY_NUMBER_INFO3\"] = 11;\n                    values[valuesById[12] = \"SEVERITY_NUMBER_INFO4\"] = 12;\n                    values[valuesById[13] = \"SEVERITY_NUMBER_WARN\"] = 13;\n                    values[valuesById[14] = \"SEVERITY_NUMBER_WARN2\"] = 14;\n                    values[valuesById[15] = \"SEVERITY_NUMBER_WARN3\"] = 15;\n                    values[valuesById[16] = \"SEVERITY_NUMBER_WARN4\"] = 16;\n                    values[valuesById[17] = \"SEVERITY_NUMBER_ERROR\"] = 17;\n                    values[valuesById[18] = \"SEVERITY_NUMBER_ERROR2\"] = 18;\n                    values[valuesById[19] = \"SEVERITY_NUMBER_ERROR3\"] = 19;\n                    values[valuesById[20] = \"SEVERITY_NUMBER_ERROR4\"] = 20;\n                    values[valuesById[21] = \"SEVERITY_NUMBER_FATAL\"] = 21;\n                    values[valuesById[22] = \"SEVERITY_NUMBER_FATAL2\"] = 22;\n                    values[valuesById[23] = \"SEVERITY_NUMBER_FATAL3\"] = 23;\n                    values[valuesById[24] = \"SEVERITY_NUMBER_FATAL4\"] = 24;\n                    return values;\n                })();\n\n                /**\n                 * LogRecordFlags enum.\n                 * @name opentelemetry.proto.logs.v1.LogRecordFlags\n                 * @enum {number}\n                 * @property {number} LOG_RECORD_FLAGS_DO_NOT_USE=0 LOG_RECORD_FLAGS_DO_NOT_USE value\n                 * @property {number} LOG_RECORD_FLAGS_TRACE_FLAGS_MASK=255 LOG_RECORD_FLAGS_TRACE_FLAGS_MASK value\n                 */\n                v1.LogRecordFlags = (function() {\n                    var valuesById = {}, values = Object.create(valuesById);\n                    values[valuesById[0] = \"LOG_RECORD_FLAGS_DO_NOT_USE\"] = 0;\n                    values[valuesById[255] = \"LOG_RECORD_FLAGS_TRACE_FLAGS_MASK\"] = 255;\n                    return values;\n                })();\n\n                v1.LogRecord = (function() {\n\n                    /**\n                     * Properties of a LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @interface ILogRecord\n                     * @property {number|Long|null} [timeUnixNano] LogRecord timeUnixNano\n                     * @property {number|Long|null} [observedTimeUnixNano] LogRecord observedTimeUnixNano\n                     * @property {opentelemetry.proto.logs.v1.SeverityNumber|null} [severityNumber] LogRecord severityNumber\n                     * @property {string|null} [severityText] LogRecord severityText\n                     * @property {opentelemetry.proto.common.v1.IAnyValue|null} [body] LogRecord body\n                     * @property {Array.<opentelemetry.proto.common.v1.IKeyValue>|null} [attributes] LogRecord attributes\n                     * @property {number|null} [droppedAttributesCount] LogRecord droppedAttributesCount\n                     * @property {number|null} [flags] LogRecord flags\n                     * @property {Uint8Array|null} [traceId] LogRecord traceId\n                     * @property {Uint8Array|null} [spanId] LogRecord spanId\n                     */\n\n                    /**\n                     * Constructs a new LogRecord.\n                     * @memberof opentelemetry.proto.logs.v1\n                     * @classdesc Represents a LogRecord.\n                     * @implements ILogRecord\n                     * @constructor\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     */\n                    function LogRecord(properties) {\n                        this.attributes = [];\n                        if (properties)\n                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                                if (properties[keys[i]] != null)\n                                    this[keys[i]] = properties[keys[i]];\n                    }\n\n                    /**\n                     * LogRecord timeUnixNano.\n                     * @member {number|Long|null|undefined} timeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.timeUnixNano = null;\n\n                    /**\n                     * LogRecord observedTimeUnixNano.\n                     * @member {number|Long|null|undefined} observedTimeUnixNano\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.observedTimeUnixNano = null;\n\n                    /**\n                     * LogRecord severityNumber.\n                     * @member {opentelemetry.proto.logs.v1.SeverityNumber|null|undefined} severityNumber\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityNumber = null;\n\n                    /**\n                     * LogRecord severityText.\n                     * @member {string|null|undefined} severityText\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.severityText = null;\n\n                    /**\n                     * LogRecord body.\n                     * @member {opentelemetry.proto.common.v1.IAnyValue|null|undefined} body\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.body = null;\n\n                    /**\n                     * LogRecord attributes.\n                     * @member {Array.<opentelemetry.proto.common.v1.IKeyValue>} attributes\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.attributes = $util.emptyArray;\n\n                    /**\n                     * LogRecord droppedAttributesCount.\n                     * @member {number|null|undefined} droppedAttributesCount\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.droppedAttributesCount = null;\n\n                    /**\n                     * LogRecord flags.\n                     * @member {number|null|undefined} flags\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.flags = null;\n\n                    /**\n                     * LogRecord traceId.\n                     * @member {Uint8Array|null|undefined} traceId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.traceId = null;\n\n                    /**\n                     * LogRecord spanId.\n                     * @member {Uint8Array|null|undefined} spanId\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     */\n                    LogRecord.prototype.spanId = null;\n\n                    /**\n                     * Creates a new LogRecord instance using the specified properties.\n                     * @function create\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord=} [properties] Properties to set\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord instance\n                     */\n                    LogRecord.create = function create(properties) {\n                        return new LogRecord(properties);\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encode = function encode(message, writer) {\n                        if (!writer)\n                            writer = $Writer.create();\n                        if (message.timeUnixNano != null && Object.hasOwnProperty.call(message, \"timeUnixNano\"))\n                            writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message.timeUnixNano);\n                        if (message.severityNumber != null && Object.hasOwnProperty.call(message, \"severityNumber\"))\n                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.severityNumber);\n                        if (message.severityText != null && Object.hasOwnProperty.call(message, \"severityText\"))\n                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.severityText);\n                        if (message.body != null && Object.hasOwnProperty.call(message, \"body\"))\n                            $root.opentelemetry.proto.common.v1.AnyValue.encode(message.body, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                        if (message.attributes != null && message.attributes.length)\n                            for (var i = 0; i < message.attributes.length; ++i)\n                                $root.opentelemetry.proto.common.v1.KeyValue.encode(message.attributes[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                        if (message.droppedAttributesCount != null && Object.hasOwnProperty.call(message, \"droppedAttributesCount\"))\n                            writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.droppedAttributesCount);\n                        if (message.flags != null && Object.hasOwnProperty.call(message, \"flags\"))\n                            writer.uint32(/* id 8, wireType 5 =*/69).fixed32(message.flags);\n                        if (message.traceId != null && Object.hasOwnProperty.call(message, \"traceId\"))\n                            writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.traceId);\n                        if (message.spanId != null && Object.hasOwnProperty.call(message, \"spanId\"))\n                            writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.spanId);\n                        if (message.observedTimeUnixNano != null && Object.hasOwnProperty.call(message, \"observedTimeUnixNano\"))\n                            writer.uint32(/* id 11, wireType 1 =*/89).fixed64(message.observedTimeUnixNano);\n                        return writer;\n                    };\n\n                    /**\n                     * Encodes the specified LogRecord message, length delimited. Does not implicitly {@link opentelemetry.proto.logs.v1.LogRecord.verify|verify} messages.\n                     * @function encodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.ILogRecord} message LogRecord message or plain object to encode\n                     * @param {$protobuf.Writer} [writer] Writer to encode to\n                     * @returns {$protobuf.Writer} Writer\n                     */\n                    LogRecord.encodeDelimited = function encodeDelimited(message, writer) {\n                        return this.encode(message, writer).ldelim();\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer.\n                     * @function decode\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @param {number} [length] Message length if known beforehand\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decode = function decode(reader, length) {\n                        if (!(reader instanceof $Reader))\n                            reader = $Reader.create(reader);\n                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        while (reader.pos < end) {\n                            var tag = reader.uint32();\n                            switch (tag >>> 3) {\n                            case 1: {\n                                    message.timeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 11: {\n                                    message.observedTimeUnixNano = reader.fixed64();\n                                    break;\n                                }\n                            case 2: {\n                                    message.severityNumber = reader.int32();\n                                    break;\n                                }\n                            case 3: {\n                                    message.severityText = reader.string();\n                                    break;\n                                }\n                            case 5: {\n                                    message.body = $root.opentelemetry.proto.common.v1.AnyValue.decode(reader, reader.uint32());\n                                    break;\n                                }\n                            case 6: {\n                                    if (!(message.attributes && message.attributes.length))\n                                        message.attributes = [];\n                                    message.attributes.push($root.opentelemetry.proto.common.v1.KeyValue.decode(reader, reader.uint32()));\n                                    break;\n                                }\n                            case 7: {\n                                    message.droppedAttributesCount = reader.uint32();\n                                    break;\n                                }\n                            case 8: {\n                                    message.flags = reader.fixed32();\n                                    break;\n                                }\n                            case 9: {\n                                    message.traceId = reader.bytes();\n                                    break;\n                                }\n                            case 10: {\n                                    message.spanId = reader.bytes();\n                                    break;\n                                }\n                            default:\n                                reader.skipType(tag & 7);\n                                break;\n                            }\n                        }\n                        return message;\n                    };\n\n                    /**\n                     * Decodes a LogRecord message from the specified reader or buffer, length delimited.\n                     * @function decodeDelimited\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     * @throws {Error} If the payload is not a reader or valid buffer\n                     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n                     */\n                    LogRecord.decodeDelimited = function decodeDelimited(reader) {\n                        if (!(reader instanceof $Reader))\n                            reader = new $Reader(reader);\n                        return this.decode(reader, reader.uint32());\n                    };\n\n                    /**\n                     * Verifies a LogRecord message.\n                     * @function verify\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} message Plain object to verify\n                     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n                     */\n                    LogRecord.verify = function verify(message) {\n                        if (typeof message !== \"object\" || message === null)\n                            return \"object expected\";\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (!$util.isInteger(message.timeUnixNano) && !(message.timeUnixNano && $util.isInteger(message.timeUnixNano.low) && $util.isInteger(message.timeUnixNano.high)))\n                                return \"timeUnixNano: integer|Long expected\";\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (!$util.isInteger(message.observedTimeUnixNano) && !(message.observedTimeUnixNano && $util.isInteger(message.observedTimeUnixNano.low) && $util.isInteger(message.observedTimeUnixNano.high)))\n                                return \"observedTimeUnixNano: integer|Long expected\";\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            switch (message.severityNumber) {\n                            default:\n                                return \"severityNumber: enum value expected\";\n                            case 0:\n                            case 1:\n                            case 2:\n                            case 3:\n                            case 4:\n                            case 5:\n                            case 6:\n                            case 7:\n                            case 8:\n                            case 9:\n                            case 10:\n                            case 11:\n                            case 12:\n                            case 13:\n                            case 14:\n                            case 15:\n                            case 16:\n                            case 17:\n                            case 18:\n                            case 19:\n                            case 20:\n                            case 21:\n                            case 22:\n                            case 23:\n                            case 24:\n                                break;\n                            }\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            if (!$util.isString(message.severityText))\n                                return \"severityText: string expected\";\n                        if (message.body != null && message.hasOwnProperty(\"body\")) {\n                            var error = $root.opentelemetry.proto.common.v1.AnyValue.verify(message.body);\n                            if (error)\n                                return \"body.\" + error;\n                        }\n                        if (message.attributes != null && message.hasOwnProperty(\"attributes\")) {\n                            if (!Array.isArray(message.attributes))\n                                return \"attributes: array expected\";\n                            for (var i = 0; i < message.attributes.length; ++i) {\n                                var error = $root.opentelemetry.proto.common.v1.KeyValue.verify(message.attributes[i]);\n                                if (error)\n                                    return \"attributes.\" + error;\n                            }\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            if (!$util.isInteger(message.droppedAttributesCount))\n                                return \"droppedAttributesCount: integer expected\";\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            if (!$util.isInteger(message.flags))\n                                return \"flags: integer expected\";\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            if (!(message.traceId && typeof message.traceId.length === \"number\" || $util.isString(message.traceId)))\n                                return \"traceId: buffer expected\";\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            if (!(message.spanId && typeof message.spanId.length === \"number\" || $util.isString(message.spanId)))\n                                return \"spanId: buffer expected\";\n                        return null;\n                    };\n\n                    /**\n                     * Creates a LogRecord message from a plain object. Also converts values to their respective internal types.\n                     * @function fromObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {Object.<string,*>} object Plain object\n                     * @returns {opentelemetry.proto.logs.v1.LogRecord} LogRecord\n                     */\n                    LogRecord.fromObject = function fromObject(object) {\n                        if (object instanceof $root.opentelemetry.proto.logs.v1.LogRecord)\n                            return object;\n                        var message = new $root.opentelemetry.proto.logs.v1.LogRecord();\n                        if (object.timeUnixNano != null)\n                            if ($util.Long)\n                                (message.timeUnixNano = $util.Long.fromValue(object.timeUnixNano)).unsigned = false;\n                            else if (typeof object.timeUnixNano === \"string\")\n                                message.timeUnixNano = parseInt(object.timeUnixNano, 10);\n                            else if (typeof object.timeUnixNano === \"number\")\n                                message.timeUnixNano = object.timeUnixNano;\n                            else if (typeof object.timeUnixNano === \"object\")\n                                message.timeUnixNano = new $util.LongBits(object.timeUnixNano.low >>> 0, object.timeUnixNano.high >>> 0).toNumber();\n                        if (object.observedTimeUnixNano != null)\n                            if ($util.Long)\n                                (message.observedTimeUnixNano = $util.Long.fromValue(object.observedTimeUnixNano)).unsigned = false;\n                            else if (typeof object.observedTimeUnixNano === \"string\")\n                                message.observedTimeUnixNano = parseInt(object.observedTimeUnixNano, 10);\n                            else if (typeof object.observedTimeUnixNano === \"number\")\n                                message.observedTimeUnixNano = object.observedTimeUnixNano;\n                            else if (typeof object.observedTimeUnixNano === \"object\")\n                                message.observedTimeUnixNano = new $util.LongBits(object.observedTimeUnixNano.low >>> 0, object.observedTimeUnixNano.high >>> 0).toNumber();\n                        switch (object.severityNumber) {\n                        default:\n                            if (typeof object.severityNumber === \"number\") {\n                                message.severityNumber = object.severityNumber;\n                                break;\n                            }\n                            break;\n                        case \"SEVERITY_NUMBER_UNSPECIFIED\":\n                        case 0:\n                            message.severityNumber = 0;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE\":\n                        case 1:\n                            message.severityNumber = 1;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE2\":\n                        case 2:\n                            message.severityNumber = 2;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE3\":\n                        case 3:\n                            message.severityNumber = 3;\n                            break;\n                        case \"SEVERITY_NUMBER_TRACE4\":\n                        case 4:\n                            message.severityNumber = 4;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG\":\n                        case 5:\n                            message.severityNumber = 5;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG2\":\n                        case 6:\n                            message.severityNumber = 6;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG3\":\n                        case 7:\n                            message.severityNumber = 7;\n                            break;\n                        case \"SEVERITY_NUMBER_DEBUG4\":\n                        case 8:\n                            message.severityNumber = 8;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO\":\n                        case 9:\n                            message.severityNumber = 9;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO2\":\n                        case 10:\n                            message.severityNumber = 10;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO3\":\n                        case 11:\n                            message.severityNumber = 11;\n                            break;\n                        case \"SEVERITY_NUMBER_INFO4\":\n                        case 12:\n                            message.severityNumber = 12;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN\":\n                        case 13:\n                            message.severityNumber = 13;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN2\":\n                        case 14:\n                            message.severityNumber = 14;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN3\":\n                        case 15:\n                            message.severityNumber = 15;\n                            break;\n                        case \"SEVERITY_NUMBER_WARN4\":\n                        case 16:\n                            message.severityNumber = 16;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR\":\n                        case 17:\n                            message.severityNumber = 17;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR2\":\n                        case 18:\n                            message.severityNumber = 18;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR3\":\n                        case 19:\n                            message.severityNumber = 19;\n                            break;\n                        case \"SEVERITY_NUMBER_ERROR4\":\n                        case 20:\n                            message.severityNumber = 20;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL\":\n                        case 21:\n                            message.severityNumber = 21;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL2\":\n                        case 22:\n                            message.severityNumber = 22;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL3\":\n                        case 23:\n                            message.severityNumber = 23;\n                            break;\n                        case \"SEVERITY_NUMBER_FATAL4\":\n                        case 24:\n                            message.severityNumber = 24;\n                            break;\n                        }\n                        if (object.severityText != null)\n                            message.severityText = String(object.severityText);\n                        if (object.body != null) {\n                            if (typeof object.body !== \"object\")\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.body: object expected\");\n                            message.body = $root.opentelemetry.proto.common.v1.AnyValue.fromObject(object.body);\n                        }\n                        if (object.attributes) {\n                            if (!Array.isArray(object.attributes))\n                                throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: array expected\");\n                            message.attributes = [];\n                            for (var i = 0; i < object.attributes.length; ++i) {\n                                if (typeof object.attributes[i] !== \"object\")\n                                    throw TypeError(\".opentelemetry.proto.logs.v1.LogRecord.attributes: object expected\");\n                                message.attributes[i] = $root.opentelemetry.proto.common.v1.KeyValue.fromObject(object.attributes[i]);\n                            }\n                        }\n                        if (object.droppedAttributesCount != null)\n                            message.droppedAttributesCount = object.droppedAttributesCount >>> 0;\n                        if (object.flags != null)\n                            message.flags = object.flags >>> 0;\n                        if (object.traceId != null)\n                            if (typeof object.traceId === \"string\")\n                                $util.base64.decode(object.traceId, message.traceId = $util.newBuffer($util.base64.length(object.traceId)), 0);\n                            else if (object.traceId.length >= 0)\n                                message.traceId = object.traceId;\n                        if (object.spanId != null)\n                            if (typeof object.spanId === \"string\")\n                                $util.base64.decode(object.spanId, message.spanId = $util.newBuffer($util.base64.length(object.spanId)), 0);\n                            else if (object.spanId.length >= 0)\n                                message.spanId = object.spanId;\n                        return message;\n                    };\n\n                    /**\n                     * Creates a plain object from a LogRecord message. Also converts values to other types if specified.\n                     * @function toObject\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {opentelemetry.proto.logs.v1.LogRecord} message LogRecord\n                     * @param {$protobuf.IConversionOptions} [options] Conversion options\n                     * @returns {Object.<string,*>} Plain object\n                     */\n                    LogRecord.toObject = function toObject(message, options) {\n                        if (!options)\n                            options = {};\n                        var object = {};\n                        if (options.arrays || options.defaults)\n                            object.attributes = [];\n                        if (options.defaults) {\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.timeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.timeUnixNano = options.longs === String ? \"0\" : 0;\n                            object.severityNumber = options.enums === String ? \"SEVERITY_NUMBER_UNSPECIFIED\" : 0;\n                            object.severityText = \"\";\n                            object.body = null;\n                            object.droppedAttributesCount = 0;\n                            object.flags = 0;\n                            if (options.bytes === String)\n                                object.traceId = \"\";\n                            else {\n                                object.traceId = [];\n                                if (options.bytes !== Array)\n                                    object.traceId = $util.newBuffer(object.traceId);\n                            }\n                            if (options.bytes === String)\n                                object.spanId = \"\";\n                            else {\n                                object.spanId = [];\n                                if (options.bytes !== Array)\n                                    object.spanId = $util.newBuffer(object.spanId);\n                            }\n                            if ($util.Long) {\n                                var long = new $util.Long(0, 0, false);\n                                object.observedTimeUnixNano = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                            } else\n                                object.observedTimeUnixNano = options.longs === String ? \"0\" : 0;\n                        }\n                        if (message.timeUnixNano != null && message.hasOwnProperty(\"timeUnixNano\"))\n                            if (typeof message.timeUnixNano === \"number\")\n                                object.timeUnixNano = options.longs === String ? String(message.timeUnixNano) : message.timeUnixNano;\n                            else\n                                object.timeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.timeUnixNano) : options.longs === Number ? new $util.LongBits(message.timeUnixNano.low >>> 0, message.timeUnixNano.high >>> 0).toNumber() : message.timeUnixNano;\n                        if (message.severityNumber != null && message.hasOwnProperty(\"severityNumber\"))\n                            object.severityNumber = options.enums === String ? $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] === undefined ? message.severityNumber : $root.opentelemetry.proto.logs.v1.SeverityNumber[message.severityNumber] : message.severityNumber;\n                        if (message.severityText != null && message.hasOwnProperty(\"severityText\"))\n                            object.severityText = message.severityText;\n                        if (message.body != null && message.hasOwnProperty(\"body\"))\n                            object.body = $root.opentelemetry.proto.common.v1.AnyValue.toObject(message.body, options);\n                        if (message.attributes && message.attributes.length) {\n                            object.attributes = [];\n                            for (var j = 0; j < message.attributes.length; ++j)\n                                object.attributes[j] = $root.opentelemetry.proto.common.v1.KeyValue.toObject(message.attributes[j], options);\n                        }\n                        if (message.droppedAttributesCount != null && message.hasOwnProperty(\"droppedAttributesCount\"))\n                            object.droppedAttributesCount = message.droppedAttributesCount;\n                        if (message.flags != null && message.hasOwnProperty(\"flags\"))\n                            object.flags = message.flags;\n                        if (message.traceId != null && message.hasOwnProperty(\"traceId\"))\n                            object.traceId = options.bytes === String ? $util.base64.encode(message.traceId, 0, message.traceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.traceId) : message.traceId;\n                        if (message.spanId != null && message.hasOwnProperty(\"spanId\"))\n                            object.spanId = options.bytes === String ? $util.base64.encode(message.spanId, 0, message.spanId.length) : options.bytes === Array ? Array.prototype.slice.call(message.spanId) : message.spanId;\n                        if (message.observedTimeUnixNano != null && message.hasOwnProperty(\"observedTimeUnixNano\"))\n                            if (typeof message.observedTimeUnixNano === \"number\")\n                                object.observedTimeUnixNano = options.longs === String ? String(message.observedTimeUnixNano) : message.observedTimeUnixNano;\n                            else\n                                object.observedTimeUnixNano = options.longs === String ? $util.Long.prototype.toString.call(message.observedTimeUnixNano) : options.longs === Number ? new $util.LongBits(message.observedTimeUnixNano.low >>> 0, message.observedTimeUnixNano.high >>> 0).toNumber() : message.observedTimeUnixNano;\n                        return object;\n                    };\n\n                    /**\n                     * Converts this LogRecord to JSON.\n                     * @function toJSON\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @instance\n                     * @returns {Object.<string,*>} JSON object\n                     */\n                    LogRecord.prototype.toJSON = function toJSON() {\n                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n                    };\n\n                    /**\n                     * Gets the default type url for LogRecord\n                     * @function getTypeUrl\n                     * @memberof opentelemetry.proto.logs.v1.LogRecord\n                     * @static\n                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n                     * @returns {string} The default type url\n                     */\n                    LogRecord.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                        if (typeUrlPrefix === undefined) {\n                            typeUrlPrefix = \"type.googleapis.com\";\n                        }\n                        return typeUrlPrefix + \"/opentelemetry.proto.logs.v1.LogRecord\";\n                    };\n\n                    return LogRecord;\n                })();\n\n                return v1;\n            })();\n\n            return logs;\n        })();\n\n        return proto;\n    })();\n\n    return opentelemetry;\n})();\n\nmodule.exports = $root;\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as root from '../generated/root';\nimport { ISerializer } from '../common/i-serializer';\nimport {\n  IExportMetricsServiceRequest,\n  IExportMetricsServiceResponse,\n} from '../metrics/types';\nimport { ExportType } from './protobuf-export-type';\nimport {\n  IExportTraceServiceRequest,\n  IExportTraceServiceResponse,\n} from '../trace/types';\nimport {\n  IExportLogsServiceRequest,\n  IExportLogsServiceResponse,\n} from '../logs/types';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { createExportTraceServiceRequest } from '../trace';\nimport { createExportMetricsServiceRequest } from '../metrics';\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport { createExportLogsServiceRequest } from '../logs';\nimport { ReadableLogRecord } from '@opentelemetry/sdk-logs';\n\nconst logsResponseType = root.opentelemetry.proto.collector.logs.v1\n  .ExportLogsServiceResponse as ExportType<IExportLogsServiceResponse>;\n\nconst logsRequestType = root.opentelemetry.proto.collector.logs.v1\n  .ExportLogsServiceRequest as ExportType<IExportLogsServiceRequest>;\n\nconst metricsResponseType = root.opentelemetry.proto.collector.metrics.v1\n  .ExportMetricsServiceResponse as ExportType<IExportMetricsServiceResponse>;\n\nconst metricsRequestType = root.opentelemetry.proto.collector.metrics.v1\n  .ExportMetricsServiceRequest as ExportType<IExportMetricsServiceRequest>;\n\nconst traceResponseType = root.opentelemetry.proto.collector.trace.v1\n  .ExportTraceServiceResponse as ExportType<IExportTraceServiceResponse>;\n\nconst traceRequestType = root.opentelemetry.proto.collector.trace.v1\n  .ExportTraceServiceRequest as ExportType<IExportTraceServiceRequest>;\n\nexport const ProtobufLogsSerializer: ISerializer<\n  ReadableLogRecord[],\n  IExportLogsServiceResponse\n> = {\n  serializeRequest: (arg: ReadableLogRecord[]) => {\n    const request = createExportLogsServiceRequest(arg);\n    return logsRequestType.encode(request).finish();\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    return logsResponseType.decode(arg);\n  },\n};\n\nexport const ProtobufMetricsSerializer: ISerializer<\n  ResourceMetrics[],\n  IExportMetricsServiceResponse\n> = {\n  serializeRequest: (arg: ResourceMetrics[]) => {\n    const request = createExportMetricsServiceRequest(arg);\n    return metricsRequestType.encode(request).finish();\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    return metricsResponseType.decode(arg);\n  },\n};\n\nexport const ProtobufTraceSerializer: ISerializer<\n  ReadableSpan[],\n  IExportTraceServiceResponse\n> = {\n  serializeRequest: (arg: ReadableSpan[]) => {\n    const request = createExportTraceServiceRequest(arg);\n    return traceRequestType.encode(request).finish();\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    return traceResponseType.decode(arg);\n  },\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ISerializer } from '../common/i-serializer';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { IExportTraceServiceResponse } from '../trace/types';\nimport { createExportTraceServiceRequest } from '../trace';\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport { createExportMetricsServiceRequest } from '../metrics';\nimport { ReadableLogRecord } from '@opentelemetry/sdk-logs';\nimport { IExportMetricsServiceResponse } from '../metrics/types';\nimport { IExportLogsServiceResponse } from '../logs/types';\nimport { createExportLogsServiceRequest } from '../logs';\n\nexport const JsonTraceSerializer: ISerializer<\n  ReadableSpan[],\n  IExportTraceServiceResponse\n> = {\n  serializeRequest: (arg: ReadableSpan[]) => {\n    const request = createExportTraceServiceRequest(arg, {\n      useHex: true,\n      useLongBits: false,\n    });\n    const encoder = new TextEncoder();\n    return encoder.encode(JSON.stringify(request));\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    const decoder = new TextDecoder();\n    return JSON.parse(decoder.decode(arg)) as IExportTraceServiceResponse;\n  },\n};\n\nexport const JsonMetricsSerializer: ISerializer<\n  ResourceMetrics[],\n  IExportMetricsServiceResponse\n> = {\n  serializeRequest: (arg: ResourceMetrics[]) => {\n    const request = createExportMetricsServiceRequest(arg, {\n      useLongBits: false,\n    });\n    const encoder = new TextEncoder();\n    return encoder.encode(JSON.stringify(request));\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    const decoder = new TextDecoder();\n    return JSON.parse(decoder.decode(arg)) as IExportMetricsServiceResponse;\n  },\n};\n\nexport const JsonLogsSerializer: ISerializer<\n  ReadableLogRecord[],\n  IExportLogsServiceResponse\n> = {\n  serializeRequest: (arg: ReadableLogRecord[]) => {\n    const request = createExportLogsServiceRequest(arg, {\n      useHex: true,\n      useLongBits: false,\n    });\n    const encoder = new TextEncoder();\n    return encoder.encode(JSON.stringify(request));\n  },\n  deserializeResponse: (arg: Uint8Array) => {\n    const decoder = new TextDecoder();\n    return JSON.parse(decoder.decode(arg)) as IExportLogsServiceResponse;\n  },\n};\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {\n  OtlpEncodingOptions,\n  IKeyValueList,\n  IKeyValue,\n  IInstrumentationScope,\n  IArrayValue,\n  LongBits,\n  IAnyValue,\n  Fixed64,\n} from './common/types';\nexport {\n  SpanContextEncodeFunction,\n  toLongBits,\n  OptionalSpanContextEncodeFunction,\n  getOtlpEncoder,\n  Encoder,\n  HrTimeEncodeFunction,\n  encodeAsLongBits,\n  encodeAsString,\n  hrTimeToNanos,\n} from './common';\nexport {\n  IExportMetricsPartialSuccess,\n  IValueAtQuantile,\n  ISummaryDataPoint,\n  ISummary,\n  ISum,\n  IScopeMetrics,\n  IResourceMetrics,\n  INumberDataPoint,\n  IHistogramDataPoint,\n  IHistogram,\n  IExponentialHistogramDataPoint,\n  IExponentialHistogram,\n  IMetric,\n  IGauge,\n  IExemplar,\n  EAggregationTemporality,\n  IExportMetricsServiceRequest,\n  IExportMetricsServiceResponse,\n  IBuckets,\n} from './metrics/types';\nexport { IResource } from './resource/types';\nexport {\n  IExportTracePartialSuccess,\n  IStatus,\n  EStatusCode,\n  ILink,\n  IEvent,\n  IScopeSpans,\n  ISpan,\n  IResourceSpans,\n  ESpanKind,\n  IExportTraceServiceResponse,\n  IExportTraceServiceRequest,\n} from './trace/types';\nexport {\n  IExportLogsServiceResponse,\n  IScopeLogs,\n  IExportLogsServiceRequest,\n  IResourceLogs,\n  ILogRecord,\n  IExportLogsPartialSuccess,\n  ESeverityNumber,\n} from './logs/types';\n\nexport { createExportTraceServiceRequest } from './trace';\nexport { createExportMetricsServiceRequest } from './metrics';\nexport { createExportLogsServiceRequest } from './logs';\n\nexport {\n  ProtobufLogsSerializer,\n  ProtobufMetricsSerializer,\n  ProtobufTraceSerializer,\n} from './protobuf/serializers';\n\nexport {\n  JsonTraceSerializer,\n  JsonLogsSerializer,\n  JsonMetricsSerializer,\n} from './json/serializers';\n\nexport { ISerializer } from './common/i-serializer';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.52.1';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\nimport { OTLPMetricExporterOptions } from '../../OTLPMetricExporterOptions';\nimport { OTLPMetricExporterBase } from '../../OTLPMetricExporterBase';\nimport {\n  OTLPExporterNodeBase,\n  OTLPExporterNodeConfigBase,\n  appendResourcePathToUrl,\n  appendRootPathToUrlIfNeeded,\n  parseHeaders,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  IExportMetricsServiceResponse,\n  JsonMetricsSerializer,\n} from '@opentelemetry/otlp-transformer';\nimport { VERSION } from '../../version';\n\nconst DEFAULT_COLLECTOR_RESOURCE_PATH = 'v1/metrics';\nconst DEFAULT_COLLECTOR_URL = `http://localhost:4318/${DEFAULT_COLLECTOR_RESOURCE_PATH}`;\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\nclass OTLPExporterNodeProxy extends OTLPExporterNodeBase<\n  ResourceMetrics,\n  IExportMetricsServiceResponse\n> {\n  constructor(config?: OTLPExporterNodeConfigBase & OTLPMetricExporterOptions) {\n    super(config, JsonMetricsSerializer, 'application/json');\n    this.headers = {\n      ...this.headers,\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS\n      ),\n      ...parseHeaders(config?.headers),\n    };\n  }\n\n  getDefaultUrl(config: OTLPExporterNodeConfigBase): string {\n    return typeof config.url === 'string'\n      ? config.url\n      : getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT.length > 0\n      ? appendRootPathToUrlIfNeeded(\n          getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT\n        )\n      : getEnv().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0\n      ? appendResourcePathToUrl(\n          getEnv().OTEL_EXPORTER_OTLP_ENDPOINT,\n          DEFAULT_COLLECTOR_RESOURCE_PATH\n        )\n      : DEFAULT_COLLECTOR_URL;\n  }\n}\n\n/**\n * Collector Metric Exporter for Node\n */\nexport class OTLPMetricExporter extends OTLPMetricExporterBase<OTLPExporterNodeProxy> {\n  constructor(config?: OTLPExporterNodeConfigBase & OTLPMetricExporterOptions) {\n    super(new OTLPExporterNodeProxy(config), config);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './OTLPMetricExporter';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './platform';\nexport * from './OTLPMetricExporterOptions';\nexport * from './OTLPMetricExporterBase';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as grpc from '@grpc/grpc-js';\n\n/**\n * Creates a unary service client constructor that, when instantiated, does not serialize/deserialize anything.\n * Allows for passing in {@link Buffer} directly, serialization can be handled via protobufjs or custom implementations.\n *\n * @param path service path\n * @param name service name\n */\nexport function createServiceClientConstructor(\n  path: string,\n  name: string\n): grpc.ServiceClientConstructor {\n  const serviceDefinition = {\n    export: {\n      path: path,\n      requestStream: false,\n      responseStream: false,\n      requestSerialize: (arg: Buffer) => {\n        return arg;\n      },\n      requestDeserialize: (arg: Buffer) => {\n        return arg;\n      },\n      responseSerialize: (arg: Buffer) => {\n        return arg;\n      },\n      responseDeserialize: (arg: Buffer) => {\n        return arg;\n      },\n    },\n  };\n\n  return grpc.makeGenericClientConstructor(serviceDefinition, name);\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// NOTE: do not change these type imports to actual imports. Doing so WILL break `@opentelemetry/instrumentation-http`,\n// as they'd be imported before the http/https modules can be wrapped.\nimport type {\n  Metadata,\n  ServiceError,\n  ChannelCredentials,\n  Client,\n} from '@grpc/grpc-js';\nimport { ExportResponse } from './export-response';\nimport { IExporterTransport } from './exporter-transport';\n\n// values taken from '@grpc/grpc-js` so that we don't need to require/import it.\nconst GRPC_COMPRESSION_NONE = 0;\nconst GRPC_COMPRESSION_GZIP = 2;\n\nfunction toGrpcCompression(compression: 'gzip' | 'none'): number {\n  return compression === 'gzip' ? GRPC_COMPRESSION_GZIP : GRPC_COMPRESSION_NONE;\n}\n\nexport function createInsecureCredentials(): ChannelCredentials {\n  // Lazy-load so that we don't need to require/import '@grpc/grpc-js' before it can be wrapped by instrumentation.\n  const {\n    credentials,\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n  } = require('@grpc/grpc-js');\n  return credentials.createInsecure();\n}\n\nexport function createSslCredentials(\n  rootCert?: Buffer,\n  privateKey?: Buffer,\n  certChain?: Buffer\n): ChannelCredentials {\n  // Lazy-load so that we don't need to require/import '@grpc/grpc-js' before it can be wrapped by instrumentation.\n  const {\n    credentials,\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n  } = require('@grpc/grpc-js');\n  return credentials.createSsl(rootCert, privateKey, certChain);\n}\n\nexport function createEmptyMetadata(): Metadata {\n  // Lazy-load so that we don't need to require/import '@grpc/grpc-js' before it can be wrapped by instrumentation.\n  const {\n    Metadata,\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n  } = require('@grpc/grpc-js');\n  return new Metadata();\n}\n\nexport interface GrpcExporterTransportParameters {\n  grpcPath: string;\n  grpcName: string;\n  address: string;\n  /**\n   * NOTE: Ensure that you're only importing/requiring gRPC inside the function providing the channel credentials,\n   * otherwise, gRPC and http/https instrumentations may break.\n   *\n   * For common cases, you can avoid to import/require gRPC your function by using\n   *   - {@link createSslCredentials}\n   *   - {@link createInsecureCredentials}\n   */\n  credentials: () => ChannelCredentials;\n  /**\n   * NOTE: Ensure that you're only importing/requiring gRPC inside the function providing the metadata,\n   * otherwise, gRPC and http/https instrumentations may break.\n   *\n   * To avoid having to import/require gRPC from your function to create a new Metadata object,\n   * use {@link createEmptyMetadata}\n   */\n  metadata: () => Metadata;\n  compression: 'gzip' | 'none';\n  timeoutMillis: number;\n}\n\nexport class GrpcExporterTransport implements IExporterTransport {\n  private _client?: Client;\n  private _metadata?: Metadata;\n\n  constructor(private _parameters: GrpcExporterTransportParameters) {}\n\n  shutdown() {\n    this._client?.close();\n  }\n\n  send(data: Uint8Array): Promise<ExportResponse> {\n    // We need to make a for gRPC\n    const buffer = Buffer.from(data);\n\n    if (this._client == null) {\n      // Lazy require to ensure that grpc is not loaded before instrumentations can wrap it\n      const {\n        createServiceClientConstructor,\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n      } = require('./create-service-client-constructor');\n\n      try {\n        this._metadata = this._parameters.metadata();\n      } catch (error) {\n        return Promise.resolve({\n          status: 'failure',\n          error: error,\n        });\n      }\n\n      const clientConstructor = createServiceClientConstructor(\n        this._parameters.grpcPath,\n        this._parameters.grpcName\n      );\n\n      try {\n        this._client = new clientConstructor(\n          this._parameters.address,\n          this._parameters.credentials(),\n          {\n            'grpc.default_compression_algorithm': toGrpcCompression(\n              this._parameters.compression\n            ),\n          }\n        );\n      } catch (error) {\n        return Promise.resolve({\n          status: 'failure',\n          error: error,\n        });\n      }\n    }\n\n    return new Promise<ExportResponse>(resolve => {\n      // this will always be defined\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const deadline = Date.now() + this._parameters.timeoutMillis;\n\n      // this should never happen\n      if (this._metadata == null) {\n        return resolve({\n          error: new Error('metadata was null'),\n          status: 'failure',\n        });\n      }\n\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore The gRPC client constructor is created on runtime, so we don't have any types for the resulting client.\n      this._client.export(\n        buffer,\n        this._metadata,\n        { deadline: deadline },\n        (err: ServiceError, response: Buffer) => {\n          if (err) {\n            resolve({\n              status: 'failure',\n              error: err,\n            });\n          } else {\n            resolve({\n              data: response,\n              status: 'success',\n            });\n          }\n        }\n      );\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv } from '@opentelemetry/core';\nimport * as path from 'path';\nimport { URL } from 'url';\nimport * as fs from 'fs';\nimport { CompressionAlgorithm } from '@opentelemetry/otlp-exporter-base';\nimport {\n  createInsecureCredentials,\n  createSslCredentials,\n} from './grpc-exporter-transport';\n\n// NOTE: do not change these type imports to actual imports. Doing so WILL break `@opentelemetry/instrumentation-http`,\n// as they'd be imported before the http/https modules can be wrapped.\nimport type { ChannelCredentials } from '@grpc/grpc-js';\n\nexport const DEFAULT_COLLECTOR_URL = 'http://localhost:4317';\n\nexport function validateAndNormalizeUrl(url: string): string {\n  const hasProtocol = url.match(/^([\\w]{1,8}):\\/\\//);\n  if (!hasProtocol) {\n    url = `https://${url}`;\n  }\n  const target = new URL(url);\n  if (target.protocol === 'unix:') {\n    return url;\n  }\n  if (target.pathname && target.pathname !== '/') {\n    diag.warn(\n      'URL path should not be set when using grpc, the path part of the URL will be ignored.'\n    );\n  }\n  if (target.protocol !== '' && !target.protocol?.match(/^(http)s?:$/)) {\n    diag.warn('URL protocol should be http(s)://. Using http://.');\n  }\n  return target.host;\n}\n\nexport function configureCredentials(\n  credentials: ChannelCredentials | undefined,\n  endpoint: string\n): ChannelCredentials {\n  let insecure: boolean;\n\n  if (credentials) {\n    return credentials;\n  } else if (endpoint.startsWith('https://')) {\n    insecure = false;\n  } else if (\n    endpoint.startsWith('http://') ||\n    endpoint === DEFAULT_COLLECTOR_URL\n  ) {\n    insecure = true;\n  } else {\n    insecure = getSecurityFromEnv();\n  }\n\n  if (insecure) {\n    return createInsecureCredentials();\n  } else {\n    return getCredentialsFromEnvironment();\n  }\n}\n\nfunction getSecurityFromEnv(): boolean {\n  const definedInsecure =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_INSECURE ||\n    getEnv().OTEL_EXPORTER_OTLP_INSECURE;\n\n  if (definedInsecure) {\n    return definedInsecure.toLowerCase() === 'true';\n  } else {\n    return false;\n  }\n}\n\n/**\n * Exported for testing\n */\nexport function getCredentialsFromEnvironment(): ChannelCredentials {\n  const rootCert = retrieveRootCert();\n  const privateKey = retrievePrivateKey();\n  const certChain = retrieveCertChain();\n\n  return createSslCredentials(rootCert, privateKey, certChain);\n}\n\nfunction retrieveRootCert(): Buffer | undefined {\n  const rootCertificate =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE ||\n    getEnv().OTEL_EXPORTER_OTLP_CERTIFICATE;\n\n  if (rootCertificate) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), rootCertificate));\n    } catch {\n      diag.warn('Failed to read root certificate file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nfunction retrievePrivateKey(): Buffer | undefined {\n  const clientKey =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY ||\n    getEnv().OTEL_EXPORTER_OTLP_CLIENT_KEY;\n\n  if (clientKey) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), clientKey));\n    } catch {\n      diag.warn('Failed to read client certificate private key file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nfunction retrieveCertChain(): Buffer | undefined {\n  const clientChain =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE ||\n    getEnv().OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE;\n\n  if (clientChain) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), clientChain));\n    } catch {\n      diag.warn('Failed to read client certificate chain file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\n\nexport function configureCompression(\n  compression: CompressionAlgorithm | undefined\n): CompressionAlgorithm {\n  if (compression != null) {\n    return compression;\n  }\n\n  const envCompression =\n    getEnv().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION ||\n    getEnv().OTEL_EXPORTER_OTLP_COMPRESSION;\n\n  if (envCompression === 'gzip') {\n    return CompressionAlgorithm.GZIP;\n  } else if (envCompression === 'none') {\n    return CompressionAlgorithm.NONE;\n  }\n\n  diag.warn(\n    'Unknown compression \"' + envCompression + '\", falling back to \"none\"'\n  );\n  return CompressionAlgorithm.NONE;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { GRPCQueueItem, OTLPGRPCExporterConfigNode } from './types';\nimport { baggageUtils, getEnv } from '@opentelemetry/core';\nimport {\n  CompressionAlgorithm,\n  OTLPExporterBase,\n  OTLPExporterError,\n} from '@opentelemetry/otlp-exporter-base';\nimport {\n  createEmptyMetadata,\n  GrpcExporterTransport,\n} from './grpc-exporter-transport';\nimport { configureCompression, configureCredentials } from './util';\nimport { ISerializer } from '@opentelemetry/otlp-transformer';\nimport { IExporterTransport } from './exporter-transport';\n\n/**\n * OTLP Exporter abstract base class\n */\nexport abstract class OTLPGRPCExporterNodeBase<\n  ExportItem,\n  ServiceResponse,\n> extends OTLPExporterBase<OTLPGRPCExporterConfigNode, ExportItem> {\n  grpcQueue: GRPCQueueItem<ExportItem>[] = [];\n  compression: CompressionAlgorithm;\n  private _transport: IExporterTransport;\n  private _serializer: ISerializer<ExportItem[], ServiceResponse>;\n\n  constructor(\n    config: OTLPGRPCExporterConfigNode = {},\n    signalSpecificMetadata: Record<string, string>,\n    grpcName: string,\n    grpcPath: string,\n    serializer: ISerializer<ExportItem[], ServiceResponse>\n  ) {\n    super(config);\n    this._serializer = serializer;\n    if (config.headers) {\n      diag.warn('Headers cannot be set when using grpc');\n    }\n    const nonSignalSpecificMetadata = baggageUtils.parseKeyPairsIntoRecord(\n      getEnv().OTEL_EXPORTER_OTLP_HEADERS\n    );\n    const rawMetadata = Object.assign(\n      {},\n      nonSignalSpecificMetadata,\n      signalSpecificMetadata\n    );\n\n    let credentialProvider = () => {\n      return configureCredentials(undefined, this.getUrlFromConfig(config));\n    };\n\n    if (config.credentials != null) {\n      const credentials = config.credentials;\n      credentialProvider = () => {\n        return credentials;\n      };\n    }\n\n    // Ensure we don't modify the original.\n    const configMetadata = config.metadata?.clone();\n    const metadataProvider = () => {\n      const metadata = configMetadata ?? createEmptyMetadata();\n      for (const [key, value] of Object.entries(rawMetadata)) {\n        // only override with env var data if the key has no values.\n        // not using Metadata.merge() as it will keep both values.\n        if (metadata.get(key).length < 1) {\n          metadata.set(key, value);\n        }\n      }\n\n      return metadata;\n    };\n\n    this.compression = configureCompression(config.compression);\n    this._transport = new GrpcExporterTransport({\n      address: this.getDefaultUrl(config),\n      compression: this.compression,\n      credentials: credentialProvider,\n      grpcName: grpcName,\n      grpcPath: grpcPath,\n      metadata: metadataProvider,\n      timeoutMillis: this.timeoutMillis,\n    });\n  }\n\n  onInit() {\n    // Intentionally left empty; nothing to do.\n  }\n\n  override onShutdown() {\n    this._transport.shutdown();\n  }\n\n  send(\n    objects: ExportItem[],\n    onSuccess: () => void,\n    onError: (error: OTLPExporterError) => void\n  ): void {\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n\n    const data = this._serializer.serializeRequest(objects);\n\n    if (data == null) {\n      onError(new Error('Could not serialize message'));\n      return;\n    }\n\n    const promise = this._transport.send(data).then(response => {\n      if (response.status === 'success') {\n        onSuccess();\n        return;\n      }\n      if (response.status === 'failure' && response.error) {\n        onError(response.error);\n      }\n      onError(new OTLPExporterError('Export failed with unknown error'));\n    }, onError);\n\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n\n  abstract getUrlFromConfig(config: OTLPGRPCExporterConfigNode): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { OTLPGRPCExporterNodeBase } from './OTLPGRPCExporterNodeBase';\nexport { OTLPGRPCExporterConfigNode } from './types';\nexport { DEFAULT_COLLECTOR_URL, validateAndNormalizeUrl } from './util';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.52.1';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  OTLPMetricExporterBase,\n  OTLPMetricExporterOptions,\n} from '@opentelemetry/exporter-metrics-otlp-http';\nimport { ResourceMetrics } from '@opentelemetry/sdk-metrics';\nimport {\n  OTLPGRPCExporterConfigNode,\n  OTLPGRPCExporterNodeBase,\n  validateAndNormalizeUrl,\n  DEFAULT_COLLECTOR_URL,\n} from '@opentelemetry/otlp-grpc-exporter-base';\nimport { baggageUtils, getEnv } from '@opentelemetry/core';\nimport {\n  IExportMetricsServiceResponse,\n  ProtobufMetricsSerializer,\n} from '@opentelemetry/otlp-transformer';\nimport { VERSION } from './version';\nimport { parseHeaders } from '@opentelemetry/otlp-exporter-base';\n\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\nclass OTLPMetricExporterProxy extends OTLPGRPCExporterNodeBase<\n  ResourceMetrics,\n  IExportMetricsServiceResponse\n> {\n  constructor(config?: OTLPGRPCExporterConfigNode & OTLPMetricExporterOptions) {\n    const signalSpecificMetadata = {\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_METRICS_HEADERS\n      ),\n      ...parseHeaders(config?.headers),\n    };\n    super(\n      config,\n      signalSpecificMetadata,\n      'MetricsExportService',\n      '/opentelemetry.proto.collector.metrics.v1.MetricsService/Export',\n      ProtobufMetricsSerializer\n    );\n  }\n\n  getDefaultUrl(config: OTLPGRPCExporterConfigNode): string {\n    return validateAndNormalizeUrl(this.getUrlFromConfig(config));\n  }\n\n  getUrlFromConfig(config: OTLPGRPCExporterConfigNode): string {\n    if (typeof config.url === 'string') {\n      return config.url;\n    }\n\n    return (\n      getEnv().OTEL_EXPORTER_OTLP_METRICS_ENDPOINT ||\n      getEnv().OTEL_EXPORTER_OTLP_ENDPOINT ||\n      DEFAULT_COLLECTOR_URL\n    );\n  }\n}\n\n/**\n * OTLP-gRPC metric exporter\n */\nexport class OTLPMetricExporter extends OTLPMetricExporterBase<OTLPMetricExporterProxy> {\n  constructor(config?: OTLPGRPCExporterConfigNode & OTLPMetricExporterOptions) {\n    super(new OTLPMetricExporterProxy(config), config);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './OTLPMetricExporter';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  MetricAttributes,\n  MetricAttributeValue,\n} from '@opentelemetry/api';\nimport {\n  ResourceMetrics,\n  InstrumentType,\n  DataPointType,\n  ScopeMetrics,\n  MetricData,\n  DataPoint,\n  Histogram,\n} from '@opentelemetry/sdk-metrics';\nimport { hrTimeToMilliseconds } from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\n\ntype PrometheusDataTypeLiteral =\n  | 'counter'\n  | 'gauge'\n  | 'histogram'\n  | 'summary'\n  | 'untyped';\n\nfunction escapeString(str: string) {\n  return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n');\n}\n\n/**\n * String Attribute values are converted directly to Prometheus attribute values.\n * Non-string values are represented as JSON-encoded strings.\n *\n * `undefined` is converted to an empty string.\n */\nfunction escapeAttributeValue(str: MetricAttributeValue = '') {\n  if (typeof str !== 'string') {\n    str = JSON.stringify(str);\n  }\n  return escapeString(str).replace(/\"/g, '\\\\\"');\n}\n\nconst invalidCharacterRegex = /[^a-z0-9_]/gi;\nconst multipleUnderscoreRegex = /_{2,}/g;\n\n/**\n * Ensures metric names are valid Prometheus metric names by removing\n * characters allowed by OpenTelemetry but disallowed by Prometheus.\n *\n * https://prometheus.io/docs/concepts/data_model/#metric-names-and-attributes\n *\n * 1. Names must match `[a-zA-Z_:][a-zA-Z0-9_:]*`\n *\n * 2. Colons are reserved for user defined recording rules.\n * They should not be used by exporters or direct instrumentation.\n *\n * OpenTelemetry metric names are already validated in the Meter when they are created,\n * and they match the format `[a-zA-Z][a-zA-Z0-9_.\\-]*` which is very close to a valid\n * prometheus metric name, so we only need to strip characters valid in OpenTelemetry\n * but not valid in prometheus and replace them with '_'.\n *\n * @param name name to be sanitized\n */\nfunction sanitizePrometheusMetricName(name: string): string {\n  // replace all invalid characters with '_'\n  return name\n    .replace(invalidCharacterRegex, '_')\n    .replace(multipleUnderscoreRegex, '_');\n}\n\n/**\n * @private\n *\n * Helper method which assists in enforcing the naming conventions for metric\n * names in Prometheus\n * @param name the name of the metric\n * @param type the kind of metric\n * @returns string\n */\nfunction enforcePrometheusNamingConvention(\n  name: string,\n  type: InstrumentType\n): string {\n  // Prometheus requires that metrics of the Counter kind have \"_total\" suffix\n  if (!name.endsWith('_total') && type === InstrumentType.COUNTER) {\n    name = name + '_total';\n  }\n\n  return name;\n}\n\nfunction valueString(value: number) {\n  if (Number.isNaN(value)) {\n    return 'NaN';\n  } else if (!Number.isFinite(value)) {\n    if (value < 0) {\n      return '-Inf';\n    } else {\n      return '+Inf';\n    }\n  } else {\n    return `${value}`;\n  }\n}\n\nfunction toPrometheusType(metricData: MetricData): PrometheusDataTypeLiteral {\n  switch (metricData.dataPointType) {\n    case DataPointType.SUM:\n      if (metricData.isMonotonic) {\n        return 'counter';\n      }\n      return 'gauge';\n    case DataPointType.GAUGE:\n      return 'gauge';\n    case DataPointType.HISTOGRAM:\n      return 'histogram';\n    default:\n      return 'untyped';\n  }\n}\n\nfunction stringify(\n  metricName: string,\n  attributes: MetricAttributes,\n  value: number,\n  timestamp?: number,\n  additionalAttributes?: MetricAttributes\n) {\n  let hasAttribute = false;\n  let attributesStr = '';\n\n  for (const [key, val] of Object.entries(attributes)) {\n    const sanitizedAttributeName = sanitizePrometheusMetricName(key);\n    hasAttribute = true;\n    attributesStr += `${\n      attributesStr.length > 0 ? ',' : ''\n    }${sanitizedAttributeName}=\"${escapeAttributeValue(val)}\"`;\n  }\n  if (additionalAttributes) {\n    for (const [key, val] of Object.entries(additionalAttributes)) {\n      const sanitizedAttributeName = sanitizePrometheusMetricName(key);\n      hasAttribute = true;\n      attributesStr += `${\n        attributesStr.length > 0 ? ',' : ''\n      }${sanitizedAttributeName}=\"${escapeAttributeValue(val)}\"`;\n    }\n  }\n\n  if (hasAttribute) {\n    metricName += `{${attributesStr}}`;\n  }\n\n  return `${metricName} ${valueString(value)}${\n    timestamp !== undefined ? ' ' + String(timestamp) : ''\n  }\\n`;\n}\n\nconst NO_REGISTERED_METRICS = '# no registered metrics';\n\nexport class PrometheusSerializer {\n  private _prefix: string | undefined;\n  private _appendTimestamp: boolean;\n\n  constructor(prefix?: string, appendTimestamp = false) {\n    if (prefix) {\n      this._prefix = prefix + '_';\n    }\n    this._appendTimestamp = appendTimestamp;\n  }\n\n  serialize(resourceMetrics: ResourceMetrics): string {\n    let str = '';\n\n    for (const scopeMetrics of resourceMetrics.scopeMetrics) {\n      str += this._serializeScopeMetrics(scopeMetrics);\n    }\n\n    if (str === '') {\n      str += NO_REGISTERED_METRICS;\n    }\n\n    return this._serializeResource(resourceMetrics.resource) + str;\n  }\n\n  private _serializeScopeMetrics(scopeMetrics: ScopeMetrics) {\n    let str = '';\n    for (const metric of scopeMetrics.metrics) {\n      str += this._serializeMetricData(metric) + '\\n';\n    }\n    return str;\n  }\n\n  private _serializeMetricData(metricData: MetricData) {\n    let name = sanitizePrometheusMetricName(\n      escapeString(metricData.descriptor.name)\n    );\n    if (this._prefix) {\n      name = `${this._prefix}${name}`;\n    }\n    const dataPointType = metricData.dataPointType;\n\n    name = enforcePrometheusNamingConvention(name, metricData.descriptor.type);\n\n    const help = `# HELP ${name} ${escapeString(\n      metricData.descriptor.description || 'description missing'\n    )}`;\n    const unit = metricData.descriptor.unit\n      ? `\\n# UNIT ${name} ${escapeString(metricData.descriptor.unit)}`\n      : '';\n    const type = `# TYPE ${name} ${toPrometheusType(metricData)}`;\n\n    let results = '';\n    switch (dataPointType) {\n      case DataPointType.SUM:\n      case DataPointType.GAUGE: {\n        results = metricData.dataPoints\n          .map(it =>\n            this._serializeSingularDataPoint(\n              name,\n              metricData.descriptor.type,\n              it\n            )\n          )\n          .join('');\n        break;\n      }\n      case DataPointType.HISTOGRAM: {\n        results = metricData.dataPoints\n          .map(it =>\n            this._serializeHistogramDataPoint(\n              name,\n              metricData.descriptor.type,\n              it\n            )\n          )\n          .join('');\n        break;\n      }\n      default: {\n        diag.error(\n          `Unrecognizable DataPointType: ${dataPointType} for metric \"${name}\"`\n        );\n      }\n    }\n\n    return `${help}${unit}\\n${type}\\n${results}`.trim();\n  }\n\n  private _serializeSingularDataPoint(\n    name: string,\n    type: InstrumentType,\n    dataPoint: DataPoint<number>\n  ): string {\n    let results = '';\n\n    name = enforcePrometheusNamingConvention(name, type);\n    const { value, attributes } = dataPoint;\n    const timestamp = hrTimeToMilliseconds(dataPoint.endTime);\n    results += stringify(\n      name,\n      attributes,\n      value,\n      this._appendTimestamp ? timestamp : undefined,\n      undefined\n    );\n    return results;\n  }\n\n  private _serializeHistogramDataPoint(\n    name: string,\n    type: InstrumentType,\n    dataPoint: DataPoint<Histogram>\n  ): string {\n    let results = '';\n\n    name = enforcePrometheusNamingConvention(name, type);\n    const attributes = dataPoint.attributes;\n    const histogram = dataPoint.value;\n    const timestamp = hrTimeToMilliseconds(dataPoint.endTime);\n    /** Histogram[\"bucket\"] is not typed with `number` */\n    for (const key of ['count', 'sum'] as ('count' | 'sum')[]) {\n      const value = histogram[key];\n      if (value != null)\n        results += stringify(\n          name + '_' + key,\n          attributes,\n          value,\n          this._appendTimestamp ? timestamp : undefined,\n          undefined\n        );\n    }\n\n    let cumulativeSum = 0;\n    const countEntries = histogram.buckets.counts.entries();\n    let infiniteBoundaryDefined = false;\n    for (const [idx, val] of countEntries) {\n      cumulativeSum += val;\n      const upperBound = histogram.buckets.boundaries[idx];\n      /** HistogramAggregator is producing different boundary output -\n       * in one case not including infinity values, in other -\n       * full, e.g. [0, 100] and [0, 100, Infinity]\n       * we should consider that in export, if Infinity is defined, use it\n       * as boundary\n       */\n      if (upperBound === undefined && infiniteBoundaryDefined) {\n        break;\n      }\n      if (upperBound === Infinity) {\n        infiniteBoundaryDefined = true;\n      }\n      results += stringify(\n        name + '_bucket',\n        attributes,\n        cumulativeSum,\n        this._appendTimestamp ? timestamp : undefined,\n        {\n          le:\n            upperBound === undefined || upperBound === Infinity\n              ? '+Inf'\n              : String(upperBound),\n        }\n      );\n    }\n\n    return results;\n  }\n\n  protected _serializeResource(resource: IResource): string {\n    const name = 'target_info';\n    const help = `# HELP ${name} Target metadata`;\n    const type = `# TYPE ${name} gauge`;\n\n    const results = stringify(name, resource.attributes, 1).trim();\n    return `${help}\\n${type}\\n${results}\\n`;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport {\n  Aggregation,\n  AggregationTemporality,\n  MetricReader,\n} from '@opentelemetry/sdk-metrics';\nimport { createServer, IncomingMessage, Server, ServerResponse } from 'http';\nimport { ExporterConfig } from './export/types';\nimport { PrometheusSerializer } from './PrometheusSerializer';\n/** Node.js v8.x compat */\nimport { URL } from 'url';\n\nexport class PrometheusExporter extends MetricReader {\n  static readonly DEFAULT_OPTIONS = {\n    host: undefined,\n    port: 9464,\n    endpoint: '/metrics',\n    prefix: '',\n    appendTimestamp: false,\n  };\n\n  private readonly _host?: string;\n  private readonly _port: number;\n  private readonly _baseUrl: string;\n  private readonly _endpoint: string;\n  private readonly _server: Server;\n  private readonly _prefix?: string;\n  private readonly _appendTimestamp: boolean;\n  private _serializer: PrometheusSerializer;\n  private _startServerPromise: Promise<void> | undefined;\n\n  // This will be required when histogram is implemented. Leaving here so it is not forgotten\n  // Histogram cannot have a attribute named 'le'\n  // private static readonly RESERVED_HISTOGRAM_LABEL = 'le';\n\n  /**\n   * Constructor\n   * @param config Exporter configuration\n   * @param callback Callback to be called after a server was started\n   */\n  constructor(\n    config: ExporterConfig = {},\n    callback: (error: Error | void) => void = () => {}\n  ) {\n    super({\n      aggregationSelector: _instrumentType => Aggregation.Default(),\n      aggregationTemporalitySelector: _instrumentType =>\n        AggregationTemporality.CUMULATIVE,\n      metricProducers: config.metricProducers,\n    });\n    this._host =\n      config.host ||\n      process.env.OTEL_EXPORTER_PROMETHEUS_HOST ||\n      PrometheusExporter.DEFAULT_OPTIONS.host;\n    this._port =\n      config.port ||\n      Number(process.env.OTEL_EXPORTER_PROMETHEUS_PORT) ||\n      PrometheusExporter.DEFAULT_OPTIONS.port;\n    this._prefix = config.prefix || PrometheusExporter.DEFAULT_OPTIONS.prefix;\n    this._appendTimestamp =\n      typeof config.appendTimestamp === 'boolean'\n        ? config.appendTimestamp\n        : PrometheusExporter.DEFAULT_OPTIONS.appendTimestamp;\n    // unref to prevent prometheus exporter from holding the process open on exit\n    this._server = createServer(this._requestHandler).unref();\n    this._serializer = new PrometheusSerializer(\n      this._prefix,\n      this._appendTimestamp\n    );\n\n    this._baseUrl = `http://${this._host}:${this._port}/`;\n    this._endpoint = (\n      config.endpoint || PrometheusExporter.DEFAULT_OPTIONS.endpoint\n    ).replace(/^([^/])/, '/$1');\n\n    if (config.preventServerStart !== true) {\n      this.startServer().then(callback, err => {\n        diag.error(err);\n        callback(err);\n      });\n    } else if (callback) {\n      // Do not invoke callback immediately to avoid zalgo problem.\n      queueMicrotask(callback);\n    }\n  }\n\n  override async onForceFlush(): Promise<void> {\n    /** do nothing */\n  }\n\n  /**\n   * Shuts down the export server and clears the registry\n   */\n  override onShutdown(): Promise<void> {\n    return this.stopServer();\n  }\n\n  /**\n   * Stops the Prometheus export server\n   */\n  stopServer(): Promise<void> {\n    if (!this._server) {\n      diag.debug(\n        'Prometheus stopServer() was called but server was never started.'\n      );\n      return Promise.resolve();\n    } else {\n      return new Promise(resolve => {\n        this._server.close(err => {\n          if (!err) {\n            diag.debug('Prometheus exporter was stopped');\n          } else {\n            if (\n              (err as unknown as { code: string }).code !==\n              'ERR_SERVER_NOT_RUNNING'\n            ) {\n              globalErrorHandler(err);\n            }\n          }\n          resolve();\n        });\n      });\n    }\n  }\n\n  /**\n   * Starts the Prometheus export server\n   */\n  startServer(): Promise<void> {\n    this._startServerPromise ??= new Promise((resolve, reject) => {\n      this._server.once('error', reject);\n      this._server.listen(\n        {\n          port: this._port,\n          host: this._host,\n        },\n        () => {\n          diag.debug(\n            `Prometheus exporter server started: ${this._host}:${this._port}/${this._endpoint}`\n          );\n          resolve();\n        }\n      );\n    });\n\n    return this._startServerPromise;\n  }\n\n  /**\n   * Request handler that responds with the current state of metrics\n   * @param _request Incoming HTTP request of server instance\n   * @param response HTTP response object used to response to request\n   */\n  public getMetricsRequestHandler(\n    _request: IncomingMessage,\n    response: ServerResponse\n  ): void {\n    this._exportMetrics(response);\n  }\n\n  /**\n   * Request handler used by http library to respond to incoming requests\n   * for the current state of metrics by the Prometheus backend.\n   *\n   * @param request Incoming HTTP request to export server\n   * @param response HTTP response object used to respond to request\n   */\n  private _requestHandler = (\n    request: IncomingMessage,\n    response: ServerResponse\n  ) => {\n    if (\n      request.url != null &&\n      new URL(request.url, this._baseUrl).pathname === this._endpoint\n    ) {\n      this._exportMetrics(response);\n    } else {\n      this._notFound(response);\n    }\n  };\n\n  /**\n   * Responds to incoming message with current state of all metrics.\n   */\n  private _exportMetrics = (response: ServerResponse) => {\n    response.statusCode = 200;\n    response.setHeader('content-type', 'text/plain');\n    this.collect().then(\n      collectionResult => {\n        const { resourceMetrics, errors } = collectionResult;\n        if (errors.length) {\n          diag.error(\n            'PrometheusExporter: metrics collection errors',\n            ...errors\n          );\n        }\n        response.end(this._serializer.serialize(resourceMetrics));\n      },\n      err => {\n        response.end(`# failed to export metrics: ${err}`);\n      }\n    );\n  };\n\n  /**\n   * Responds with 404 status code to all requests that do not match the configured endpoint.\n   */\n  private _notFound = (response: ServerResponse) => {\n    response.statusCode = 404;\n    response.end();\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './PrometheusExporter';\nexport * from './PrometheusSerializer';\nexport * from './export/types';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextManager, Context } from '@opentelemetry/api';\nimport { EventEmitter } from 'events';\n\ntype Func<T> = (...args: unknown[]) => T;\n\n/**\n * Store a map for each event of all original listeners and their \"patched\"\n * version. So when a listener is removed by the user, the corresponding\n * patched function will be also removed.\n */\ninterface PatchMap {\n  [name: string]: WeakMap<Func<void>, Func<void>>;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' as const,\n  'on' as const,\n  'once' as const,\n  'prependListener' as const,\n  'prependOnceListener' as const,\n];\n\nexport abstract class AbstractAsyncHooksContextManager\n  implements ContextManager\n{\n  abstract active(): Context;\n\n  abstract with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F>;\n\n  abstract enable(): this;\n\n  abstract disable(): this;\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    if (target instanceof EventEmitter) {\n      return this._bindEventEmitter(context, target);\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: never, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper as any;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  private _bindEventEmitter<T extends EventEmitter>(\n    context: Context,\n    ee: T\n  ): T {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(\n        ee,\n        ee.removeAllListeners\n      );\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveListener(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveAllListeners(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  private _patchAddListener(\n    ee: EventEmitter,\n    original: Function,\n    context: Context\n  ) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n  private _createPatchMap(ee: EventEmitter): PatchMap {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee as any)[this._kOtListeners] = map;\n    return map;\n  }\n  private _getPatchMap(ee: EventEmitter): PatchMap | undefined {\n    return (ee as never)[this._kOtListeners];\n  }\n\n  private readonly _kOtListeners = Symbol('OtListeners');\n  private _wrapped = false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport * as asyncHooks from 'async_hooks';\nimport { AbstractAsyncHooksContextManager } from './AbstractAsyncHooksContextManager';\n\nexport class AsyncHooksContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncHook: asyncHooks.AsyncHook;\n  private _contexts: Map<number, Context> = new Map();\n  private _stack: Array<Context | undefined> = [];\n\n  constructor() {\n    super();\n    this._asyncHook = asyncHooks.createHook({\n      init: this._init.bind(this),\n      before: this._before.bind(this),\n      after: this._after.bind(this),\n      destroy: this._destroy.bind(this),\n      promiseResolve: this._destroy.bind(this),\n    });\n  }\n\n  active(): Context {\n    return this._stack[this._stack.length - 1] ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    this._enterContext(context);\n    try {\n      return fn.call(thisArg!, ...args);\n    } finally {\n      this._exitContext();\n    }\n  }\n\n  enable(): this {\n    this._asyncHook.enable();\n    return this;\n  }\n\n  disable(): this {\n    this._asyncHook.disable();\n    this._contexts.clear();\n    this._stack = [];\n    return this;\n  }\n\n  /**\n   * Init hook will be called when userland create a async context, setting the\n   * context as the current one if it exist.\n   * @param uid id of the async context\n   * @param type the resource type\n   */\n  private _init(uid: number, type: string) {\n    // ignore TIMERWRAP as they combine timers with same timeout which can lead to\n    // false context propagation. TIMERWRAP has been removed in node 11\n    // every timer has it's own `Timeout` resource anyway which is used to propagate\n    // context.\n    if (type === 'TIMERWRAP') return;\n\n    const context = this._stack[this._stack.length - 1];\n    if (context !== undefined) {\n      this._contexts.set(uid, context);\n    }\n  }\n\n  /**\n   * Destroy hook will be called when a given context is no longer used so we can\n   * remove its attached context.\n   * @param uid uid of the async context\n   */\n  private _destroy(uid: number) {\n    this._contexts.delete(uid);\n  }\n\n  /**\n   * Before hook is called just before executing a async context.\n   * @param uid uid of the async context\n   */\n  private _before(uid: number) {\n    const context = this._contexts.get(uid);\n    if (context !== undefined) {\n      this._enterContext(context);\n    }\n  }\n\n  /**\n   * After hook is called just after completing the execution of a async context.\n   */\n  private _after() {\n    this._exitContext();\n  }\n\n  /**\n   * Set the given context as active\n   */\n  private _enterContext(context: Context) {\n    this._stack.push(context);\n  }\n\n  /**\n   * Remove the context at the root of the stack\n   */\n  private _exitContext() {\n    this._stack.pop();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { AsyncLocalStorage } from 'async_hooks';\nimport { AbstractAsyncHooksContextManager } from './AbstractAsyncHooksContextManager';\n\nexport class AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncLocalStorage: AsyncLocalStorage<Context>;\n\n  constructor() {\n    super();\n    this._asyncLocalStorage = new AsyncLocalStorage();\n  }\n\n  active(): Context {\n    return this._asyncLocalStorage.getStore() ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb as never, ...args);\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { AsyncHooksContextManager } from './AsyncHooksContextManager';\nexport { AsyncLocalStorageContextManager } from './AsyncLocalStorageContextManager';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createContextKey } from '@opentelemetry/api';\n\n/** shared context for storing an extracted b3 debug flag */\nexport const B3_DEBUG_FLAG_KEY = createContextKey(\n  'OpenTelemetry Context Key B3 Debug Flag'\n);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** B3 single-header key */\nexport const B3_CONTEXT_HEADER = 'b3';\n\n/* b3 multi-header keys */\nexport const X_B3_TRACE_ID = 'x-b3-traceid';\nexport const X_B3_SPAN_ID = 'x-b3-spanid';\nexport const X_B3_SAMPLED = 'x-b3-sampled';\nexport const X_B3_PARENT_SPAN_ID = 'x-b3-parentspanid';\nexport const X_B3_FLAGS = 'x-b3-flags';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  isValidSpanId,\n  isValidTraceId,\n  trace,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3_DEBUG_FLAG_KEY } from './common';\nimport {\n  X_B3_FLAGS,\n  X_B3_PARENT_SPAN_ID,\n  X_B3_SAMPLED,\n  X_B3_SPAN_ID,\n  X_B3_TRACE_ID,\n} from './constants';\n\nconst VALID_SAMPLED_VALUES = new Set([true, 'true', 'True', '1', 1]);\nconst VALID_UNSAMPLED_VALUES = new Set([false, 'false', 'False', '0', 0]);\n\nfunction isValidSampledValue(sampled: TraceFlags | undefined): boolean {\n  return sampled === TraceFlags.SAMPLED || sampled === TraceFlags.NONE;\n}\n\nfunction parseHeader(header: unknown) {\n  return Array.isArray(header) ? header[0] : header;\n}\n\nfunction getHeaderValue(carrier: unknown, getter: TextMapGetter, key: string) {\n  const header = getter.get(carrier, key);\n  return parseHeader(header);\n}\n\nfunction getTraceId(carrier: unknown, getter: TextMapGetter): string {\n  const traceId = getHeaderValue(carrier, getter, X_B3_TRACE_ID);\n  if (typeof traceId === 'string') {\n    return traceId.padStart(32, '0');\n  }\n  return '';\n}\n\nfunction getSpanId(carrier: unknown, getter: TextMapGetter): string {\n  const spanId = getHeaderValue(carrier, getter, X_B3_SPAN_ID);\n  if (typeof spanId === 'string') {\n    return spanId;\n  }\n  return '';\n}\n\nfunction getDebug(carrier: unknown, getter: TextMapGetter): string | undefined {\n  const debug = getHeaderValue(carrier, getter, X_B3_FLAGS);\n  return debug === '1' ? '1' : undefined;\n}\n\nfunction getTraceFlags(\n  carrier: unknown,\n  getter: TextMapGetter\n): TraceFlags | undefined {\n  const traceFlags = getHeaderValue(carrier, getter, X_B3_SAMPLED);\n  const debug = getDebug(carrier, getter);\n  if (debug === '1' || VALID_SAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.SAMPLED;\n  }\n  if (traceFlags === undefined || VALID_UNSAMPLED_VALUES.has(traceFlags)) {\n    return TraceFlags.NONE;\n  }\n  // This indicates to isValidSampledValue that this is not valid\n  return;\n}\n\n/**\n * Propagator for the B3 multiple-header HTTP format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nexport class B3MultiPropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      !isSpanContextValid(spanContext) ||\n      isTracingSuppressed(context)\n    )\n      return;\n\n    const debug = context.getValue(B3_DEBUG_FLAG_KEY);\n    setter.set(carrier, X_B3_TRACE_ID, spanContext.traceId);\n    setter.set(carrier, X_B3_SPAN_ID, spanContext.spanId);\n    // According to the B3 spec, if the debug flag is set,\n    // the sampled flag shouldn't be propagated as well.\n    if (debug === '1') {\n      setter.set(carrier, X_B3_FLAGS, debug);\n    } else if (spanContext.traceFlags !== undefined) {\n      // We set the header only if there is an existing sampling decision.\n      // Otherwise we will omit it => Absent.\n      setter.set(\n        carrier,\n        X_B3_SAMPLED,\n        (TraceFlags.SAMPLED & spanContext.traceFlags) === TraceFlags.SAMPLED\n          ? '1'\n          : '0'\n      );\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const traceId = getTraceId(carrier, getter);\n    const spanId = getSpanId(carrier, getter);\n    const traceFlags = getTraceFlags(carrier, getter) as TraceFlags;\n    const debug = getDebug(carrier, getter);\n\n    if (\n      isValidTraceId(traceId) &&\n      isValidSpanId(spanId) &&\n      isValidSampledValue(traceFlags)\n    ) {\n      context = context.setValue(B3_DEBUG_FLAG_KEY, debug);\n      return trace.setSpanContext(context, {\n        traceId,\n        spanId,\n        isRemote: true,\n        traceFlags,\n      });\n    }\n    return context;\n  }\n\n  fields(): string[] {\n    return [\n      X_B3_TRACE_ID,\n      X_B3_SPAN_ID,\n      X_B3_FLAGS,\n      X_B3_SAMPLED,\n      X_B3_PARENT_SPAN_ID,\n    ];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  isValidSpanId,\n  isValidTraceId,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3_DEBUG_FLAG_KEY } from './common';\nimport { B3_CONTEXT_HEADER } from './constants';\n\nconst B3_CONTEXT_REGEX =\n  /((?:[0-9a-f]{16}){1,2})-([0-9a-f]{16})(?:-([01d](?![0-9a-f])))?(?:-([0-9a-f]{16}))?/;\nconst PADDING = '0'.repeat(16);\nconst SAMPLED_VALUES = new Set(['d', '1']);\nconst DEBUG_STATE = 'd';\n\nfunction convertToTraceId128(traceId: string): string {\n  return traceId.length === 32 ? traceId : `${PADDING}${traceId}`;\n}\n\nfunction convertToTraceFlags(samplingState: string | undefined): TraceFlags {\n  if (samplingState && SAMPLED_VALUES.has(samplingState)) {\n    return TraceFlags.SAMPLED;\n  }\n  return TraceFlags.NONE;\n}\n\n/**\n * Propagator for the B3 single-header HTTP format.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nexport class B3SinglePropagator implements TextMapPropagator {\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    if (\n      !spanContext ||\n      !isSpanContextValid(spanContext) ||\n      isTracingSuppressed(context)\n    )\n      return;\n\n    const samplingState =\n      context.getValue(B3_DEBUG_FLAG_KEY) || spanContext.traceFlags & 0x1;\n    const value = `${spanContext.traceId}-${spanContext.spanId}-${samplingState}`;\n    setter.set(carrier, B3_CONTEXT_HEADER, value);\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const header = getter.get(carrier, B3_CONTEXT_HEADER);\n    const b3Context = Array.isArray(header) ? header[0] : header;\n    if (typeof b3Context !== 'string') return context;\n\n    const match = b3Context.match(B3_CONTEXT_REGEX);\n    if (!match) return context;\n\n    const [, extractedTraceId, spanId, samplingState] = match;\n    const traceId = convertToTraceId128(extractedTraceId);\n\n    if (!isValidTraceId(traceId) || !isValidSpanId(spanId)) return context;\n\n    const traceFlags = convertToTraceFlags(samplingState);\n\n    if (samplingState === DEBUG_STATE) {\n      context = context.setValue(B3_DEBUG_FLAG_KEY, samplingState);\n    }\n\n    return trace.setSpanContext(context, {\n      traceId,\n      spanId,\n      isRemote: true,\n      traceFlags,\n    });\n  }\n\n  fields(): string[] {\n    return [B3_CONTEXT_HEADER];\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Enumeration of B3 inject encodings */\nexport enum B3InjectEncoding {\n  SINGLE_HEADER,\n  MULTI_HEADER,\n}\n\n/** Configuration for the B3Propagator */\nexport interface B3PropagatorConfig {\n  injectEncoding?: B3InjectEncoding;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { B3MultiPropagator } from './B3MultiPropagator';\nimport { B3SinglePropagator } from './B3SinglePropagator';\nimport { B3_CONTEXT_HEADER } from './constants';\nimport { B3InjectEncoding, B3PropagatorConfig } from './types';\n\n/**\n * Propagator that extracts B3 context in both single and multi-header variants,\n * with configurable injection format defaulting to B3 single-header. Due to\n * the asymmetry in injection and extraction formats this is not suitable to\n * be implemented as a composite propagator.\n * Based on: https://github.com/openzipkin/b3-propagation\n */\nexport class B3Propagator implements TextMapPropagator {\n  private readonly _b3MultiPropagator: B3MultiPropagator =\n    new B3MultiPropagator();\n  private readonly _b3SinglePropagator: B3SinglePropagator =\n    new B3SinglePropagator();\n  private readonly _inject: (\n    context: Context,\n    carrier: unknown,\n    setter: TextMapSetter\n  ) => void;\n  public readonly _fields: string[];\n\n  constructor(config: B3PropagatorConfig = {}) {\n    if (config.injectEncoding === B3InjectEncoding.MULTI_HEADER) {\n      this._inject = this._b3MultiPropagator.inject;\n      this._fields = this._b3MultiPropagator.fields();\n    } else {\n      this._inject = this._b3SinglePropagator.inject;\n      this._fields = this._b3SinglePropagator.fields();\n    }\n  }\n\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    if (isTracingSuppressed(context)) {\n      return;\n    }\n    this._inject(context, carrier, setter);\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const header = getter.get(carrier, B3_CONTEXT_HEADER);\n    const b3Context = Array.isArray(header) ? header[0] : header;\n\n    if (b3Context) {\n      return this._b3SinglePropagator.extract(context, carrier, getter);\n    } else {\n      return this._b3MultiPropagator.extract(context, carrier, getter);\n    }\n  }\n\n  fields(): string[] {\n    return this._fields;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './B3Propagator';\nexport * from './constants';\nexport * from './types';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Event name definitions\nexport const ExceptionEventName = 'exception';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  diag,\n  Exception,\n  HrTime,\n  Link,\n  Span as APISpan,\n  SpanAttributes,\n  SpanAttributeValue,\n  SpanContext,\n  SpanKind,\n  SpanStatus,\n  SpanStatusCode,\n  TimeInput,\n} from '@opentelemetry/api';\nimport {\n  addHrTimes,\n  millisToHrTime,\n  getTimeOrigin,\n  hrTime,\n  hrTimeDuration,\n  InstrumentationLibrary,\n  isAttributeValue,\n  isTimeInput,\n  isTimeInputHrTime,\n  otperformance,\n  sanitizeAttributes,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport {\n  SEMATTRS_EXCEPTION_MESSAGE,\n  SEMATTRS_EXCEPTION_STACKTRACE,\n  SEMATTRS_EXCEPTION_TYPE,\n} from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { SpanProcessor } from './SpanProcessor';\nimport { TimedEvent } from './TimedEvent';\nimport { Tracer } from './Tracer';\nimport { SpanLimits } from './types';\n\n/**\n * This class represents a span.\n */\nexport class Span implements APISpan, ReadableSpan {\n  // Below properties are included to implement ReadableSpan for export\n  // purposes but are not intended to be written-to directly.\n  private readonly _spanContext: SpanContext;\n  readonly kind: SpanKind;\n  readonly parentSpanId?: string;\n  readonly attributes: SpanAttributes = {};\n  readonly links: Link[] = [];\n  readonly events: TimedEvent[] = [];\n  readonly startTime: HrTime;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  private _droppedAttributesCount = 0;\n  private _droppedEventsCount: number = 0;\n  private _droppedLinksCount: number = 0;\n\n  name: string;\n  status: SpanStatus = {\n    code: SpanStatusCode.UNSET,\n  };\n  endTime: HrTime = [0, 0];\n  private _ended = false;\n  private _duration: HrTime = [-1, -1];\n  private readonly _spanProcessor: SpanProcessor;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _attributeValueLengthLimit: number;\n\n  private readonly _performanceStartTime: number;\n  private readonly _performanceOffset: number;\n  private readonly _startTimeProvided: boolean;\n\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  constructor(\n    parentTracer: Tracer,\n    context: Context,\n    spanName: string,\n    spanContext: SpanContext,\n    kind: SpanKind,\n    parentSpanId?: string,\n    links: Link[] = [],\n    startTime?: TimeInput,\n    _deprecatedClock?: unknown, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes?: SpanAttributes\n  ) {\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n\n    const now = Date.now();\n    this._performanceStartTime = otperformance.now();\n    this._performanceOffset =\n      now - (this._performanceStartTime + getTimeOrigin());\n    this._startTimeProvided = startTime != null;\n\n    this.startTime = this._getTime(startTime ?? now);\n\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n    this._attributeValueLengthLimit =\n      this._spanLimits.attributeValueLengthLimit || 0;\n\n    if (attributes != null) {\n      this.setAttributes(attributes);\n    }\n\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n  }\n\n  spanContext(): SpanContext {\n    return this._spanContext;\n  }\n\n  setAttribute(key: string, value?: SpanAttributeValue): this;\n  setAttribute(key: string, value: unknown): this {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      diag.warn(`Invalid attribute key: ${key}`);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      diag.warn(`Invalid attribute value set for key: ${key}`);\n      return this;\n    }\n\n    if (\n      Object.keys(this.attributes).length >=\n        this._spanLimits.attributeCountLimit! &&\n      !Object.prototype.hasOwnProperty.call(this.attributes, key)\n    ) {\n      this._droppedAttributesCount++;\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  }\n\n  setAttributes(attributes: SpanAttributes): this {\n    for (const [k, v] of Object.entries(attributes)) {\n      this.setAttribute(k, v);\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [timeStamp] Specified time stamp for the event\n   */\n  addEvent(\n    name: string,\n    attributesOrStartTime?: SpanAttributes | TimeInput,\n    timeStamp?: TimeInput\n  ): this {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      diag.warn('No events allowed.');\n      this._droppedEventsCount++;\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit!) {\n      if (this._droppedEventsCount === 0) {\n        diag.debug('Dropping extra events.');\n      }\n      this.events.shift();\n      this._droppedEventsCount++;\n    }\n\n    if (isTimeInput(attributesOrStartTime)) {\n      if (!isTimeInput(timeStamp)) {\n        timeStamp = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n\n    const attributes = sanitizeAttributes(attributesOrStartTime);\n\n    this.events.push({\n      name,\n      attributes,\n      time: this._getTime(timeStamp),\n      droppedAttributesCount: 0,\n    });\n    return this;\n  }\n\n  addLink(link: Link): this {\n    this.links.push(link);\n    return this;\n  }\n\n  addLinks(links: Link[]): this {\n    this.links.push(...links);\n    return this;\n  }\n\n  setStatus(status: SpanStatus): this {\n    if (this._isSpanEnded()) return this;\n    this.status = status;\n    return this;\n  }\n\n  updateName(name: string): this {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  }\n\n  end(endTime?: TimeInput): void {\n    if (this._isSpanEnded()) {\n      diag.error(\n        `${this.name} ${this._spanContext.traceId}-${this._spanContext.spanId} - You can only call end() on a span once.`\n      );\n      return;\n    }\n    this._ended = true;\n\n    this.endTime = this._getTime(endTime);\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n\n    if (this._duration[0] < 0) {\n      diag.warn(\n        'Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.',\n        this.startTime,\n        this.endTime\n      );\n      this.endTime = this.startTime.slice() as HrTime;\n      this._duration = [0, 0];\n    }\n\n    if (this._droppedEventsCount > 0) {\n      diag.warn(\n        `Dropped ${this._droppedEventsCount} events because eventCountLimit reached`\n      );\n    }\n\n    this._spanProcessor.onEnd(this);\n  }\n\n  private _getTime(inp?: TimeInput): HrTime {\n    if (typeof inp === 'number' && inp < otperformance.now()) {\n      // must be a performance timestamp\n      // apply correction and convert to hrtime\n      return hrTime(inp + this._performanceOffset);\n    }\n\n    if (typeof inp === 'number') {\n      return millisToHrTime(inp);\n    }\n\n    if (inp instanceof Date) {\n      return millisToHrTime(inp.getTime());\n    }\n\n    if (isTimeInputHrTime(inp)) {\n      return inp;\n    }\n\n    if (this._startTimeProvided) {\n      // if user provided a time for the start manually\n      // we can't use duration to calculate event/end times\n      return millisToHrTime(Date.now());\n    }\n\n    const msDuration = otperformance.now() - this._performanceStartTime;\n    return addHrTimes(this.startTime, millisToHrTime(msDuration));\n  }\n\n  isRecording(): boolean {\n    return this._ended === false;\n  }\n\n  recordException(exception: Exception, time?: TimeInput): void {\n    const attributes: SpanAttributes = {};\n    if (typeof exception === 'string') {\n      attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n      } else if (exception.name) {\n        attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n\n    // these are minimum requirements from spec\n    if (\n      attributes[SEMATTRS_EXCEPTION_TYPE] ||\n      attributes[SEMATTRS_EXCEPTION_MESSAGE]\n    ) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      diag.warn(`Failed to record an exception ${exception}`);\n    }\n  }\n\n  get duration(): HrTime {\n    return this._duration;\n  }\n\n  get ended(): boolean {\n    return this._ended;\n  }\n\n  get droppedAttributesCount(): number {\n    return this._droppedAttributesCount;\n  }\n\n  get droppedEventsCount(): number {\n    return this._droppedEventsCount;\n  }\n\n  get droppedLinksCount(): number {\n    return this._droppedLinksCount;\n  }\n\n  private _isSpanEnded(): boolean {\n    if (this._ended) {\n      diag.warn(\n        `Can not execute the operation on ended Span {traceId: ${this._spanContext.traceId}, spanId: ${this._spanContext.spanId}}`\n      );\n    }\n    return this._ended;\n  }\n\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  private _truncateToLimitUtil(value: string, limit: number): string {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substr(0, limit);\n  }\n\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with truncated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  private _truncateToSize(value: SpanAttributeValue): SpanAttributeValue {\n    const limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      diag.warn(`Attribute value limit must be positive, got ${limit}`);\n      return value;\n    }\n\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n\n    // Array of strings\n    if (Array.isArray(value)) {\n      return (value as []).map(val =>\n        typeof val === 'string' ? this._truncateToLimitUtil(val, limit) : val\n      );\n    }\n\n    // Other types, no need to apply value length limit\n    return value;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceState,\n} from '@opentelemetry/api';\n\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport enum SamplingDecision {\n  /**\n   * `Span.isRecording() === false`, span will not be recorded and all events\n   * and attributes will be dropped.\n   */\n  NOT_RECORD,\n  /**\n   * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n   * MUST NOT be set.\n   */\n  RECORD,\n  /**\n   * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n   * MUST be set.\n   */\n  RECORD_AND_SAMPLED,\n}\n\n/**\n * A sampling result contains a decision for a {@link Span} and additional\n * attributes the sampler would like to added to the Span.\n */\nexport interface SamplingResult {\n  /**\n   * A sampling decision, refer to {@link SamplingDecision} for details.\n   */\n  decision: SamplingDecision;\n  /**\n   * The list of attributes returned by SamplingResult MUST be immutable.\n   * Caller may call {@link Sampler}.shouldSample any number of times and\n   * can safely cache the returned value.\n   */\n  attributes?: Readonly<SpanAttributes>;\n  /**\n   * A {@link TraceState} that will be associated with the {@link Span} through\n   * the new {@link SpanContext}. Samplers SHOULD return the TraceState from\n   * the passed-in {@link Context} if they do not intend to change it. Leaving\n   * the value undefined will also leave the TraceState unchanged.\n   */\n  traceState?: TraceState;\n}\n\n/**\n * This interface represent a sampler. Sampling is a mechanism to control the\n * noise and overhead introduced by OpenTelemetry by reducing the number of\n * samples of traces collected and sent to the backend.\n */\nexport interface Sampler {\n  /**\n   * Checks whether span needs to be created and tracked.\n   *\n   * @param context Parent Context which may contain a span.\n   * @param traceId of the span to be created. It can be different from the\n   *     traceId in the {@link SpanContext}. Typically in situations when the\n   *     span to be created starts a new trace.\n   * @param spanName of the span to be created.\n   * @param spanKind of the span to be created.\n   * @param attributes Initial set of SpanAttributes for the Span being constructed.\n   * @param links Collection of links that will be associated with the Span to\n   *     be created. Typically useful for batch operations.\n   * @returns a {@link SamplingResult}.\n   */\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult;\n\n  /** Returns the sampler name or short description with the configuration. */\n  toString(): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples no traces. */\nexport class AlwaysOffSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOffSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples all traces. */\nexport class AlwaysOnSampler implements Sampler {\n  shouldSample(): SamplingResult {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED,\n    };\n  }\n\n  toString(): string {\n    return 'AlwaysOnSampler';\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  isSpanContextValid,\n  Link,\n  SpanAttributes,\n  SpanKind,\n  TraceFlags,\n  trace,\n} from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\nimport { Sampler, SamplingResult } from '../Sampler';\n\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nexport class ParentBasedSampler implements Sampler {\n  private _root: Sampler;\n  private _remoteParentSampled: Sampler;\n  private _remoteParentNotSampled: Sampler;\n  private _localParentSampled: Sampler;\n  private _localParentNotSampled: Sampler;\n\n  constructor(config: ParentBasedSamplerConfig) {\n    this._root = config.root;\n\n    if (!this._root) {\n      globalErrorHandler(\n        new Error('ParentBasedSampler must have a root sampler configured')\n      );\n      this._root = new AlwaysOnSampler();\n    }\n\n    this._remoteParentSampled =\n      config.remoteParentSampled ?? new AlwaysOnSampler();\n    this._remoteParentNotSampled =\n      config.remoteParentNotSampled ?? new AlwaysOffSampler();\n    this._localParentSampled =\n      config.localParentSampled ?? new AlwaysOnSampler();\n    this._localParentNotSampled =\n      config.localParentNotSampled ?? new AlwaysOffSampler();\n  }\n\n  shouldSample(\n    context: Context,\n    traceId: string,\n    spanName: string,\n    spanKind: SpanKind,\n    attributes: SpanAttributes,\n    links: Link[]\n  ): SamplingResult {\n    const parentContext = trace.getSpanContext(context);\n\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(\n          context,\n          traceId,\n          spanName,\n          spanKind,\n          attributes,\n          links\n        );\n      }\n      return this._remoteParentNotSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(\n        context,\n        traceId,\n        spanName,\n        spanKind,\n        attributes,\n        links\n      );\n    }\n\n    return this._localParentNotSampled.shouldSample(\n      context,\n      traceId,\n      spanName,\n      spanKind,\n      attributes,\n      links\n    );\n  }\n\n  toString(): string {\n    return `ParentBased{root=${this._root.toString()}, remoteParentSampled=${this._remoteParentSampled.toString()}, remoteParentNotSampled=${this._remoteParentNotSampled.toString()}, localParentSampled=${this._localParentSampled.toString()}, localParentNotSampled=${this._localParentNotSampled.toString()}}`;\n  }\n}\n\ninterface ParentBasedSamplerConfig {\n  /** Sampler called for spans with no parent */\n  root: Sampler;\n  /** Sampler called for spans with a remote parent which was sampled. Default AlwaysOn */\n  remoteParentSampled?: Sampler;\n  /** Sampler called for spans with a remote parent which was not sampled. Default AlwaysOff */\n  remoteParentNotSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was sampled. Default AlwaysOn */\n  localParentSampled?: Sampler;\n  /** Sampler called for spans with a local parent which was not sampled. Default AlwaysOff */\n  localParentNotSampled?: Sampler;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { Sampler, SamplingDecision, SamplingResult } from '../Sampler';\n\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nexport class TraceIdRatioBasedSampler implements Sampler {\n  private _upperBound: number;\n\n  constructor(private readonly _ratio: number = 0) {\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n\n  shouldSample(context: unknown, traceId: string): SamplingResult {\n    return {\n      decision:\n        isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n          ? SamplingDecision.RECORD_AND_SAMPLED\n          : SamplingDecision.NOT_RECORD,\n    };\n  }\n\n  toString(): string {\n    return `TraceIdRatioBased{${this._ratio}}`;\n  }\n\n  private _normalize(ratio: number): number {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  }\n\n  private _accumulate(traceId: string): number {\n    let accumulation = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n      const pos = i * 8;\n      const part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues, ENVIRONMENT } from '@opentelemetry/core';\nimport { Sampler } from './Sampler';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\n\nconst env = getEnv();\nconst FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nconst DEFAULT_RATIO = 1;\n\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n  return {\n    sampler: buildSamplerFromEnv(env),\n    forceFlushTimeoutMillis: 30000,\n    generalLimits: {\n      attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT,\n    },\n    spanLimits: {\n      attributeValueLengthLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n      attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n      linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,\n      eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT,\n      attributePerEventCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n      attributePerLinkCountLimit:\n        getEnv().OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    },\n  };\n}\n\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(\n  environment: Required<ENVIRONMENT> = getEnv()\n): Sampler {\n  switch (environment.OTEL_TRACES_SAMPLER) {\n    case TracesSamplerValues.AlwaysOn:\n      return new AlwaysOnSampler();\n    case TracesSamplerValues.AlwaysOff:\n      return new AlwaysOffSampler();\n    case TracesSamplerValues.ParentBasedAlwaysOn:\n      return new ParentBasedSampler({\n        root: new AlwaysOnSampler(),\n      });\n    case TracesSamplerValues.ParentBasedAlwaysOff:\n      return new ParentBasedSampler({\n        root: new AlwaysOffSampler(),\n      });\n    case TracesSamplerValues.TraceIdRatio:\n      return new TraceIdRatioBasedSampler(\n        getSamplerProbabilityFromEnv(environment)\n      );\n    case TracesSamplerValues.ParentBasedTraceIdRatio:\n      return new ParentBasedSampler({\n        root: new TraceIdRatioBasedSampler(\n          getSamplerProbabilityFromEnv(environment)\n        ),\n      });\n    default:\n      diag.error(\n        `OTEL_TRACES_SAMPLER value \"${environment.OTEL_TRACES_SAMPLER} invalid, defaulting to ${FALLBACK_OTEL_TRACES_SAMPLER}\".`\n      );\n      return new AlwaysOnSampler();\n  }\n}\n\nfunction getSamplerProbabilityFromEnv(\n  environment: Required<ENVIRONMENT>\n): number | undefined {\n  if (\n    environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n    environment.OTEL_TRACES_SAMPLER_ARG === ''\n  ) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG is blank, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  const probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n\n  if (isNaN(probability)) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is invalid, defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  if (probability < 0 || probability > 1) {\n    diag.error(\n      `OTEL_TRACES_SAMPLER_ARG=${environment.OTEL_TRACES_SAMPLER_ARG} was given, but it is out of range ([0..1]), defaulting to ${DEFAULT_RATIO}.`\n    );\n    return DEFAULT_RATIO;\n  }\n\n  return probability;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { Sampler } from './Sampler';\nimport { SpanLimits, TracerConfig, GeneralLimits } from './types';\nimport {\n  DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  getEnvWithoutDefaults,\n} from '@opentelemetry/core';\n\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig: TracerConfig): TracerConfig & {\n  sampler: Sampler;\n  spanLimits: SpanLimits;\n  generalLimits: GeneralLimits;\n} {\n  const perInstanceDefaults: Partial<TracerConfig> = {\n    sampler: buildSamplerFromEnv(),\n  };\n\n  const DEFAULT_CONFIG = loadDefaultConfig();\n\n  const target = Object.assign(\n    {},\n    DEFAULT_CONFIG,\n    perInstanceDefaults,\n    userConfig\n  );\n\n  target.generalLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.generalLimits,\n    userConfig.generalLimits || {}\n  );\n\n  target.spanLimits = Object.assign(\n    {},\n    DEFAULT_CONFIG.spanLimits,\n    userConfig.spanLimits || {}\n  );\n\n  return target;\n}\n\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig: TracerConfig): TracerConfig {\n  const spanLimits = Object.assign({}, userConfig.spanLimits);\n\n  const parsedEnvConfig = getEnvWithoutDefaults();\n\n  /**\n   * Reassign span attribute count limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeCountLimit =\n    userConfig.spanLimits?.attributeCountLimit ??\n    userConfig.generalLimits?.attributeCountLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT ??\n    DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n\n  /**\n   * Reassign span attribute value length limit to use first non null value defined by user or use default value\n   */\n  spanLimits.attributeValueLengthLimit =\n    userConfig.spanLimits?.attributeValueLengthLimit ??\n    userConfig.generalLimits?.attributeValueLengthLimit ??\n    parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT ??\n    DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n\n  return Object.assign({}, userConfig, { spanLimits });\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { context, Context, diag, TraceFlags } from '@opentelemetry/api';\nimport {\n  BindOnceFuture,\n  ExportResultCode,\n  getEnv,\n  globalErrorHandler,\n  suppressTracing,\n  unrefTimer,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { BufferConfig } from '../types';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\n\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nexport abstract class BatchSpanProcessorBase<T extends BufferConfig>\n  implements SpanProcessor\n{\n  private readonly _maxExportBatchSize: number;\n  private readonly _maxQueueSize: number;\n  private readonly _scheduledDelayMillis: number;\n  private readonly _exportTimeoutMillis: number;\n\n  private _isExporting = false;\n  private _finishedSpans: ReadableSpan[] = [];\n  private _timer: NodeJS.Timeout | undefined;\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _droppedSpansCount: number = 0;\n\n  constructor(\n    private readonly _exporter: SpanExporter,\n    config?: T\n  ) {\n    const env = getEnv();\n    this._maxExportBatchSize =\n      typeof config?.maxExportBatchSize === 'number'\n        ? config.maxExportBatchSize\n        : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize =\n      typeof config?.maxQueueSize === 'number'\n        ? config.maxQueueSize\n        : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis =\n      typeof config?.scheduledDelayMillis === 'number'\n        ? config.scheduledDelayMillis\n        : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis =\n      typeof config?.exportTimeoutMillis === 'number'\n        ? config.exportTimeoutMillis\n        : env.OTEL_BSP_EXPORT_TIMEOUT;\n\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn(\n        'BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize'\n      );\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  }\n\n  // does nothing.\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    this._addToBuffer(span);\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown() {\n    return Promise.resolve()\n      .then(() => {\n        return this.onShutdown();\n      })\n      .then(() => {\n        return this._flushAll();\n      })\n      .then(() => {\n        return this._exporter.shutdown();\n      });\n  }\n\n  /** Add a span in the buffer. */\n  private _addToBuffer(span: ReadableSpan) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n\n      if (this._droppedSpansCount === 0) {\n        diag.debug('maxQueueSize reached, dropping spans');\n      }\n      this._droppedSpansCount++;\n\n      return;\n    }\n\n    if (this._droppedSpansCount > 0) {\n      // some spans were dropped, log once with count of spans dropped\n      diag.warn(\n        `Dropped ${this._droppedSpansCount} spans because maxQueueSize reached`\n      );\n      this._droppedSpansCount = 0;\n    }\n\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  }\n\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  private _flushAll(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const promises = [];\n      // calculate number of batches\n      const count = Math.ceil(\n        this._finishedSpans.length / this._maxExportBatchSize\n      );\n      for (let i = 0, j = count; i < j; i++) {\n        promises.push(this._flushOneBatch());\n      }\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(reject);\n    });\n  }\n\n  private _flushOneBatch(): Promise<void> {\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), () => {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside the execution of this callback.\n        let spans: ReadableSpan[];\n        if (this._finishedSpans.length <= this._maxExportBatchSize) {\n          spans = this._finishedSpans;\n          this._finishedSpans = [];\n        } else {\n          spans = this._finishedSpans.splice(0, this._maxExportBatchSize);\n        }\n\n        const doExport = () =>\n          this._exporter.export(spans, result => {\n            clearTimeout(timer);\n            if (result.code === ExportResultCode.SUCCESS) {\n              resolve();\n            } else {\n              reject(\n                result.error ??\n                  new Error('BatchSpanProcessor: span export failed')\n              );\n            }\n          });\n\n        let pendingResources: Array<Promise<void>> | null = null;\n        for (let i = 0, len = spans.length; i < len; i++) {\n          const span = spans[i];\n          if (\n            span.resource.asyncAttributesPending &&\n            span.resource.waitForAsyncAttributes\n          ) {\n            pendingResources ??= [];\n            pendingResources.push(span.resource.waitForAsyncAttributes());\n          }\n        }\n\n        // Avoid scheduling a promise to make the behavior more predictable and easier to test\n        if (pendingResources === null) {\n          doExport();\n        } else {\n          Promise.all(pendingResources).then(doExport, err => {\n            globalErrorHandler(err);\n            reject(err);\n          });\n        }\n      });\n    });\n  }\n\n  private _maybeStartTimer() {\n    if (this._isExporting) return;\n    const flush = () => {\n      this._isExporting = true;\n      this._flushOneBatch()\n        .finally(() => {\n          this._isExporting = false;\n          if (this._finishedSpans.length > 0) {\n            this._clearTimer();\n            this._maybeStartTimer();\n          }\n        })\n        .catch(e => {\n          this._isExporting = false;\n          globalErrorHandler(e);\n        });\n    };\n    // we only wait if the queue doesn't have enough elements yet\n    if (this._finishedSpans.length >= this._maxExportBatchSize) {\n      return flush();\n    }\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(() => flush(), this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  }\n\n  private _clearTimer() {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  }\n\n  protected abstract onShutdown(): void;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nimport { BufferConfig } from '../../../types';\n\nexport class BatchSpanProcessor extends BatchSpanProcessorBase<BufferConfig> {\n  protected onShutdown(): void {}\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IdGenerator } from '../../IdGenerator';\n\nconst SPAN_ID_BYTES = 8;\nconst TRACE_ID_BYTES = 16;\n\nexport class RandomIdGenerator implements IdGenerator {\n  /**\n   * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n   * characters corresponding to 128 bits.\n   */\n  generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n\n  /**\n   * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n   * characters corresponding to 64 bits.\n   */\n  generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n}\n\nconst SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes: number): () => string {\n  return function generateId() {\n    for (let i = 0; i < bytes / 4; i++) {\n      // unsigned right shift drops decimal part of the number\n      // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n      SHARED_BUFFER.writeUInt32BE((Math.random() * 2 ** 32) >>> 0, i * 4);\n    }\n\n    // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n    for (let i = 0; i < bytes; i++) {\n      if (SHARED_BUFFER[i] > 0) {\n        break;\n      } else if (i === bytes - 1) {\n        SHARED_BUFFER[bytes - 1] = 1;\n      }\n    }\n\n    return SHARED_BUFFER.toString('hex', 0, bytes);\n  };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './export/BatchSpanProcessor';\nexport * from './RandomIdGenerator';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './node';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as api from '@opentelemetry/api';\nimport {\n  InstrumentationLibrary,\n  sanitizeAttributes,\n  isTracingSuppressed,\n} from '@opentelemetry/core';\nimport { IResource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from './BasicTracerProvider';\nimport { Span } from './Span';\nimport { GeneralLimits, SpanLimits, TracerConfig } from './types';\nimport { mergeConfig } from './utility';\nimport { SpanProcessor } from './SpanProcessor';\nimport { Sampler } from './Sampler';\nimport { IdGenerator } from './IdGenerator';\nimport { RandomIdGenerator } from './platform';\n\n/**\n * This class represents a basic tracer.\n */\nexport class Tracer implements api.Tracer {\n  private readonly _sampler: Sampler;\n  private readonly _generalLimits: GeneralLimits;\n  private readonly _spanLimits: SpanLimits;\n  private readonly _idGenerator: IdGenerator;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n\n  /**\n   * Constructs a new Tracer instance.\n   */\n  constructor(\n    instrumentationLibrary: InstrumentationLibrary,\n    config: TracerConfig,\n    private _tracerProvider: BasicTracerProvider\n  ) {\n    const localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  startSpan(\n    name: string,\n    options: api.SpanOptions = {},\n    context = api.context.active()\n  ): api.Span {\n    // remove span from context in case a root span is requested via options\n    if (options.root) {\n      context = api.trace.deleteSpan(context);\n    }\n    const parentSpan = api.trace.getSpan(context);\n\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      const nonRecordingSpan = api.trace.wrapSpanContext(\n        api.INVALID_SPAN_CONTEXT\n      );\n      return nonRecordingSpan;\n    }\n\n    const parentSpanContext = parentSpan?.spanContext();\n    const spanId = this._idGenerator.generateSpanId();\n    let traceId;\n    let traceState;\n    let parentSpanId;\n    if (\n      !parentSpanContext ||\n      !api.trace.isSpanContextValid(parentSpanContext)\n    ) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentSpanContext.traceId;\n      traceState = parentSpanContext.traceState;\n      parentSpanId = parentSpanContext.spanId;\n    }\n\n    const spanKind = options.kind ?? api.SpanKind.INTERNAL;\n    const links = (options.links ?? []).map(link => {\n      return {\n        context: link.context,\n        attributes: sanitizeAttributes(link.attributes),\n      };\n    });\n    const attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    const samplingResult = this._sampler.shouldSample(\n      context,\n      traceId,\n      name,\n      spanKind,\n      attributes,\n      links\n    );\n\n    traceState = samplingResult.traceState ?? traceState;\n\n    const traceFlags =\n      samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n        ? api.TraceFlags.SAMPLED\n        : api.TraceFlags.NONE;\n    const spanContext = { traceId, spanId, traceFlags, traceState };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug(\n        'Recording is off, propagating context in a non-recording span'\n      );\n      const nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n      return nonRecordingSpan;\n    }\n\n    // Set initial span attributes. The attributes object may have been mutated\n    // by the sampler, so we sanitize the merged attributes before setting them.\n    const initAttributes = sanitizeAttributes(\n      Object.assign(attributes, samplingResult.attributes)\n    );\n\n    const span = new Span(\n      this,\n      context,\n      name,\n      spanContext,\n      spanKind,\n      parentSpanId,\n      links,\n      options.startTime,\n      undefined,\n      initAttributes\n    );\n    return span;\n  }\n\n  /**\n   * Starts a new {@link Span} and calls the given function passing it the\n   * created span as first argument.\n   * Additionally the new span gets set in context and this context is activated\n   * for the duration of the function call.\n   *\n   * @param name The name of the span\n   * @param [options] SpanOptions used for span creation\n   * @param [context] Context to use to extract parent\n   * @param fn function called in the context of the span and receives the newly created span as an argument\n   * @returns return value of fn\n   * @example\n   *   const something = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       span.setStatus({code: SpanStatusCode.OK});\n   *       return something;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     } finally {\n   *       span.end();\n   *     }\n   *   });\n   * @example\n   *   const span = tracer.startActiveSpan('op', span => {\n   *     try {\n   *       do some work\n   *       return span;\n   *     } catch (err) {\n   *       span.setStatus({\n   *         code: SpanStatusCode.ERROR,\n   *         message: err.message,\n   *       });\n   *       throw err;\n   *     }\n   *   });\n   *   do some more work\n   *   span.end();\n   */\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    opts: api.SpanOptions,\n    ctx: api.Context,\n    fn: F\n  ): ReturnType<F>;\n  startActiveSpan<F extends (span: api.Span) => ReturnType<F>>(\n    name: string,\n    arg2?: F | api.SpanOptions,\n    arg3?: F | api.Context,\n    arg4?: F\n  ): ReturnType<F> | undefined {\n    let opts: api.SpanOptions | undefined;\n    let ctx: api.Context | undefined;\n    let fn: F;\n\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2 as F;\n    } else if (arguments.length === 3) {\n      opts = arg2 as api.SpanOptions | undefined;\n      fn = arg3 as F;\n    } else {\n      opts = arg2 as api.SpanOptions | undefined;\n      ctx = arg3 as api.Context | undefined;\n      fn = arg4 as F;\n    }\n\n    const parentContext = ctx ?? api.context.active();\n    const span = this.startSpan(name, opts, parentContext);\n    const contextWithSpanSet = api.trace.setSpan(parentContext, span);\n\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  }\n\n  /** Returns the active {@link GeneralLimits}. */\n  getGeneralLimits(): GeneralLimits {\n    return this._generalLimits;\n  }\n\n  /** Returns the active {@link SpanLimits}. */\n  getSpanLimits(): SpanLimits {\n    return this._spanLimits;\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this._tracerProvider.getActiveSpanProcessor();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { Span } from './Span';\nimport { SpanProcessor } from './SpanProcessor';\n\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nexport class MultiSpanProcessor implements SpanProcessor {\n  constructor(private readonly _spanProcessors: SpanProcessor[]) {}\n\n  forceFlush(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(resolve => {\n      Promise.all(promises)\n        .then(() => {\n          resolve();\n        })\n        .catch(error => {\n          globalErrorHandler(\n            error || new Error('MultiSpanProcessor: forceFlush failed')\n          );\n          resolve();\n        });\n    });\n  }\n\n  onStart(span: Span, context: Context): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onStart(span, context);\n    }\n  }\n\n  onEnd(span: ReadableSpan): void {\n    for (const spanProcessor of this._spanProcessors) {\n      spanProcessor.onEnd(span);\n    }\n  }\n\n  shutdown(): Promise<void> {\n    const promises: Promise<void>[] = [];\n\n    for (const spanProcessor of this._spanProcessors) {\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then(() => {\n        resolve();\n      }, reject);\n    });\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './ReadableSpan';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\n\n/** No-op implementation of SpanProcessor */\nexport class NoopSpanProcessor implements SpanProcessor {\n  onStart(_span: Span, _context: Context): void {}\n  onEnd(_span: ReadableSpan): void {}\n  shutdown(): Promise<void> {\n    return Promise.resolve();\n  }\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  context,\n  diag,\n  propagation,\n  TextMapPropagator,\n  trace,\n  TracerProvider,\n} from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n  getEnv,\n  merge,\n} from '@opentelemetry/core';\nimport { IResource, Resource } from '@opentelemetry/resources';\nimport { SpanProcessor, Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { SDKRegistrationConfig, TracerConfig } from './types';\nimport { SpanExporter } from './export/SpanExporter';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\n\nexport type PROPAGATOR_FACTORY = () => TextMapPropagator;\nexport type EXPORTER_FACTORY = () => SpanExporter;\n\nexport enum ForceFlushState {\n  'resolved',\n  'timeout',\n  'error',\n  'unresolved',\n}\n\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nexport class BasicTracerProvider implements TracerProvider {\n  protected static readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ['tracecontext', () => new W3CTraceContextPropagator()],\n    ['baggage', () => new W3CBaggagePropagator()],\n  ]);\n\n  protected static readonly _registeredExporters = new Map<\n    string,\n    EXPORTER_FACTORY\n  >();\n\n  private readonly _config: TracerConfig;\n  private readonly _registeredSpanProcessors: SpanProcessor[] = [];\n  private readonly _tracers: Map<string, Tracer> = new Map();\n\n  activeSpanProcessor: SpanProcessor;\n  readonly resource: IResource;\n\n  constructor(config: TracerConfig = {}) {\n    const mergedConfig = merge(\n      {},\n      loadDefaultConfig(),\n      reconfigureLimits(config)\n    );\n    this.resource = mergedConfig.resource ?? Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource,\n    });\n\n    const defaultExporter = this._buildExporterFromEnv();\n    if (defaultExporter !== undefined) {\n      const batchProcessor = new BatchSpanProcessor(defaultExporter);\n      this.activeSpanProcessor = batchProcessor;\n    } else {\n      this.activeSpanProcessor = new NoopSpanProcessor();\n    }\n  }\n\n  getTracer(\n    name: string,\n    version?: string,\n    options?: { schemaUrl?: string }\n  ): Tracer {\n    const key = `${name}@${version || ''}:${options?.schemaUrl || ''}`;\n    if (!this._tracers.has(key)) {\n      this._tracers.set(\n        key,\n        new Tracer(\n          { name, version, schemaUrl: options?.schemaUrl },\n          this._config,\n          this\n        )\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key)!;\n  }\n\n  /**\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  addSpanProcessor(spanProcessor: SpanProcessor): void {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor\n        .shutdown()\n        .catch(err =>\n          diag.error(\n            'Error while trying to shutdown current span processor',\n            err\n          )\n        );\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(\n      this._registeredSpanProcessors\n    );\n  }\n\n  getActiveSpanProcessor(): SpanProcessor {\n    return this.activeSpanProcessor;\n  }\n\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  register(config: SDKRegistrationConfig = {}): void {\n    trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  }\n\n  forceFlush(): Promise<void> {\n    const timeout = this._config.forceFlushTimeoutMillis;\n    const promises = this._registeredSpanProcessors.map(\n      (spanProcessor: SpanProcessor) => {\n        return new Promise(resolve => {\n          let state: ForceFlushState;\n          const timeoutInterval = setTimeout(() => {\n            resolve(\n              new Error(\n                `Span processor did not completed within timeout period of ${timeout} ms`\n              )\n            );\n            state = ForceFlushState.timeout;\n          }, timeout);\n\n          spanProcessor\n            .forceFlush()\n            .then(() => {\n              clearTimeout(timeoutInterval);\n              if (state !== ForceFlushState.timeout) {\n                state = ForceFlushState.resolved;\n                resolve(state);\n              }\n            })\n            .catch(error => {\n              clearTimeout(timeoutInterval);\n              state = ForceFlushState.error;\n              resolve(error);\n            });\n        });\n      }\n    );\n\n    return new Promise<void>((resolve, reject) => {\n      Promise.all(promises)\n        .then(results => {\n          const errors = results.filter(\n            result => result !== ForceFlushState.resolved\n          );\n          if (errors.length > 0) {\n            reject(errors);\n          } else {\n            resolve();\n          }\n        })\n        .catch(error => reject([error]));\n    });\n  }\n\n  shutdown(): Promise<void> {\n    return this.activeSpanProcessor.shutdown();\n  }\n\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  protected _getPropagator(name: string): TextMapPropagator | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredPropagators.get(name)?.();\n  }\n\n  protected _getSpanExporter(name: string): SpanExporter | undefined {\n    return (\n      this.constructor as typeof BasicTracerProvider\n    )._registeredExporters.get(name)?.();\n  }\n\n  protected _buildPropagatorFromEnv(): TextMapPropagator | undefined {\n    // per spec, propagators from env must be deduplicated\n    const uniquePropagatorNames = Array.from(\n      new Set(getEnv().OTEL_PROPAGATORS)\n    );\n\n    const propagators = uniquePropagatorNames.map(name => {\n      const propagator = this._getPropagator(name);\n      if (!propagator) {\n        diag.warn(\n          `Propagator \"${name}\" requested through environment variable is unavailable.`\n        );\n      }\n\n      return propagator;\n    });\n    const validPropagators = propagators.reduce<TextMapPropagator[]>(\n      (list, item) => {\n        if (item) {\n          list.push(item);\n        }\n        return list;\n      },\n      []\n    );\n\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators,\n      });\n    }\n  }\n\n  protected _buildExporterFromEnv(): SpanExporter | undefined {\n    const exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none' || exporterName === '') return;\n    const exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      diag.error(\n        `Exporter \"${exporterName}\" requested through environment variable is unavailable.`\n      );\n    }\n    return exporter;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport {\n  ExportResult,\n  ExportResultCode,\n  hrTimeToMicroseconds,\n} from '@opentelemetry/core';\n\n/**\n * This is implementation of {@link SpanExporter} that prints spans to the\n * console. This class can be used for diagnostic purposes.\n */\n\n/* eslint-disable no-console */\nexport class ConsoleSpanExporter implements SpanExporter {\n  /**\n   * Export spans.\n   * @param spans\n   * @param resultCallback\n   */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    return this._sendSpans(spans, resultCallback);\n  }\n\n  /**\n   * Shutdown the exporter.\n   */\n  shutdown(): Promise<void> {\n    this._sendSpans([]);\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  /**\n   * converts span info into more readable format\n   * @param span\n   */\n  private _exportInfo(span: ReadableSpan) {\n    return {\n      resource: {\n        attributes: span.resource.attributes,\n      },\n      traceId: span.spanContext().traceId,\n      parentId: span.parentSpanId,\n      traceState: span.spanContext().traceState?.serialize(),\n      name: span.name,\n      id: span.spanContext().spanId,\n      kind: span.kind,\n      timestamp: hrTimeToMicroseconds(span.startTime),\n      duration: hrTimeToMicroseconds(span.duration),\n      attributes: span.attributes,\n      status: span.status,\n      events: span.events,\n      links: span.links,\n    };\n  }\n\n  /**\n   * Showing spans in console\n   * @param spans\n   * @param done\n   */\n  private _sendSpans(\n    spans: ReadableSpan[],\n    done?: (result: ExportResult) => void\n  ): void {\n    for (const span of spans) {\n      console.dir(this._exportInfo(span), { depth: 3 });\n    }\n    if (done) {\n      return done({ code: ExportResultCode.SUCCESS });\n    }\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SpanExporter } from './SpanExporter';\nimport { ReadableSpan } from './ReadableSpan';\nimport { ExportResult, ExportResultCode } from '@opentelemetry/core';\n\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nexport class InMemorySpanExporter implements SpanExporter {\n  private _finishedSpans: ReadableSpan[] = [];\n  /**\n   * Indicates if the exporter has been \"shutdown.\"\n   * When false, exported spans will not be stored in-memory.\n   */\n  protected _stopped = false;\n\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void {\n    if (this._stopped)\n      return resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been stopped'),\n      });\n    this._finishedSpans.push(...spans);\n\n    setTimeout(() => resultCallback({ code: ExportResultCode.SUCCESS }), 0);\n  }\n\n  shutdown(): Promise<void> {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return this.forceFlush();\n  }\n\n  /**\n   * Exports any pending spans in the exporter\n   */\n  forceFlush(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  reset(): void {\n    this._finishedSpans = [];\n  }\n\n  getFinishedSpans(): ReadableSpan[] {\n    return this._finishedSpans;\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  SpanKind,\n  SpanStatus,\n  SpanAttributes,\n  HrTime,\n  Link,\n  SpanContext,\n} from '@opentelemetry/api';\nimport { IResource } from '@opentelemetry/resources';\nimport { InstrumentationLibrary } from '@opentelemetry/core';\nimport { TimedEvent } from '../TimedEvent';\n\nexport interface ReadableSpan {\n  readonly name: string;\n  readonly kind: SpanKind;\n  readonly spanContext: () => SpanContext;\n  readonly parentSpanId?: string;\n  readonly startTime: HrTime;\n  readonly endTime: HrTime;\n  readonly status: SpanStatus;\n  readonly attributes: SpanAttributes;\n  readonly links: Link[];\n  readonly events: TimedEvent[];\n  readonly duration: HrTime;\n  readonly ended: boolean;\n  readonly resource: IResource;\n  readonly instrumentationLibrary: InstrumentationLibrary;\n  readonly droppedAttributesCount: number;\n  readonly droppedEventsCount: number;\n  readonly droppedLinksCount: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context, TraceFlags } from '@opentelemetry/api';\nimport {\n  internal,\n  ExportResultCode,\n  globalErrorHandler,\n  BindOnceFuture,\n  ExportResult,\n} from '@opentelemetry/core';\nimport { Span } from '../Span';\nimport { SpanProcessor } from '../SpanProcessor';\nimport { ReadableSpan } from './ReadableSpan';\nimport { SpanExporter } from './SpanExporter';\nimport { Resource } from '@opentelemetry/resources';\n\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n *\n * NOTE: This {@link SpanProcessor} exports every ended span individually instead of batching spans together, which causes significant performance overhead with most exporters. For production use, please consider using the {@link BatchSpanProcessor} instead.\n */\nexport class SimpleSpanProcessor implements SpanProcessor {\n  private _shutdownOnce: BindOnceFuture<void>;\n  private _unresolvedExports: Set<Promise<void>>;\n\n  constructor(private readonly _exporter: SpanExporter) {\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._unresolvedExports = new Set<Promise<void>>();\n  }\n\n  async forceFlush(): Promise<void> {\n    // await unresolved resources before resolving\n    await Promise.all(Array.from(this._unresolvedExports));\n    if (this._exporter.forceFlush) {\n      await this._exporter.forceFlush();\n    }\n  }\n\n  onStart(_span: Span, _parentContext: Context): void {}\n\n  onEnd(span: ReadableSpan): void {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n\n    const doExport = () =>\n      internal\n        ._export(this._exporter, [span])\n        .then((result: ExportResult) => {\n          if (result.code !== ExportResultCode.SUCCESS) {\n            globalErrorHandler(\n              result.error ??\n                new Error(\n                  `SimpleSpanProcessor: span export failed (status ${result})`\n                )\n            );\n          }\n        })\n        .catch(error => {\n          globalErrorHandler(error);\n        });\n\n    // Avoid scheduling a promise to make the behavior more predictable and easier to test\n    if (span.resource.asyncAttributesPending) {\n      const exportPromise = (span.resource as Resource)\n        .waitForAsyncAttributes?.()\n        .then(\n          () => {\n            if (exportPromise != null) {\n              this._unresolvedExports.delete(exportPromise);\n            }\n            return doExport();\n          },\n          err => globalErrorHandler(err)\n        );\n\n      // store the unresolved exports\n      if (exportPromise != null) {\n        this._unresolvedExports.add(exportPromise);\n      }\n    } else {\n      void doExport();\n    }\n  }\n\n  shutdown(): Promise<void> {\n    return this._shutdownOnce.call();\n  }\n\n  private _shutdown(): Promise<void> {\n    return this._exporter.shutdown();\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ExportResult } from '@opentelemetry/core';\nimport { ReadableSpan } from './ReadableSpan';\n\n/**\n * An interface that allows different tracing services to export recorded data\n * for sampled spans in their own format.\n *\n * To export data this MUST be register to the Tracer SDK using a optional\n * config.\n */\nexport interface SpanExporter {\n  /**\n   * Called to export sampled {@link ReadableSpan}s.\n   * @param spans the list of sampled Spans to be exported.\n   */\n  export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): void;\n\n  /** Stops the exporter. */\n  shutdown(): Promise<void>;\n\n  /** Immediately export all spans */\n  forceFlush?(): Promise<void>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Context } from '@opentelemetry/api';\nimport { ReadableSpan } from './export/ReadableSpan';\nimport { Span } from './Span';\n\n/**\n * SpanProcessor is the interface Tracer SDK uses to allow synchronous hooks\n * for when a {@link Span} is started or when a {@link Span} is ended.\n */\nexport interface SpanProcessor {\n  /**\n   * Forces to export all finished spans\n   */\n  forceFlush(): Promise<void>;\n\n  /**\n   * Called when a {@link Span} is started, if the `span.isRecording()`\n   * returns true.\n   * @param span the Span that just started.\n   */\n  onStart(span: Span, parentContext: Context): void;\n\n  /**\n   * Called when a {@link ReadableSpan} is ended, if the `span.isRecording()`\n   * returns true.\n   * @param span the Span that just ended.\n   */\n  onEnd(span: ReadableSpan): void;\n\n  /**\n   * Shuts down the processor. Called when SDK is shut down. This is an\n   * opportunity for processor to do any cleanup required.\n   */\n  shutdown(): Promise<void>;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HrTime, SpanAttributes } from '@opentelemetry/api';\n\n/**\n * Represents a timed event.\n * A timed event is an event with a timestamp.\n */\nexport interface TimedEvent {\n  time: HrTime;\n  /** The name of the event. */\n  name: string;\n  /** The attributes of the event. */\n  attributes?: SpanAttributes;\n  /** Count of attributes of the event that were dropped due to collection limits */\n  droppedAttributesCount?: number;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContextManager, TextMapPropagator } from '@opentelemetry/api';\nimport { IResource } from '@opentelemetry/resources';\nimport { IdGenerator } from './IdGenerator';\nimport { Sampler } from './Sampler';\n\n/**\n * TracerConfig provides an interface for configuring a Basic Tracer.\n */\nexport interface TracerConfig {\n  /**\n   * Sampler determines if a span should be recorded or should be a NoopSpan.\n   */\n  sampler?: Sampler;\n\n  /** General Limits */\n  generalLimits?: GeneralLimits;\n\n  /** Span Limits */\n  spanLimits?: SpanLimits;\n\n  /** Resource associated with trace telemetry  */\n  resource?: IResource;\n\n  /**\n   * Generator of trace and span IDs\n   * The default idGenerator generates random ids\n   */\n  idGenerator?: IdGenerator;\n\n  /**\n   * How long the forceFlush can run before it is cancelled.\n   * The default value is 30000ms\n   */\n  forceFlushTimeoutMillis?: number;\n}\n\n/**\n * Configuration options for registering the API with the SDK.\n * Undefined values may be substituted for defaults, and null\n * values will not be registered.\n */\nexport interface SDKRegistrationConfig {\n  /** Propagator to register as the global propagator */\n  propagator?: TextMapPropagator | null;\n\n  /** Context manager to register as the global context manager */\n  contextManager?: ContextManager | null;\n}\n\n/** Global configuration limits of trace service */\nexport interface GeneralLimits {\n  /** attributeValueLengthLimit is maximum allowed attribute value size */\n  attributeValueLengthLimit?: number;\n  /** attributeCountLimit is number of attributes per trace */\n  attributeCountLimit?: number;\n}\n\n/** Global configuration of trace service */\nexport interface SpanLimits {\n  /** attributeValueLengthLimit is maximum allowed attribute value size */\n  attributeValueLengthLimit?: number;\n  /** attributeCountLimit is number of attributes per span */\n  attributeCountLimit?: number;\n  /** linkCountLimit is number of links per span */\n  linkCountLimit?: number;\n  /** eventCountLimit is number of message events per span */\n  eventCountLimit?: number;\n  /** attributePerEventCountLimit is the maximum number of attributes allowed per span event */\n  attributePerEventCountLimit?: number;\n  /** attributePerLinkCountLimit is the maximum number of attributes allowed per span link */\n  attributePerLinkCountLimit?: number;\n}\n\n/** Interface configuration for a buffer. */\nexport interface BufferConfig {\n  /** The maximum batch size of every export. It must be smaller or equal to\n   * maxQueueSize. The default value is 512. */\n  maxExportBatchSize?: number;\n\n  /** The delay interval in milliseconds between two consecutive exports.\n   *  The default value is 5000ms. */\n  scheduledDelayMillis?: number;\n\n  /** How long the export can run before it is cancelled.\n   * The default value is 30000ms */\n  exportTimeoutMillis?: number;\n\n  /** The maximum queue size. After the size is reached spans are dropped.\n   * The default value is 2048. */\n  maxQueueSize?: number;\n}\n\n/** Interface configuration for BatchSpanProcessor on browser */\nexport interface BatchSpanProcessorBrowserConfig extends BufferConfig {\n  /** Disable flush when a user navigates to a new page, closes the tab or the browser, or,\n   * on mobile, switches to a different app. Auto flush is enabled by default. */\n  disableAutoFlushOnDocumentHide?: boolean;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** IdGenerator provides an interface for generating Trace Id and Span Id */\nexport interface IdGenerator {\n  /** Returns a trace ID composed of 32 lowercase hex characters. */\n  generateTraceId(): string;\n  /** Returns a span ID composed of 16 lowercase hex characters. */\n  generateSpanId(): string;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './Tracer';\nexport * from './BasicTracerProvider';\nexport * from './platform';\nexport * from './export/ConsoleSpanExporter';\nexport * from './export/InMemorySpanExporter';\nexport * from './export/ReadableSpan';\nexport * from './export/SimpleSpanProcessor';\nexport * from './export/SpanExporter';\nexport * from './export/NoopSpanProcessor';\nexport * from './sampler/AlwaysOffSampler';\nexport * from './sampler/AlwaysOnSampler';\nexport * from './sampler/ParentBasedSampler';\nexport * from './sampler/TraceIdRatioBasedSampler';\nexport * from './Sampler';\nexport * from './Span';\nexport * from './SpanProcessor';\nexport * from './TimedEvent';\nexport * from './types';\nexport * from './IdGenerator';\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\n// Max safe length for a build identifier. The max length minus 6 characters for\n// the shortest version with a build 0.0.0+BUILD.\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\n\nconst RELEASE_TYPES = [\n  'major',\n  'premajor',\n  'minor',\n  'preminor',\n  'patch',\n  'prepatch',\n  'prerelease',\n]\n\nmodule.exports = {\n  MAX_LENGTH,\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_SAFE_INTEGER,\n  RELEASE_TYPES,\n  SEMVER_SPEC_VERSION,\n  FLAG_INCLUDE_PRERELEASE: 0b001,\n  FLAG_LOOSE: 0b010,\n}\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","const {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH,\n} = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst safeRe = exports.safeRe = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nconst makeSafeRegex = (value) => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value\n      .split(`${token}*`).join(`${token}{0,${max}}`)\n      .split(`${token}+`).join(`${token}{1,${max}}`)\n  }\n  return value\n}\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value)\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)\ncreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`)\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] +\n              `(?:${src[t.PRERELEASE]})?` +\n              `(?:${src[t.BUILD]})?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n","// parse out just the options we care about\nconst looseOption = Object.freeze({ loose: true })\nconst emptyOpts = Object.freeze({ })\nconst parseOptions = options => {\n  if (!options) {\n    return emptyOpts\n  }\n\n  if (typeof options !== 'object') {\n    return looseOption\n  }\n\n  return options\n}\nmodule.exports = parseOptions\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers,\n}\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('build compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier, identifierBase) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier, identifierBase)\n        this.inc('pre', identifier, identifierBase)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier, identifierBase)\n        }\n        this.inc('pre', identifier, identifierBase)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre': {\n        const base = Number(identifierBase) ? 1 : 0\n\n        if (!identifier && identifierBase === false) {\n          throw new Error('invalid increment argument: identifier is empty')\n        }\n\n        if (this.prerelease.length === 0) {\n          this.prerelease = [base]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\n              throw new Error('invalid increment argument: identifier already exists')\n            }\n            this.prerelease.push(base)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          let prerelease = [identifier, base]\n          if (identifierBase === false) {\n            prerelease = [identifier]\n          }\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = prerelease\n            }\n          } else {\n            this.prerelease = prerelease\n          }\n        }\n        break\n      }\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.raw = this.format()\n    if (this.build.length) {\n      this.raw += `+${this.build.join('.')}`\n    }\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","const SemVer = require('../classes/semver')\nconst parse = (version, options, throwErrors = false) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    if (!throwErrors) {\n      return null\n    }\n    throw er\n  }\n}\n\nmodule.exports = parse\n","const parse = require('./parse')\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n","const parse = require('./parse')\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n","const SemVer = require('../classes/semver')\n\nconst inc = (version, release, options, identifier, identifierBase) => {\n  if (typeof (options) === 'string') {\n    identifierBase = identifier\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(\n      version instanceof SemVer ? version.version : version,\n      options\n    ).inc(release, identifier, identifierBase).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n","const parse = require('./parse.js')\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true)\n  const v2 = parse(version2, null, true)\n  const comparison = v1.compare(v2)\n\n  if (comparison === 0) {\n    return null\n  }\n\n  const v1Higher = comparison > 0\n  const highVersion = v1Higher ? v1 : v2\n  const lowVersion = v1Higher ? v2 : v1\n  const highHasPre = !!highVersion.prerelease.length\n  const lowHasPre = !!lowVersion.prerelease.length\n\n  if (lowHasPre && !highHasPre) {\n    // Going from prerelease -> no prerelease requires some special casing\n\n    // If the low version has only a major, then it will always be a major\n    // Some examples:\n    // 1.0.0-1 -> 1.0.0\n    // 1.0.0-1 -> 1.1.1\n    // 1.0.0-1 -> 2.0.0\n    if (!lowVersion.patch && !lowVersion.minor) {\n      return 'major'\n    }\n\n    // Otherwise it can be determined by checking the high version\n\n    if (highVersion.patch) {\n      // anything higher than a patch bump would result in the wrong version\n      return 'patch'\n    }\n\n    if (highVersion.minor) {\n      // anything higher than a minor bump would result in the wrong version\n      return 'minor'\n    }\n\n    // bumping major/minor/patch all have same result\n    return 'major'\n  }\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : ''\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major'\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor'\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch'\n  }\n\n  // high and low are preleases\n  return 'prerelease'\n}\n\nmodule.exports = diff\n","const SemVer = require('../classes/semver')\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n","const SemVer = require('../classes/semver')\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n","const SemVer = require('../classes/semver')\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n","const parse = require('./parse')\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n","const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const compare = require('./compare')\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n","const compare = require('./compare')\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n","const SemVer = require('../classes/semver')\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n","const compareBuild = require('./compare-build')\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n","const compareBuild = require('./compare-build')\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n","const compare = require('./compare')\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n","const compare = require('./compare')\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n","const compare = require('./compare')\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n","const compare = require('./compare')\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n","const compare = require('./compare')\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n","const compare = require('./compare')\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n","const eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n","const SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]\n    let next\n    while ((next = coerceRtlRegex.exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    coerceRtlRegex.lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  const major = match[2]\n  const minor = match[3] || '0'\n  const patch = match[4] || '0'\n  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''\n  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''\n\n  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)\n}\nmodule.exports = coerce\n","class LRUCache {\n  constructor () {\n    this.max = 1000\n    this.map = new Map()\n  }\n\n  get (key) {\n    const value = this.map.get(key)\n    if (value === undefined) {\n      return undefined\n    } else {\n      // Remove the key from the map and add it to the end\n      this.map.delete(key)\n      this.map.set(key, value)\n      return value\n    }\n  }\n\n  delete (key) {\n    return this.map.delete(key)\n  }\n\n  set (key, value) {\n    const deleted = this.delete(key)\n\n    if (!deleted && value !== undefined) {\n      // If cache is full, delete the least recently used item\n      if (this.map.size >= this.max) {\n        const firstKey = this.map.keys().next().value\n        this.delete(firstKey)\n      }\n\n      this.map.set(key, value)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = LRUCache\n","// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First reduce all whitespace as much as possible so we do not have to rely\n    // on potentially slow regexes like \\s*. This is then stored and used for\n    // future error messages as well.\n    this.raw = range\n      .trim()\n      .split(/\\s+/)\n      .join(' ')\n\n    // First, split on ||\n    this.set = this.raw\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => comps.join(' ').trim())\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts =\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n      (this.options.loose && FLAG_LOOSE)\n    const memoKey = memoOpts + ':' + range\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n    debug('tilde trim', range)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n    debug('caret trim', range)\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = Range\n\nconst LRU = require('../internal/lrucache')\nconst cache = new LRU()\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  safeRe: re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require('../internal/constants')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceTilde(c, options))\n    .join(' ')\n}\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceCaret(c, options))\n    .join(' ')\n}\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp\n    .split(/\\s+/)\n    .map((c) => replaceXRange(c, options))\n    .join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp\n    .trim()\n    .replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp\n    .trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n// TODO build?\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return `${from} ${to}`.trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n","const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    comp = comp.trim().split(/\\s+/).join(' ')\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    options = parseOptions(options)\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease &&\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false\n    }\n    if (!options.includePrerelease &&\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (\n      (this.semver.version === comp.semver.version) &&\n      this.operator.includes('=') && comp.operator.includes('=')) {\n      return true\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) &&\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) &&\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true\n    }\n    return false\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { safeRe: re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n","const Range = require('../classes/range')\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n","const Range = require('../classes/range')\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin))) {\n      minver = setMin\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n","const Range = require('../classes/range')\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n","const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst { ANY } = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n","// Determine if version is greater than all the versions possible in the range.\nconst outside = require('./outside')\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n","const outside = require('./outside')\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n","const Range = require('../classes/range')\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2, options)\n}\nmodule.exports = intersects\n","// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n","const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n","// just pre-load all the stuff that index.js lazily exports\nconst internalRe = require('./internal/re')\nconst constants = require('./internal/constants')\nconst SemVer = require('./classes/semver')\nconst identifiers = require('./internal/identifiers')\nconst parse = require('./functions/parse')\nconst valid = require('./functions/valid')\nconst clean = require('./functions/clean')\nconst inc = require('./functions/inc')\nconst diff = require('./functions/diff')\nconst major = require('./functions/major')\nconst minor = require('./functions/minor')\nconst patch = require('./functions/patch')\nconst prerelease = require('./functions/prerelease')\nconst compare = require('./functions/compare')\nconst rcompare = require('./functions/rcompare')\nconst compareLoose = require('./functions/compare-loose')\nconst compareBuild = require('./functions/compare-build')\nconst sort = require('./functions/sort')\nconst rsort = require('./functions/rsort')\nconst gt = require('./functions/gt')\nconst lt = require('./functions/lt')\nconst eq = require('./functions/eq')\nconst neq = require('./functions/neq')\nconst gte = require('./functions/gte')\nconst lte = require('./functions/lte')\nconst cmp = require('./functions/cmp')\nconst coerce = require('./functions/coerce')\nconst Comparator = require('./classes/comparator')\nconst Range = require('./classes/range')\nconst satisfies = require('./functions/satisfies')\nconst toComparators = require('./ranges/to-comparators')\nconst maxSatisfying = require('./ranges/max-satisfying')\nconst minSatisfying = require('./ranges/min-satisfying')\nconst minVersion = require('./ranges/min-version')\nconst validRange = require('./ranges/valid')\nconst outside = require('./ranges/outside')\nconst gtr = require('./ranges/gtr')\nconst ltr = require('./ranges/ltr')\nconst intersects = require('./ranges/intersects')\nconst simplifyRange = require('./ranges/simplify')\nconst subset = require('./ranges/subset')\nmodule.exports = {\n  parse,\n  valid,\n  clean,\n  inc,\n  diff,\n  major,\n  minor,\n  patch,\n  prerelease,\n  compare,\n  rcompare,\n  compareLoose,\n  compareBuild,\n  sort,\n  rsort,\n  gt,\n  lt,\n  eq,\n  neq,\n  gte,\n  lte,\n  cmp,\n  coerce,\n  Comparator,\n  Range,\n  satisfies,\n  toComparators,\n  maxSatisfying,\n  minSatisfying,\n  minVersion,\n  validRange,\n  outside,\n  gtr,\n  ltr,\n  intersects,\n  simplifyRange,\n  subset,\n  SemVer,\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n  RELEASE_TYPES: constants.RELEASE_TYPES,\n  compareIdentifiers: identifiers.compareIdentifiers,\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Context,\n  SpanContext,\n  TextMapGetter,\n  TextMapPropagator,\n  TextMapSetter,\n  propagation,\n  trace,\n  TraceFlags,\n} from '@opentelemetry/api';\nimport { isTracingSuppressed } from '@opentelemetry/core';\nimport { JaegerPropagatorConfig } from './types';\n\nexport const UBER_TRACE_ID_HEADER = 'uber-trace-id';\nexport const UBER_BAGGAGE_HEADER_PREFIX = 'uberctx';\n\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n * {trace-id}:{span-id}:{parent-span-id}:{flags}\n * {trace-id}\n * 64-bit or 128-bit random number in base16 format.\n * Can be variable length, shorter values are 0-padded on the left.\n * Value of 0 is invalid.\n * {span-id}\n * 64-bit random number in base16 format.\n * {parent-span-id}\n * Set to 0 because this field is deprecated.\n * {flags}\n * One byte bitmap, as two hex digits.\n * Inspired by jaeger-client-node project.\n */\nexport class JaegerPropagator implements TextMapPropagator {\n  private readonly _jaegerTraceHeader: string;\n  private readonly _jaegerBaggageHeaderPrefix: string;\n\n  constructor(customTraceHeader?: string);\n  constructor(config?: JaegerPropagatorConfig);\n  constructor(config?: JaegerPropagatorConfig | string) {\n    if (typeof config === 'string') {\n      this._jaegerTraceHeader = config;\n      this._jaegerBaggageHeaderPrefix = UBER_BAGGAGE_HEADER_PREFIX;\n    } else {\n      this._jaegerTraceHeader =\n        config?.customTraceHeader || UBER_TRACE_ID_HEADER;\n      this._jaegerBaggageHeaderPrefix =\n        config?.customBaggageHeaderPrefix || UBER_BAGGAGE_HEADER_PREFIX;\n    }\n  }\n\n  inject(context: Context, carrier: unknown, setter: TextMapSetter): void {\n    const spanContext = trace.getSpanContext(context);\n    const baggage = propagation.getBaggage(context);\n    if (spanContext && isTracingSuppressed(context) === false) {\n      const traceFlags = `0${(\n        spanContext.traceFlags || TraceFlags.NONE\n      ).toString(16)}`;\n\n      setter.set(\n        carrier,\n        this._jaegerTraceHeader,\n        `${spanContext.traceId}:${spanContext.spanId}:0:${traceFlags}`\n      );\n    }\n\n    if (baggage) {\n      for (const [key, entry] of baggage.getAllEntries()) {\n        setter.set(\n          carrier,\n          `${this._jaegerBaggageHeaderPrefix}-${key}`,\n          encodeURIComponent(entry.value)\n        );\n      }\n    }\n  }\n\n  extract(context: Context, carrier: unknown, getter: TextMapGetter): Context {\n    const uberTraceIdHeader = getter.get(carrier, this._jaegerTraceHeader);\n    const uberTraceId = Array.isArray(uberTraceIdHeader)\n      ? uberTraceIdHeader[0]\n      : uberTraceIdHeader;\n    const baggageValues = getter\n      .keys(carrier)\n      .filter(key => key.startsWith(`${this._jaegerBaggageHeaderPrefix}-`))\n      .map(key => {\n        const value = getter.get(carrier, key);\n        return {\n          key: key.substring(this._jaegerBaggageHeaderPrefix.length + 1),\n          value: Array.isArray(value) ? value[0] : value,\n        };\n      });\n\n    let newContext = context;\n    // if the trace id header is present and valid, inject it into the context\n    if (typeof uberTraceId === 'string') {\n      const spanContext = deserializeSpanContext(uberTraceId);\n      if (spanContext) {\n        newContext = trace.setSpanContext(newContext, spanContext);\n      }\n    }\n    if (baggageValues.length === 0) return newContext;\n\n    // if baggage values are present, inject it into the current baggage\n    let currentBaggage =\n      propagation.getBaggage(context) ?? propagation.createBaggage();\n    for (const baggageEntry of baggageValues) {\n      if (baggageEntry.value === undefined) continue;\n      currentBaggage = currentBaggage.setEntry(baggageEntry.key, {\n        value: decodeURIComponent(baggageEntry.value),\n      });\n    }\n    newContext = propagation.setBaggage(newContext, currentBaggage);\n\n    return newContext;\n  }\n\n  fields(): string[] {\n    return [this._jaegerTraceHeader];\n  }\n}\n\nconst VALID_HEX_RE = /^[0-9a-f]{1,2}$/i;\n\n/**\n * @param {string} serializedString - a serialized span context.\n * @return {SpanContext} - returns a span context represented by the serializedString.\n **/\nfunction deserializeSpanContext(serializedString: string): SpanContext | null {\n  const headers = decodeURIComponent(serializedString).split(':');\n  if (headers.length !== 4) {\n    return null;\n  }\n\n  const [_traceId, _spanId, , flags] = headers;\n\n  const traceId = _traceId.padStart(32, '0');\n  const spanId = _spanId.padStart(16, '0');\n  const traceFlags = VALID_HEX_RE.test(flags) ? parseInt(flags, 16) & 1 : 1;\n\n  return { traceId, spanId, isRemote: true, traceFlags };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './JaegerPropagator';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  AsyncHooksContextManager,\n  AsyncLocalStorageContextManager,\n} from '@opentelemetry/context-async-hooks';\nimport { B3Propagator, B3InjectEncoding } from '@opentelemetry/propagator-b3';\nimport {\n  BasicTracerProvider,\n  PROPAGATOR_FACTORY,\n  SDKRegistrationConfig,\n} from '@opentelemetry/sdk-trace-base';\nimport * as semver from 'semver';\nimport { NodeTracerConfig } from './config';\nimport { JaegerPropagator } from '@opentelemetry/propagator-jaeger';\n\n/**\n * Register this TracerProvider for use with the OpenTelemetry API.\n * Undefined values may be replaced with defaults, and\n * null values will be skipped.\n *\n * @param config Configuration object for SDK registration\n */\nexport class NodeTracerProvider extends BasicTracerProvider {\n  protected static override readonly _registeredPropagators = new Map<\n    string,\n    PROPAGATOR_FACTORY\n  >([\n    ...BasicTracerProvider._registeredPropagators,\n    [\n      'b3',\n      () =>\n        new B3Propagator({ injectEncoding: B3InjectEncoding.SINGLE_HEADER }),\n    ],\n    [\n      'b3multi',\n      () => new B3Propagator({ injectEncoding: B3InjectEncoding.MULTI_HEADER }),\n    ],\n    ['jaeger', () => new JaegerPropagator()],\n  ]);\n\n  constructor(config: NodeTracerConfig = {}) {\n    super(config);\n  }\n\n  override register(config: SDKRegistrationConfig = {}): void {\n    if (config.contextManager === undefined) {\n      const ContextManager = semver.gte(process.version, '14.8.0')\n        ? AsyncLocalStorageContextManager\n        : AsyncHooksContextManager;\n      config.contextManager = new ContextManager();\n      config.contextManager.enable();\n    }\n\n    super.register(config);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { NodeTracerConfig } from './config';\nexport * from './NodeTracerProvider';\nexport * from '@opentelemetry/sdk-trace-base';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// this is autogenerated file, see scripts/version-update.js\nexport const VERSION = '0.52.1';\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ReadableSpan, SpanExporter } from '@opentelemetry/sdk-trace-base';\nimport { baggageUtils, getEnv } from '@opentelemetry/core';\nimport {\n  OTLPGRPCExporterConfigNode,\n  OTLPGRPCExporterNodeBase,\n  validateAndNormalizeUrl,\n  DEFAULT_COLLECTOR_URL,\n} from '@opentelemetry/otlp-grpc-exporter-base';\nimport {\n  IExportTraceServiceResponse,\n  ProtobufTraceSerializer,\n} from '@opentelemetry/otlp-transformer';\nimport { VERSION } from './version';\n\nconst USER_AGENT = {\n  'User-Agent': `OTel-OTLP-Exporter-JavaScript/${VERSION}`,\n};\n\n/**\n * OTLP Trace Exporter for Node\n */\nexport class OTLPTraceExporter\n  extends OTLPGRPCExporterNodeBase<ReadableSpan, IExportTraceServiceResponse>\n  implements SpanExporter\n{\n  constructor(config: OTLPGRPCExporterConfigNode = {}) {\n    const signalSpecificMetadata = {\n      ...USER_AGENT,\n      ...baggageUtils.parseKeyPairsIntoRecord(\n        getEnv().OTEL_EXPORTER_OTLP_TRACES_HEADERS\n      ),\n    };\n    super(\n      config,\n      signalSpecificMetadata,\n      'TraceExportService',\n      '/opentelemetry.proto.collector.trace.v1.TraceService/Export',\n      ProtobufTraceSerializer\n    );\n  }\n\n  getDefaultUrl(config: OTLPGRPCExporterConfigNode) {\n    return validateAndNormalizeUrl(this.getUrlFromConfig(config));\n  }\n\n  getUrlFromConfig(config: OTLPGRPCExporterConfigNode): string {\n    if (typeof config.url === 'string') {\n      return config.url;\n    }\n\n    return (\n      getEnv().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ||\n      getEnv().OTEL_EXPORTER_OTLP_ENDPOINT ||\n      DEFAULT_COLLECTOR_URL\n    );\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from './OTLPTraceExporter';\n","#!/usr/bin/env node\n\nimport path from 'path'\nimport fs from 'fs-extra'\n\nimport { compressionAlgorithms } from '@grpc/grpc-js'\nimport commandLineArgs from 'command-line-args'\nimport { createServer } from 'nice-grpc'\nimport { errorDetailsServerMiddleware } from 'nice-grpc-error-details'\n// import { registry as niceGrpcRegistry } from 'nice-grpc-prometheus'\nimport { openTelemetryServerMiddleware } from 'nice-grpc-opentelemetry'\n// import { register as globalRegistry, Registry } from 'prom-client'\nimport http from 'http'\n// @ts-ignore inspector promises is not included in @type/node\nimport { Session } from 'node:inspector/promises'\n\nimport { ProcessorDefinition } from './gen/processor/protos/processor.js'\nimport { ProcessorServiceImpl } from './service.js'\nimport { Endpoints } from './endpoints.js'\nimport { FullProcessorServiceImpl } from './full-service.js'\nimport { ChainConfig } from './chain-config.js'\nimport { setupLogger } from './logger.js'\n\nimport { setupOTLP } from './otlp.js'\n\n// const mergedRegistry = Registry.merge([globalRegistry, niceGrpcRegistry])\n\nconst optionDefinitions = [\n  { name: 'target', type: String, defaultOption: true },\n  { name: 'port', alias: 'p', type: String, defaultValue: '4000' },\n  { name: 'concurrency', type: Number, defaultValue: 4 },\n  { name: 'batch-count', type: Number, defaultValue: 1 },\n  // { name: 'use-chainserver', type: Boolean, defaultValue: false },\n  {\n    name: 'chains-config',\n    alias: 'c',\n    type: String,\n    defaultValue: 'chains-config.json'\n  },\n  { name: 'chainquery-server', type: String, defaultValue: '' },\n  { name: 'pricefeed-server', type: String, defaultValue: '' },\n  { name: 'log-format', type: String, defaultValue: 'console' },\n  { name: 'debug', type: Boolean, defaultValue: false }\n]\n\nconst options = commandLineArgs(optionDefinitions, { partial: true })\n\nconst logLevel = process.env['LOG_LEVEL']?.toUpperCase()\n\nsetupLogger(options['log-format'] === 'json', logLevel === 'debug' ? true : options.debug)\nconsole.debug('Starting with', options.target)\n\nawait setupOTLP(options.debug)\n\nError.stackTraceLimit = 20\n\nconst fullPath = path.resolve(options['chains-config'])\nconst chainsConfig = fs.readJsonSync(fullPath)\n\nconst concurrencyOverride = process.env['OVERRIDE_CONCURRENCY']\n  ? parseInt(process.env['OVERRIDE_CONCURRENCY'])\n  : undefined\nconst batchCountOverride = process.env['OVERRIDE_BATCH_COUNT']\n  ? parseInt(process.env['OVERRIDE_BATCH_COUNT'])\n  : undefined\n\nEndpoints.INSTANCE.concurrency = concurrencyOverride ?? options.concurrency\nEndpoints.INSTANCE.batchCount = batchCountOverride ?? options['batch-count']\nEndpoints.INSTANCE.chainQueryAPI = options['chainquery-server']\nEndpoints.INSTANCE.priceFeedAPI = options['pricefeed-server']\n\nfor (const [id, config] of Object.entries(chainsConfig)) {\n  const chainConfig = config as ChainConfig\n  if (chainConfig.ChainServer) {\n    Endpoints.INSTANCE.chainServer.set(id, chainConfig.ChainServer)\n  } else {\n    const http = chainConfig.Https?.[0]\n    if (http) {\n      Endpoints.INSTANCE.chainServer.set(id, http)\n    } else {\n      console.error('not valid config for chain', id)\n    }\n  }\n}\n\nconsole.debug('Starting Server', options)\n\nconst server = createServer({\n  'grpc.max_send_message_length': 384 * 1024 * 1024,\n  'grpc.max_receive_message_length': 384 * 1024 * 1024,\n  'grpc.default_compression_algorithm': compressionAlgorithms.gzip\n})\n  // .use(prometheusServerMiddleware())\n  .use(openTelemetryServerMiddleware())\n  .use(errorDetailsServerMiddleware)\nconst baseService = new ProcessorServiceImpl(async () => {\n  const m = await import(options.target)\n  console.debug('Module loaded', m)\n  return m\n}, server.shutdown)\nconst service = new FullProcessorServiceImpl(baseService)\n\nserver.add(ProcessorDefinition, service)\n\nserver.listen('0.0.0.0:' + options.port)\n\nconsole.log('Processor Server Started at:', options.port)\n\nconst metricsPort = 4040\nconst httpServer = http\n  .createServer(async function (req, res) {\n    if (req.url) {\n      const reqUrl = new URL(req.url, `http://${req.headers.host}`)\n      const queries = reqUrl.searchParams\n      switch (reqUrl.pathname) {\n        // case '/metrics':\n        //   const metrics = await mergedRegistry.metrics()\n        //   res.write(metrics)\n        //   break\n        case '/profile': {\n          try {\n            const profileTime = parseInt(queries.get('t') || '1000', 10) || 1000\n            const session = new Session()\n            session.connect()\n\n            await session.post('Profiler.enable')\n            await session.post('Profiler.start')\n\n            await new Promise((resolve) => setTimeout(resolve, profileTime))\n            const { profile } = await session.post('Profiler.stop')\n\n            res.writeHead(200, { 'Content-Type': 'application/json' })\n            res.write(JSON.stringify(profile))\n            session.disconnect()\n          } catch {\n            res.writeHead(500)\n          }\n          break\n        }\n        default:\n          res.writeHead(404)\n      }\n    } else {\n      res.writeHead(404)\n    }\n    res.end()\n  })\n  .listen(metricsPort)\n\nconsole.log('Metric Server Started at:', metricsPort)\n\nprocess\n  .on('SIGINT', function () {\n    shutdownServers(0)\n  })\n  .on('uncaughtException', (err) => {\n    console.error('Uncaught Exception, please checking if await is properly used', err)\n    baseService.unhandled = err\n    // shutdownServers(1)\n  })\n  .on('unhandledRejection', (reason, p) => {\n    // @ts-ignore ignore invalid ens error\n    if (reason?.message.startsWith('invalid ENS name (disallowed character: \"*\"')) {\n      return\n    }\n    console.error('Unhandled Rejection, please checking if await is properly', reason)\n    baseService.unhandled = reason as Error\n    // shutdownServers(1)\n  })\n\nfunction shutdownServers(exitCode: number) {\n  server.forceShutdown()\n  console.log('RPC server shut down')\n\n  httpServer.close(function () {\n    console.log('Http server shut down')\n    process.exit(exitCode)\n  })\n}\n;process.stdout.write(\"\");","import { CallContext } from 'nice-grpc'\nimport { createRequire } from 'module'\nconst require = createRequire(import.meta.url)\n\n// Different than the simple one which\nimport {\n  DataBinding,\n  HandlerType,\n  PreprocessStreamRequest,\n  ProcessBindingsRequest,\n  ProcessStreamRequest,\n  ProcessConfigRequest,\n  ProcessorServiceImplementation,\n  StartRequest,\n  ProcessResult,\n  ExecutionConfig\n} from './gen/processor/protos/processor.js'\n\nimport { Empty } from '@sentio/protos'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport os from 'os'\nimport { GLOBAL_CONFIG } from './global-config.js'\n\nfunction locatePackageJson(pkgId: string) {\n  const m = require.resolve(pkgId)\n\n  let dir = path.dirname(m)\n  while (!fs.existsSync(path.join(dir, 'package.json'))) {\n    dir = path.dirname(dir)\n  }\n  const content = fs.readFileSync(path.join(dir, 'package.json'), 'utf-8')\n  return JSON.parse(content)\n}\n\nexport class FullProcessorServiceImpl implements ProcessorServiceImplementation {\n  constructor(instance: ProcessorServiceImplementation) {\n    this.instance = instance\n    const sdkPackageJson = locatePackageJson('@sentio/sdk')\n    const runtimePackageJson = locatePackageJson('@sentio/runtime')\n\n    console.log('Runtime version:', runtimePackageJson.version, 'SDK version:', sdkPackageJson.version)\n\n    const version = sdkPackageJson.version.split('.')\n    this.sdkMinorVersion = parseInt(version[1])\n  }\n\n  instance: ProcessorServiceImplementation\n  sdkMinorVersion: number\n\n  async getConfig(request: ProcessConfigRequest, context: CallContext) {\n    const config = await this.instance.getConfig(request, context)\n    config.executionConfig = ExecutionConfig.fromPartial(GLOBAL_CONFIG.execution)\n\n    if (config.contractConfigs) {\n      for (const contract of config.contractConfigs) {\n        // @ts-ignore old fields\n        if (contract.aptosCallConfigs) {\n          // @ts-ignore old fields\n          contract.moveCallConfigs = contract.aptosCallConfigs\n        }\n        // @ts-ignore old fields\n        if (contract.aptosEventConfigs) {\n          // @ts-ignore old fields\n          contract.moveEventConfigs = contract.aptosEventConfigs\n        }\n      }\n    }\n    return config\n  }\n\n  async start(request: StartRequest, context: CallContext) {\n    return await this.instance.start(request, context)\n  }\n\n  async stop(request: Empty, context: CallContext) {\n    return await this.instance.stop(request, context)\n  }\n\n  async processBindings(request: ProcessBindingsRequest, options: CallContext) {\n    if (GLOBAL_CONFIG.execution.sequential) {\n      request.bindings = request.bindings.sort(dataCompare)\n    }\n\n    for (const binding of request.bindings) {\n      this.adjustDataBinding(binding)\n    }\n    try {\n      const result = await this.instance.processBindings(request, options)\n      this.adjustResult(result.result as ProcessResult)\n      if (!result.configUpdated && result.result?.states?.configUpdated) {\n        result.configUpdated = result.result?.states?.configUpdated\n      }\n      return result\n    } catch (e) {\n      if (this.sdkMinorVersion <= 16) {\n        // Old sdk doesn't handle this well\n        if (\n          e.code === os.constants.errno.ECONNRESET ||\n          e.code === os.constants.errno.ECONNREFUSED ||\n          e.code === os.constants.errno.ECONNABORTED\n        ) {\n          process.exit(1)\n        }\n      }\n      throw e\n    }\n  }\n\n  async *processBindingsStream(requests: AsyncIterable<ProcessStreamRequest>, context: CallContext) {\n    // throw new Error('Not Implemented for streaming')\n    yield* this.instance.processBindingsStream(requests, context)\n  }\n\n  async *preprocessBindingsStream(requests: AsyncIterable<PreprocessStreamRequest>, context: CallContext) {\n    yield* this.instance.preprocessBindingsStream(requests, context)\n  }\n\n  private adjustResult(res: ProcessResult): void {}\n\n  private adjustDataBinding(dataBinding: DataBinding): void {\n    switch (dataBinding.handlerType) {\n      case HandlerType.APT_EVENT:\n        if (dataBinding.data?.aptEvent) {\n          // const aptEvent = dataBinding.data.aptEvent\n          // if (aptEvent.event && this.sdkMinorVersion < 40) {\n          //   assert.ok(aptEvent.transaction, 'No Transaction')\n          //   aptEvent.transaction.events = [aptEvent.event]\n          // }\n        }\n        break\n      case HandlerType.UNKNOWN:\n        if (dataBinding.data?.ethBlock) {\n          if (dataBinding.data.raw.length === 0) {\n            // This is actually not needed in current system, just as initla test propose, move to test only\n            // when this is stable\n            dataBinding.data.raw = new TextEncoder().encode(JSON.stringify(dataBinding.data.ethBlock.block))\n          }\n        }\n        break\n      default:\n        break\n    }\n  }\n}\n\n// TODO push the logic into sdk\nfunction dataCompare(a: DataBinding, b: DataBinding): number {\n  const timeA = getTimestamp(a) || new Date(0)\n  const timeB = getTimestamp(b) || new Date(0)\n  const timeCmp = timeA.getTime() - timeB.getTime()\n  if (timeCmp !== 0) {\n    return timeCmp\n  }\n  return getSecondary(a) - getSecondary(b)\n}\n\nfunction getTimestamp(d: DataBinding): Date | undefined {\n  return (\n    d.data?.ethLog?.timestamp ||\n    d.data?.ethTransaction?.timestamp ||\n    (d.data?.ethBlock?.block?.timestamp ? new Date(Number(d.data.ethBlock.block.timestamp) * 1000) : undefined) ||\n    d.data?.ethTrace?.timestamp ||\n    (d.data?.aptCall?.transaction ? new Date(Number(d.data.aptCall.transaction.timestamp) / 1000) : undefined) ||\n    (d.data?.aptEvent?.transaction ? new Date(Number(d.data.aptEvent.transaction.timestamp) / 1000) : undefined) ||\n    (d.data?.aptResource?.timestampMicros ? new Date(Number(d.data.aptResource.timestampMicros) / 1000) : undefined) ||\n    d.data?.fuelCall?.timestamp\n  )\n}\n\nfunction getSecondary(d: DataBinding) {\n  return (\n    d.data?.ethLog?.log?.logIndex ||\n    d.data?.ethTransaction?.transaction?.transactionIndex ||\n    d.data?.ethBlock?.block?.number ||\n    d.data?.ethTrace?.trace?.transactionPosition\n  )\n}\n;process.stdout.write(\"\");","import { createLogger, format, transports } from 'winston'\n\nexport function setupLogger(json: boolean, enableDebug: boolean) {\n  const utilFormatter = {\n    transform: (info: any) => {\n      const stringRes = []\n\n      if (typeof info.message === 'object') {\n        stringRes.push(JSON.stringify(info.message))\n      } else {\n        stringRes.push(info.message)\n      }\n\n      const args = info[Symbol.for('splat')]\n      if (args) {\n        for (const idx in args) {\n          const arg = args[idx]\n          if (typeof arg === 'object') {\n            stringRes.push(JSON.stringify(arg))\n          } else {\n            stringRes.push(arg)\n          }\n        }\n      }\n\n      info.message = stringRes.join(' ')\n      return info\n    }\n  }\n  const logger = createLogger({\n    format: format.combine(\n      format.timestamp({ format: 'YYYY-MM-DDTHH:mm:ss.SSSZ' }),\n      utilFormatter,\n      format.errors({ stack: true }),\n      json ? format.json() : format.simple()\n    ),\n    level: enableDebug ? 'debug' : 'info',\n    transports: [new transports.Console()]\n  })\n\n  console.log = (...args) => logger.info.call(logger, ...args)\n  console.info = (...args) => logger.info.call(logger, ...args)\n  console.warn = (...args) => logger.warn.call(logger, ...args)\n  console.error = (...args) => logger.error.call(logger, ...args)\n  console.debug = (...args) => logger.debug.call(logger, ...args)\n}\n;process.stdout.write(\"\");","import { envDetector } from '@opentelemetry/resources'\nimport { MeterProvider, PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics'\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-grpc'\nimport { PrometheusExporter } from '@opentelemetry/exporter-prometheus'\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-grpc'\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base'\nimport { diag, DiagConsoleLogger, DiagLogLevel, metrics, trace, ProxyTracerProvider } from '@opentelemetry/api'\n\nexport async function setupOTLP(debug?: boolean) {\n  if (debug) {\n    diag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG)\n  }\n\n  const resource = await envDetector.detect()\n\n  const meterProvider = new MeterProvider({\n    resource,\n    readers: [\n      new PeriodicExportingMetricReader({\n        exporter: new OTLPMetricExporter()\n      }),\n      new PrometheusExporter({\n        // http://localhost:4041/metrics\n        port: 4041\n      })\n    ]\n  })\n\n  const traceProvider = new NodeTracerProvider({\n    resource: resource\n  })\n  const exporter = new OTLPTraceExporter() // new ConsoleSpanExporter();\n  const processor = new BatchSpanProcessor(exporter)\n  traceProvider.addSpanProcessor(processor)\n  traceProvider.register()\n\n  metrics.setGlobalMeterProvider(meterProvider)\n  trace.setGlobalTracerProvider(traceProvider)\n  ;['SIGINT', 'SIGTERM'].forEach((signal) => {\n    process.on(signal as any, () => shutdownProvider())\n  })\n\n  metrics.getMeter('processor').createGauge('up').record(1)\n}\n\nexport async function shutdownProvider() {\n  const traceProvider = trace.getTracerProvider()\n\n  if (traceProvider instanceof ProxyTracerProvider) {\n    const delegate = traceProvider.getDelegate()\n    if (delegate instanceof NodeTracerProvider) {\n      delegate.shutdown().catch(console.error)\n    }\n  }\n  const meterProvider = metrics.getMeterProvider()\n  if (meterProvider instanceof MeterProvider) {\n    meterProvider.shutdown().catch(console.error)\n  }\n}\n;process.stdout.write(\"\");"],"mappings":"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A4BMC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GACAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAEAC,GAEAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAOOC,GAKAC,GAKAC,GAKAC,GAKAC,GAOAC,GAOAC,GAOAC,GAOAC,GAKAC,GAKAC,GAKAC,GAQAC,GAKAC,GAKAC,GAMAC,GAMAC,GAMAC,GAKAC,GAKAC,GAOAC,GAKAC,GAKAC,GAKAC,GAsBAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAOAC,GAOAC,GAOAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAMAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAKAC,GAOAC,GAKAC,GAOAC,GAKAC,GAKAC,GAOAC,GAKAC,GAKAC,GAMAC,GAMAC,GAMAC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","names":["require_universalify","__commonJSMin","exports","fn","args","resolve","reject","err","res","cb","r","require_polyfills","__commonJSMin","exports","module","constants","origCwd","cwd","platform","chdir","d","patch","fs","patchLchmod","patchLutimes","chownFix","chmodFix","chownFixSync","chmodFixSync","statFix","statFixSync","path","mode","cb","uid","gid","fs$rename","rename","from","to","start","backoff","CB","er","stater","st","fs$read","read","fd","buffer","offset","length","position","callback_","callback","eagCounter","_","__","fs$readSync","err","err2","threw","ret","at","mt","er2","_a","_b","_c","orig","target","chownErOk","options","stats","nonroot","require_legacy_streams","__commonJSMin","exports","module","Stream","legacy","fs","ReadStream","WriteStream","path","options","self","keys","index","length","key","err","fd","require_clone","__commonJSMin","exports","module","clone","getPrototypeOf","obj","copy","key","require_graceful_fs","__commonJSMin","exports","module","fs","polyfills","legacy","clone","util","gracefulQueue","previousSymbol","noop","publishQueue","context","queue","debug","m","fs$close","close","fd","cb","err","resetQueue","fs$closeSync","closeSync","patch","createReadStream","createWriteStream","fs$readFile","readFile","path","options","go$readFile","startTime","enqueue","fs$writeFile","writeFile","data","go$writeFile","fs$appendFile","appendFile","go$appendFile","fs$copyFile","copyFile","src","dest","flags","go$copyFile","fs$readdir","readdir","noReaddirOptionVersions","go$readdir","fs$readdirCallback","files","legStreams","ReadStream","WriteStream","fs$ReadStream","ReadStream$open","fs$WriteStream","WriteStream$open","val","FileReadStream","FileWriteStream","that","open","fs$open","mode","go$open","elem","retry","retryTimer","now","i","fn","args","lastTime","sinceAttempt","sinceStart","desiredDelay","require_fs","__commonJSMin","exports","u","fs","api","key","method","filename","callback","resolve","fd","buffer","offset","length","position","reject","err","bytesRead","args","bytesWritten","buffers","require_utils","__commonJSMin","exports","module","path","pth","error","require_make_dir","__commonJSMin","exports","module","fs","checkPath","getMode","options","defaults","dir","require_mkdirs","__commonJSMin","exports","module","u","_makeDir","makeDirSync","makeDir","require_path_exists","__commonJSMin","exports","module","u","fs","pathExists","path","require_utimes","__commonJSMin","exports","module","fs","u","utimesMillis","path","atime","mtime","fd","closeErr","e","utimesMillisSync","require_stat","__commonJSMin","exports","module","fs","path","u","getStats","src","dest","opts","statFunc","file","err","srcStat","destStat","getStatsSync","checkPaths","funcName","areIdentical","srcBaseName","destBaseName","isSrcSubdir","errMsg","checkPathsSync","checkParentPaths","srcParent","destParent","checkParentPathsSync","srcArr","i","destArr","cur","require_copy","__commonJSMin","exports","module","fs","path","mkdirs","pathExists","utimesMillis","stat","copy","src","dest","opts","srcStat","destStat","runFilter","destParent","getStatsAndPerformCopy","onDir","onFile","onLink","copyFile","fileIsNotWritable","makeFileWritable","updatedSrcStat","srcMode","items","item","srcItem","destItem","resolvedSrc","resolvedDest","e","require_copy_sync","__commonJSMin","exports","module","fs","path","mkdirsSync","utimesMillisSync","stat","copySync","src","dest","opts","srcStat","destStat","destParent","getStats","onDir","onFile","onLink","mayCopyFile","copyFile","handleTimestamps","setDestMode","srcMode","fileIsNotWritable","makeFileWritable","setDestTimestamps","updatedSrcStat","copyDir","mkDirAndCopy","item","copyDirItem","srcItem","destItem","resolvedSrc","resolvedDest","err","copyLink","require_copy","__commonJSMin","exports","module","u","require_remove","__commonJSMin","exports","module","fs","u","remove","path","callback","removeSync","require_empty","__commonJSMin","exports","module","u","fs","path","mkdir","remove","emptyDir","dir","items","item","emptyDirSync","require_file","__commonJSMin","exports","module","u","path","fs","mkdir","createFile","file","stats","dir","dirStats","err","createFileSync","require_link","__commonJSMin","exports","module","u","path","fs","mkdir","pathExists","areIdentical","createLink","srcpath","dstpath","dstStat","srcStat","err","dir","createLinkSync","require_symlink_paths","__commonJSMin","exports","module","path","fs","pathExists","u","symlinkPaths","srcpath","dstpath","err","dstdir","relativeToDst","symlinkPathsSync","require_symlink_type","__commonJSMin","exports","module","fs","u","symlinkType","srcpath","type","stats","symlinkTypeSync","require_symlink","__commonJSMin","exports","module","u","path","fs","mkdirs","mkdirsSync","symlinkPaths","symlinkPathsSync","symlinkType","symlinkTypeSync","pathExists","areIdentical","createSymlink","srcpath","dstpath","type","stats","srcStat","dstStat","relative","toType","dir","createSymlinkSync","require_ensure","__commonJSMin","exports","module","createFile","createFileSync","createLink","createLinkSync","createSymlink","createSymlinkSync","require_utils","__commonJSMin","exports","module","stringify","obj","EOL","finalEOL","replacer","spaces","EOF","stripBom","content","require_jsonfile","__commonJSMin","exports","module","_fs","universalify","stringify","stripBom","_readFile","file","options","fs","shouldThrow","data","obj","err","readFile","readFileSync","content","_writeFile","str","writeFile","writeFileSync","jsonfile","require_jsonfile","__commonJSMin","exports","module","jsonFile","require_output_file","__commonJSMin","exports","module","u","fs","path","mkdir","pathExists","outputFile","file","data","encoding","dir","outputFileSync","args","require_output_json","__commonJSMin","exports","module","stringify","outputFile","outputJson","file","data","options","str","require_output_json_sync","__commonJSMin","exports","module","stringify","outputFileSync","outputJsonSync","file","data","options","str","require_json","__commonJSMin","exports","module","u","jsonFile","require_move","__commonJSMin","exports","module","fs","path","copy","remove","mkdirp","pathExists","stat","move","src","dest","opts","overwrite","srcStat","isChangingCase","destParent","doRename","err","moveAcrossDevice","require_move_sync","__commonJSMin","exports","module","fs","path","copySync","removeSync","mkdirpSync","stat","moveSync","src","dest","opts","overwrite","srcStat","isChangingCase","isParentRoot","doRename","parent","rename","err","moveAcrossDevice","require_move","__commonJSMin","exports","module","u","require_lib","__commonJSMin","exports","module","require_dist","__commonJSMin","exports","module","_interopDefault","ex","camelCase","isObject","input","isArrayLike","arrayify","isObject$1","isArrayLike$1","arrayify$1","findReplace","array","testFn","found","replaceWiths","value","index","expanded","replaceWith","item","spliceArgs","re","ArgvArray","argv","deleteCount","isExecArg","arg","expandedArgs","matches","expandCombinedShortArg","result","letter","isOptionEqualsNotation","isOption","isLongOption","getOptionName","isValue","isNumber","n","isPlainObject","isArrayLike$2","isObject$2","isDefined","isString","isBoolean","isFunction","isClass","isPrimitive","isPromise","isThenable","isIterable","t","OptionDefinition","definition","prop","def","Definitions","caseInsensitive","halt","invalidOption","hasDuplicates","shortOptionName","lowercaseShortOptionName","optionName","lowercaseOptionName","containsValidGroup","definitions","name","message","err","group","items","i","ArgvParser","options","event","singularDefaultSet","unknownFound","origArg","argInfo","_value","Option","val","state","arr","FlagOption","Output","output","option","GroupedOutput","superOutputNoCamel","superOutput","unknown","grouped","outputValue","groupName","commandLineArgs","optionDefinitions","parser","OutputClass","createConstMap","values","res","len","lp","val","init_utils","__esmMin","TMP_AWS_LAMBDA_INVOKED_ARN","TMP_DB_SYSTEM","TMP_DB_CONNECTION_STRING","TMP_DB_USER","TMP_DB_JDBC_DRIVER_CLASSNAME","TMP_DB_NAME","TMP_DB_STATEMENT","TMP_DB_OPERATION","TMP_DB_MSSQL_INSTANCE_NAME","TMP_DB_CASSANDRA_KEYSPACE","TMP_DB_CASSANDRA_PAGE_SIZE","TMP_DB_CASSANDRA_CONSISTENCY_LEVEL","TMP_DB_CASSANDRA_TABLE","TMP_DB_CASSANDRA_IDEMPOTENCE","TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT","TMP_DB_CASSANDRA_COORDINATOR_ID","TMP_DB_CASSANDRA_COORDINATOR_DC","TMP_DB_HBASE_NAMESPACE","TMP_DB_REDIS_DATABASE_INDEX","TMP_DB_MONGODB_COLLECTION","TMP_DB_SQL_TABLE","TMP_EXCEPTION_TYPE","TMP_EXCEPTION_MESSAGE","TMP_EXCEPTION_STACKTRACE","TMP_EXCEPTION_ESCAPED","TMP_FAAS_TRIGGER","TMP_FAAS_EXECUTION","TMP_FAAS_DOCUMENT_COLLECTION","TMP_FAAS_DOCUMENT_OPERATION","TMP_FAAS_DOCUMENT_TIME","TMP_FAAS_DOCUMENT_NAME","TMP_FAAS_TIME","TMP_FAAS_CRON","TMP_FAAS_COLDSTART","TMP_FAAS_INVOKED_NAME","TMP_FAAS_INVOKED_PROVIDER","TMP_FAAS_INVOKED_REGION","TMP_NET_TRANSPORT","TMP_NET_PEER_IP","TMP_NET_PEER_PORT","TMP_NET_PEER_NAME","TMP_NET_HOST_IP","TMP_NET_HOST_PORT","TMP_NET_HOST_NAME","TMP_NET_HOST_CONNECTION_TYPE","TMP_NET_HOST_CONNECTION_SUBTYPE","TMP_NET_HOST_CARRIER_NAME","TMP_NET_HOST_CARRIER_MCC","TMP_NET_HOST_CARRIER_MNC","TMP_NET_HOST_CARRIER_ICC","TMP_PEER_SERVICE","TMP_ENDUSER_ID","TMP_ENDUSER_ROLE","TMP_ENDUSER_SCOPE","TMP_THREAD_ID","TMP_THREAD_NAME","TMP_CODE_FUNCTION","TMP_CODE_NAMESPACE","TMP_CODE_FILEPATH","TMP_CODE_LINENO","TMP_HTTP_METHOD","TMP_HTTP_URL","TMP_HTTP_TARGET","TMP_HTTP_HOST","TMP_HTTP_SCHEME","TMP_HTTP_STATUS_CODE","TMP_HTTP_FLAVOR","TMP_HTTP_USER_AGENT","TMP_HTTP_REQUEST_CONTENT_LENGTH","TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED","TMP_HTTP_RESPONSE_CONTENT_LENGTH","TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED","TMP_HTTP_SERVER_NAME","TMP_HTTP_ROUTE","TMP_HTTP_CLIENT_IP","TMP_AWS_DYNAMODB_TABLE_NAMES","TMP_AWS_DYNAMODB_CONSUMED_CAPACITY","TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS","TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY","TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY","TMP_AWS_DYNAMODB_CONSISTENT_READ","TMP_AWS_DYNAMODB_PROJECTION","TMP_AWS_DYNAMODB_LIMIT","TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET","TMP_AWS_DYNAMODB_INDEX_NAME","TMP_AWS_DYNAMODB_SELECT","TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES","TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES","TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE","TMP_AWS_DYNAMODB_TABLE_COUNT","TMP_AWS_DYNAMODB_SCAN_FORWARD","TMP_AWS_DYNAMODB_SEGMENT","TMP_AWS_DYNAMODB_TOTAL_SEGMENTS","TMP_AWS_DYNAMODB_COUNT","TMP_AWS_DYNAMODB_SCANNED_COUNT","TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS","TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES","TMP_MESSAGING_SYSTEM","TMP_MESSAGING_DESTINATION","TMP_MESSAGING_DESTINATION_KIND","TMP_MESSAGING_TEMP_DESTINATION","TMP_MESSAGING_PROTOCOL","TMP_MESSAGING_PROTOCOL_VERSION","TMP_MESSAGING_URL","TMP_MESSAGING_MESSAGE_ID","TMP_MESSAGING_CONVERSATION_ID","TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES","TMP_MESSAGING_OPERATION","TMP_MESSAGING_CONSUMER_ID","TMP_MESSAGING_RABBITMQ_ROUTING_KEY","TMP_MESSAGING_KAFKA_MESSAGE_KEY","TMP_MESSAGING_KAFKA_CONSUMER_GROUP","TMP_MESSAGING_KAFKA_CLIENT_ID","TMP_MESSAGING_KAFKA_PARTITION","TMP_MESSAGING_KAFKA_TOMBSTONE","TMP_RPC_SYSTEM","TMP_RPC_SERVICE","TMP_RPC_METHOD","TMP_RPC_GRPC_STATUS_CODE","TMP_RPC_JSONRPC_VERSION","TMP_RPC_JSONRPC_REQUEST_ID","TMP_RPC_JSONRPC_ERROR_CODE","TMP_RPC_JSONRPC_ERROR_MESSAGE","TMP_MESSAGE_TYPE","TMP_MESSAGE_ID","TMP_MESSAGE_COMPRESSED_SIZE","TMP_MESSAGE_UNCOMPRESSED_SIZE","SEMATTRS_AWS_LAMBDA_INVOKED_ARN","SEMATTRS_DB_SYSTEM","SEMATTRS_DB_CONNECTION_STRING","SEMATTRS_DB_USER","SEMATTRS_DB_JDBC_DRIVER_CLASSNAME","SEMATTRS_DB_NAME","SEMATTRS_DB_STATEMENT","SEMATTRS_DB_OPERATION","SEMATTRS_DB_MSSQL_INSTANCE_NAME","SEMATTRS_DB_CASSANDRA_KEYSPACE","SEMATTRS_DB_CASSANDRA_PAGE_SIZE","SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL","SEMATTRS_DB_CASSANDRA_TABLE","SEMATTRS_DB_CASSANDRA_IDEMPOTENCE","SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT","SEMATTRS_DB_CASSANDRA_COORDINATOR_ID","SEMATTRS_DB_CASSANDRA_COORDINATOR_DC","SEMATTRS_DB_HBASE_NAMESPACE","SEMATTRS_DB_REDIS_DATABASE_INDEX","SEMATTRS_DB_MONGODB_COLLECTION","SEMATTRS_DB_SQL_TABLE","SEMATTRS_EXCEPTION_TYPE","SEMATTRS_EXCEPTION_MESSAGE","SEMATTRS_EXCEPTION_STACKTRACE","SEMATTRS_EXCEPTION_ESCAPED","SEMATTRS_FAAS_TRIGGER","SEMATTRS_FAAS_EXECUTION","SEMATTRS_FAAS_DOCUMENT_COLLECTION","SEMATTRS_FAAS_DOCUMENT_OPERATION","SEMATTRS_FAAS_DOCUMENT_TIME","SEMATTRS_FAAS_DOCUMENT_NAME","SEMATTRS_FAAS_TIME","SEMATTRS_FAAS_CRON","SEMATTRS_FAAS_COLDSTART","SEMATTRS_FAAS_INVOKED_NAME","SEMATTRS_FAAS_INVOKED_PROVIDER","SEMATTRS_FAAS_INVOKED_REGION","SEMATTRS_NET_TRANSPORT","SEMATTRS_NET_PEER_IP","SEMATTRS_NET_PEER_PORT","SEMATTRS_NET_PEER_NAME","SEMATTRS_NET_HOST_IP","SEMATTRS_NET_HOST_PORT","SEMATTRS_NET_HOST_NAME","SEMATTRS_NET_HOST_CONNECTION_TYPE","SEMATTRS_NET_HOST_CONNECTION_SUBTYPE","SEMATTRS_NET_HOST_CARRIER_NAME","SEMATTRS_NET_HOST_CARRIER_MCC","SEMATTRS_NET_HOST_CARRIER_MNC","SEMATTRS_NET_HOST_CARRIER_ICC","SEMATTRS_PEER_SERVICE","SEMATTRS_ENDUSER_ID","SEMATTRS_ENDUSER_ROLE","SEMATTRS_ENDUSER_SCOPE","SEMATTRS_THREAD_ID","SEMATTRS_THREAD_NAME","SEMATTRS_CODE_FUNCTION","SEMATTRS_CODE_NAMESPACE","SEMATTRS_CODE_FILEPATH","SEMATTRS_CODE_LINENO","SEMATTRS_HTTP_METHOD","SEMATTRS_HTTP_URL","SEMATTRS_HTTP_TARGET","SEMATTRS_HTTP_HOST","SEMATTRS_HTTP_SCHEME","SEMATTRS_HTTP_STATUS_CODE","SEMATTRS_HTTP_FLAVOR","SEMATTRS_HTTP_USER_AGENT","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_SERVER_NAME","SEMATTRS_HTTP_ROUTE","SEMATTRS_HTTP_CLIENT_IP","SEMATTRS_AWS_DYNAMODB_TABLE_NAMES","SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY","SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS","SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY","SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY","SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ","SEMATTRS_AWS_DYNAMODB_PROJECTION","SEMATTRS_AWS_DYNAMODB_LIMIT","SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET","SEMATTRS_AWS_DYNAMODB_INDEX_NAME","SEMATTRS_AWS_DYNAMODB_SELECT","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE","SEMATTRS_AWS_DYNAMODB_TABLE_COUNT","SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD","SEMATTRS_AWS_DYNAMODB_SEGMENT","SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS","SEMATTRS_AWS_DYNAMODB_COUNT","SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT","SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES","SEMATTRS_MESSAGING_SYSTEM","SEMATTRS_MESSAGING_DESTINATION","SEMATTRS_MESSAGING_DESTINATION_KIND","SEMATTRS_MESSAGING_TEMP_DESTINATION","SEMATTRS_MESSAGING_PROTOCOL","SEMATTRS_MESSAGING_PROTOCOL_VERSION","SEMATTRS_MESSAGING_URL","SEMATTRS_MESSAGING_MESSAGE_ID","SEMATTRS_MESSAGING_CONVERSATION_ID","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES","SEMATTRS_MESSAGING_OPERATION","SEMATTRS_MESSAGING_CONSUMER_ID","SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY","SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY","SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP","SEMATTRS_MESSAGING_KAFKA_CLIENT_ID","SEMATTRS_MESSAGING_KAFKA_PARTITION","SEMATTRS_MESSAGING_KAFKA_TOMBSTONE","SEMATTRS_RPC_SYSTEM","SEMATTRS_RPC_SERVICE","SEMATTRS_RPC_METHOD","SEMATTRS_RPC_GRPC_STATUS_CODE","SEMATTRS_RPC_JSONRPC_VERSION","SEMATTRS_RPC_JSONRPC_REQUEST_ID","SEMATTRS_RPC_JSONRPC_ERROR_CODE","SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE","SEMATTRS_MESSAGE_TYPE","SEMATTRS_MESSAGE_ID","SEMATTRS_MESSAGE_COMPRESSED_SIZE","SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE","SemanticAttributes","TMP_DBSYSTEMVALUES_OTHER_SQL","TMP_DBSYSTEMVALUES_MSSQL","TMP_DBSYSTEMVALUES_MYSQL","TMP_DBSYSTEMVALUES_ORACLE","TMP_DBSYSTEMVALUES_DB2","TMP_DBSYSTEMVALUES_POSTGRESQL","TMP_DBSYSTEMVALUES_REDSHIFT","TMP_DBSYSTEMVALUES_HIVE","TMP_DBSYSTEMVALUES_CLOUDSCAPE","TMP_DBSYSTEMVALUES_HSQLDB","TMP_DBSYSTEMVALUES_PROGRESS","TMP_DBSYSTEMVALUES_MAXDB","TMP_DBSYSTEMVALUES_HANADB","TMP_DBSYSTEMVALUES_INGRES","TMP_DBSYSTEMVALUES_FIRSTSQL","TMP_DBSYSTEMVALUES_EDB","TMP_DBSYSTEMVALUES_CACHE","TMP_DBSYSTEMVALUES_ADABAS","TMP_DBSYSTEMVALUES_FIREBIRD","TMP_DBSYSTEMVALUES_DERBY","TMP_DBSYSTEMVALUES_FILEMAKER","TMP_DBSYSTEMVALUES_INFORMIX","TMP_DBSYSTEMVALUES_INSTANTDB","TMP_DBSYSTEMVALUES_INTERBASE","TMP_DBSYSTEMVALUES_MARIADB","TMP_DBSYSTEMVALUES_NETEZZA","TMP_DBSYSTEMVALUES_PERVASIVE","TMP_DBSYSTEMVALUES_POINTBASE","TMP_DBSYSTEMVALUES_SQLITE","TMP_DBSYSTEMVALUES_SYBASE","TMP_DBSYSTEMVALUES_TERADATA","TMP_DBSYSTEMVALUES_VERTICA","TMP_DBSYSTEMVALUES_H2","TMP_DBSYSTEMVALUES_COLDFUSION","TMP_DBSYSTEMVALUES_CASSANDRA","TMP_DBSYSTEMVALUES_HBASE","TMP_DBSYSTEMVALUES_MONGODB","TMP_DBSYSTEMVALUES_REDIS","TMP_DBSYSTEMVALUES_COUCHBASE","TMP_DBSYSTEMVALUES_COUCHDB","TMP_DBSYSTEMVALUES_COSMOSDB","TMP_DBSYSTEMVALUES_DYNAMODB","TMP_DBSYSTEMVALUES_NEO4J","TMP_DBSYSTEMVALUES_GEODE","TMP_DBSYSTEMVALUES_ELASTICSEARCH","TMP_DBSYSTEMVALUES_MEMCACHED","TMP_DBSYSTEMVALUES_COCKROACHDB","DBSYSTEMVALUES_OTHER_SQL","DBSYSTEMVALUES_MSSQL","DBSYSTEMVALUES_MYSQL","DBSYSTEMVALUES_ORACLE","DBSYSTEMVALUES_DB2","DBSYSTEMVALUES_POSTGRESQL","DBSYSTEMVALUES_REDSHIFT","DBSYSTEMVALUES_HIVE","DBSYSTEMVALUES_CLOUDSCAPE","DBSYSTEMVALUES_HSQLDB","DBSYSTEMVALUES_PROGRESS","DBSYSTEMVALUES_MAXDB","DBSYSTEMVALUES_HANADB","DBSYSTEMVALUES_INGRES","DBSYSTEMVALUES_FIRSTSQL","DBSYSTEMVALUES_EDB","DBSYSTEMVALUES_CACHE","DBSYSTEMVALUES_ADABAS","DBSYSTEMVALUES_FIREBIRD","DBSYSTEMVALUES_DERBY","DBSYSTEMVALUES_FILEMAKER","DBSYSTEMVALUES_INFORMIX","DBSYSTEMVALUES_INSTANTDB","DBSYSTEMVALUES_INTERBASE","DBSYSTEMVALUES_MARIADB","DBSYSTEMVALUES_NETEZZA","DBSYSTEMVALUES_PERVASIVE","DBSYSTEMVALUES_POINTBASE","DBSYSTEMVALUES_SQLITE","DBSYSTEMVALUES_SYBASE","DBSYSTEMVALUES_TERADATA","DBSYSTEMVALUES_VERTICA","DBSYSTEMVALUES_H2","DBSYSTEMVALUES_COLDFUSION","DBSYSTEMVALUES_CASSANDRA","DBSYSTEMVALUES_HBASE","DBSYSTEMVALUES_MONGODB","DBSYSTEMVALUES_REDIS","DBSYSTEMVALUES_COUCHBASE","DBSYSTEMVALUES_COUCHDB","DBSYSTEMVALUES_COSMOSDB","DBSYSTEMVALUES_DYNAMODB","DBSYSTEMVALUES_NEO4J","DBSYSTEMVALUES_GEODE","DBSYSTEMVALUES_ELASTICSEARCH","DBSYSTEMVALUES_MEMCACHED","DBSYSTEMVALUES_COCKROACHDB","DbSystemValues","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL","TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_ALL","DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_TWO","DBCASSANDRACONSISTENCYLEVELVALUES_THREE","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_ANY","DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL","DbCassandraConsistencyLevelValues","TMP_FAASTRIGGERVALUES_DATASOURCE","TMP_FAASTRIGGERVALUES_HTTP","TMP_FAASTRIGGERVALUES_PUBSUB","TMP_FAASTRIGGERVALUES_TIMER","TMP_FAASTRIGGERVALUES_OTHER","FAASTRIGGERVALUES_DATASOURCE","FAASTRIGGERVALUES_HTTP","FAASTRIGGERVALUES_PUBSUB","FAASTRIGGERVALUES_TIMER","FAASTRIGGERVALUES_OTHER","FaasTriggerValues","TMP_FAASDOCUMENTOPERATIONVALUES_INSERT","TMP_FAASDOCUMENTOPERATIONVALUES_EDIT","TMP_FAASDOCUMENTOPERATIONVALUES_DELETE","FAASDOCUMENTOPERATIONVALUES_INSERT","FAASDOCUMENTOPERATIONVALUES_EDIT","FAASDOCUMENTOPERATIONVALUES_DELETE","FaasDocumentOperationValues","TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD","TMP_FAASINVOKEDPROVIDERVALUES_AWS","TMP_FAASINVOKEDPROVIDERVALUES_AZURE","TMP_FAASINVOKEDPROVIDERVALUES_GCP","FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD","FAASINVOKEDPROVIDERVALUES_AWS","FAASINVOKEDPROVIDERVALUES_AZURE","FAASINVOKEDPROVIDERVALUES_GCP","FaasInvokedProviderValues","TMP_NETTRANSPORTVALUES_IP_TCP","TMP_NETTRANSPORTVALUES_IP_UDP","TMP_NETTRANSPORTVALUES_IP","TMP_NETTRANSPORTVALUES_UNIX","TMP_NETTRANSPORTVALUES_PIPE","TMP_NETTRANSPORTVALUES_INPROC","TMP_NETTRANSPORTVALUES_OTHER","NETTRANSPORTVALUES_IP_TCP","NETTRANSPORTVALUES_IP_UDP","NETTRANSPORTVALUES_IP","NETTRANSPORTVALUES_UNIX","NETTRANSPORTVALUES_PIPE","NETTRANSPORTVALUES_INPROC","NETTRANSPORTVALUES_OTHER","NetTransportValues","TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI","TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED","TMP_NETHOSTCONNECTIONTYPEVALUES_CELL","TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE","TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN","NETHOSTCONNECTIONTYPEVALUES_WIFI","NETHOSTCONNECTIONTYPEVALUES_WIRED","NETHOSTCONNECTIONTYPEVALUES_CELL","NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE","NETHOSTCONNECTIONTYPEVALUES_UNKNOWN","NetHostConnectionTypeValues","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA","TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA","NETHOSTCONNECTIONSUBTYPEVALUES_GPRS","NETHOSTCONNECTIONSUBTYPEVALUES_EDGE","NETHOSTCONNECTIONSUBTYPEVALUES_UMTS","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT","NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSPA","NETHOSTCONNECTIONSUBTYPEVALUES_IDEN","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B","NETHOSTCONNECTIONSUBTYPEVALUES_LTE","NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD","NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP","NETHOSTCONNECTIONSUBTYPEVALUES_GSM","NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA","NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN","NETHOSTCONNECTIONSUBTYPEVALUES_NR","NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA","NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA","NetHostConnectionSubtypeValues","TMP_HTTPFLAVORVALUES_HTTP_1_0","TMP_HTTPFLAVORVALUES_HTTP_1_1","TMP_HTTPFLAVORVALUES_HTTP_2_0","TMP_HTTPFLAVORVALUES_SPDY","TMP_HTTPFLAVORVALUES_QUIC","HTTPFLAVORVALUES_HTTP_1_0","HTTPFLAVORVALUES_HTTP_1_1","HTTPFLAVORVALUES_HTTP_2_0","HTTPFLAVORVALUES_SPDY","HTTPFLAVORVALUES_QUIC","HttpFlavorValues","TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE","TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC","MESSAGINGDESTINATIONKINDVALUES_QUEUE","MESSAGINGDESTINATIONKINDVALUES_TOPIC","MessagingDestinationKindValues","TMP_MESSAGINGOPERATIONVALUES_RECEIVE","TMP_MESSAGINGOPERATIONVALUES_PROCESS","MESSAGINGOPERATIONVALUES_RECEIVE","MESSAGINGOPERATIONVALUES_PROCESS","MessagingOperationValues","TMP_RPCGRPCSTATUSCODEVALUES_OK","TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED","TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN","TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT","TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED","TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND","TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS","TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED","TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED","TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION","TMP_RPCGRPCSTATUSCODEVALUES_ABORTED","TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE","TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED","TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL","TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE","TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS","TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED","RPCGRPCSTATUSCODEVALUES_OK","RPCGRPCSTATUSCODEVALUES_CANCELLED","RPCGRPCSTATUSCODEVALUES_UNKNOWN","RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT","RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED","RPCGRPCSTATUSCODEVALUES_NOT_FOUND","RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS","RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED","RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED","RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION","RPCGRPCSTATUSCODEVALUES_ABORTED","RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE","RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED","RPCGRPCSTATUSCODEVALUES_INTERNAL","RPCGRPCSTATUSCODEVALUES_UNAVAILABLE","RPCGRPCSTATUSCODEVALUES_DATA_LOSS","RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED","RpcGrpcStatusCodeValues","TMP_MESSAGETYPEVALUES_SENT","TMP_MESSAGETYPEVALUES_RECEIVED","MESSAGETYPEVALUES_SENT","MESSAGETYPEVALUES_RECEIVED","MessageTypeValues","init_SemanticAttributes","__esmMin","init_utils","createConstMap","init_trace","__esmMin","init_SemanticAttributes","TMP_CLOUD_PROVIDER","TMP_CLOUD_ACCOUNT_ID","TMP_CLOUD_REGION","TMP_CLOUD_AVAILABILITY_ZONE","TMP_CLOUD_PLATFORM","TMP_AWS_ECS_CONTAINER_ARN","TMP_AWS_ECS_CLUSTER_ARN","TMP_AWS_ECS_LAUNCHTYPE","TMP_AWS_ECS_TASK_ARN","TMP_AWS_ECS_TASK_FAMILY","TMP_AWS_ECS_TASK_REVISION","TMP_AWS_EKS_CLUSTER_ARN","TMP_AWS_LOG_GROUP_NAMES","TMP_AWS_LOG_GROUP_ARNS","TMP_AWS_LOG_STREAM_NAMES","TMP_AWS_LOG_STREAM_ARNS","TMP_CONTAINER_NAME","TMP_CONTAINER_ID","TMP_CONTAINER_RUNTIME","TMP_CONTAINER_IMAGE_NAME","TMP_CONTAINER_IMAGE_TAG","TMP_DEPLOYMENT_ENVIRONMENT","TMP_DEVICE_ID","TMP_DEVICE_MODEL_IDENTIFIER","TMP_DEVICE_MODEL_NAME","TMP_FAAS_NAME","TMP_FAAS_ID","TMP_FAAS_VERSION","TMP_FAAS_INSTANCE","TMP_FAAS_MAX_MEMORY","TMP_HOST_ID","TMP_HOST_NAME","TMP_HOST_TYPE","TMP_HOST_ARCH","TMP_HOST_IMAGE_NAME","TMP_HOST_IMAGE_ID","TMP_HOST_IMAGE_VERSION","TMP_K8S_CLUSTER_NAME","TMP_K8S_NODE_NAME","TMP_K8S_NODE_UID","TMP_K8S_NAMESPACE_NAME","TMP_K8S_POD_UID","TMP_K8S_POD_NAME","TMP_K8S_CONTAINER_NAME","TMP_K8S_REPLICASET_UID","TMP_K8S_REPLICASET_NAME","TMP_K8S_DEPLOYMENT_UID","TMP_K8S_DEPLOYMENT_NAME","TMP_K8S_STATEFULSET_UID","TMP_K8S_STATEFULSET_NAME","TMP_K8S_DAEMONSET_UID","TMP_K8S_DAEMONSET_NAME","TMP_K8S_JOB_UID","TMP_K8S_JOB_NAME","TMP_K8S_CRONJOB_UID","TMP_K8S_CRONJOB_NAME","TMP_OS_TYPE","TMP_OS_DESCRIPTION","TMP_OS_NAME","TMP_OS_VERSION","TMP_PROCESS_PID","TMP_PROCESS_EXECUTABLE_NAME","TMP_PROCESS_EXECUTABLE_PATH","TMP_PROCESS_COMMAND","TMP_PROCESS_COMMAND_LINE","TMP_PROCESS_COMMAND_ARGS","TMP_PROCESS_OWNER","TMP_PROCESS_RUNTIME_NAME","TMP_PROCESS_RUNTIME_VERSION","TMP_PROCESS_RUNTIME_DESCRIPTION","TMP_SERVICE_NAME","TMP_SERVICE_NAMESPACE","TMP_SERVICE_INSTANCE_ID","TMP_SERVICE_VERSION","TMP_TELEMETRY_SDK_NAME","TMP_TELEMETRY_SDK_LANGUAGE","TMP_TELEMETRY_SDK_VERSION","TMP_TELEMETRY_AUTO_VERSION","TMP_WEBENGINE_NAME","TMP_WEBENGINE_VERSION","TMP_WEBENGINE_DESCRIPTION","SEMRESATTRS_CLOUD_PROVIDER","SEMRESATTRS_CLOUD_ACCOUNT_ID","SEMRESATTRS_CLOUD_REGION","SEMRESATTRS_CLOUD_AVAILABILITY_ZONE","SEMRESATTRS_CLOUD_PLATFORM","SEMRESATTRS_AWS_ECS_CONTAINER_ARN","SEMRESATTRS_AWS_ECS_CLUSTER_ARN","SEMRESATTRS_AWS_ECS_LAUNCHTYPE","SEMRESATTRS_AWS_ECS_TASK_ARN","SEMRESATTRS_AWS_ECS_TASK_FAMILY","SEMRESATTRS_AWS_ECS_TASK_REVISION","SEMRESATTRS_AWS_EKS_CLUSTER_ARN","SEMRESATTRS_AWS_LOG_GROUP_NAMES","SEMRESATTRS_AWS_LOG_GROUP_ARNS","SEMRESATTRS_AWS_LOG_STREAM_NAMES","SEMRESATTRS_AWS_LOG_STREAM_ARNS","SEMRESATTRS_CONTAINER_NAME","SEMRESATTRS_CONTAINER_ID","SEMRESATTRS_CONTAINER_RUNTIME","SEMRESATTRS_CONTAINER_IMAGE_NAME","SEMRESATTRS_CONTAINER_IMAGE_TAG","SEMRESATTRS_DEPLOYMENT_ENVIRONMENT","SEMRESATTRS_DEVICE_ID","SEMRESATTRS_DEVICE_MODEL_IDENTIFIER","SEMRESATTRS_DEVICE_MODEL_NAME","SEMRESATTRS_FAAS_NAME","SEMRESATTRS_FAAS_ID","SEMRESATTRS_FAAS_VERSION","SEMRESATTRS_FAAS_INSTANCE","SEMRESATTRS_FAAS_MAX_MEMORY","SEMRESATTRS_HOST_ID","SEMRESATTRS_HOST_NAME","SEMRESATTRS_HOST_TYPE","SEMRESATTRS_HOST_ARCH","SEMRESATTRS_HOST_IMAGE_NAME","SEMRESATTRS_HOST_IMAGE_ID","SEMRESATTRS_HOST_IMAGE_VERSION","SEMRESATTRS_K8S_CLUSTER_NAME","SEMRESATTRS_K8S_NODE_NAME","SEMRESATTRS_K8S_NODE_UID","SEMRESATTRS_K8S_NAMESPACE_NAME","SEMRESATTRS_K8S_POD_UID","SEMRESATTRS_K8S_POD_NAME","SEMRESATTRS_K8S_CONTAINER_NAME","SEMRESATTRS_K8S_REPLICASET_UID","SEMRESATTRS_K8S_REPLICASET_NAME","SEMRESATTRS_K8S_DEPLOYMENT_UID","SEMRESATTRS_K8S_DEPLOYMENT_NAME","SEMRESATTRS_K8S_STATEFULSET_UID","SEMRESATTRS_K8S_STATEFULSET_NAME","SEMRESATTRS_K8S_DAEMONSET_UID","SEMRESATTRS_K8S_DAEMONSET_NAME","SEMRESATTRS_K8S_JOB_UID","SEMRESATTRS_K8S_JOB_NAME","SEMRESATTRS_K8S_CRONJOB_UID","SEMRESATTRS_K8S_CRONJOB_NAME","SEMRESATTRS_OS_TYPE","SEMRESATTRS_OS_DESCRIPTION","SEMRESATTRS_OS_NAME","SEMRESATTRS_OS_VERSION","SEMRESATTRS_PROCESS_PID","SEMRESATTRS_PROCESS_EXECUTABLE_NAME","SEMRESATTRS_PROCESS_EXECUTABLE_PATH","SEMRESATTRS_PROCESS_COMMAND","SEMRESATTRS_PROCESS_COMMAND_LINE","SEMRESATTRS_PROCESS_COMMAND_ARGS","SEMRESATTRS_PROCESS_OWNER","SEMRESATTRS_PROCESS_RUNTIME_NAME","SEMRESATTRS_PROCESS_RUNTIME_VERSION","SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION","SEMRESATTRS_SERVICE_NAME","SEMRESATTRS_SERVICE_NAMESPACE","SEMRESATTRS_SERVICE_INSTANCE_ID","SEMRESATTRS_SERVICE_VERSION","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SEMRESATTRS_TELEMETRY_SDK_VERSION","SEMRESATTRS_TELEMETRY_AUTO_VERSION","SEMRESATTRS_WEBENGINE_NAME","SEMRESATTRS_WEBENGINE_VERSION","SEMRESATTRS_WEBENGINE_DESCRIPTION","SemanticResourceAttributes","TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD","TMP_CLOUDPROVIDERVALUES_AWS","TMP_CLOUDPROVIDERVALUES_AZURE","TMP_CLOUDPROVIDERVALUES_GCP","CLOUDPROVIDERVALUES_ALIBABA_CLOUD","CLOUDPROVIDERVALUES_AWS","CLOUDPROVIDERVALUES_AZURE","CLOUDPROVIDERVALUES_GCP","CloudProviderValues","TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS","TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC","TMP_CLOUDPLATFORMVALUES_AWS_EC2","TMP_CLOUDPLATFORMVALUES_AWS_ECS","TMP_CLOUDPLATFORMVALUES_AWS_EKS","TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA","TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK","TMP_CLOUDPLATFORMVALUES_AZURE_VM","TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES","TMP_CLOUDPLATFORMVALUES_AZURE_AKS","TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS","TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE","TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE","TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN","TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE","TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS","TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC","CLOUDPLATFORMVALUES_AWS_EC2","CLOUDPLATFORMVALUES_AWS_ECS","CLOUDPLATFORMVALUES_AWS_EKS","CLOUDPLATFORMVALUES_AWS_LAMBDA","CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK","CLOUDPLATFORMVALUES_AZURE_VM","CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES","CLOUDPLATFORMVALUES_AZURE_AKS","CLOUDPLATFORMVALUES_AZURE_FUNCTIONS","CLOUDPLATFORMVALUES_AZURE_APP_SERVICE","CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE","CLOUDPLATFORMVALUES_GCP_CLOUD_RUN","CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE","CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS","CLOUDPLATFORMVALUES_GCP_APP_ENGINE","CloudPlatformValues","TMP_AWSECSLAUNCHTYPEVALUES_EC2","TMP_AWSECSLAUNCHTYPEVALUES_FARGATE","AWSECSLAUNCHTYPEVALUES_EC2","AWSECSLAUNCHTYPEVALUES_FARGATE","AwsEcsLaunchtypeValues","TMP_HOSTARCHVALUES_AMD64","TMP_HOSTARCHVALUES_ARM32","TMP_HOSTARCHVALUES_ARM64","TMP_HOSTARCHVALUES_IA64","TMP_HOSTARCHVALUES_PPC32","TMP_HOSTARCHVALUES_PPC64","TMP_HOSTARCHVALUES_X86","HOSTARCHVALUES_AMD64","HOSTARCHVALUES_ARM32","HOSTARCHVALUES_ARM64","HOSTARCHVALUES_IA64","HOSTARCHVALUES_PPC32","HOSTARCHVALUES_PPC64","HOSTARCHVALUES_X86","HostArchValues","TMP_OSTYPEVALUES_WINDOWS","TMP_OSTYPEVALUES_LINUX","TMP_OSTYPEVALUES_DARWIN","TMP_OSTYPEVALUES_FREEBSD","TMP_OSTYPEVALUES_NETBSD","TMP_OSTYPEVALUES_OPENBSD","TMP_OSTYPEVALUES_DRAGONFLYBSD","TMP_OSTYPEVALUES_HPUX","TMP_OSTYPEVALUES_AIX","TMP_OSTYPEVALUES_SOLARIS","TMP_OSTYPEVALUES_Z_OS","OSTYPEVALUES_WINDOWS","OSTYPEVALUES_LINUX","OSTYPEVALUES_DARWIN","OSTYPEVALUES_FREEBSD","OSTYPEVALUES_NETBSD","OSTYPEVALUES_OPENBSD","OSTYPEVALUES_DRAGONFLYBSD","OSTYPEVALUES_HPUX","OSTYPEVALUES_AIX","OSTYPEVALUES_SOLARIS","OSTYPEVALUES_Z_OS","OsTypeValues","TMP_TELEMETRYSDKLANGUAGEVALUES_CPP","TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET","TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG","TMP_TELEMETRYSDKLANGUAGEVALUES_GO","TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA","TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS","TMP_TELEMETRYSDKLANGUAGEVALUES_PHP","TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON","TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY","TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS","TELEMETRYSDKLANGUAGEVALUES_CPP","TELEMETRYSDKLANGUAGEVALUES_DOTNET","TELEMETRYSDKLANGUAGEVALUES_ERLANG","TELEMETRYSDKLANGUAGEVALUES_GO","TELEMETRYSDKLANGUAGEVALUES_JAVA","TELEMETRYSDKLANGUAGEVALUES_NODEJS","TELEMETRYSDKLANGUAGEVALUES_PHP","TELEMETRYSDKLANGUAGEVALUES_PYTHON","TELEMETRYSDKLANGUAGEVALUES_RUBY","TELEMETRYSDKLANGUAGEVALUES_WEBJS","TelemetrySdkLanguageValues","init_SemanticResourceAttributes","__esmMin","init_utils","createConstMap","init_resource","__esmMin","init_SemanticResourceAttributes","esm_exports","__export","AWSECSLAUNCHTYPEVALUES_EC2","AWSECSLAUNCHTYPEVALUES_FARGATE","AwsEcsLaunchtypeValues","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS","CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC","CLOUDPLATFORMVALUES_AWS_EC2","CLOUDPLATFORMVALUES_AWS_ECS","CLOUDPLATFORMVALUES_AWS_EKS","CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK","CLOUDPLATFORMVALUES_AWS_LAMBDA","CLOUDPLATFORMVALUES_AZURE_AKS","CLOUDPLATFORMVALUES_AZURE_APP_SERVICE","CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES","CLOUDPLATFORMVALUES_AZURE_FUNCTIONS","CLOUDPLATFORMVALUES_AZURE_VM","CLOUDPLATFORMVALUES_GCP_APP_ENGINE","CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS","CLOUDPLATFORMVALUES_GCP_CLOUD_RUN","CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE","CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE","CLOUDPROVIDERVALUES_ALIBABA_CLOUD","CLOUDPROVIDERVALUES_AWS","CLOUDPROVIDERVALUES_AZURE","CLOUDPROVIDERVALUES_GCP","CloudPlatformValues","CloudProviderValues","DBCASSANDRACONSISTENCYLEVELVALUES_ALL","DBCASSANDRACONSISTENCYLEVELVALUES_ANY","DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_ONE","DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM","DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL","DBCASSANDRACONSISTENCYLEVELVALUES_THREE","DBCASSANDRACONSISTENCYLEVELVALUES_TWO","DBSYSTEMVALUES_ADABAS","DBSYSTEMVALUES_CACHE","DBSYSTEMVALUES_CASSANDRA","DBSYSTEMVALUES_CLOUDSCAPE","DBSYSTEMVALUES_COCKROACHDB","DBSYSTEMVALUES_COLDFUSION","DBSYSTEMVALUES_COSMOSDB","DBSYSTEMVALUES_COUCHBASE","DBSYSTEMVALUES_COUCHDB","DBSYSTEMVALUES_DB2","DBSYSTEMVALUES_DERBY","DBSYSTEMVALUES_DYNAMODB","DBSYSTEMVALUES_EDB","DBSYSTEMVALUES_ELASTICSEARCH","DBSYSTEMVALUES_FILEMAKER","DBSYSTEMVALUES_FIREBIRD","DBSYSTEMVALUES_FIRSTSQL","DBSYSTEMVALUES_GEODE","DBSYSTEMVALUES_H2","DBSYSTEMVALUES_HANADB","DBSYSTEMVALUES_HBASE","DBSYSTEMVALUES_HIVE","DBSYSTEMVALUES_HSQLDB","DBSYSTEMVALUES_INFORMIX","DBSYSTEMVALUES_INGRES","DBSYSTEMVALUES_INSTANTDB","DBSYSTEMVALUES_INTERBASE","DBSYSTEMVALUES_MARIADB","DBSYSTEMVALUES_MAXDB","DBSYSTEMVALUES_MEMCACHED","DBSYSTEMVALUES_MONGODB","DBSYSTEMVALUES_MSSQL","DBSYSTEMVALUES_MYSQL","DBSYSTEMVALUES_NEO4J","DBSYSTEMVALUES_NETEZZA","DBSYSTEMVALUES_ORACLE","DBSYSTEMVALUES_OTHER_SQL","DBSYSTEMVALUES_PERVASIVE","DBSYSTEMVALUES_POINTBASE","DBSYSTEMVALUES_POSTGRESQL","DBSYSTEMVALUES_PROGRESS","DBSYSTEMVALUES_REDIS","DBSYSTEMVALUES_REDSHIFT","DBSYSTEMVALUES_SQLITE","DBSYSTEMVALUES_SYBASE","DBSYSTEMVALUES_TERADATA","DBSYSTEMVALUES_VERTICA","DbCassandraConsistencyLevelValues","DbSystemValues","FAASDOCUMENTOPERATIONVALUES_DELETE","FAASDOCUMENTOPERATIONVALUES_EDIT","FAASDOCUMENTOPERATIONVALUES_INSERT","FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD","FAASINVOKEDPROVIDERVALUES_AWS","FAASINVOKEDPROVIDERVALUES_AZURE","FAASINVOKEDPROVIDERVALUES_GCP","FAASTRIGGERVALUES_DATASOURCE","FAASTRIGGERVALUES_HTTP","FAASTRIGGERVALUES_OTHER","FAASTRIGGERVALUES_PUBSUB","FAASTRIGGERVALUES_TIMER","FaasDocumentOperationValues","FaasInvokedProviderValues","FaasTriggerValues","HOSTARCHVALUES_AMD64","HOSTARCHVALUES_ARM32","HOSTARCHVALUES_ARM64","HOSTARCHVALUES_IA64","HOSTARCHVALUES_PPC32","HOSTARCHVALUES_PPC64","HOSTARCHVALUES_X86","HTTPFLAVORVALUES_HTTP_1_0","HTTPFLAVORVALUES_HTTP_1_1","HTTPFLAVORVALUES_HTTP_2_0","HTTPFLAVORVALUES_QUIC","HTTPFLAVORVALUES_SPDY","HostArchValues","HttpFlavorValues","MESSAGETYPEVALUES_RECEIVED","MESSAGETYPEVALUES_SENT","MESSAGINGDESTINATIONKINDVALUES_QUEUE","MESSAGINGDESTINATIONKINDVALUES_TOPIC","MESSAGINGOPERATIONVALUES_PROCESS","MESSAGINGOPERATIONVALUES_RECEIVE","MessageTypeValues","MessagingDestinationKindValues","MessagingOperationValues","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA","NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT","NETHOSTCONNECTIONSUBTYPEVALUES_EDGE","NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A","NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B","NETHOSTCONNECTIONSUBTYPEVALUES_GPRS","NETHOSTCONNECTIONSUBTYPEVALUES_GSM","NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSPA","NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP","NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA","NETHOSTCONNECTIONSUBTYPEVALUES_IDEN","NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN","NETHOSTCONNECTIONSUBTYPEVALUES_LTE","NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA","NETHOSTCONNECTIONSUBTYPEVALUES_NR","NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA","NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA","NETHOSTCONNECTIONSUBTYPEVALUES_UMTS","NETHOSTCONNECTIONTYPEVALUES_CELL","NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE","NETHOSTCONNECTIONTYPEVALUES_UNKNOWN","NETHOSTCONNECTIONTYPEVALUES_WIFI","NETHOSTCONNECTIONTYPEVALUES_WIRED","NETTRANSPORTVALUES_INPROC","NETTRANSPORTVALUES_IP","NETTRANSPORTVALUES_IP_TCP","NETTRANSPORTVALUES_IP_UDP","NETTRANSPORTVALUES_OTHER","NETTRANSPORTVALUES_PIPE","NETTRANSPORTVALUES_UNIX","NetHostConnectionSubtypeValues","NetHostConnectionTypeValues","NetTransportValues","OSTYPEVALUES_AIX","OSTYPEVALUES_DARWIN","OSTYPEVALUES_DRAGONFLYBSD","OSTYPEVALUES_FREEBSD","OSTYPEVALUES_HPUX","OSTYPEVALUES_LINUX","OSTYPEVALUES_NETBSD","OSTYPEVALUES_OPENBSD","OSTYPEVALUES_SOLARIS","OSTYPEVALUES_WINDOWS","OSTYPEVALUES_Z_OS","OsTypeValues","RPCGRPCSTATUSCODEVALUES_ABORTED","RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS","RPCGRPCSTATUSCODEVALUES_CANCELLED","RPCGRPCSTATUSCODEVALUES_DATA_LOSS","RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED","RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION","RPCGRPCSTATUSCODEVALUES_INTERNAL","RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT","RPCGRPCSTATUSCODEVALUES_NOT_FOUND","RPCGRPCSTATUSCODEVALUES_OK","RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE","RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED","RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED","RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED","RPCGRPCSTATUSCODEVALUES_UNAVAILABLE","RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED","RPCGRPCSTATUSCODEVALUES_UNKNOWN","RpcGrpcStatusCodeValues","SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET","SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS","SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ","SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY","SEMATTRS_AWS_DYNAMODB_COUNT","SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES","SEMATTRS_AWS_DYNAMODB_INDEX_NAME","SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS","SEMATTRS_AWS_DYNAMODB_LIMIT","SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES","SEMATTRS_AWS_DYNAMODB_PROJECTION","SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY","SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY","SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT","SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD","SEMATTRS_AWS_DYNAMODB_SEGMENT","SEMATTRS_AWS_DYNAMODB_SELECT","SEMATTRS_AWS_DYNAMODB_TABLE_COUNT","SEMATTRS_AWS_DYNAMODB_TABLE_NAMES","SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS","SEMATTRS_AWS_LAMBDA_INVOKED_ARN","SEMATTRS_CODE_FILEPATH","SEMATTRS_CODE_FUNCTION","SEMATTRS_CODE_LINENO","SEMATTRS_CODE_NAMESPACE","SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL","SEMATTRS_DB_CASSANDRA_COORDINATOR_DC","SEMATTRS_DB_CASSANDRA_COORDINATOR_ID","SEMATTRS_DB_CASSANDRA_IDEMPOTENCE","SEMATTRS_DB_CASSANDRA_KEYSPACE","SEMATTRS_DB_CASSANDRA_PAGE_SIZE","SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT","SEMATTRS_DB_CASSANDRA_TABLE","SEMATTRS_DB_CONNECTION_STRING","SEMATTRS_DB_HBASE_NAMESPACE","SEMATTRS_DB_JDBC_DRIVER_CLASSNAME","SEMATTRS_DB_MONGODB_COLLECTION","SEMATTRS_DB_MSSQL_INSTANCE_NAME","SEMATTRS_DB_NAME","SEMATTRS_DB_OPERATION","SEMATTRS_DB_REDIS_DATABASE_INDEX","SEMATTRS_DB_SQL_TABLE","SEMATTRS_DB_STATEMENT","SEMATTRS_DB_SYSTEM","SEMATTRS_DB_USER","SEMATTRS_ENDUSER_ID","SEMATTRS_ENDUSER_ROLE","SEMATTRS_ENDUSER_SCOPE","SEMATTRS_EXCEPTION_ESCAPED","SEMATTRS_EXCEPTION_MESSAGE","SEMATTRS_EXCEPTION_STACKTRACE","SEMATTRS_EXCEPTION_TYPE","SEMATTRS_FAAS_COLDSTART","SEMATTRS_FAAS_CRON","SEMATTRS_FAAS_DOCUMENT_COLLECTION","SEMATTRS_FAAS_DOCUMENT_NAME","SEMATTRS_FAAS_DOCUMENT_OPERATION","SEMATTRS_FAAS_DOCUMENT_TIME","SEMATTRS_FAAS_EXECUTION","SEMATTRS_FAAS_INVOKED_NAME","SEMATTRS_FAAS_INVOKED_PROVIDER","SEMATTRS_FAAS_INVOKED_REGION","SEMATTRS_FAAS_TIME","SEMATTRS_FAAS_TRIGGER","SEMATTRS_HTTP_CLIENT_IP","SEMATTRS_HTTP_FLAVOR","SEMATTRS_HTTP_HOST","SEMATTRS_HTTP_METHOD","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH","SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH","SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED","SEMATTRS_HTTP_ROUTE","SEMATTRS_HTTP_SCHEME","SEMATTRS_HTTP_SERVER_NAME","SEMATTRS_HTTP_STATUS_CODE","SEMATTRS_HTTP_TARGET","SEMATTRS_HTTP_URL","SEMATTRS_HTTP_USER_AGENT","SEMATTRS_MESSAGE_COMPRESSED_SIZE","SEMATTRS_MESSAGE_ID","SEMATTRS_MESSAGE_TYPE","SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE","SEMATTRS_MESSAGING_CONSUMER_ID","SEMATTRS_MESSAGING_CONVERSATION_ID","SEMATTRS_MESSAGING_DESTINATION","SEMATTRS_MESSAGING_DESTINATION_KIND","SEMATTRS_MESSAGING_KAFKA_CLIENT_ID","SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP","SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY","SEMATTRS_MESSAGING_KAFKA_PARTITION","SEMATTRS_MESSAGING_KAFKA_TOMBSTONE","SEMATTRS_MESSAGING_MESSAGE_ID","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES","SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES","SEMATTRS_MESSAGING_OPERATION","SEMATTRS_MESSAGING_PROTOCOL","SEMATTRS_MESSAGING_PROTOCOL_VERSION","SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY","SEMATTRS_MESSAGING_SYSTEM","SEMATTRS_MESSAGING_TEMP_DESTINATION","SEMATTRS_MESSAGING_URL","SEMATTRS_NET_HOST_CARRIER_ICC","SEMATTRS_NET_HOST_CARRIER_MCC","SEMATTRS_NET_HOST_CARRIER_MNC","SEMATTRS_NET_HOST_CARRIER_NAME","SEMATTRS_NET_HOST_CONNECTION_SUBTYPE","SEMATTRS_NET_HOST_CONNECTION_TYPE","SEMATTRS_NET_HOST_IP","SEMATTRS_NET_HOST_NAME","SEMATTRS_NET_HOST_PORT","SEMATTRS_NET_PEER_IP","SEMATTRS_NET_PEER_NAME","SEMATTRS_NET_PEER_PORT","SEMATTRS_NET_TRANSPORT","SEMATTRS_PEER_SERVICE","SEMATTRS_RPC_GRPC_STATUS_CODE","SEMATTRS_RPC_JSONRPC_ERROR_CODE","SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE","SEMATTRS_RPC_JSONRPC_REQUEST_ID","SEMATTRS_RPC_JSONRPC_VERSION","SEMATTRS_RPC_METHOD","SEMATTRS_RPC_SERVICE","SEMATTRS_RPC_SYSTEM","SEMATTRS_THREAD_ID","SEMATTRS_THREAD_NAME","SEMRESATTRS_AWS_ECS_CLUSTER_ARN","SEMRESATTRS_AWS_ECS_CONTAINER_ARN","SEMRESATTRS_AWS_ECS_LAUNCHTYPE","SEMRESATTRS_AWS_ECS_TASK_ARN","SEMRESATTRS_AWS_ECS_TASK_FAMILY","SEMRESATTRS_AWS_ECS_TASK_REVISION","SEMRESATTRS_AWS_EKS_CLUSTER_ARN","SEMRESATTRS_AWS_LOG_GROUP_ARNS","SEMRESATTRS_AWS_LOG_GROUP_NAMES","SEMRESATTRS_AWS_LOG_STREAM_ARNS","SEMRESATTRS_AWS_LOG_STREAM_NAMES","SEMRESATTRS_CLOUD_ACCOUNT_ID","SEMRESATTRS_CLOUD_AVAILABILITY_ZONE","SEMRESATTRS_CLOUD_PLATFORM","SEMRESATTRS_CLOUD_PROVIDER","SEMRESATTRS_CLOUD_REGION","SEMRESATTRS_CONTAINER_ID","SEMRESATTRS_CONTAINER_IMAGE_NAME","SEMRESATTRS_CONTAINER_IMAGE_TAG","SEMRESATTRS_CONTAINER_NAME","SEMRESATTRS_CONTAINER_RUNTIME","SEMRESATTRS_DEPLOYMENT_ENVIRONMENT","SEMRESATTRS_DEVICE_ID","SEMRESATTRS_DEVICE_MODEL_IDENTIFIER","SEMRESATTRS_DEVICE_MODEL_NAME","SEMRESATTRS_FAAS_ID","SEMRESATTRS_FAAS_INSTANCE","SEMRESATTRS_FAAS_MAX_MEMORY","SEMRESATTRS_FAAS_NAME","SEMRESATTRS_FAAS_VERSION","SEMRESATTRS_HOST_ARCH","SEMRESATTRS_HOST_ID","SEMRESATTRS_HOST_IMAGE_ID","SEMRESATTRS_HOST_IMAGE_NAME","SEMRESATTRS_HOST_IMAGE_VERSION","SEMRESATTRS_HOST_NAME","SEMRESATTRS_HOST_TYPE","SEMRESATTRS_K8S_CLUSTER_NAME","SEMRESATTRS_K8S_CONTAINER_NAME","SEMRESATTRS_K8S_CRONJOB_NAME","SEMRESATTRS_K8S_CRONJOB_UID","SEMRESATTRS_K8S_DAEMONSET_NAME","SEMRESATTRS_K8S_DAEMONSET_UID","SEMRESATTRS_K8S_DEPLOYMENT_NAME","SEMRESATTRS_K8S_DEPLOYMENT_UID","SEMRESATTRS_K8S_JOB_NAME","SEMRESATTRS_K8S_JOB_UID","SEMRESATTRS_K8S_NAMESPACE_NAME","SEMRESATTRS_K8S_NODE_NAME","SEMRESATTRS_K8S_NODE_UID","SEMRESATTRS_K8S_POD_NAME","SEMRESATTRS_K8S_POD_UID","SEMRESATTRS_K8S_REPLICASET_NAME","SEMRESATTRS_K8S_REPLICASET_UID","SEMRESATTRS_K8S_STATEFULSET_NAME","SEMRESATTRS_K8S_STATEFULSET_UID","SEMRESATTRS_OS_DESCRIPTION","SEMRESATTRS_OS_NAME","SEMRESATTRS_OS_TYPE","SEMRESATTRS_OS_VERSION","SEMRESATTRS_PROCESS_COMMAND","SEMRESATTRS_PROCESS_COMMAND_ARGS","SEMRESATTRS_PROCESS_COMMAND_LINE","SEMRESATTRS_PROCESS_EXECUTABLE_NAME","SEMRESATTRS_PROCESS_EXECUTABLE_PATH","SEMRESATTRS_PROCESS_OWNER","SEMRESATTRS_PROCESS_PID","SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION","SEMRESATTRS_PROCESS_RUNTIME_NAME","SEMRESATTRS_PROCESS_RUNTIME_VERSION","SEMRESATTRS_SERVICE_INSTANCE_ID","SEMRESATTRS_SERVICE_NAME","SEMRESATTRS_SERVICE_NAMESPACE","SEMRESATTRS_SERVICE_VERSION","SEMRESATTRS_TELEMETRY_AUTO_VERSION","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_VERSION","SEMRESATTRS_WEBENGINE_DESCRIPTION","SEMRESATTRS_WEBENGINE_NAME","SEMRESATTRS_WEBENGINE_VERSION","SemanticAttributes","SemanticResourceAttributes","TELEMETRYSDKLANGUAGEVALUES_CPP","TELEMETRYSDKLANGUAGEVALUES_DOTNET","TELEMETRYSDKLANGUAGEVALUES_ERLANG","TELEMETRYSDKLANGUAGEVALUES_GO","TELEMETRYSDKLANGUAGEVALUES_JAVA","TELEMETRYSDKLANGUAGEVALUES_NODEJS","TELEMETRYSDKLANGUAGEVALUES_PHP","TELEMETRYSDKLANGUAGEVALUES_PYTHON","TELEMETRYSDKLANGUAGEVALUES_RUBY","TELEMETRYSDKLANGUAGEVALUES_WEBJS","TelemetrySdkLanguageValues","init_esm","__esmMin","init_trace","init_resource","require_ipaddr","__commonJSMin","exports","module","root","ipv4Part","ipv4Regexes","octalRegex","hexRegex","zoneIndex","ipv6Part","ipv6Regexes","expandIPv6","string","parts","colonCount","lastColon","zoneId","replacement","replacementCount","ref","results","i","matchCIDR","first","second","partSize","cidrBits","part","shift","parseIntAuto","padPart","length","ipaddr","IPv4","octets","octet","other","cidrRange","cidr","stop","zerotable","zeros","ipInterfaceOctets","subnetMaskOctets","match","maskLength","parsed","value","prefix","j","filledOctetCount","IPv6","bytes","addr","suffix","high","low","regex","bestMatchIndex","bestMatchLength","e","address","rangeList","defaultName","rangeName","rangeSubnets","subnet","semantic_conventions_1","ipaddr","nice_grpc_common_1","getMethodAttributes","methodPath","service","method","exports","getStatusAttributes","status","getPeerAttributes","peer","lastColonIndex","host","port","exports","carrier","key","value","exports","api_1","semantic_conventions_1","version_1","exports","getSpanName","methodPath","emitSpanEvents","iterable","span","type","nextId","item","api_1","bindAsyncGenerator","ctx","generator","exports","api_1","semantic_conventions_1","abort_controller_x_1","nice_grpc_common_1","attributes_1","propagation_1","traces_1","bindAsyncGenerator_1","openTelemetryServerMiddleware","call","context","span","openTelemetryServerMiddlewareGenerator","exports","attributes","status","errorMessage","request","err","statusAttributes","api_1","semantic_conventions_1","abort_controller_x_1","nice_grpc_common_1","attributes_1","propagation_1","traces_1","bindAsyncGenerator_1","openTelemetryClientMiddleware","call","options","span","metadata","openTelemetryClientMiddlewareGenerator","exports","attributes","settled","status","errorMessage","request","response","err","statusAttributes","server_1","exports","client_1","require_format","__commonJSMin","exports","module","InvalidFormatError","formatFn","Format","options","createFormatWrap","opts","require_styles","__commonJSMin","exports","module","styles","codes","key","val","style","require_has_flag","__commonJSMin","exports","module","flag","argv","terminatorPos","prefix","pos","require_supports_colors","__commonJSMin","exports","module","os","hasFlag","env","forceColor","translateLevel","level","supportsColor","stream","min","osRelease","sign","version","getSupportLevel","require_trap","__commonJSMin","exports","module","text","options","result","trap","c","chars","rand","require_zalgo","__commonJSMin","exports","module","text","options","soul","all","randomNumber","range","r","isChar","character","bool","i","heComes","result","counts","l","arr","d","index","require_america","__commonJSMin","exports","module","colors","letter","i","exploded","require_zebra","__commonJSMin","exports","module","colors","letter","i","exploded","require_rainbow","__commonJSMin","exports","module","colors","rainbowColors","letter","i","exploded","require_random","__commonJSMin","exports","module","colors","available","letter","i","exploded","require_colors","__commonJSMin","exports","module","colors","util","ansiStyles","defineProps","newLineRegex","str","stylize","style","styleMap","matchOperatorsRe","escapeStringRegexp","build","_styles","builder","applyStyle","proto","styles","ret","key","args","arg","newLinesPresent","nestedStyles","i","code","match","theme","out","init","name","sequencer","map","exploded","require_safe","__commonJSMin","exports","module","colors","require_cli","__commonJSMin","exports","require_npm","__commonJSMin","exports","require_syslog","__commonJSMin","exports","require_config","__commonJSMin","exports","require_triple_beam","__commonJSMin","exports","require_colorize","__commonJSMin","exports","module","colors","LEVEL","MESSAGE","hasSpace","Colorizer","opts","clrs","nextColors","acc","level","lookup","message","i","len","info","require_levels","__commonJSMin","exports","module","Colorizer","config","require_align","__commonJSMin","exports","module","format","info","require_errors","__commonJSMin","exports","module","format","LEVEL","MESSAGE","einfo","stack","cause","info","err","require_pad_levels","__commonJSMin","exports","module","configs","LEVEL","MESSAGE","Padder","opts","levels","lvls","level","filler","maxLength","targetLen","rep","acc","info","require_cli","__commonJSMin","exports","module","Colorizer","Padder","configs","MESSAGE","CliFormat","opts","info","require_combine","__commonJSMin","exports","module","format","cascade","formats","isValidFormat","info","obj","i","fmt","combinedFormat","instance","require_safe_stable_stringify","__commonJSMin","exports","module","hasOwnProperty","stringify","configure","strEscapeSequencesRegExp","strEscape","str","insertSort","array","i","currentValue","position","typedArrayPrototypeGetSymbolToStringTag","isTypedArrayWithEntries","value","stringifyTypedArray","separator","maximumBreadth","whitespace","res","getCircularValueOption","options","circularValue","getBooleanOption","key","getPositiveIntegerOption","getItemCount","number","getUniqueReplacerSet","replacerArray","replacerSet","getStrictOption","message","fail","bigint","deterministic","maximumDepth","stringifyFnReplacer","parent","stack","replacer","spacer","indentation","join","originalIndentation","maximumValuesToStringify","tmp","removedKeys","keys","keyLength","maximumPropertiesToStringify","stringifyArrayReplacer","stringifyIndent","stringifySimple","space","require_json","__commonJSMin","exports","module","format","MESSAGE","stringify","replacer","key","value","info","opts","jsonStringify","require_label","__commonJSMin","exports","module","format","info","opts","require_logstash","__commonJSMin","exports","module","format","MESSAGE","jsonStringify","info","logstash","require_metadata","__commonJSMin","exports","module","format","fillExcept","info","fillExceptKeys","metadataKey","savedKeys","acc","key","metadata","fillWith","fillWithKeys","opts","require_ms","__commonJSMin","exports","module","s","m","h","d","w","y","val","options","type","parse","fmtLong","fmtShort","str","match","ms","msAbs","plural","name","isPlural","require_ms","__commonJSMin","exports","module","format","ms","info","curr","require_pretty_print","__commonJSMin","exports","module","inspect","format","LEVEL","MESSAGE","SPLAT","info","opts","stripped","require_printf","__commonJSMin","exports","module","MESSAGE","Printf","templateFn","info","opts","require_simple","__commonJSMin","exports","module","format","MESSAGE","jsonStringify","info","stringifiedRest","padding","require_splat","__commonJSMin","exports","module","util","SPLAT","formatRegExp","escapedPercent","Splatter","opts","info","tokens","msg","splat","percents","escapes","extraSplat","metas","metalen","i","fecha_exports","__export","assign","fecha_default","defaultI18n","format","parse","setGlobalDateI18n","setGlobalDateMasks","shorten","arr","sLen","newArr","i","len","origObj","args","_i","_a","args_1","obj","key","dateStr","i18n","globalMasks","today","dateInfo","parseInfo","literals","newFormat","literal","$0","$1","regexEscape","specifiedFields","requiredFields","token","info","parseFlags","field","regex","requiredField","matches","combinedI18nSettings","globalI18n","parser","value","dateTZ","validateFields","twoDigitsOptional","twoDigits","threeDigits","fourDigits","word","monthUpdate","dayNames","monthNames","monthNamesShort","dayNamesShort","pad","formatFlags","monthParse","emptyDigits","emptyWord","amPm","timezoneOffset","fecha","init_fecha","__esmMin","arrName","v","lowerCaseArr","index","dayOfMonth","str","val","dateObj","offset","parts","minutes","now","cent","masks","mask","require_timestamp","__commonJSMin","exports","module","fecha","format","info","opts","require_uncolorize","__commonJSMin","exports","module","colors","format","MESSAGE","info","opts","require_logform","__commonJSMin","exports","format","exposeFormat","name","requireFormat","require_common","__commonJSMin","exports","format","prop","obj","type","props","notice","require_package","__commonJSMin","exports","module","require_node","__commonJSMin","exports","module","require_stream","__commonJSMin","exports","module","require_destroy","__commonJSMin","exports","module","destroy","err","cb","_this","readableDestroyed","writableDestroyed","emitErrorNT","emitCloseNT","emitErrorAndCloseNT","self","undestroy","errorOrDestroy","stream","rState","wState","require_errors","__commonJSMin","exports","module","codes","createErrorType","code","message","Base","getMessage","arg1","arg2","arg3","NodeError","oneOf","expected","thing","len","i","startsWith","str","search","pos","endsWith","this_len","includes","start","name","value","actual","determiner","msg","type","arg","require_state","__commonJSMin","exports","module","ERR_INVALID_OPT_VALUE","highWaterMarkFrom","options","isDuplex","duplexKey","getHighWaterMark","state","hwm","name","require_inherits_browser","__commonJSMin","exports","module","ctor","superCtor","TempCtor","require_inherits","__commonJSMin","exports","module","util","require_buffer_list","__commonJSMin","exports","module","ownKeys","object","enumerableOnly","keys","symbols","sym","_objectSpread","target","i","source","key","_defineProperty","obj","value","_toPropertyKey","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","arg","_toPrimitive","input","hint","prim","res","_require","Buffer","_require2","inspect","custom","copyBuffer","src","offset","BufferList","v","entry","ret","s","p","hasStrings","c","str","nb","buf","_","options","require_safe_buffer","__commonJSMin","exports","module","buffer","Buffer","copyProps","src","dst","key","SafeBuffer","arg","encodingOrOffset","length","size","fill","encoding","buf","require_string_decoder","__commonJSMin","exports","Buffer","isEncoding","encoding","_normalizeEncoding","enc","retried","normalizeEncoding","nenc","StringDecoder","nb","utf16Text","utf16End","utf8FillLast","base64Text","base64End","simpleWrite","simpleEnd","buf","r","i","utf8End","utf8Text","utf8CheckByte","byte","utf8CheckIncomplete","self","j","utf8CheckExtraBytes","p","total","end","c","require_end_of_stream","__commonJSMin","exports","module","ERR_STREAM_PREMATURE_CLOSE","once","callback","called","_len","args","_key","noop","isRequest","stream","eos","opts","readable","writable","onlegacyfinish","onfinish","writableEnded","readableEnded","onend","onerror","err","onclose","onrequest","require_async_iterator","__commonJSMin","exports","module","_Object$setPrototypeO","_defineProperty","obj","key","value","_toPropertyKey","arg","_toPrimitive","input","hint","prim","res","finished","kLastResolve","kLastReject","kError","kEnded","kLastPromise","kHandlePromise","kStream","createIterResult","done","readAndResolve","iter","resolve","data","onReadable","wrapForNext","lastPromise","reject","AsyncIteratorPrototype","ReadableStreamAsyncIteratorPrototype","_this","error","promise","_this2","err","createReadableStreamAsyncIterator","stream","_Object$create","iterator","require_from","__commonJSMin","exports","module","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","_asyncToGenerator","fn","self","args","err","ownKeys","object","enumerableOnly","keys","symbols","sym","_objectSpread","target","i","source","_defineProperty","obj","_toPropertyKey","_toPrimitive","input","hint","prim","res","ERR_INVALID_ARG_TYPE","from","Readable","iterable","opts","iterator","readable","reading","next","_next2","_yield$iterator$next","done","require_stream_readable","__commonJSMin","exports","module","Readable","Duplex","ReadableState","EE","EElistenerCount","emitter","type","Stream","Buffer","OurUint8Array","_uint8ArrayToBuffer","chunk","_isUint8Array","obj","debugUtil","debug","BufferList","destroyImpl","_require","getHighWaterMark","_require$codes","ERR_INVALID_ARG_TYPE","ERR_STREAM_PUSH_AFTER_EOF","ERR_METHOD_NOT_IMPLEMENTED","ERR_STREAM_UNSHIFT_AFTER_END_EVENT","StringDecoder","createReadableStreamAsyncIterator","from","errorOrDestroy","kProxyEvents","prependListener","event","fn","options","stream","isDuplex","value","err","cb","encoding","state","skipChunkCheck","readableAddChunk","addToFront","onEofChunk","er","chunkInvalid","addChunk","maybeReadMore","emitReadable","enc","decoder","p","content","MAX_HWM","computeNewHighWaterMark","n","howMuchToRead","nOrig","endReadable","doRead","ret","fromList","emitReadable_","flow","maybeReadMore_","len","dest","pipeOpts","src","doEnd","endFn","onend","unpipe","onunpipe","readable","unpipeInfo","cleanup","ondrain","pipeOnDrain","cleanedUp","onclose","onfinish","onerror","ondata","indexOf","dests","i","index","ev","res","nReadingNextTick","updateReadableListening","self","resume","resume_","_this","paused","method","endReadableNT","wState","iterable","opts","xs","x","l","require_stream_duplex","__commonJSMin","exports","module","objectKeys","obj","keys","key","Duplex","Readable","Writable","v","method","options","onend","onEndNT","self","value","require_stream_writable","__commonJSMin","exports","module","Writable","CorkedRequest","state","_this","onCorkedFinish","Duplex","WritableState","internalUtil","Stream","Buffer","OurUint8Array","_uint8ArrayToBuffer","chunk","_isUint8Array","obj","destroyImpl","_require","getHighWaterMark","_require$codes","ERR_INVALID_ARG_TYPE","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_DESTROYED","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","errorOrDestroy","nop","options","stream","isDuplex","noDecode","er","onwrite","current","out","realHasInstance","object","writeAfterEnd","cb","validChunk","encoding","ret","isBuf","writeOrBuffer","clearBuffer","decodeChunk","newChunk","len","last","doWrite","writev","onwriteError","sync","finishMaybe","onwriteStateUpdate","finished","needFinish","afterWrite","onwriteDrain","entry","l","buffer","holder","count","allBuffers","endWritable","callFinal","err","prefinish","need","rState","corkReq","value","require_modern","__commonJSMin","exports","module","util","Writable","LEVEL","TransportStream","options","logger","src","info","enc","callback","level","errState","transformed","err","chunks","infos","i","write","require_legacy","__commonJSMin","exports","module","util","LEVEL","TransportStream","LegacyTransportStream","options","transportError","err","info","enc","callback","chunks","i","require_winston_transport","__commonJSMin","exports","module","require_console","__commonJSMin","exports","module","os","LEVEL","MESSAGE","TransportStream","options","info","callback","strArray","errMsg","set","el","require_isArrayLike","__commonJSMin","exports","module","isArrayLike","value","require_initialParams","__commonJSMin","exports","module","fn","args","callback","require_setImmediate","__commonJSMin","exports","fallback","wrap","hasQueueMicrotask","hasSetImmediate","hasNextTick","fn","defer","args","_defer","require_asyncify","__commonJSMin","exports","module","asyncify","_initialParams","_initialParams2","_interopRequireDefault","_setImmediate","_setImmediate2","_wrapAsync","obj","func","args","callback","promise","handlePromise","result","e","value","invokeCallback","err","error","require_wrapAsync","__commonJSMin","exports","_asyncify","_asyncify2","_interopRequireDefault","obj","isAsync","fn","isAsyncGenerator","isAsyncIterable","wrapAsync","asyncFn","require_awaitify","__commonJSMin","exports","module","awaitify","asyncFn","arity","awaitable","args","resolve","reject","err","cbArgs","require_parallel","__commonJSMin","exports","module","_isArrayLike","_isArrayLike2","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","eachfn","tasks","callback","results","task","key","taskCb","err","result","require_once","__commonJSMin","exports","module","once","fn","wrapper","args","callFn","require_getIterator","__commonJSMin","exports","module","coll","require_iterator","__commonJSMin","exports","module","createIterator","_isArrayLike","_isArrayLike2","_interopRequireDefault","_getIterator","_getIterator2","obj","createArrayIterator","coll","i","len","createES2015Iterator","iterator","item","createObjectIterator","okeys","next","key","require_onlyOnce","__commonJSMin","exports","module","onlyOnce","fn","args","callFn","require_breakLoop","__commonJSMin","exports","module","breakLoop","require_asyncEachOfLimit","__commonJSMin","exports","module","asyncEachOfLimit","_breakLoop","_breakLoop2","_interopRequireDefault","obj","generator","limit","iteratee","callback","done","canceled","awaiting","running","idx","replenish","value","iterDone","iterateeCallback","handleError","err","result","require_eachOfLimit","__commonJSMin","exports","module","_once","_once2","_interopRequireDefault","_iterator","_iterator2","_onlyOnce","_onlyOnce2","_wrapAsync","_asyncEachOfLimit","_asyncEachOfLimit2","_breakLoop","_breakLoop2","obj","limit","iteratee","callback","nextElem","done","canceled","running","looping","iterateeCallback","err","value","replenish","elem","require_eachOfLimit","__commonJSMin","exports","module","_eachOfLimit2","_eachOfLimit3","_interopRequireDefault","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","eachOfLimit","coll","limit","iteratee","callback","require_eachOfSeries","__commonJSMin","exports","module","_eachOfLimit","_eachOfLimit2","_interopRequireDefault","_awaitify","_awaitify2","obj","eachOfSeries","coll","iteratee","callback","require_series","__commonJSMin","exports","module","series","_parallel2","_parallel3","_interopRequireDefault","_eachOfSeries","_eachOfSeries2","obj","tasks","callback","require_stream_transform","__commonJSMin","exports","module","Transform","_require$codes","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_TRANSFORM_ALREADY_TRANSFORMING","ERR_TRANSFORM_WITH_LENGTH_0","Duplex","afterTransform","er","data","ts","cb","rs","options","prefinish","_this","done","chunk","encoding","n","err","err2","stream","require_stream_passthrough","__commonJSMin","exports","module","PassThrough","Transform","options","chunk","encoding","cb","require_pipeline","__commonJSMin","exports","module","eos","once","callback","called","_require$codes","ERR_MISSING_ARGS","ERR_STREAM_DESTROYED","noop","err","isRequest","stream","destroyer","reading","writing","closed","destroyed","call","fn","pipe","from","to","popCallback","streams","pipeline","_len","_key","error","destroys","i","require_readable","__commonJSMin","exports","module","Stream","require_diagnostics","__commonJSMin","exports","module","adapters","modifiers","logger","use","adapter","set","custom","enabled","namespace","async","i","resolve","fn","values","modify","write","process","message","introduce","options","has","key","nope","yep","diagnostics","args","require_production","__commonJSMin","exports","module","create","diagnostics","prod","namespace","options","require_color_name","__commonJSMin","exports","module","require_is_arrayish","__commonJSMin","exports","module","obj","require_simple_swizzle","__commonJSMin","exports","module","isArrayish","concat","slice","swizzle","args","results","i","len","arg","fn","require_color_string","__commonJSMin","exports","module","colorNames","swizzle","hasOwnProperty","reverseNames","name","cs","string","prefix","val","model","abbr","hex","rgba","per","keyword","rgb","match","i","hexAlpha","i2","clamp","hsl","alpha","h","s","l","a","hwb","w","b","hexDouble","r","g","hsla","hwba","num","min","max","str","require_color_name","__commonJSMin","exports","module","require_conversions","__commonJSMin","exports","module","cssKeywords","reverseKeywords","key","convert","model","channels","labels","rgb","r","g","b","min","max","delta","h","rdif","gdif","bdif","s","v","diff","diffc","c","w","m","y","k","comparativeDistance","x","reversed","currentClosestDistance","currentClosestKeyword","keyword","value","distance","z","xyz","l","a","hsl","t1","t2","t3","val","i","smin","lmin","sv","hsv","hi","f","p","q","t","vmin","sl","hwb","wh","bl","ratio","n","cmyk","lab","y2","x2","z2","hr","lch","args","ansi","color","mult","rem","integer","string","match","colorString","char","chroma","grayscale","hue","hcg","pure","mg","apple","gray","require_route","__commonJSMin","exports","module","conversions","buildGraph","graph","models","len","i","deriveBFS","fromModel","queue","current","adjacents","adjacent","node","link","from","to","args","wrapConversion","toModel","path","fn","cur","conversion","require_color_convert","__commonJSMin","exports","module","conversions","route","convert","models","wrapRaw","fn","wrappedFn","args","wrapRounded","result","len","i","fromModel","routes","routeModels","toModel","require_color","__commonJSMin","exports","module","colorString","convert","_slice","skippedModels","hashedModelKeys","model","limiters","Color","obj","i","channels","result","newArr","zeroArray","keys","hashedKeys","labels","color","limit","places","self","args","rgb","roundToPlace","val","getset","maxfn","lum","chan","color2","lum1","lum2","contrastRatio","yiq","ratio","hsl","hwb","degrees","hue","mixinColor","weight","color1","p","w","a","w1","w2","newAlpha","assertArray","roundTo","num","channel","modifier","m","max","v","arr","length","require_text_hex","__commonJSMin","exports","module","str","i","hash","color","require_colorspace","__commonJSMin","exports","module","color","hex","namespace","delimiter","split","base","i","l","require_kuler","__commonJSMin","exports","module","Kuler","text","color","r","g","b","red","green","blue","require_namespace_ansi","__commonJSMin","exports","module","colorspace","kuler","args","options","namespace","ansi","require_enabled","__commonJSMin","exports","module","name","variable","variables","i","require_adapters","__commonJSMin","exports","module","enabled","fn","namespace","require_process_env","__commonJSMin","exports","module","adapter","require_console","__commonJSMin","exports","module","meta","messages","require_development","__commonJSMin","exports","module","create","tty","diagnostics","dev","namespace","options","require_node","__commonJSMin","exports","module","require_tail_file","__commonJSMin","exports","module","fs","StringDecoder","Stream","noop","options","iter","buffer","decode","stream","buff","pos","row","err","fd","read","error","bytes","data","l","i","require_file","__commonJSMin","exports","module","fs","path","asyncSeries","zlib","MESSAGE","Stream","PassThrough","TransportStream","debug","os","tailFile","options","throwIf","target","args","name","info","callback","output","bytes","logged","written","normalizeQuery","file","buff","results","row","stream","err","data","l","i","add","attempt","log","check","push","e","obj","key","time","tail","line","size","fullpath","stat","cb","source","dest","ext","basename","tasks","num","isRotation","oldest","isOldest","isZipped","filePath","x","fileName","tmppath","exists","src","gzip","inp","out","dirPath","require_http","__commonJSMin","exports","module","http","https","Stream","TransportStream","configure","options","info","callback","err","res","auth","path","body","e","stream","buff","req","data","l","i","me","batchOptionsCopy","headers","jsonStringify","require_is_stream","__commonJSMin","exports","module","isStream","stream","require_stream","__commonJSMin","exports","module","isStream","MESSAGE","os","TransportStream","options","info","callback","require_transports","__commonJSMin","exports","require_config","__commonJSMin","exports","logform","configs","require_eachOf","__commonJSMin","exports","module","_isArrayLike","_isArrayLike2","_interopRequireDefault","_breakLoop","_breakLoop2","_eachOfLimit","_eachOfLimit2","_once","_once2","_onlyOnce","_onlyOnce2","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","eachOfArrayLike","coll","iteratee","callback","index","completed","length","canceled","iteratorCallback","err","value","eachOfGeneric","eachOf","eachOfImplementation","require_withoutIndex","__commonJSMin","exports","module","_withoutIndex","iteratee","value","index","callback","require_forEach","__commonJSMin","exports","module","_eachOf","_eachOf2","_interopRequireDefault","_withoutIndex","_withoutIndex2","_wrapAsync","_wrapAsync2","_awaitify","_awaitify2","obj","eachLimit","coll","iteratee","callback","require_fn","__commonJSMin","exports","module","toString","fn","named","type","require_one_time","__commonJSMin","exports","module","name","fn","called","value","onetime","require_stack_trace","__commonJSMin","exports","belowFn","oldLimit","dummyObject","v8Handler","v8StackTrace","err","self","lines","line","lineMatch","object","method","functionName","typeName","methodName","isNative","methodStart","objectEnd","properties","callSite","CallSite","property","strProperties","boolProperties","require_exception_stream","__commonJSMin","exports","module","Writable","transport","info","enc","callback","require_exception_handler","__commonJSMin","exports","module","os","asyncForEach","debug","once","stackTrace","ExceptionStream","logger","args","arg","handler","wrapper","err","message","site","info","handlers","doExit","timeout","gracefulExit","next","done","transport","onDone","event","wrap","require_rejection_stream","__commonJSMin","exports","module","Writable","transport","info","enc","callback","require_rejection_handler","__commonJSMin","exports","module","os","asyncForEach","debug","once","stackTrace","RejectionStream","logger","args","arg","handler","wrapper","err","message","site","info","handlers","doExit","timeout","gracefulExit","next","done","transport","onDone","event","wrap","require_profiler","__commonJSMin","exports","module","Profiler","logger","Logger","args","info","require_logger","__commonJSMin","exports","module","Stream","Transform","asyncForEach","LEVEL","SPLAT","isStream","ExceptionHandler","RejectionHandler","LegacyTransportStream","Profiler","warn","config","formatRegExp","Logger","options","defaultRequestMetadata","logger","info","infoClone","silent","format","defaultMeta","levels","level","exitOnError","transports","colors","emitErrs","formatters","padLevels","rewriters","stripColors","exceptionHandlers","rejectionHandlers","transport","givenLevelValue","getLevelValue","configuredLevelValue","transportLevelValue","msg","splat","meta","enc","callback","next","target","match","results","queryObject","queryTransport","err","res","addResults","result","out","streams","i","str","log","id","args","time","timeEnd","event","transportEvent","value","pipes","require_create_logger","__commonJSMin","exports","module","LEVEL","config","Logger","debug","isLevelEnabledFunctionName","level","opts","DerivedLogger","options","logger","args","self","msg","info","require_container","__commonJSMin","exports","module","createLogger","options","id","existing","logger","val","key","require_winston","__commonJSMin","exports","logform","warn","defaultLogger","method","args","val","prop","suppressTracing","context","SUPPRESS_TRACING_KEY","unsuppressTracing","isTracingSuppressed","init_suppress_tracing","__esmMin","init_esm","createContextKey","BAGGAGE_KEY_PAIR_SEPARATOR","BAGGAGE_PROPERTIES_SEPARATOR","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_HEADER","BAGGAGE_MAX_NAME_VALUE_PAIRS","BAGGAGE_MAX_PER_NAME_VALUE_PAIRS","BAGGAGE_MAX_TOTAL_LENGTH","init_constants","__esmMin","serializeKeyPairs","keyPairs","hValue","current","value","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_MAX_TOTAL_LENGTH","getKeyPairs","baggage","_a","_b","__read","key","entry","BAGGAGE_PROPERTIES_SEPARATOR","parsePairKeyValue","valueProps","keyPairPart","separatorIndex","BAGGAGE_KEY_PAIR_SEPARATOR","metadata","baggageEntryMetadataFromString","parseKeyPairsIntoRecord","keyPair","headers","init_esm","init_constants","W3CBaggagePropagator","init_W3CBaggagePropagator","__esmMin","init_esm","init_suppress_tracing","init_constants","init_utils","context","carrier","setter","baggage","propagation","isTracingSuppressed","keyPairs","getKeyPairs","pair","BAGGAGE_MAX_PER_NAME_VALUE_PAIRS","BAGGAGE_MAX_NAME_VALUE_PAIRS","headerValue","serializeKeyPairs","BAGGAGE_HEADER","getter","baggageString","BAGGAGE_ITEMS_SEPARATOR","pairs","entry","keyPair","parsePairKeyValue","baggageEntry","AnchoredClock","init_anchored_clock","__esmMin","systemClock","monotonicClock","delta","sanitizeAttributes","attributes","out","_b","__values","_c","_d","__read","key","val","isAttributeKey","diag","isAttributeValue","isHomogeneousAttributeValueArray","isValidPrimitiveAttributeValue","arr","type","arr_1","arr_1_1","element","init_attributes","__esmMin","init_esm","loggingErrorHandler","ex","diag","stringifyException","flattenException","result","current","propertyName","value","init_logging_error_handler","__esmMin","init_esm","setGlobalErrorHandler","handler","delegateHandler","globalErrorHandler","ex","init_global_error_handler","__esmMin","init_logging_error_handler","loggingErrorHandler","TracesSamplerValues","init_sampling","__esmMin","isEnvVarABoolean","key","ENVIRONMENT_BOOLEAN_KEYS","isEnvVarANumber","ENVIRONMENT_NUMBERS_KEYS","isEnvVarAList","ENVIRONMENT_LISTS_KEYS","parseBoolean","environment","values","value","parseNumber","name","min","max","parseStringList","output","input","separator","DEFAULT_LIST_SEPARATOR","givenValue","v","setLogLevelFromEnv","theLevel","logLevelMap","parseEnvironment","env","DEFAULT_ENVIRONMENT","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","init_environment","__esmMin","init_esm","init_sampling","DiagLogLevel","TracesSamplerValues","getEnv","processEnv","parseEnvironment","DEFAULT_ENVIRONMENT","getEnvWithoutDefaults","init_environment","__esmMin","_globalThis","init_globalThis","__esmMin","intValue","charCode","hexToBinary","hexStr","buf","offset","i","hi","lo","init_hex_to_binary","__esmMin","hexToBase64","hexStr","hexToBinary","init_hex_to_base64","__esmMin","init_hex_to_binary","getIdGenerator","bytes","i","SHARED_BUFFER","SPAN_ID_BYTES","TRACE_ID_BYTES","RandomIdGenerator","init_RandomIdGenerator","__esmMin","performance","otperformance","init_performance","__esmMin","VERSION","init_version","__esmMin","SDK_INFO","init_sdk_info","__esmMin","init_version","init_esm","_a","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_PROCESS_RUNTIME_NAME","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","TELEMETRYSDKLANGUAGEVALUES_NODEJS","SEMRESATTRS_TELEMETRY_SDK_VERSION","VERSION","unrefTimer","timer","init_timer_util","__esmMin","init_node","__esmMin","init_environment","init_globalThis","init_hex_to_base64","init_RandomIdGenerator","init_performance","init_sdk_info","init_timer_util","init_platform","__esmMin","init_node","millisToHrTime","epochMillis","epochSeconds","seconds","nanos","MILLISECONDS_TO_NANOSECONDS","getTimeOrigin","timeOrigin","otperformance","perf","hrTime","performanceNow","now","addHrTimes","timeInputToHrTime","time","isTimeInputHrTime","hrTimeDuration","startTime","endTime","SECOND_TO_NANOSECONDS","hrTimeToTimeStamp","precision","NANOSECOND_DIGITS","tmp","nanoString","date","hrTimeToNanoseconds","hrTimeToMilliseconds","hrTimeToMicroseconds","value","isTimeInput","time1","time2","out","NANOSECOND_DIGITS_IN_MILLIS","init_time","__esmMin","init_platform","init_types","__esmMin","ExportResultCode","init_ExportResult","__esmMin","CompositePropagator","init_composite","__esmMin","init_esm","config","_a","p","x","y","context","carrier","setter","_b","__values","_c","propagator","err","diag","getter","ctx","validateKey","key","VALID_KEY_REGEX","validateValue","value","VALID_VALUE_BASE_REGEX","INVALID_VALUE_COMMA_EQUAL_REGEX","VALID_KEY_CHAR_RANGE","VALID_KEY","VALID_VENDOR_KEY","init_validators","__esmMin","MAX_TRACE_STATE_ITEMS","MAX_TRACE_STATE_LEN","LIST_MEMBERS_SEPARATOR","LIST_MEMBER_KEY_VALUE_SPLITTER","TraceState","init_TraceState","__esmMin","init_validators","rawTraceState","key","value","traceState","_this","agg","part","listMember","i","validateKey","validateValue","parseTraceParent","traceParent","match","TRACE_PARENT_REGEX","TRACE_PARENT_HEADER","TRACE_STATE_HEADER","VERSION","VERSION_PART","TRACE_ID_PART","PARENT_ID_PART","FLAGS_PART","W3CTraceContextPropagator","init_W3CTraceContextPropagator","__esmMin","init_esm","init_suppress_tracing","init_TraceState","context","carrier","setter","spanContext","trace","isTracingSuppressed","isSpanContextValid","TraceFlags","getter","traceParentHeader","traceStateHeader","state","TraceState","init_IdGenerator","__esmMin","setRPCMetadata","context","meta","RPC_METADATA_KEY","deleteRPCMetadata","getRPCMetadata","RPCType","init_rpc_metadata","__esmMin","init_esm","createContextKey","AlwaysOffSampler","init_AlwaysOffSampler","__esmMin","init_esm","SamplingDecision","AlwaysOnSampler","init_AlwaysOnSampler","__esmMin","init_esm","SamplingDecision","ParentBasedSampler","init_ParentBasedSampler","__esmMin","init_esm","init_global_error_handler","init_AlwaysOffSampler","init_AlwaysOnSampler","config","globalErrorHandler","AlwaysOnSampler","_a","_b","AlwaysOffSampler","_c","_d","context","traceId","spanName","spanKind","attributes","links","parentContext","trace","isSpanContextValid","TraceFlags","TraceIdRatioBasedSampler","init_TraceIdRatioBasedSampler","__esmMin","init_esm","_ratio","context","traceId","isValidTraceId","SamplingDecision","ratio","accumulation","i","pos","part","overArg","func","transform","arg","isPlainObject","value","isObjectLike","baseGetTag","objectTag","proto","getPrototype","Ctor","hasOwnProperty","funcToString","objectCtorString","undefinedTag","nullTag","symToStringTag","getRawTag","objectToString","isOwn","tag","unmasked","result","nativeObjectToString","funcProto","objectProto","init_lodash_merge","__esmMin","merge","args","_i","result","objects","mergeTwoObjects","takeValue","value","isArray","one","two","level","MAX_LEVEL","isPrimitive","isFunction","i","j","isObject","keys","key","shouldMerge","twoValue","obj1","obj2","wasObjectReferenced","arr1","arr2","obj","arr","info","isPlainObject","init_merge","__esmMin","init_lodash_merge","callWithTimeout","promise","timeout","timeoutHandle","timeoutPromise","_resolve","reject","TimeoutError","result","reason","init_timeout","__esmMin","_super","__extends","message","_this","urlMatches","url","urlToMatch","isUrlIgnored","ignoredUrls","ignoredUrls_1","__values","ignoredUrls_1_1","ignoreUrl","isWrapped","func","init_wrap","__esmMin","Deferred","init_promise","__esmMin","_this","resolve","reject","val","err","BindOnceFuture","init_callback","__esmMin","init_promise","_callback","_that","Deferred","_this","args","_i","_a","__spreadArray","__read","val","err","_export","exporter","arg","resolve","context","suppressTracing","result","init_exporter","__esmMin","init_esm","init_suppress_tracing","esm_exports","__export","AlwaysOffSampler","AlwaysOnSampler","AnchoredClock","BindOnceFuture","CompositePropagator","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","DEFAULT_ENVIRONMENT","DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT","DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT","ExportResultCode","ParentBasedSampler","RPCType","RandomIdGenerator","SDK_INFO","TRACE_PARENT_HEADER","TRACE_STATE_HEADER","TimeoutError","TraceIdRatioBasedSampler","TraceState","TracesSamplerValues","VERSION","W3CBaggagePropagator","W3CTraceContextPropagator","_globalThis","addHrTimes","utils_exports","callWithTimeout","deleteRPCMetadata","getEnv","getEnvWithoutDefaults","getRPCMetadata","getTimeOrigin","globalErrorHandler","hexToBase64","hexToBinary","hrTime","hrTimeDuration","hrTimeToMicroseconds","hrTimeToMilliseconds","hrTimeToNanoseconds","hrTimeToTimeStamp","internal","isAttributeKey","isAttributeValue","isTimeInput","isTimeInputHrTime","isTracingSuppressed","isUrlIgnored","isWrapped","loggingErrorHandler","merge","millisToHrTime","otperformance","parseEnvironment","parseTraceParent","sanitizeAttributes","setGlobalErrorHandler","setRPCMetadata","suppressTracing","timeInputToHrTime","unrefTimer","unsuppressTracing","urlMatches","init_esm","__esmMin","init_W3CBaggagePropagator","init_anchored_clock","init_attributes","init_global_error_handler","init_logging_error_handler","init_time","init_types","init_hex_to_binary","init_ExportResult","init_platform","init_composite","init_W3CTraceContextPropagator","init_IdGenerator","init_rpc_metadata","init_AlwaysOffSampler","init_AlwaysOnSampler","init_ParentBasedSampler","init_TraceIdRatioBasedSampler","init_suppress_tracing","init_TraceState","init_environment","init_merge","init_sampling","init_timeout","init_url","init_wrap","init_callback","init_version","init_exporter","_export","defaultServiceName","init_default_service_name","__esmMin","init_node","__esmMin","init_default_service_name","init_platform","__esmMin","init_node","Resource","init_Resource","__esmMin","init_esm","init_platform","attributes","asyncAttributesPromise","_this","_a","asyncAttributes","err","diag","SEMRESATTRS_SERVICE_NAME","defaultServiceName","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SDK_INFO","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_VERSION","other","mergedSyncAttributes","__assign","mergedAttributesPromise","_c","__read","thisAsyncAttributes","otherAsyncAttributes","_b","EnvDetectorSync","envDetectorSync","init_EnvDetectorSync","__esmMin","init_esm","init_Resource","_config","attributes","env","getEnv","rawAttributes","serviceName","parsedAttributes","e","diag","SEMRESATTRS_SERVICE_NAME","Resource","rawEnvAttributes","rawAttributes_1","__values","rawAttributes_1_1","rawAttribute","keyValuePair","_b","__read","key","value","name","str","i","ch","EnvDetector","envDetector","init_EnvDetector","__esmMin","init_EnvDetectorSync","config","envDetectorSync","init_detectors","__esmMin","init_EnvDetector","init_esm","__esmMin","init_Resource","init_detectors","AggregationTemporality","init_AggregationTemporality","__esmMin","DataPointType","init_MetricData","__esmMin","isNotNullish","item","hashAttributes","attributes","keys","key","instrumentationScopeId","instrumentationScope","_a","_b","callWithTimeout","promise","timeout","timeoutHandle","timeoutPromise","_resolve","reject","TimeoutError","result","reason","PromiseAllSettled","promises","p","__awaiter","_this","ret","e_1","isPromiseAllSettledRejectionResult","it","FlatMap","arr","fn","__spreadArray","__read","setEquals","lhs","rhs","lhs_1","__values","lhs_1_1","binarySearchLB","value","lo","hi","mid","equalsCaseInsensitive","init_utils","__esmMin","_super","__extends","message","AggregatorKind","init_types","__esmMin","DropAggregator","init_Drop","__esmMin","init_types","AggregatorKind","_previous","_delta","_current","_descriptor","_aggregationTemporality","_accumulationByAttributes","_endTime","createInstrumentDescriptor","name","type","options","isValidName","diag","_a","_b","_c","ValueType","_d","createInstrumentDescriptorWithView","view","instrument","isDescriptorCompatibleWith","descriptor","otherDescriptor","equalsCaseInsensitive","NAME_REGEXP","InstrumentType","init_InstrumentDescriptor","__esmMin","init_esm","init_utils","createNewEmptyCheckpoint","boundaries","counts","HistogramAccumulation","HistogramAggregator","init_Histogram","__esmMin","init_types","init_MetricData","init_InstrumentDescriptor","init_utils","startTime","_boundaries","_recordMinMax","_current","value","idx","binarySearchLB","AggregatorKind","previous","delta","previousValue","deltaValue","previousCounts","deltaCounts","mergedCounts","min","max","current","currentValue","currentCounts","diffedCounts","descriptor","aggregationTemporality","accumulationByAttributes","endTime","DataPointType","_a","_b","__read","attributes","accumulation","pointValue","allowsNegativeValues","InstrumentType","Buckets","BucketsBacking","backing","indexBase","indexStart","indexEnd","_this","_","i","position","bias","bucketIndex","increment","decrement","by","size","each","inpos","outpos","pos","mod","dest","src","_counts","newSize","oldPositiveLimit","newPositiveLimit","tmp","__spreadArray","__read","from","limit","num","getNormalBase2","value","dv","hiBits","expBits","EXPONENT_MASK","EXPONENT_BIAS","getSignificand","loBits","significandHiBits","SIGNIFICAND_MASK","SIGNIFICAND_WIDTH","MIN_NORMAL_EXPONENT","MAX_NORMAL_EXPONENT","MIN_VALUE","init_ieee754","__esmMin","ldexp","frac","exp","nextGreaterSquare","v","init_util","__esmMin","MappingError","_super","__extends","ExponentMapping","init_ExponentMapping","__esmMin","init_ieee754","init_util","init_types","scale","value","MIN_VALUE","exp","getNormalBase2","correction","getSignificand","SIGNIFICAND_WIDTH","index","minIndex","MappingError","maxIndex","ldexp","MIN_NORMAL_EXPONENT","MAX_NORMAL_EXPONENT","shift","LogarithmMapping","init_LogarithmMapping","__esmMin","init_ieee754","init_util","init_types","scale","ldexp","value","MIN_VALUE","getSignificand","exp","getNormalBase2","index","maxIndex","MappingError","minIndex","MIN_NORMAL_EXPONENT","MAX_NORMAL_EXPONENT","getMapping","scale","MAX_SCALE","MIN_SCALE","MappingError","PREBUILT_MAPPINGS","init_getMapping","__esmMin","init_ExponentMapping","init_LogarithmMapping","init_types","_","i","LogarithmMapping","ExponentMapping","HighLow","MAX_SCALE","DEFAULT_MAX_SIZE","MIN_MAX_SIZE","ExponentialHistogramAccumulation","ExponentialHistogramAggregator","init_ExponentialHistogram","__esmMin","init_types","init_MetricData","init_esm","init_InstrumentDescriptor","init_Buckets","init_getMapping","init_util","low","high","h1","h2","startTime","_maxSize","_recordMinMax","_sum","_count","_zeroCount","_min","_max","_positive","_negative","_mapping","Buckets","getMapping","diag","value","increment","previous","minScale","other","buckets","index","rescalingNeeded","change","span","bucketIndex","needed","size","bias","oldPositiveLimit","newSize","nextGreaterSquare","newPositiveLimit","newScale","highLowPos","highLowNeg","currentScale","shift","ours","theirs","scale","theirOffset","theirChange","i","ourIndex","AggregatorKind","delta","result","current","descriptor","aggregationTemporality","accumulationByAttributes","endTime","DataPointType","_a","_b","__read","attributes","accumulation","pointValue","allowsNegativeValues","InstrumentType","LastValueAccumulation","LastValueAggregator","init_LastValue","__esmMin","init_types","init_esm","init_MetricData","startTime","_current","sampleTime","value","millisToHrTime","AggregatorKind","previous","delta","latestAccumulation","hrTimeToMicroseconds","current","descriptor","aggregationTemporality","accumulationByAttributes","endTime","DataPointType","_a","_b","__read","attributes","accumulation","SumAccumulation","SumAggregator","init_Sum","__esmMin","init_types","init_MetricData","startTime","monotonic","_current","reset","value","AggregatorKind","previous","delta","prevPv","deltaPv","current","currPv","descriptor","aggregationTemporality","accumulationByAttributes","endTime","DataPointType","_a","_b","__read","attributes","accumulation","init_aggregator","__esmMin","init_Drop","init_Histogram","init_ExponentialHistogram","init_LastValue","init_Sum","Aggregation","DropAggregation","SumAggregation","LastValueAggregation","HistogramAggregation","ExplicitBucketHistogramAggregation","ExponentialHistogramAggregation","DefaultAggregation","DROP_AGGREGATION","SUM_AGGREGATION","LAST_VALUE_AGGREGATION","HISTOGRAM_AGGREGATION","EXPONENTIAL_HISTOGRAM_AGGREGATION","DEFAULT_AGGREGATION","init_Aggregation","__esmMin","init_esm","init_aggregator","init_InstrumentDescriptor","_super","__extends","_instrument","DropAggregator","instrument","InstrumentType","SumAggregator","LastValueAggregator","HistogramAggregator","boundaries","_recordMinMax","_this","a","b","minusInfinityIndex","infinityIndex","_maxSize","ExponentialHistogramAggregator","diag","DEFAULT_AGGREGATION_SELECTOR","DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR","init_AggregationSelector","__esmMin","init_Aggregation","init_AggregationTemporality","_instrumentType","Aggregation","AggregationTemporality","MetricReader","init_MetricReader","__esmMin","init_esm","init_utils","init_AggregationSelector","options","_a","DEFAULT_AGGREGATION_SELECTOR","_b","DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR","_c","metricProducer","instrumentType","__spreadArray","producer","__read","sdkCollectionResults","additionalCollectionResults","errors","FlatMap","result","resource","scopeMetrics","diag","callWithTimeout","PeriodicExportingMetricReader","init_PeriodicExportingMetricReader","__esmMin","init_esm","init_MetricReader","init_utils","_super","__extends","options","_this","_a","_b","_c","_d","callWithTimeout","err_1","TimeoutError","diag","globalErrorHandler","_e","resourceMetrics","errors","__spreadArray","__read","doExport","__awaiter","internal","result","ExportResultCode","err","unrefTimer","MetricReader","InMemoryMetricExporter","init_InMemoryMetricExporter","__esmMin","init_esm","aggregationTemporality","metrics","resultCallback","ExportResultCode","_instrumentType","ConsoleMetricExporter","init_esm","init_AggregationSelector","options","_a","DEFAULT_AGGREGATION_TEMPORALITY_SELECTOR","metrics","resultCallback","ExportResultCode","_instrumentType","done","_c","__values","_d","scopeMetrics","_e","e_2","_f","metric","ViewRegistry","init_ViewRegistry","__esmMin","view","instrument","meter","_this","views","registeredView","selector","isObservableInstrument","it","ObservableInstrument","SyncInstrument","UpDownCounterInstrument","CounterInstrument","GaugeInstrument","HistogramInstrument","ObservableCounterInstrument","ObservableGaugeInstrument","ObservableUpDownCounterInstrument","init_Instruments","__esmMin","init_esm","_writableMetricStorage","_descriptor","value","attributes","context","diag","ValueType","millisToHrTime","_super","__extends","ctx","descriptor","metricStorages","_observableRegistry","callback","Meter","init_Meter","__esmMin","init_InstrumentDescriptor","init_Instruments","_meterSharedState","name","options","descriptor","createInstrumentDescriptor","InstrumentType","storage","GaugeInstrument","HistogramInstrument","CounterInstrument","UpDownCounterInstrument","storages","ObservableGaugeInstrument","ObservableCounterInstrument","ObservableUpDownCounterInstrument","callback","observables","MetricStorage","init_MetricStorage","__esmMin","init_InstrumentDescriptor","_instrumentDescriptor","description","createInstrumentDescriptor","HashMap","AttributeHashMap","init_HashMap","__esmMin","init_utils","_hash","key","hashCode","defaultFactory","hash","val","value","keyIterator","next","_a","valueIterator","_super","__extends","hashAttributes","DeltaMetricProcessor","init_DeltaMetricProcessor","__esmMin","init_HashMap","_aggregator","AttributeHashMap","value","attributes","_context","collectionTime","_this","accumulation","measurements","_a","_b","__read","hashCode","delta","previous","active","unreportedDelta","AttributesMapToAccumulationRecords","map","TemporalMetricProcessor","init_TemporalMetricProcessor","__esmMin","init_AggregationTemporality","init_HashMap","_aggregator","collectorHandles","_this","handle","collector","instrumentDescriptor","currentAccumulations","collectionTime","unreportedAccumulations","result","aggregationTemporality","last","lastCollectionTime","AggregationTemporality","accumulationRecords","currentAccumulation","registeredCollectors","registeredCollectors_1","__values","registeredCollectors_1_1","stash","AttributeHashMap","unreportedList","unreportedList_1","unreportedList_1_1","it_1","current","aggregator","iterator","next","_a","__read","key","record","hash","lastAccumulation","accumulation","_b","_c","_d","AsyncMetricStorage","init_AsyncMetricStorage","__esmMin","init_MetricStorage","init_DeltaMetricProcessor","init_TemporalMetricProcessor","init_HashMap","_super","__extends","_instrumentDescriptor","aggregator","_attributesProcessor","collectorHandles","_this","DeltaMetricProcessor","TemporalMetricProcessor","measurements","observationTime","processed","AttributeHashMap","_a","_b","__read","attributes","value","collector","collectionTime","accumulations","MetricStorage","getIncompatibilityDetails","existing","otherDescriptor","incompatibility","getValueTypeConflictResolutionRecipe","getUnitConflictResolutionRecipe","getTypeConflictResolutionRecipe","selector","selectorString","getDescriptionResolutionRecipe","getConflictResolutionRecipe","init_RegistrationConflicts","__esmMin","MetricStorageRegistry","init_MetricStorageRegistry","__esmMin","init_InstrumentDescriptor","init_esm","init_RegistrationConflicts","collector","storages","_c","__values","_d","metricStorages","perCollectorStorages","_e","_f","storage","storageMap","expectedDescriptor","descriptor","existingStorages","compatibleStorage","existingStorages_1","existingStorages_1_1","existingStorage","existingDescriptor","isDescriptorCompatibleWith","diag","getIncompatibilityDetails","getConflictResolutionRecipe","MultiMetricStorage","init_MultiWritableMetricStorage","__esmMin","_backingStorages","value","attributes","context","recordTime","it","ObservableResultImpl","BatchObservableResultImpl","init_ObservableResult","__esmMin","init_esm","init_HashMap","init_Instruments","_instrumentName","_valueType","AttributeHashMap","value","attributes","diag","ValueType","metric","isObservableInstrument","map","ObservableRegistry","init_ObservableRegistry","__esmMin","init_esm","init_Instruments","init_ObservableResult","init_utils","callback","instrument","idx","instruments","observableInstruments","isObservableInstrument","diag","collectionTime","timeoutMillis","callbackFutures","batchCallbackFutures","PromiseAllSettled","__spreadArray","__read","results","_a","rejections","isPromiseAllSettledRejectionResult","it","observationTime","_this","observableResult","ObservableResultImpl","callPromise","callWithTimeout","_b","metricStorage","BatchObservableResultImpl","buffer","record","setEquals","SyncMetricStorage","init_SyncMetricStorage","__esmMin","init_MetricStorage","init_DeltaMetricProcessor","init_TemporalMetricProcessor","_super","__extends","instrumentDescriptor","aggregator","_attributesProcessor","collectorHandles","_this","DeltaMetricProcessor","TemporalMetricProcessor","value","attributes","context","recordTime","collector","collectionTime","accumulations","MetricStorage","AttributesProcessor","NoopAttributesProcessor","FilteringAttributesProcessor","NOOP","init_AttributesProcessor","__esmMin","_super","__extends","incoming","_context","_allowedAttributeNames","_this","filteredAttributes","attributeName","MeterSharedState","init_MeterSharedState","__esmMin","init_InstrumentDescriptor","init_Meter","init_utils","init_AsyncMetricStorage","init_MetricStorageRegistry","init_MultiWritableMetricStorage","init_ObservableRegistry","init_SyncMetricStorage","init_AttributesProcessor","_meterProviderSharedState","_instrumentationScope","MetricStorageRegistry","ObservableRegistry","Meter","descriptor","storages","SyncMetricStorage","MultiMetricStorage","AsyncMetricStorage","collector","collectionTime","options","errors","_a","metricDataList","metricStorage","isNotNullish","MetricStorageType","_this","views","view","viewDescriptor","createInstrumentDescriptorWithView","compatibleStorage","aggregator","viewStorage","perCollectorAggregations","collectorStorages","_b","__read","aggregation","storage","AttributesProcessor","MeterProviderSharedState","init_MeterProviderSharedState","__esmMin","init_utils","init_ViewRegistry","init_MeterSharedState","resource","ViewRegistry","instrumentationScope","id","instrumentationScopeId","meterSharedState","MeterSharedState","instrumentType","result","_b","__values","_c","collector","MetricCollector","init_MetricCollector","__esmMin","init_esm","_sharedState","_metricReader","options","collectionTime","millisToHrTime","scopeMetrics","errors","meterCollectionPromises","meterSharedState","__awaiter","_this","current","_a","__spreadArray","__read","instrumentType","MeterProvider","init_MeterProvider","__esmMin","init_esm","init_MeterProviderSharedState","init_MetricCollector","options","resource","Resource","_c","MeterProviderSharedState","_d","__values","_e","view","_f","_g","metricReader","name","version","diag","createNoopMeter","collector","MetricCollector","_a","ESCAPE","PatternPredicate","ExactPredicate","init_Predicate","__esmMin","pattern","str","InstrumentSelector","init_InstrumentSelector","__esmMin","init_Predicate","criteria","PatternPredicate","_a","ExactPredicate","MeterSelector","init_MeterSelector","__esmMin","init_Predicate","criteria","ExactPredicate","isSelectorNotProvided","options","View","init_View","__esmMin","init_Predicate","init_AttributesProcessor","init_InstrumentSelector","init_MeterSelector","init_Aggregation","viewOptions","PatternPredicate","FilteringAttributesProcessor","AttributesProcessor","_a","Aggregation","InstrumentSelector","MeterSelector","esm_exports","__export","Aggregation","AggregationTemporality","ConsoleMetricExporter","DataPointType","DefaultAggregation","DropAggregation","ExplicitBucketHistogramAggregation","ExponentialHistogramAggregation","HistogramAggregation","InMemoryMetricExporter","InstrumentType","LastValueAggregation","MeterProvider","MetricReader","PeriodicExportingMetricReader","SumAggregation","TimeoutError","View","init_esm","__esmMin","init_AggregationTemporality","init_MetricData","init_MetricReader","init_PeriodicExportingMetricReader","init_InMemoryMetricExporter","init_ConsoleMetricExporter","init_InstrumentDescriptor","init_MeterProvider","init_Aggregation","init_View","init_utils","AggregationTemporalityPreference","init_OTLPMetricExporterOptions","__esmMin","chooseTemporalitySelectorFromEnvironment","env","getEnv","configuredTemporality","CumulativeTemporalitySelector","DeltaTemporalitySelector","LowMemoryTemporalitySelector","diag","chooseTemporalitySelector","temporalityPreference","AggregationTemporalityPreference","chooseAggregationSelector","config","_instrumentType","Aggregation","OTLPMetricExporterBase","init_OTLPMetricExporterBase","__esmMin","init_esm","init_OTLPMetricExporterOptions","AggregationTemporality","instrumentType","InstrumentType","exporter","metrics","resultCallback","_a","parseHeaders","partialHeaders","headers","_a","_b","__read","key","value","diag","appendResourcePathToUrl","url","path","appendRootPathToUrlIfNeeded","parsedUrl","configureExporterTimeout","timeoutMillis","invalidTimeout","DEFAULT_TRACE_TIMEOUT","getExporterTimeoutFromEnv","definedTimeout","getEnv","timeout","defaultTimeout","isExportRetryable","statusCode","retryCodes","parseRetryAfterToMills","retryAfter","seconds","delay","DEFAULT_EXPORT_MAX_ATTEMPTS","DEFAULT_EXPORT_INITIAL_BACKOFF","DEFAULT_EXPORT_MAX_BACKOFF","DEFAULT_EXPORT_BACKOFF_MULTIPLIER","init_util","__esmMin","init_esm","OTLPExporterBase","init_OTLPExporterBase","__esmMin","init_esm","init_util","config","BindOnceFuture","configureExporterTimeout","items","resultCallback","ExportResultCode","error","_this","resolve","reject","diag","e","CompressionAlgorithm","init_types","__esmMin","OTLPExporterError","init_types","__esmMin","_super","__extends","message","code","data","_this","url","http","https","zlib","Readable","sendWithHttp","collector","data","contentType","onSuccess","onError","exporterTimeout","parsedUrl","nodeVersion","retryTimer","req","reqIsDestroyed","exporterTimer","err","OTLPExporterError","options","__assign","request","sendWithRetry","retries","minDelay","DEFAULT_EXPORT_MAX_ATTEMPTS","DEFAULT_EXPORT_INITIAL_BACKOFF","res","responseData","chunk","diag","isExportRetryable","retryTime","DEFAULT_EXPORT_BACKOFF_MULTIPLIER","parseRetryAfterToMills","DEFAULT_EXPORT_MAX_BACKOFF","error","CompressionAlgorithm","dataStream","readableFromUnit8Array","buff","readable","createHttpAgent","config","Agent","configureCompression","compression","definedCompression","getEnv","init_esm","init_types","init_util","OTLPExporterNodeBase","init_OTLPExporterNodeBase","__esmMin","init_OTLPExporterBase","init_util","init_esm","_super","__extends","config","serializer","contentType","_this","diag","parseHeaders","utils_exports","getEnv","createHttpAgent","configureCompression","_config","objects","onSuccess","onError","promise","resolve","reject","sendWithHttp","_a","popPromise","index","OTLPExporterBase","init_node","__esmMin","init_OTLPExporterNodeBase","init_util","init_types","sendWithBeacon","body","url","blobPropertyBag","onSuccess","onError","diag","error","OTLPExporterError","sendWithXhr","headers","exporterTimeout","retryTimer","xhr","reqIsDestroyed","exporterTimer","err","sendWithRetry","retries","minDelay","DEFAULT_EXPORT_MAX_ATTEMPTS","DEFAULT_EXPORT_INITIAL_BACKOFF","defaultHeaders","__assign","_a","_b","__read","k","v","isExportRetryable","retryTime","DEFAULT_EXPORT_BACKOFF_MULTIPLIER","parseRetryAfterToMills","DEFAULT_EXPORT_MAX_BACKOFF","init_esm","init_types","init_util","OTLPExporterBrowserBase","init_OTLPExporterBrowserBase","__esmMin","init_OTLPExporterBase","init_util","init_esm","_super","__extends","config","serializer","contentType","_this","parseHeaders","utils_exports","getEnv","items","onSuccess","onError","diag","body","_a","promise","resolve","reject","sendWithXhr","__assign","sendWithBeacon","popPromise","index","OTLPExporterBase","init_browser","__esmMin","init_OTLPExporterBrowserBase","init_util","init_platform","__esmMin","init_node","init_browser","esm_exports","__export","CompressionAlgorithm","OTLPExporterBase","OTLPExporterBrowserBase","OTLPExporterError","OTLPExporterNodeBase","appendResourcePathToUrl","appendRootPathToUrlIfNeeded","configureCompression","configureExporterTimeout","createHttpAgent","invalidTimeout","parseHeaders","sendWithHttp","sendWithXhr","init_esm","__esmMin","init_platform","init_OTLPExporterBase","init_types","init_util","hrTimeToNanos","hrTime","NANOSECONDS","toLongBits","value","low","high","encodeAsLongBits","nanos","encodeAsString","identity","optionalHexToBinary","str","hexToBinary","getOtlpEncoder","options","DEFAULT_ENCODER","useLongBits","_a","useHex","_b","encodeTimestamp","init_common","__esmMin","init_esm","hrTimeToNanoseconds","ESpanKind","init_types","__esmMin","createInstrumentationScope","scope","toAttributes","attributes","key","toKeyValue","value","toAnyValue","t","_a","_b","__read","k","v","sdkSpanToOtlpSpan","span","encoder","ctx","status","_a","toAttributes","event","toOtlpSpanEvent","link","toOtlpLink","timedEvent","init_internal","__esmMin","createResource","resource","toAttributes","init_internal","__esmMin","createExportTraceServiceRequest","spans","options","encoder","getOtlpEncoder","spanRecordsToResourceSpans","createResourceMap","readableSpans","resourceMap","readableSpans_1","__values","readableSpans_1_1","record","ilmMap","instrumentationLibraryKey","records","out","entryIterator","entry","_a","__read","resource","scopeResourceSpans","ilmIterator","ilmEntry","scopeSpans","readableSpan","sdkSpanToOtlpSpan","createInstrumentationScope","transformedSpans","createResource","init_internal","init_common","toResourceMetrics","resourceMetrics","options","encoder","getOtlpEncoder","createResource","toScopeMetrics","scopeMetrics","metrics","createInstrumentationScope","metricData","toMetric","out","aggregationTemporality","toAggregationTemporality","DataPointType","toSingularDataPoints","toHistogramDataPoints","toExponentialHistogramDataPoints","toSingularDataPoint","dataPoint","valueType","toAttributes","ValueType","histogram","temporality","AggregationTemporality","init_internal","__esmMin","init_esm","init_common","createExportMetricsServiceRequest","resourceMetrics","options","metrics","toResourceMetrics","init_metrics","__esmMin","init_internal","createExportLogsServiceRequest","logRecords","options","encoder","getOtlpEncoder","logRecordsToResourceLogs","createResourceMap","resourceMap","logRecords_1","__values","logRecords_1_1","record","resource","_b","name_1","_c","version","_d","schemaUrl","ismMap","ismKey","records","_a","__read","createResource","scopeLogs","createInstrumentationScope","log","toLogRecord","toAnyValue","toLogAttributes","attributes","key","toKeyValue","init_logs","__esmMin","init_common","init_internal","require_root","__commonJSMin","exports","module","$protobuf","$Reader","$Writer","$util","$root","opentelemetry","proto","common","v1","AnyValue","properties","keys","i","$oneOfFields","message","writer","reader","length","end","tag","error","object","options","typeUrlPrefix","ArrayValue","j","KeyValueList","KeyValue","InstrumentationScope","resource","Resource","trace","TracesData","ResourceSpans","ScopeSpans","Span","long","valuesById","values","Event","Link","Status","collector","TraceService","rpcImpl","requestDelimited","responseDelimited","export_","request","callback","ExportTraceServiceRequest","ExportTraceServiceResponse","ExportTracePartialSuccess","metrics","MetricsService","ExportMetricsServiceRequest","ExportMetricsServiceResponse","ExportMetricsPartialSuccess","logs","LogsService","ExportLogsServiceRequest","ExportLogsServiceResponse","ExportLogsPartialSuccess","MetricsData","ResourceMetrics","ScopeMetrics","Metric","Gauge","Sum","Histogram","ExponentialHistogram","Summary","NumberDataPoint","HistogramDataPoint","end2","ExponentialHistogramDataPoint","Buckets","SummaryDataPoint","ValueAtQuantile","Exemplar","LogsData","ResourceLogs","ScopeLogs","LogRecord","root","logsResponseType","logsRequestType","metricsResponseType","metricsRequestType","traceResponseType","traceRequestType","ProtobufLogsSerializer","ProtobufMetricsSerializer","ProtobufTraceSerializer","init_serializers","__esmMin","init_trace","init_metrics","init_logs","arg","request","createExportLogsServiceRequest","createExportMetricsServiceRequest","createExportTraceServiceRequest","JsonTraceSerializer","JsonMetricsSerializer","JsonLogsSerializer","init_serializers","__esmMin","init_trace","init_metrics","init_logs","arg","request","createExportTraceServiceRequest","encoder","decoder","createExportMetricsServiceRequest","createExportLogsServiceRequest","esm_exports","__export","ESpanKind","JsonLogsSerializer","JsonMetricsSerializer","JsonTraceSerializer","ProtobufLogsSerializer","ProtobufMetricsSerializer","ProtobufTraceSerializer","createExportLogsServiceRequest","createExportMetricsServiceRequest","createExportTraceServiceRequest","encodeAsLongBits","encodeAsString","getOtlpEncoder","hrTimeToNanos","toLongBits","init_esm","__esmMin","init_common","init_types","init_trace","init_metrics","init_logs","init_serializers","VERSION","init_version","__esmMin","DEFAULT_COLLECTOR_RESOURCE_PATH","DEFAULT_COLLECTOR_URL","USER_AGENT","OTLPExporterNodeProxy","OTLPMetricExporter","init_OTLPMetricExporter","__esmMin","init_esm","init_OTLPMetricExporterBase","init_version","VERSION","_super","__extends","config","_this","JsonMetricsSerializer","__assign","utils_exports","getEnv","parseHeaders","appendRootPathToUrlIfNeeded","appendResourcePathToUrl","OTLPExporterNodeBase","OTLPMetricExporterBase","init_node","__esmMin","init_OTLPMetricExporter","init_platform","__esmMin","init_node","esm_exports","__export","AggregationTemporalityPreference","CumulativeTemporalitySelector","DeltaTemporalitySelector","LowMemoryTemporalitySelector","OTLPMetricExporter","OTLPMetricExporterBase","init_esm","__esmMin","init_platform","init_OTLPMetricExporterOptions","init_OTLPMetricExporterBase","grpc","createServiceClientConstructor","path","name","serviceDefinition","arg","exports","GRPC_COMPRESSION_NONE","GRPC_COMPRESSION_GZIP","toGrpcCompression","compression","createInsecureCredentials","credentials","exports","createSslCredentials","rootCert","privateKey","certChain","createEmptyMetadata","Metadata","GrpcExporterTransport","_parameters","_a","data","buffer","createServiceClientConstructor","error","clientConstructor","resolve","deadline","err","response","api_1","core_1","path","url_1","fs","otlp_exporter_base_1","grpc_exporter_transport_1","exports","validateAndNormalizeUrl","url","target","_a","configureCredentials","credentials","endpoint","insecure","getSecurityFromEnv","getCredentialsFromEnvironment","definedInsecure","rootCert","retrieveRootCert","privateKey","retrievePrivateKey","certChain","retrieveCertChain","rootCertificate","clientKey","clientChain","configureCompression","compression","envCompression","api_1","core_1","otlp_exporter_base_1","grpc_exporter_transport_1","util_1","OTLPGRPCExporterNodeBase","config","signalSpecificMetadata","grpcName","grpcPath","serializer","nonSignalSpecificMetadata","rawMetadata","credentialProvider","credentials","configMetadata","_a","metadataProvider","metadata","key","value","objects","onSuccess","onError","data","promise","response","popPromise","index","exports","OTLPGRPCExporterNodeBase_1","exports","util_1","exports","exporter_metrics_otlp_http_1","otlp_grpc_exporter_base_1","core_1","otlp_transformer_1","version_1","otlp_exporter_base_1","USER_AGENT","OTLPMetricExporterProxy","config","signalSpecificMetadata","OTLPMetricExporter","exports","__exportStar","exports","api_1","sdk_metrics_1","core_1","escapeString","str","escapeAttributeValue","invalidCharacterRegex","multipleUnderscoreRegex","sanitizePrometheusMetricName","name","enforcePrometheusNamingConvention","type","valueString","value","toPrometheusType","metricData","stringify","metricName","attributes","timestamp","additionalAttributes","hasAttribute","attributesStr","key","val","sanitizedAttributeName","NO_REGISTERED_METRICS","PrometheusSerializer","prefix","appendTimestamp","resourceMetrics","scopeMetrics","metric","dataPointType","help","unit","results","it","dataPoint","histogram","cumulativeSum","countEntries","infiniteBoundaryDefined","idx","upperBound","resource","exports","api_1","core_1","sdk_metrics_1","http_1","PrometheusSerializer_1","url_1","PrometheusExporter","config","callback","_instrumentType","request","response","collectionResult","resourceMetrics","errors","err","resolve","_a","reject","_request","exports","__exportStar","exports","events_1","ADD_LISTENER_METHODS","AbstractAsyncHooksContextManager","context","target","manager","contextWrapper","args","ee","methodName","original","contextManager","event","listener","events","_a","patchedListener","map","listeners","exports","api_1","asyncHooks","AbstractAsyncHooksContextManager_1","AsyncHooksContextManager","_a","context","fn","thisArg","args","uid","type","exports","api_1","async_hooks_1","AbstractAsyncHooksContextManager_1","AsyncLocalStorageContextManager","_a","context","fn","thisArg","args","cb","exports","AsyncHooksContextManager_1","exports","AsyncLocalStorageContextManager_1","B3_DEBUG_FLAG_KEY","init_common","__esmMin","init_esm","createContextKey","B3_CONTEXT_HEADER","X_B3_TRACE_ID","X_B3_SPAN_ID","X_B3_SAMPLED","X_B3_PARENT_SPAN_ID","X_B3_FLAGS","init_constants","__esmMin","isValidSampledValue","sampled","TraceFlags","parseHeader","header","getHeaderValue","carrier","getter","key","getTraceId","traceId","X_B3_TRACE_ID","getSpanId","spanId","X_B3_SPAN_ID","getDebug","debug","X_B3_FLAGS","getTraceFlags","traceFlags","X_B3_SAMPLED","VALID_SAMPLED_VALUES","VALID_UNSAMPLED_VALUES","B3MultiPropagator","init_B3MultiPropagator","__esmMin","init_esm","init_common","init_constants","context","setter","spanContext","trace","isSpanContextValid","isTracingSuppressed","B3_DEBUG_FLAG_KEY","isValidTraceId","isValidSpanId","X_B3_PARENT_SPAN_ID","convertToTraceId128","traceId","PADDING","convertToTraceFlags","samplingState","SAMPLED_VALUES","TraceFlags","B3_CONTEXT_REGEX","DEBUG_STATE","B3SinglePropagator","init_B3SinglePropagator","__esmMin","init_esm","init_common","init_constants","context","carrier","setter","spanContext","trace","isSpanContextValid","isTracingSuppressed","B3_DEBUG_FLAG_KEY","value","B3_CONTEXT_HEADER","getter","header","b3Context","match","_a","__read","extractedTraceId","spanId","isValidTraceId","isValidSpanId","traceFlags","B3InjectEncoding","init_types","__esmMin","B3Propagator","init_B3Propagator","__esmMin","init_esm","init_B3MultiPropagator","init_B3SinglePropagator","init_constants","init_types","config","B3MultiPropagator","B3SinglePropagator","B3InjectEncoding","context","carrier","setter","isTracingSuppressed","getter","header","B3_CONTEXT_HEADER","b3Context","esm_exports","__export","B3InjectEncoding","B3Propagator","B3_CONTEXT_HEADER","X_B3_FLAGS","X_B3_PARENT_SPAN_ID","X_B3_SAMPLED","X_B3_SPAN_ID","X_B3_TRACE_ID","init_esm","__esmMin","init_B3Propagator","init_constants","init_types","ExceptionEventName","init_enums","__esmMin","Span","init_Span","__esmMin","init_esm","init_enums","parentTracer","context","spanName","spanContext","kind","parentSpanId","links","startTime","_deprecatedClock","attributes","SpanStatusCode","now","otperformance","getTimeOrigin","key","value","diag","isAttributeValue","_b","__values","_c","_d","__read","k","v","name","attributesOrStartTime","timeStamp","isTimeInput","sanitizeAttributes","link","_a","__spreadArray","status","endTime","hrTimeDuration","inp","hrTime","millisToHrTime","isTimeInputHrTime","msDuration","addHrTimes","exception","time","SEMATTRS_EXCEPTION_MESSAGE","SEMATTRS_EXCEPTION_TYPE","SEMATTRS_EXCEPTION_STACKTRACE","ExceptionEventName","limit","_this","val","SamplingDecision","init_Sampler","__esmMin","AlwaysOffSampler","init_AlwaysOffSampler","__esmMin","init_Sampler","SamplingDecision","AlwaysOnSampler","init_AlwaysOnSampler","__esmMin","init_Sampler","SamplingDecision","ParentBasedSampler","init_ParentBasedSampler","__esmMin","init_esm","init_AlwaysOffSampler","init_AlwaysOnSampler","config","globalErrorHandler","AlwaysOnSampler","_a","_b","AlwaysOffSampler","_c","_d","context","traceId","spanName","spanKind","attributes","links","parentContext","trace","isSpanContextValid","TraceFlags","TraceIdRatioBasedSampler","init_TraceIdRatioBasedSampler","__esmMin","init_esm","init_Sampler","_ratio","context","traceId","isValidTraceId","SamplingDecision","ratio","accumulation","i","pos","part","loadDefaultConfig","buildSamplerFromEnv","env","getEnv","environment","TracesSamplerValues","AlwaysOnSampler","AlwaysOffSampler","ParentBasedSampler","TraceIdRatioBasedSampler","getSamplerProbabilityFromEnv","diag","FALLBACK_OTEL_TRACES_SAMPLER","DEFAULT_RATIO","probability","init_config","__esmMin","init_esm","init_AlwaysOffSampler","init_AlwaysOnSampler","init_ParentBasedSampler","init_TraceIdRatioBasedSampler","mergeConfig","userConfig","perInstanceDefaults","buildSamplerFromEnv","DEFAULT_CONFIG","loadDefaultConfig","target","reconfigureLimits","spanLimits","parsedEnvConfig","getEnvWithoutDefaults","_f","_e","_d","_b","_a","_c","DEFAULT_ATTRIBUTE_COUNT_LIMIT","_m","_l","_k","_h","_g","_j","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","init_utility","__esmMin","init_config","init_esm","BatchSpanProcessorBase","init_BatchSpanProcessorBase","__esmMin","init_esm","_exporter","config","env","getEnv","BindOnceFuture","diag","_span","_parentContext","span","TraceFlags","_this","resolve","reject","promises","count","j","timer","context","suppressTracing","spans","doExport","result","ExportResultCode","_a","pendingResources","i","len","err","globalErrorHandler","flush","e","unrefTimer","BatchSpanProcessor","init_BatchSpanProcessor","__esmMin","init_BatchSpanProcessorBase","_super","__extends","BatchSpanProcessorBase","getIdGenerator","bytes","i","SHARED_BUFFER","SPAN_ID_BYTES","TRACE_ID_BYTES","RandomIdGenerator","init_RandomIdGenerator","__esmMin","init_node","__esmMin","init_BatchSpanProcessor","init_RandomIdGenerator","init_platform","__esmMin","init_node","Tracer","init_Tracer","__esmMin","init_esm","init_Span","init_utility","init_platform","instrumentationLibrary","config","_tracerProvider","localConfig","mergeConfig","RandomIdGenerator","name","options","context","trace","parentSpan","isTracingSuppressed","diag","nonRecordingSpan","INVALID_SPAN_CONTEXT","parentSpanContext","spanId","traceId","traceState","parentSpanId","spanKind","_a","SpanKind","links","_b","link","sanitizeAttributes","attributes","samplingResult","_c","traceFlags","SamplingDecision","TraceFlags","spanContext","initAttributes","span","Span","arg2","arg3","arg4","opts","ctx","fn","parentContext","contextWithSpanSet","MultiSpanProcessor","init_MultiSpanProcessor","__esmMin","init_esm","_spanProcessors","promises","_b","__values","_c","spanProcessor","resolve","error","globalErrorHandler","span","context","reject","NoopSpanProcessor","init_NoopSpanProcessor","__esmMin","_span","_context","ForceFlushState","BasicTracerProvider","init_BasicTracerProvider","__esmMin","init_esm","init_config","init_MultiSpanProcessor","init_NoopSpanProcessor","init_platform","init_utility","config","mergedConfig","merge","loadDefaultConfig","reconfigureLimits","_a","Resource","defaultExporter","batchProcessor","BatchSpanProcessor","NoopSpanProcessor","name","version","options","key","Tracer","spanProcessor","err","diag","MultiSpanProcessor","trace","context","propagation","timeout","promises","resolve","state","timeoutInterval","error","reject","results","errors","result","_this","uniquePropagatorNames","getEnv","propagators","propagator","validPropagators","list","item","CompositePropagator","exporterName","exporter","W3CTraceContextPropagator","W3CBaggagePropagator","ConsoleSpanExporter","init_ConsoleSpanExporter","__esmMin","init_esm","spans","resultCallback","span","_a","hrTimeToMicroseconds","done","spans_1","__values","spans_1_1","ExportResultCode","InMemorySpanExporter","init_InMemorySpanExporter","__esmMin","init_esm","spans","resultCallback","ExportResultCode","_a","__spreadArray","__read","init_ReadableSpan","__esmMin","SimpleSpanProcessor","init_SimpleSpanProcessor","__esmMin","init_esm","_exporter","BindOnceFuture","_a","_span","_parentContext","span","_this","TraceFlags","doExport","internal","result","ExportResultCode","globalErrorHandler","error","exportPromise_1","_b","err","init_SpanExporter","__esmMin","init_SpanProcessor","__esmMin","init_TimedEvent","__esmMin","init_types","__esmMin","init_IdGenerator","__esmMin","esm_exports","__export","AlwaysOffSampler","AlwaysOnSampler","BasicTracerProvider","BatchSpanProcessor","ConsoleSpanExporter","ForceFlushState","InMemorySpanExporter","NoopSpanProcessor","ParentBasedSampler","RandomIdGenerator","SamplingDecision","SimpleSpanProcessor","Span","TraceIdRatioBasedSampler","Tracer","init_esm","__esmMin","init_Tracer","init_BasicTracerProvider","init_platform","init_ConsoleSpanExporter","init_InMemorySpanExporter","init_ReadableSpan","init_SimpleSpanProcessor","init_SpanExporter","init_NoopSpanProcessor","init_AlwaysOffSampler","init_AlwaysOnSampler","init_ParentBasedSampler","init_TraceIdRatioBasedSampler","init_Sampler","init_Span","init_SpanProcessor","init_TimedEvent","init_types","init_IdGenerator","require_constants","__commonJSMin","exports","module","SEMVER_SPEC_VERSION","MAX_SAFE_INTEGER","MAX_SAFE_COMPONENT_LENGTH","MAX_SAFE_BUILD_LENGTH","RELEASE_TYPES","require_debug","__commonJSMin","exports","module","debug","args","require_re","__commonJSMin","exports","module","MAX_SAFE_COMPONENT_LENGTH","MAX_SAFE_BUILD_LENGTH","MAX_LENGTH","debug","re","safeRe","src","t","R","LETTERDASHNUMBER","safeRegexReplacements","makeSafeRegex","value","token","max","createToken","name","isGlobal","safe","index","require_parse_options","__commonJSMin","exports","module","looseOption","emptyOpts","parseOptions","options","require_identifiers","__commonJSMin","exports","module","numeric","compareIdentifiers","a","b","anum","bnum","rcompareIdentifiers","require_semver","__commonJSMin","exports","module","debug","MAX_LENGTH","MAX_SAFE_INTEGER","re","t","parseOptions","compareIdentifiers","SemVer","version","options","m","id","num","other","i","a","b","release","identifier","identifierBase","base","prerelease","require_parse","__commonJSMin","exports","module","SemVer","parse","version","options","throwErrors","er","require_valid","__commonJSMin","exports","module","parse","valid","version","options","v","require_clean","__commonJSMin","exports","module","parse","clean","version","options","s","require_inc","__commonJSMin","exports","module","SemVer","inc","version","release","options","identifier","identifierBase","require_diff","__commonJSMin","exports","module","parse","diff","version1","version2","v1","v2","comparison","v1Higher","highVersion","lowVersion","highHasPre","prefix","require_major","__commonJSMin","exports","module","SemVer","major","a","loose","require_minor","__commonJSMin","exports","module","SemVer","minor","a","loose","require_patch","__commonJSMin","exports","module","SemVer","patch","a","loose","require_prerelease","__commonJSMin","exports","module","parse","prerelease","version","options","parsed","require_compare","__commonJSMin","exports","module","SemVer","compare","a","b","loose","require_rcompare","__commonJSMin","exports","module","compare","rcompare","a","b","loose","require_compare_loose","__commonJSMin","exports","module","compare","compareLoose","a","b","require_compare_build","__commonJSMin","exports","module","SemVer","compareBuild","a","b","loose","versionA","versionB","require_sort","__commonJSMin","exports","module","compareBuild","sort","list","loose","a","b","require_rsort","__commonJSMin","exports","module","compareBuild","rsort","list","loose","a","b","require_gt","__commonJSMin","exports","module","compare","gt","a","b","loose","require_lt","__commonJSMin","exports","module","compare","lt","a","b","loose","require_eq","__commonJSMin","exports","module","compare","eq","a","b","loose","require_neq","__commonJSMin","exports","module","compare","neq","a","b","loose","require_gte","__commonJSMin","exports","module","compare","gte","a","b","loose","require_lte","__commonJSMin","exports","module","compare","lte","a","b","loose","require_cmp","__commonJSMin","exports","module","eq","neq","gt","gte","lt","lte","cmp","a","op","b","loose","require_coerce","__commonJSMin","exports","module","SemVer","parse","re","t","coerce","version","options","match","coerceRtlRegex","next","major","minor","patch","prerelease","build","require_lrucache","__commonJSMin","exports","module","LRUCache","key","value","firstKey","require_range","__commonJSMin","exports","module","Range","range","options","parseOptions","Comparator","r","c","first","isNullSet","isAny","comps","memoKey","FLAG_INCLUDE_PRERELEASE","FLAG_LOOSE","cached","cache","loose","hr","re","t","hyphenReplace","debug","comparatorTrimReplace","tildeTrimReplace","caretTrimReplace","rangeList","comp","parseComparator","replaceGTE0","rangeMap","comparators","result","thisComparators","isSatisfiable","rangeComparators","thisComparator","rangeComparator","version","SemVer","i","testSet","LRU","remainingComparators","testComparator","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","id","replaceTilde","_","M","m","p","pr","ret","replaceCaret","z","replaceXRange","gtlt","xM","xm","xp","anyX","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","set","allowed","require_comparator","__commonJSMin","exports","module","ANY","Comparator","comp","options","parseOptions","debug","r","re","t","m","SemVer","version","cmp","Range","require_satisfies","__commonJSMin","exports","module","Range","satisfies","version","range","options","require_to_comparators","__commonJSMin","exports","module","Range","toComparators","range","options","comp","c","require_max_satisfying","__commonJSMin","exports","module","SemVer","Range","maxSatisfying","versions","range","options","max","maxSV","rangeObj","v","require_min_satisfying","__commonJSMin","exports","module","SemVer","Range","minSatisfying","versions","range","options","min","minSV","rangeObj","v","require_min_version","__commonJSMin","exports","module","SemVer","Range","gt","minVersion","range","loose","minver","i","comparators","setMin","comparator","compver","require_valid","__commonJSMin","exports","module","Range","validRange","range","options","require_outside","__commonJSMin","exports","module","SemVer","Comparator","ANY","Range","satisfies","gt","lt","lte","gte","outside","version","range","hilo","options","gtfn","ltefn","ltfn","comp","ecomp","i","comparators","high","low","comparator","require_gtr","__commonJSMin","exports","module","outside","gtr","version","range","options","require_ltr","__commonJSMin","exports","module","outside","ltr","version","range","options","require_intersects","__commonJSMin","exports","module","Range","intersects","r1","r2","options","require_simplify","__commonJSMin","exports","module","satisfies","compare","versions","range","options","set","first","prev","v","a","b","version","ranges","min","max","simplified","original","require_subset","__commonJSMin","exports","module","Range","Comparator","ANY","satisfies","compare","subset","sub","dom","options","sawNonNull","OUTER","simpleSub","simpleDom","isSub","simpleSubset","minimumVersionWithPreRelease","minimumVersion","eqSet","gt","lt","c","higherGT","lowerLT","gtltComp","eq","higher","lower","hasDomLT","hasDomGT","needDomLTPre","needDomGTPre","a","b","comp","require_semver","__commonJSMin","exports","module","internalRe","constants","SemVer","identifiers","parse","valid","clean","inc","diff","major","minor","patch","prerelease","compare","rcompare","compareLoose","compareBuild","sort","rsort","gt","lt","eq","neq","gte","lte","cmp","coerce","Comparator","Range","satisfies","toComparators","maxSatisfying","minSatisfying","minVersion","validRange","outside","gtr","ltr","intersects","simplifyRange","subset","deserializeSpanContext","serializedString","headers","_a","__read","_traceId","_spanId","flags","traceId","spanId","traceFlags","VALID_HEX_RE","UBER_TRACE_ID_HEADER","UBER_BAGGAGE_HEADER_PREFIX","JaegerPropagator","init_JaegerPropagator","__esmMin","init_esm","config","context","carrier","setter","spanContext","trace","baggage","propagation","isTracingSuppressed","TraceFlags","_b","__values","_c","_d","key","entry","getter","_this","uberTraceIdHeader","uberTraceId","baggageValues","value","newContext","currentBaggage","baggageValues_1","baggageValues_1_1","baggageEntry","esm_exports","__export","JaegerPropagator","UBER_BAGGAGE_HEADER_PREFIX","UBER_TRACE_ID_HEADER","init_esm","__esmMin","init_JaegerPropagator","context_async_hooks_1","propagator_b3_1","sdk_trace_base_1","semver","propagator_jaeger_1","NodeTracerProvider","config","ContextManager","exports","__exportStar","exports","exports","core_1","otlp_grpc_exporter_base_1","otlp_transformer_1","version_1","USER_AGENT","OTLPTraceExporter","config","signalSpecificMetadata","exports","__exportStar","exports","import_fs_extra","import_grpc_js","import_command_line_args","import_nice_grpc","import_nice_grpc_error_details","import_nice_grpc_opentelemetry","path","http","Session","createRequire","import_fs_extra","path","os","require","createRequire","locatePackageJson","pkgId","m","dir","path","fs","content","FullProcessorServiceImpl","instance","sdkPackageJson","runtimePackageJson","version","request","context","config","ExecutionConfig","GLOBAL_CONFIG","contract","options","dataCompare","binding","result","e","os","requests","res","dataBinding","a","b","timeA","getTimestamp","timeB","timeCmp","getSecondary","d","import_winston","setupLogger","json","enableDebug","utilFormatter","info","stringRes","args","idx","arg","logger","init_esm","import_exporter_metrics_otlp_grpc","import_exporter_prometheus","import_sdk_trace_node","import_exporter_trace_otlp_grpc","setupOTLP","debug","diag","DiagConsoleLogger","DiagLogLevel","resource","envDetector","meterProvider","MeterProvider","PeriodicExportingMetricReader","traceProvider","exporter","processor","BatchSpanProcessor","metrics","trace","signal","shutdownProvider","ProxyTracerProvider","delegate","optionDefinitions","options","commandLineArgs","logLevel","setupLogger","setupOTLP","fullPath","path","chainsConfig","fs","concurrencyOverride","batchCountOverride","Endpoints","id","config","chainConfig","http","server","baseService","ProcessorServiceImpl","m","service","FullProcessorServiceImpl","ProcessorDefinition","metricsPort","httpServer","req","res","reqUrl","queries","profileTime","session","Session","resolve","profile","shutdownServers","err","reason","p","exitCode"]}