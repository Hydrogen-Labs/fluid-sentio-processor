import { createRequire as createRequireShim } from 'module'; const require = createRequireShim(import.meta.url);
import{V as N,W as C,X as V,Y as w,Z as O,_ as A,g as u,i as T,j as l,m,n as h,o as f,p as x,q as d,y as c}from"./chunk-6XTFFVM5.js";var r=class{stateMap=new Map;static reset(){r.INSTANCE=new r}},e=r;u(e,"INSTANCE",new r);var n=class{constructor(){}key(){return this.constructor.name}getOrRegister(){let t=e.INSTANCE.stateMap.get(this.key());return t||(t=this.initValue(),e.INSTANCE.stateMap.set(this.key(),t)),t}unregister(){let t=e.INSTANCE.stateMap.get(this.key());return e.INSTANCE.stateMap.delete(this.key()),t}},g=class extends n{initValue(){return new Map}getValue(t){return this.getOrRegister().get(t)}getValues(){let t=this.getOrRegister();return Array.from(t.values())}getOrSetValue(t,s){let o=this.getOrRegister(),a=o.get(t);return a?(console.warn(t,"has been registered twice, use the previous one"),a):(o.set(t,s),s)}},p=class extends n{initValue(){return[]}getValues(){return this.getOrRegister()}addValue(t){return this.getOrRegister().push(t),t}};process.stdout.write("");process.stdout.write("");process.stdout.write("");export{V as DummyProvider,d as Endpoints,c as GLOBAL_CONFIG,p as ListStateStorage,g as MapStateStorage,T as Plugin,l as PluginManager,A as ProcessorServiceImpl,O as QueuedStaticJsonRpcProvider,e as State,n as StateStorage,C as StoreContext,f as USER_PROCESSOR,h as errorString,w as getProvider,x as makeEthCallKey,m as mergeProcessResults,N as timeoutError};
//# sourceMappingURL=index.js.map