import * as _sentio_protos from '@sentio/protos';
import { DeepPartial as DeepPartial$1, ProcessStreamResponse, DBResponse, DBRequest_DBUpsert, DBRequest, HandlerType, ProcessConfigResponse, StartRequest, DataBinding, PreparedData, ProcessResult, PreprocessResult, EthCallParam, ProcessorServiceImplementation, ProcessConfigRequest, Empty, ProcessBindingsRequest, ProcessBindingResponse, ProcessStreamRequest, PreprocessStreamRequest, PreprocessStreamResponse } from '@sentio/protos';
import { Subject } from 'rxjs';
import { AsyncLocalStorage } from 'node:async_hooks';
import { Required } from 'utility-types';
import { CallContext } from 'nice-grpc';
import _m0 from 'protobufjs/minimal.js';
import { JsonRpcProvider, Provider, Network } from 'ethers';
import PQueue from 'p-queue';
import { EthChainId } from '@sentio/chain';

type Request = Omit<DBRequest, 'opId'>;
type RequestType = keyof Request;
declare const timeoutError: Error;
declare class StoreContext {
    readonly subject: Subject<DeepPartial$1<ProcessStreamResponse>>;
    readonly processId: number;
    private static opCounter;
    private defers;
    private statsInterval;
    private pendings;
    constructor(subject: Subject<DeepPartial$1<ProcessStreamResponse>>, processId: number);
    newPromise<T>(opId: bigint, requestType?: RequestType): Promise<T>;
    sendRequest(request: DeepPartial$1<Request>, timeoutSecs?: number): Promise<DBResponse>;
    result(dbResult: DBResponse): void;
    error(processId: number, e: any): void;
    close(): void;
    upsertBatch: {
        opId: bigint;
        request: DBRequest_DBUpsert;
        promise: Promise<DBResponse>;
        timer: NodeJS.Timeout;
    } | undefined;
    private sendUpsertInBatch;
    private sendBatch;
    awaitPendings(): Promise<void>;
}

declare abstract class Plugin {
    name: string;
    supportedHandlers: HandlerType[];
    configure(config: ProcessConfigResponse): Promise<void>;
    start(start: StartRequest): Promise<void>;
    /**
     * @deprecated The method should not be used, use ctx.states instead
     */
    stateDiff(config: ProcessConfigResponse): boolean;
    processBinding(request: DataBinding, preparedData: PreparedData | undefined): Promise<ProcessResult>;
    preprocessBinding(request: DataBinding, preprocessStore: {
        [k: string]: any;
    }): Promise<PreprocessResult>;
}
declare class PluginManager {
    static INSTANCE: PluginManager;
    dbContextLocalStorage: AsyncLocalStorage<StoreContext | undefined>;
    plugins: Plugin[];
    typesToPlugin: Map<HandlerType, Plugin>;
    register(plugin: Plugin): void;
    configure(config: ProcessConfigResponse): Promise<void[]>;
    start(start: StartRequest): Promise<void[]>;
    /**
     * @deprecated The method should not be used, use ctx.states instead
     */
    stateDiff(config: ProcessConfigResponse): boolean;
    processBinding(request: DataBinding, preparedData: PreparedData | undefined, dbContext?: StoreContext): Promise<ProcessResult>;
    preprocessBinding(request: DataBinding, preprocessStore: {
        [k: string]: any;
    }, dbContext?: StoreContext): Promise<PreprocessResult>;
}

declare class State {
    stateMap: Map<string, any>;
    static INSTANCE: State;
    static reset(): void;
}
declare abstract class StateStorage<T> {
    protected constructor();
    abstract initValue(): T;
    key(): string;
    getOrRegister(): T;
    unregister(): T;
}
declare abstract class MapStateStorage<T> extends StateStorage<Map<string, T>> {
    initValue(): Map<string, T>;
    getValue(key: string): T | undefined;
    getValues(): T[];
    getOrSetValue(key: string, value: T): T;
}
declare abstract class ListStateStorage<T> extends StateStorage<T[]> {
    initValue(): never[];
    getValues(): T[];
    addValue(value: T): T;
}

declare function mergeProcessResults(results: ProcessResult[]): Required<ProcessResult, 'states'>;
declare function errorString(e: Error): string;
declare const USER_PROCESSOR = "user_processor";
declare function makeEthCallKey(param: EthCallParam): string;

declare class Endpoints {
    static INSTANCE: Endpoints;
    concurrency: number;
    chainQueryAPI: string;
    priceFeedAPI: string;
    chainServer: Map<string, string>;
    batchCount: number;
}

interface ChainConfig {
    ChainID: string;
    Https?: string[];
    ChainServer?: string;
}

declare class ProcessorServiceImpl implements ProcessorServiceImplementation {
    private started;
    unhandled: Error;
    private readonly loader;
    private readonly shutdownHandler?;
    private readonly enablePreprocess;
    private preparedData;
    constructor(loader: () => Promise<any>, shutdownHandler?: () => void);
    getConfig(request: ProcessConfigRequest, context: CallContext): Promise<ProcessConfigResponse>;
    start(request: StartRequest, context: CallContext): Promise<Empty>;
    stop(request: Empty, context: CallContext): Promise<Empty>;
    processBindings(request: ProcessBindingsRequest, options?: CallContext): Promise<ProcessBindingResponse>;
    preprocessBindings(bindings: DataBinding[], preprocessStore: {
        [k: string]: any;
    }, dbContext?: StoreContext, options?: CallContext): Promise<PreparedData>;
    preprocessBinding(request: DataBinding, preprocessStore: {
        [k: string]: any;
    }, dbContext?: StoreContext, options?: CallContext): Promise<PreprocessResult>;
    processBinding(request: DataBinding, preparedData: PreparedData | undefined, options?: CallContext): Promise<ProcessResult>;
    processBindingsStream(requests: AsyncIterable<ProcessStreamRequest>, context: CallContext): AsyncGenerator<{
        processId?: number | undefined;
        dbRequest?: {
            opId?: bigint | undefined;
            get?: {
                entity?: string | undefined;
                id?: string | undefined;
            } | undefined;
            upsert?: {
                entity?: string[] | undefined;
                id?: string[] | undefined;
                data?: {
                    [x: string]: any;
                }[] | undefined;
                entityData?: {
                    fields?: {
                        [x: string]: {
                            nullValue?: _sentio_protos.RichValue_NullValue | undefined;
                            intValue?: number | undefined;
                            floatValue?: number | undefined;
                            bytesValue?: Uint8Array | undefined;
                            boolValue?: boolean | undefined;
                            stringValue?: string | undefined;
                            timestampValue?: Date | undefined;
                            bigintValue?: {
                                negative?: boolean | undefined;
                                data?: Uint8Array | undefined;
                            } | undefined;
                            bigdecimalValue?: {
                                value?: {
                                    negative?: boolean | undefined;
                                    data?: Uint8Array | undefined;
                                } | undefined;
                                exp?: number | undefined;
                            } | undefined;
                            listValue?: {
                                values?: any[] | undefined;
                            } | undefined;
                            structValue?: any | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
            delete?: {
                entity?: string[] | undefined;
                id?: string[] | undefined;
            } | undefined;
            list?: {
                entity?: string | undefined;
                filters?: {
                    field?: string | undefined;
                    op?: _sentio_protos.DBRequest_DBOperator | undefined;
                    value?: {
                        values?: any[] | undefined;
                    } | undefined;
                }[] | undefined;
                cursor?: string | undefined;
                pageSize?: number | undefined;
            } | undefined;
        } | undefined;
        result?: {
            gauges?: {
                metadata?: {
                    address?: string | undefined;
                    contractName?: string | undefined;
                    blockNumber?: bigint | undefined;
                    transactionHash?: string | undefined;
                    chainId?: string | undefined;
                    transactionIndex?: number | undefined;
                    logIndex?: number | undefined;
                    name?: string | undefined;
                    labels?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } | undefined;
                metricValue?: {
                    bigDecimal?: string | undefined;
                    doubleValue?: number | undefined;
                    bigInteger?: {
                        negative?: boolean | undefined;
                        data?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                runtimeInfo?: {
                    from?: HandlerType | undefined;
                } | undefined;
            }[] | undefined;
            counters?: {
                metadata?: {
                    address?: string | undefined;
                    contractName?: string | undefined;
                    blockNumber?: bigint | undefined;
                    transactionHash?: string | undefined;
                    chainId?: string | undefined;
                    transactionIndex?: number | undefined;
                    logIndex?: number | undefined;
                    name?: string | undefined;
                    labels?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } | undefined;
                metricValue?: {
                    bigDecimal?: string | undefined;
                    doubleValue?: number | undefined;
                    bigInteger?: {
                        negative?: boolean | undefined;
                        data?: Uint8Array | undefined;
                    } | undefined;
                } | undefined;
                add?: boolean | undefined;
                runtimeInfo?: {
                    from?: HandlerType | undefined;
                } | undefined;
            }[] | undefined;
            events?: {
                metadata?: {
                    address?: string | undefined;
                    contractName?: string | undefined;
                    blockNumber?: bigint | undefined;
                    transactionHash?: string | undefined;
                    chainId?: string | undefined;
                    transactionIndex?: number | undefined;
                    logIndex?: number | undefined;
                    name?: string | undefined;
                    labels?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } | undefined;
                distinctEntityId?: string | undefined;
                attributes?: {
                    [x: string]: any;
                } | undefined;
                severity?: _sentio_protos.LogLevel | undefined;
                message?: string | undefined;
                runtimeInfo?: {
                    from?: HandlerType | undefined;
                } | undefined;
                noMetric?: boolean | undefined;
            }[] | undefined;
            exports?: {
                metadata?: {
                    address?: string | undefined;
                    contractName?: string | undefined;
                    blockNumber?: bigint | undefined;
                    transactionHash?: string | undefined;
                    chainId?: string | undefined;
                    transactionIndex?: number | undefined;
                    logIndex?: number | undefined;
                    name?: string | undefined;
                    labels?: {
                        [x: string]: string | undefined;
                    } | undefined;
                } | undefined;
                payload?: string | undefined;
                runtimeInfo?: {
                    from?: HandlerType | undefined;
                } | undefined;
            }[] | undefined;
            states?: {
                configUpdated?: boolean | undefined;
                error?: string | undefined;
            } | undefined;
        } | undefined;
    }, void, undefined>;
    handlePreprocessRequests(requests: AsyncIterable<PreprocessStreamRequest>, subject: Subject<DeepPartial$1<PreprocessStreamResponse>>): Promise<void>;
    preprocessBindingsStream(requests: AsyncIterable<PreprocessStreamRequest>, context: CallContext): AsyncGenerator<{
        processId?: number | undefined;
        dbRequest?: {
            opId?: bigint | undefined;
            get?: {
                entity?: string | undefined;
                id?: string | undefined;
            } | undefined;
            upsert?: {
                entity?: string[] | undefined;
                id?: string[] | undefined;
                data?: {
                    [x: string]: any;
                }[] | undefined;
                entityData?: {
                    fields?: {
                        [x: string]: {
                            nullValue?: _sentio_protos.RichValue_NullValue | undefined;
                            intValue?: number | undefined;
                            floatValue?: number | undefined;
                            bytesValue?: Uint8Array | undefined;
                            boolValue?: boolean | undefined;
                            stringValue?: string | undefined;
                            timestampValue?: Date | undefined;
                            bigintValue?: {
                                negative?: boolean | undefined;
                                data?: Uint8Array | undefined;
                            } | undefined;
                            bigdecimalValue?: {
                                value?: {
                                    negative?: boolean | undefined;
                                    data?: Uint8Array | undefined;
                                } | undefined;
                                exp?: number | undefined;
                            } | undefined;
                            listValue?: {
                                values?: any[] | undefined;
                            } | undefined;
                            structValue?: any | undefined;
                        } | undefined;
                    } | undefined;
                }[] | undefined;
            } | undefined;
            delete?: {
                entity?: string[] | undefined;
                id?: string[] | undefined;
            } | undefined;
            list?: {
                entity?: string | undefined;
                filters?: {
                    field?: string | undefined;
                    op?: _sentio_protos.DBRequest_DBOperator | undefined;
                    value?: {
                        values?: any[] | undefined;
                    } | undefined;
                }[] | undefined;
                cursor?: string | undefined;
                pageSize?: number | undefined;
            } | undefined;
        } | undefined;
    }, void, undefined>;
    private handleRequests;
}

interface ExecutionConfig {
    sequential: boolean;
    forceExactBlockTime: boolean;
    processBindingTimeout: number;
    skipStartBlockValidation: boolean;
    rpcRetryTimes: number;
}
declare const ExecutionConfig: {
    encode(message: ExecutionConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExecutionConfig;
    fromJSON(object: any): ExecutionConfig;
    toJSON(message: ExecutionConfig): unknown;
    create(base?: DeepPartial<ExecutionConfig>): ExecutionConfig;
    fromPartial(object: DeepPartial<ExecutionConfig>): ExecutionConfig;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;

interface GlobalConfig {
    execution: Partial<ExecutionConfig>;
}
declare const GLOBAL_CONFIG: GlobalConfig;

declare const DummyProvider: JsonRpcProvider;
declare function getProvider(chainId?: EthChainId): Provider;
declare class QueuedStaticJsonRpcProvider extends JsonRpcProvider {
    #private;
    executor: PQueue;
    constructor(url: string, network: Network, concurrency: number, batchCount?: number);
    send(method: string, params: Array<any>): Promise<any>;
}

export { ChainConfig, DummyProvider, Endpoints, GLOBAL_CONFIG, GlobalConfig, ListStateStorage, MapStateStorage, Plugin, PluginManager, ProcessorServiceImpl, QueuedStaticJsonRpcProvider, State, StateStorage, StoreContext, USER_PROCESSOR, errorString, getProvider, makeEthCallKey, mergeProcessResults, timeoutError };
