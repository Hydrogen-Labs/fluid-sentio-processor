import type { CallContext, CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../google/protobuf/empty.js";
import { BigInteger, CoinID, RichStruct, RichStructList, RichValue, RichValueList } from "../../service/common/protos/common.js";
export declare enum MetricType {
    UNKNOWN_TYPE = 0,
    COUNTER = 1,
    GAUGE = 2,
    HISTOGRAM = 3,
    UNRECOGNIZED = -1
}
export declare function metricTypeFromJSON(object: any): MetricType;
export declare function metricTypeToJSON(object: MetricType): string;
export declare enum AggregationType {
    COUNT = 0,
    SUM = 1,
    AVG = 2,
    MIN = 3,
    MAX = 4,
    LAST = 5,
    UNRECOGNIZED = -1
}
export declare function aggregationTypeFromJSON(object: any): AggregationType;
export declare function aggregationTypeToJSON(object: AggregationType): string;
export declare enum MoveOwnerType {
    ADDRESS = 0,
    OBJECT = 1,
    WRAPPED_OBJECT = 2,
    UNRECOGNIZED = -1
}
export declare function moveOwnerTypeFromJSON(object: any): MoveOwnerType;
export declare function moveOwnerTypeToJSON(object: MoveOwnerType): string;
export declare enum AddressType {
    ERC20 = 0,
    ERC721 = 1,
    ERC1155 = 2,
    UNRECOGNIZED = -1
}
export declare function addressTypeFromJSON(object: any): AddressType;
export declare function addressTypeToJSON(object: AddressType): string;
export declare enum HandlerType {
    UNKNOWN = 0,
    ETH_LOG = 1,
    ETH_BLOCK = 2,
    ETH_TRACE = 5,
    ETH_TRANSACTION = 11,
    SOL_INSTRUCTION = 4,
    APT_EVENT = 6,
    APT_CALL = 7,
    APT_RESOURCE = 8,
    SUI_EVENT = 3,
    SUI_CALL = 9,
    SUI_OBJECT = 10,
    SUI_OBJECT_CHANGE = 12,
    FUEL_CALL = 13,
    FUEL_BLOCK = 17,
    COSMOS_CALL = 14,
    STARKNET_EVENT = 15,
    BTC_TRANSACTION = 16,
    BTC_BLOCK = 18,
    UNRECOGNIZED = -1
}
export declare function handlerTypeFromJSON(object: any): HandlerType;
export declare function handlerTypeToJSON(object: HandlerType): string;
export declare enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARNING = 2,
    ERROR = 3,
    CRITICAL = 4,
    UNRECOGNIZED = -1
}
export declare function logLevelFromJSON(object: any): LogLevel;
export declare function logLevelToJSON(object: LogLevel): string;
export interface ProjectConfig {
    name: string;
    version: string;
}
export interface ExecutionConfig {
    sequential: boolean;
    forceExactBlockTime: boolean;
    processBindingTimeout: number;
    skipStartBlockValidation: boolean;
    rpcRetryTimes: number;
}
export interface ProcessConfigRequest {
}
export interface ProcessConfigResponse {
    config: ProjectConfig | undefined;
    executionConfig: ExecutionConfig | undefined;
    contractConfigs: ContractConfig[];
    templateInstances: TemplateInstance[];
    accountConfigs: AccountConfig[];
    metricConfigs: MetricConfig[];
    eventTrackingConfigs: EventTrackingConfig[];
    exportConfigs: ExportConfig[];
    eventLogConfigs: EventLogConfig[];
    dbSchema: DataBaseSchema | undefined;
}
export interface ContractConfig {
    contract: ContractInfo | undefined;
    intervalConfigs: OnIntervalConfig[];
    logConfigs: LogHandlerConfig[];
    traceConfigs: TraceHandlerConfig[];
    transactionConfig: TransactionHandlerConfig[];
    moveEventConfigs: MoveEventHandlerConfig[];
    moveCallConfigs: MoveCallHandlerConfig[];
    moveResourceChangeConfigs: MoveResourceChangeConfig[];
    fuelCallConfigs: FuelCallHandlerConfig[];
    assetConfigs: FuelAssetHandlerConfig[];
    fuelLogConfigs: FuelLogHandlerConfig[];
    cosmosLogConfigs: CosmosLogHandlerConfig[];
    starknetEventConfigs: StarknetEventHandlerConfig[];
    btcTransactionConfigs: BTCTransactionHandlerConfig[];
    instructionConfig: InstructionHandlerConfig | undefined;
    startBlock: bigint;
    endBlock: bigint;
    processorType: string;
}
export interface DataBaseSchema {
    gqlSchema: string;
}
export interface TotalPerEntityAggregation {
}
export declare enum TotalPerEntityAggregation_Type {
    AVG = 0,
    MEDIAN = 1,
    UNRECOGNIZED = -1
}
export declare function totalPerEntityAggregation_TypeFromJSON(object: any): TotalPerEntityAggregation_Type;
export declare function totalPerEntityAggregation_TypeToJSON(object: TotalPerEntityAggregation_Type): string;
export interface RetentionConfig {
    retentionEventName: string;
    days: number;
}
export interface EventTrackingConfig {
    eventName: string;
    totalByDay: boolean;
    unique: boolean;
    totalPerEntity: TotalPerEntityAggregation | undefined;
    distinctAggregationByDays: number[];
    retentionConfig: RetentionConfig | undefined;
}
export interface ExportConfig {
    name: string;
    channel: string;
}
export interface MetricConfig {
    name: string;
    description: string;
    unit: string;
    sparse: boolean;
    persistentBetweenVersion: boolean;
    type: MetricType;
    aggregationConfig: AggregationConfig | undefined;
}
export interface EventLogConfig {
    name: string;
    fields: EventLogConfig_Field[];
}
export declare enum EventLogConfig_BasicFieldType {
    STRING = 0,
    DOUBLE = 1,
    BOOL = 2,
    TIMESTAMP = 3,
    BIG_INTEGER = 4,
    BIG_DECIMAL = 5,
    UNRECOGNIZED = -1
}
export declare function eventLogConfig_BasicFieldTypeFromJSON(object: any): EventLogConfig_BasicFieldType;
export declare function eventLogConfig_BasicFieldTypeToJSON(object: EventLogConfig_BasicFieldType): string;
export interface EventLogConfig_StructFieldType {
    fields: EventLogConfig_Field[];
}
export interface EventLogConfig_Field {
    name: string;
    basicType?: EventLogConfig_BasicFieldType | undefined;
    coinType?: CoinID | undefined;
    structType?: EventLogConfig_StructFieldType | undefined;
}
export interface AggregationConfig {
    intervalInMinutes: number[];
    types: AggregationType[];
    discardOrigin: boolean;
}
export interface AccountConfig {
    chainId: string;
    address: string;
    startBlock: bigint;
    intervalConfigs: OnIntervalConfig[];
    moveIntervalConfigs: MoveOnIntervalConfig[];
    moveCallConfigs: MoveCallHandlerConfig[];
    moveResourceChangeConfigs: MoveResourceChangeConfig[];
    logConfigs: LogHandlerConfig[];
}
export interface HandleInterval {
    recentInterval: number;
    backfillInterval: number;
}
export interface OnIntervalConfig {
    handlerId: number;
    minutes: number;
    minutesInterval?: HandleInterval | undefined;
    slot: number;
    slotInterval?: HandleInterval | undefined;
    fetchConfig: EthFetchConfig | undefined;
}
export interface AptosOnIntervalConfig {
    intervalConfig: OnIntervalConfig | undefined;
    type: string;
}
export interface MoveOnIntervalConfig {
    intervalConfig: OnIntervalConfig | undefined;
    type: string;
    ownerType: MoveOwnerType;
    fetchConfig: MoveAccountFetchConfig | undefined;
}
export interface ContractInfo {
    name: string;
    chainId: string;
    address: string;
    abi: string;
}
export interface TemplateInstance {
    contract: ContractInfo | undefined;
    startBlock: bigint;
    endBlock: bigint;
    templateId: number;
    baseLabels: {
        [key: string]: any;
    } | undefined;
}
export interface StartRequest {
    templateInstances: TemplateInstance[];
}
export interface BlockHandlerConfig {
    handlerId: number;
}
export interface EthFetchConfig {
    transaction: boolean;
    transactionReceipt: boolean;
    transactionReceiptLogs: boolean;
    block: boolean;
    trace: boolean;
}
export interface TraceHandlerConfig {
    signature: string;
    handlerId: number;
    fetchConfig: EthFetchConfig | undefined;
}
export interface TransactionHandlerConfig {
    handlerId: number;
    fetchConfig: EthFetchConfig | undefined;
}
export interface LogHandlerConfig {
    filters: LogFilter[];
    handlerId: number;
    fetchConfig: EthFetchConfig | undefined;
}
export interface FuelAssetHandlerConfig {
    filters: FuelAssetHandlerConfig_AssetFilter[];
    handlerId: number;
}
export interface FuelAssetHandlerConfig_AssetFilter {
    assetId?: string | undefined;
    fromAddress?: string | undefined;
    toAddress?: string | undefined;
}
export interface FuelLogHandlerConfig {
    logIds: string[];
    handlerId: number;
}
export interface CosmosLogHandlerConfig {
    logFilters: string[];
    handlerId: number;
}
export interface LogFilter {
    topics: Topic[];
    address?: string | undefined;
    addressType?: AddressType | undefined;
}
export interface InstructionHandlerConfig {
    innerInstruction: boolean;
    parsedInstruction: boolean;
    rawDataInstruction: boolean;
}
export interface ResourceConfig {
    moveTypePrefix: string;
}
export interface MoveFetchConfig {
    resourceChanges: boolean;
    allEvents: boolean;
    inputs: boolean;
    resourceConfig?: ResourceConfig | undefined;
    supportMultisigFunc?: boolean | undefined;
}
export interface MoveAccountFetchConfig {
    owned: boolean;
}
export interface MoveEventHandlerConfig {
    filters: MoveEventFilter[];
    handlerId: number;
    fetchConfig: MoveFetchConfig | undefined;
}
export interface MoveEventFilter {
    type: string;
    account: string;
}
export interface MoveCallHandlerConfig {
    filters: MoveCallFilter[];
    handlerId: number;
    fetchConfig: MoveFetchConfig | undefined;
}
export interface MoveResourceChangeConfig {
    type: string;
    handlerId: number;
}
export interface MoveCallFilter {
    function: string;
    typeArguments: string[];
    withTypeArguments: boolean;
    includeFailed: boolean;
    publicKeyPrefix: string;
    fromAndToAddress?: MoveCallFilter_FromAndToAddress | undefined;
}
export interface MoveCallFilter_FromAndToAddress {
    from: string;
    to: string;
}
export interface StarknetEventHandlerConfig {
    filters: StarknetEventFilter[];
    handlerId: number;
}
export interface BTCTransactionHandlerConfig {
    filters: BTCTransactionFilter[];
    handlerId: number;
}
export interface BTCTransactionFilter {
    inputFilter: BTCTransactionFilter_VinFilter | undefined;
    outputFilter: BTCTransactionFilter_VOutFilter | undefined;
    filter: BTCTransactionFilter_Filter[];
}
export interface BTCTransactionFilter_Condition {
    eq?: RichValue | undefined;
    gt?: RichValue | undefined;
    gte?: RichValue | undefined;
    lt?: RichValue | undefined;
    lte?: RichValue | undefined;
    ne?: RichValue | undefined;
    prefix?: string | undefined;
    contains?: string | undefined;
    notContains?: string | undefined;
    lengthEq?: number | undefined;
    lengthGt?: number | undefined;
    lengthLt?: number | undefined;
    hasAny?: RichValueList | undefined;
    hasAll?: RichValueList | undefined;
    in?: RichValueList | undefined;
}
export interface BTCTransactionFilter_Filter {
    conditions: {
        [key: string]: BTCTransactionFilter_Condition;
    };
}
export interface BTCTransactionFilter_Filter_ConditionsEntry {
    key: string;
    value: BTCTransactionFilter_Condition | undefined;
}
export interface BTCTransactionFilter_Filters {
    filters: BTCTransactionFilter_Filter[];
}
export interface BTCTransactionFilter_VinFilter {
    filters: BTCTransactionFilter_Filters | undefined;
    preVOut: BTCTransactionFilter_Filter | undefined;
    preTransaction: BTCTransactionFilter | undefined;
}
export interface BTCTransactionFilter_VOutFilter {
    filters: BTCTransactionFilter_Filters | undefined;
}
export interface StarknetEventFilter {
    address: string;
    keys: string[];
}
export interface FuelCallFilter {
    function: string;
    includeFailed: boolean;
}
export interface FuelCallHandlerConfig {
    filters: FuelCallFilter[];
    handlerId: number;
}
export interface Topic {
    hashes: string[];
}
export interface ProcessBindingsRequest {
    bindings: DataBinding[];
}
export interface ProcessBindingResponse {
    result: ProcessResult | undefined;
}
export interface ProcessStreamRequest {
    processId: number;
    binding?: DataBinding | undefined;
    dbResult?: DBResponse | undefined;
}
export interface ProcessStreamResponse {
    processId: number;
    dbRequest?: DBRequest | undefined;
    result?: ProcessResult | undefined;
}
export interface PreprocessStreamRequest {
    processId: number;
    bindings?: PreprocessStreamRequest_DataBindings | undefined;
    dbResult?: DBResponse | undefined;
}
export interface PreprocessStreamRequest_DataBindings {
    bindings: DataBinding[];
}
export interface PreprocessStreamResponse {
    processId: number;
    dbRequest: DBRequest | undefined;
}
export interface DBResponse {
    opId: bigint;
    data?: {
        [key: string]: any;
    } | undefined;
    list?: Array<any> | undefined;
    error?: string | undefined;
    entities?: RichStructList | undefined;
    entityList?: EntityList | undefined;
    nextCursor?: string | undefined;
}
export interface Entity {
    entity: string;
    genBlockNumber: bigint;
    genBlockChain: string;
    genBlockTime: Date | undefined;
    data: RichStruct | undefined;
}
export interface EntityList {
    entities: Entity[];
}
export interface DBRequest {
    opId: bigint;
    get?: DBRequest_DBGet | undefined;
    upsert?: DBRequest_DBUpsert | undefined;
    delete?: DBRequest_DBDelete | undefined;
    list?: DBRequest_DBList | undefined;
}
export declare enum DBRequest_DBOperator {
    EQ = 0,
    NE = 1,
    GT = 2,
    GE = 3,
    LT = 4,
    LE = 5,
    IN = 6,
    NOT_IN = 7,
    LIKE = 8,
    NOT_LIKE = 9,
    HAS_ALL = 10,
    HAS_ANY = 11,
    UNRECOGNIZED = -1
}
export declare function dBRequest_DBOperatorFromJSON(object: any): DBRequest_DBOperator;
export declare function dBRequest_DBOperatorToJSON(object: DBRequest_DBOperator): string;
export interface DBRequest_DBGet {
    entity: string;
    id: string;
}
export interface DBRequest_DBList {
    entity: string;
    filters: DBRequest_DBFilter[];
    cursor: string;
    pageSize?: number | undefined;
}
export interface DBRequest_DBUpsert {
    entity: string[];
    id: string[];
    data: {
        [key: string]: any;
    }[];
    entityData: RichStruct[];
}
export interface DBRequest_DBDelete {
    entity: string[];
    id: string[];
}
export interface DBRequest_DBFilter {
    field: string;
    op: DBRequest_DBOperator;
    value: RichValueList | undefined;
}
export interface Data {
    ethLog?: Data_EthLog | undefined;
    ethBlock?: Data_EthBlock | undefined;
    ethTransaction?: Data_EthTransaction | undefined;
    ethTrace?: Data_EthTrace | undefined;
    solInstruction?: Data_SolInstruction | undefined;
    aptEvent?: Data_AptEvent | undefined;
    aptCall?: Data_AptCall | undefined;
    aptResource?: Data_AptResource | undefined;
    suiEvent?: Data_SuiEvent | undefined;
    suiCall?: Data_SuiCall | undefined;
    suiObject?: Data_SuiObject | undefined;
    suiObjectChange?: Data_SuiObjectChange | undefined;
    fuelCall?: Data_FuelCall | undefined;
    fuelBlock?: Data_FuelBlock | undefined;
    cosmosCall?: Data_CosmosCall | undefined;
    starknetEvents?: Data_StarknetEvent | undefined;
    btcTransaction?: Data_BTCTransaction | undefined;
    btcBlock?: Data_BTCBlock | undefined;
}
export interface Data_EthLog {
    log: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
    transaction?: {
        [key: string]: any;
    } | undefined;
    transactionReceipt?: {
        [key: string]: any;
    } | undefined;
    block?: {
        [key: string]: any;
    } | undefined;
}
export interface Data_EthBlock {
    block: {
        [key: string]: any;
    } | undefined;
}
export interface Data_EthTransaction {
    transaction: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
    transactionReceipt?: {
        [key: string]: any;
    } | undefined;
    block?: {
        [key: string]: any;
    } | undefined;
    trace?: {
        [key: string]: any;
    } | undefined;
}
export interface Data_EthTrace {
    trace: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
    transaction?: {
        [key: string]: any;
    } | undefined;
    transactionReceipt?: {
        [key: string]: any;
    } | undefined;
    block?: {
        [key: string]: any;
    } | undefined;
}
export interface Data_SolInstruction {
    instructionData: string;
    slot: bigint;
    programAccountId: string;
    accounts: string[];
    parsed?: {
        [key: string]: any;
    } | undefined;
}
export interface Data_AptEvent {
    transaction: {
        [key: string]: any;
    } | undefined;
}
export interface Data_AptCall {
    transaction: {
        [key: string]: any;
    } | undefined;
}
export interface Data_AptResource {
    resources: {
        [key: string]: any;
    }[];
    version: bigint;
    timestampMicros: bigint;
}
export interface Data_SuiEvent {
    transaction: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
    slot: bigint;
}
export interface Data_SuiCall {
    transaction: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
    slot: bigint;
}
export interface Data_SuiObject {
    objects: {
        [key: string]: any;
    }[];
    self?: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
    slot: bigint;
}
export interface Data_SuiObjectChange {
    changes: {
        [key: string]: any;
    }[];
    timestamp: Date | undefined;
    txDigest: string;
    slot: bigint;
}
export interface Data_FuelCall {
    transaction: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
}
export interface Data_FuelBlock {
    block: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
}
export interface Data_CosmosCall {
    transaction: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
}
export interface Data_StarknetEvent {
    result: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
}
export interface Data_BTCTransaction {
    transaction: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
}
export interface Data_BTCBlock {
    block: {
        [key: string]: any;
    } | undefined;
    timestamp: Date | undefined;
}
export interface DataBinding {
    data: Data | undefined;
    handlerType: HandlerType;
    handlerIds: number[];
}
export interface StateResult {
    configUpdated: boolean;
    error?: string | undefined;
}
export interface ProcessResult {
    gauges: GaugeResult[];
    counters: CounterResult[];
    events: EventTrackingResult[];
    exports: ExportResult[];
    states: StateResult | undefined;
}
export interface EthCallParam {
    context: EthCallContext | undefined;
    calldata: string;
}
export interface EthCallContext {
    chainId: string;
    address: string;
    blockTag: string;
}
export interface PreprocessResult {
    ethCallParams: EthCallParam[];
}
export interface PreparedData {
    ethCallResults: {
        [key: string]: string;
    };
}
export interface PreparedData_EthCallResultsEntry {
    key: string;
    value: string;
}
export interface RecordMetaData {
    address: string;
    contractName: string;
    blockNumber: bigint;
    transactionHash: string;
    chainId: string;
    transactionIndex: number;
    logIndex: number;
    name: string;
    labels: {
        [key: string]: string;
    };
}
export interface RecordMetaData_LabelsEntry {
    key: string;
    value: string;
}
export interface MetricValue {
    bigDecimal?: string | undefined;
    doubleValue?: number | undefined;
    bigInteger?: BigInteger | undefined;
}
export interface RuntimeInfo {
    from: HandlerType;
}
export interface GaugeResult {
    metadata: RecordMetaData | undefined;
    metricValue: MetricValue | undefined;
    runtimeInfo: RuntimeInfo | undefined;
}
export interface CounterResult {
    metadata: RecordMetaData | undefined;
    metricValue: MetricValue | undefined;
    add: boolean;
    runtimeInfo: RuntimeInfo | undefined;
}
export interface EventTrackingResult {
    metadata: RecordMetaData | undefined;
    distinctEntityId: string;
    attributes: {
        [key: string]: any;
    } | undefined;
    severity: LogLevel;
    message: string;
    runtimeInfo: RuntimeInfo | undefined;
    noMetric: boolean;
}
export interface ExportResult {
    metadata: RecordMetaData | undefined;
    payload: string;
    runtimeInfo: RuntimeInfo | undefined;
}
export declare const ProjectConfig: {
    encode(message: ProjectConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectConfig;
    fromJSON(object: any): ProjectConfig;
    toJSON(message: ProjectConfig): unknown;
    create(base?: DeepPartial<ProjectConfig>): ProjectConfig;
    fromPartial(object: DeepPartial<ProjectConfig>): ProjectConfig;
};
export declare const ExecutionConfig: {
    encode(message: ExecutionConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExecutionConfig;
    fromJSON(object: any): ExecutionConfig;
    toJSON(message: ExecutionConfig): unknown;
    create(base?: DeepPartial<ExecutionConfig>): ExecutionConfig;
    fromPartial(object: DeepPartial<ExecutionConfig>): ExecutionConfig;
};
export declare const ProcessConfigRequest: {
    encode(_: ProcessConfigRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcessConfigRequest;
    fromJSON(_: any): ProcessConfigRequest;
    toJSON(_: ProcessConfigRequest): unknown;
    create(base?: DeepPartial<ProcessConfigRequest>): ProcessConfigRequest;
    fromPartial(_: DeepPartial<ProcessConfigRequest>): ProcessConfigRequest;
};
export declare const ProcessConfigResponse: {
    encode(message: ProcessConfigResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcessConfigResponse;
    fromJSON(object: any): ProcessConfigResponse;
    toJSON(message: ProcessConfigResponse): unknown;
    create(base?: DeepPartial<ProcessConfigResponse>): ProcessConfigResponse;
    fromPartial(object: DeepPartial<ProcessConfigResponse>): ProcessConfigResponse;
};
export declare const ContractConfig: {
    encode(message: ContractConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractConfig;
    fromJSON(object: any): ContractConfig;
    toJSON(message: ContractConfig): unknown;
    create(base?: DeepPartial<ContractConfig>): ContractConfig;
    fromPartial(object: DeepPartial<ContractConfig>): ContractConfig;
};
export declare const DataBaseSchema: {
    encode(message: DataBaseSchema, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataBaseSchema;
    fromJSON(object: any): DataBaseSchema;
    toJSON(message: DataBaseSchema): unknown;
    create(base?: DeepPartial<DataBaseSchema>): DataBaseSchema;
    fromPartial(object: DeepPartial<DataBaseSchema>): DataBaseSchema;
};
export declare const TotalPerEntityAggregation: {
    encode(_: TotalPerEntityAggregation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TotalPerEntityAggregation;
    fromJSON(_: any): TotalPerEntityAggregation;
    toJSON(_: TotalPerEntityAggregation): unknown;
    create(base?: DeepPartial<TotalPerEntityAggregation>): TotalPerEntityAggregation;
    fromPartial(_: DeepPartial<TotalPerEntityAggregation>): TotalPerEntityAggregation;
};
export declare const RetentionConfig: {
    encode(message: RetentionConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionConfig;
    fromJSON(object: any): RetentionConfig;
    toJSON(message: RetentionConfig): unknown;
    create(base?: DeepPartial<RetentionConfig>): RetentionConfig;
    fromPartial(object: DeepPartial<RetentionConfig>): RetentionConfig;
};
export declare const EventTrackingConfig: {
    encode(message: EventTrackingConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventTrackingConfig;
    fromJSON(object: any): EventTrackingConfig;
    toJSON(message: EventTrackingConfig): unknown;
    create(base?: DeepPartial<EventTrackingConfig>): EventTrackingConfig;
    fromPartial(object: DeepPartial<EventTrackingConfig>): EventTrackingConfig;
};
export declare const ExportConfig: {
    encode(message: ExportConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExportConfig;
    fromJSON(object: any): ExportConfig;
    toJSON(message: ExportConfig): unknown;
    create(base?: DeepPartial<ExportConfig>): ExportConfig;
    fromPartial(object: DeepPartial<ExportConfig>): ExportConfig;
};
export declare const MetricConfig: {
    encode(message: MetricConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MetricConfig;
    fromJSON(object: any): MetricConfig;
    toJSON(message: MetricConfig): unknown;
    create(base?: DeepPartial<MetricConfig>): MetricConfig;
    fromPartial(object: DeepPartial<MetricConfig>): MetricConfig;
};
export declare const EventLogConfig: {
    encode(message: EventLogConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventLogConfig;
    fromJSON(object: any): EventLogConfig;
    toJSON(message: EventLogConfig): unknown;
    create(base?: DeepPartial<EventLogConfig>): EventLogConfig;
    fromPartial(object: DeepPartial<EventLogConfig>): EventLogConfig;
};
export declare const EventLogConfig_StructFieldType: {
    encode(message: EventLogConfig_StructFieldType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventLogConfig_StructFieldType;
    fromJSON(object: any): EventLogConfig_StructFieldType;
    toJSON(message: EventLogConfig_StructFieldType): unknown;
    create(base?: DeepPartial<EventLogConfig_StructFieldType>): EventLogConfig_StructFieldType;
    fromPartial(object: DeepPartial<EventLogConfig_StructFieldType>): EventLogConfig_StructFieldType;
};
export declare const EventLogConfig_Field: {
    encode(message: EventLogConfig_Field, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventLogConfig_Field;
    fromJSON(object: any): EventLogConfig_Field;
    toJSON(message: EventLogConfig_Field): unknown;
    create(base?: DeepPartial<EventLogConfig_Field>): EventLogConfig_Field;
    fromPartial(object: DeepPartial<EventLogConfig_Field>): EventLogConfig_Field;
};
export declare const AggregationConfig: {
    encode(message: AggregationConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AggregationConfig;
    fromJSON(object: any): AggregationConfig;
    toJSON(message: AggregationConfig): unknown;
    create(base?: DeepPartial<AggregationConfig>): AggregationConfig;
    fromPartial(object: DeepPartial<AggregationConfig>): AggregationConfig;
};
export declare const AccountConfig: {
    encode(message: AccountConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountConfig;
    fromJSON(object: any): AccountConfig;
    toJSON(message: AccountConfig): unknown;
    create(base?: DeepPartial<AccountConfig>): AccountConfig;
    fromPartial(object: DeepPartial<AccountConfig>): AccountConfig;
};
export declare const HandleInterval: {
    encode(message: HandleInterval, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HandleInterval;
    fromJSON(object: any): HandleInterval;
    toJSON(message: HandleInterval): unknown;
    create(base?: DeepPartial<HandleInterval>): HandleInterval;
    fromPartial(object: DeepPartial<HandleInterval>): HandleInterval;
};
export declare const OnIntervalConfig: {
    encode(message: OnIntervalConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OnIntervalConfig;
    fromJSON(object: any): OnIntervalConfig;
    toJSON(message: OnIntervalConfig): unknown;
    create(base?: DeepPartial<OnIntervalConfig>): OnIntervalConfig;
    fromPartial(object: DeepPartial<OnIntervalConfig>): OnIntervalConfig;
};
export declare const AptosOnIntervalConfig: {
    encode(message: AptosOnIntervalConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AptosOnIntervalConfig;
    fromJSON(object: any): AptosOnIntervalConfig;
    toJSON(message: AptosOnIntervalConfig): unknown;
    create(base?: DeepPartial<AptosOnIntervalConfig>): AptosOnIntervalConfig;
    fromPartial(object: DeepPartial<AptosOnIntervalConfig>): AptosOnIntervalConfig;
};
export declare const MoveOnIntervalConfig: {
    encode(message: MoveOnIntervalConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveOnIntervalConfig;
    fromJSON(object: any): MoveOnIntervalConfig;
    toJSON(message: MoveOnIntervalConfig): unknown;
    create(base?: DeepPartial<MoveOnIntervalConfig>): MoveOnIntervalConfig;
    fromPartial(object: DeepPartial<MoveOnIntervalConfig>): MoveOnIntervalConfig;
};
export declare const ContractInfo: {
    encode(message: ContractInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractInfo;
    fromJSON(object: any): ContractInfo;
    toJSON(message: ContractInfo): unknown;
    create(base?: DeepPartial<ContractInfo>): ContractInfo;
    fromPartial(object: DeepPartial<ContractInfo>): ContractInfo;
};
export declare const TemplateInstance: {
    encode(message: TemplateInstance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TemplateInstance;
    fromJSON(object: any): TemplateInstance;
    toJSON(message: TemplateInstance): unknown;
    create(base?: DeepPartial<TemplateInstance>): TemplateInstance;
    fromPartial(object: DeepPartial<TemplateInstance>): TemplateInstance;
};
export declare const StartRequest: {
    encode(message: StartRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StartRequest;
    fromJSON(object: any): StartRequest;
    toJSON(message: StartRequest): unknown;
    create(base?: DeepPartial<StartRequest>): StartRequest;
    fromPartial(object: DeepPartial<StartRequest>): StartRequest;
};
export declare const BlockHandlerConfig: {
    encode(message: BlockHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockHandlerConfig;
    fromJSON(object: any): BlockHandlerConfig;
    toJSON(message: BlockHandlerConfig): unknown;
    create(base?: DeepPartial<BlockHandlerConfig>): BlockHandlerConfig;
    fromPartial(object: DeepPartial<BlockHandlerConfig>): BlockHandlerConfig;
};
export declare const EthFetchConfig: {
    encode(message: EthFetchConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EthFetchConfig;
    fromJSON(object: any): EthFetchConfig;
    toJSON(message: EthFetchConfig): unknown;
    create(base?: DeepPartial<EthFetchConfig>): EthFetchConfig;
    fromPartial(object: DeepPartial<EthFetchConfig>): EthFetchConfig;
};
export declare const TraceHandlerConfig: {
    encode(message: TraceHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TraceHandlerConfig;
    fromJSON(object: any): TraceHandlerConfig;
    toJSON(message: TraceHandlerConfig): unknown;
    create(base?: DeepPartial<TraceHandlerConfig>): TraceHandlerConfig;
    fromPartial(object: DeepPartial<TraceHandlerConfig>): TraceHandlerConfig;
};
export declare const TransactionHandlerConfig: {
    encode(message: TransactionHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TransactionHandlerConfig;
    fromJSON(object: any): TransactionHandlerConfig;
    toJSON(message: TransactionHandlerConfig): unknown;
    create(base?: DeepPartial<TransactionHandlerConfig>): TransactionHandlerConfig;
    fromPartial(object: DeepPartial<TransactionHandlerConfig>): TransactionHandlerConfig;
};
export declare const LogHandlerConfig: {
    encode(message: LogHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogHandlerConfig;
    fromJSON(object: any): LogHandlerConfig;
    toJSON(message: LogHandlerConfig): unknown;
    create(base?: DeepPartial<LogHandlerConfig>): LogHandlerConfig;
    fromPartial(object: DeepPartial<LogHandlerConfig>): LogHandlerConfig;
};
export declare const FuelAssetHandlerConfig: {
    encode(message: FuelAssetHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FuelAssetHandlerConfig;
    fromJSON(object: any): FuelAssetHandlerConfig;
    toJSON(message: FuelAssetHandlerConfig): unknown;
    create(base?: DeepPartial<FuelAssetHandlerConfig>): FuelAssetHandlerConfig;
    fromPartial(object: DeepPartial<FuelAssetHandlerConfig>): FuelAssetHandlerConfig;
};
export declare const FuelAssetHandlerConfig_AssetFilter: {
    encode(message: FuelAssetHandlerConfig_AssetFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FuelAssetHandlerConfig_AssetFilter;
    fromJSON(object: any): FuelAssetHandlerConfig_AssetFilter;
    toJSON(message: FuelAssetHandlerConfig_AssetFilter): unknown;
    create(base?: DeepPartial<FuelAssetHandlerConfig_AssetFilter>): FuelAssetHandlerConfig_AssetFilter;
    fromPartial(object: DeepPartial<FuelAssetHandlerConfig_AssetFilter>): FuelAssetHandlerConfig_AssetFilter;
};
export declare const FuelLogHandlerConfig: {
    encode(message: FuelLogHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FuelLogHandlerConfig;
    fromJSON(object: any): FuelLogHandlerConfig;
    toJSON(message: FuelLogHandlerConfig): unknown;
    create(base?: DeepPartial<FuelLogHandlerConfig>): FuelLogHandlerConfig;
    fromPartial(object: DeepPartial<FuelLogHandlerConfig>): FuelLogHandlerConfig;
};
export declare const CosmosLogHandlerConfig: {
    encode(message: CosmosLogHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CosmosLogHandlerConfig;
    fromJSON(object: any): CosmosLogHandlerConfig;
    toJSON(message: CosmosLogHandlerConfig): unknown;
    create(base?: DeepPartial<CosmosLogHandlerConfig>): CosmosLogHandlerConfig;
    fromPartial(object: DeepPartial<CosmosLogHandlerConfig>): CosmosLogHandlerConfig;
};
export declare const LogFilter: {
    encode(message: LogFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogFilter;
    fromJSON(object: any): LogFilter;
    toJSON(message: LogFilter): unknown;
    create(base?: DeepPartial<LogFilter>): LogFilter;
    fromPartial(object: DeepPartial<LogFilter>): LogFilter;
};
export declare const InstructionHandlerConfig: {
    encode(message: InstructionHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InstructionHandlerConfig;
    fromJSON(object: any): InstructionHandlerConfig;
    toJSON(message: InstructionHandlerConfig): unknown;
    create(base?: DeepPartial<InstructionHandlerConfig>): InstructionHandlerConfig;
    fromPartial(object: DeepPartial<InstructionHandlerConfig>): InstructionHandlerConfig;
};
export declare const ResourceConfig: {
    encode(message: ResourceConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResourceConfig;
    fromJSON(object: any): ResourceConfig;
    toJSON(message: ResourceConfig): unknown;
    create(base?: DeepPartial<ResourceConfig>): ResourceConfig;
    fromPartial(object: DeepPartial<ResourceConfig>): ResourceConfig;
};
export declare const MoveFetchConfig: {
    encode(message: MoveFetchConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveFetchConfig;
    fromJSON(object: any): MoveFetchConfig;
    toJSON(message: MoveFetchConfig): unknown;
    create(base?: DeepPartial<MoveFetchConfig>): MoveFetchConfig;
    fromPartial(object: DeepPartial<MoveFetchConfig>): MoveFetchConfig;
};
export declare const MoveAccountFetchConfig: {
    encode(message: MoveAccountFetchConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveAccountFetchConfig;
    fromJSON(object: any): MoveAccountFetchConfig;
    toJSON(message: MoveAccountFetchConfig): unknown;
    create(base?: DeepPartial<MoveAccountFetchConfig>): MoveAccountFetchConfig;
    fromPartial(object: DeepPartial<MoveAccountFetchConfig>): MoveAccountFetchConfig;
};
export declare const MoveEventHandlerConfig: {
    encode(message: MoveEventHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveEventHandlerConfig;
    fromJSON(object: any): MoveEventHandlerConfig;
    toJSON(message: MoveEventHandlerConfig): unknown;
    create(base?: DeepPartial<MoveEventHandlerConfig>): MoveEventHandlerConfig;
    fromPartial(object: DeepPartial<MoveEventHandlerConfig>): MoveEventHandlerConfig;
};
export declare const MoveEventFilter: {
    encode(message: MoveEventFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveEventFilter;
    fromJSON(object: any): MoveEventFilter;
    toJSON(message: MoveEventFilter): unknown;
    create(base?: DeepPartial<MoveEventFilter>): MoveEventFilter;
    fromPartial(object: DeepPartial<MoveEventFilter>): MoveEventFilter;
};
export declare const MoveCallHandlerConfig: {
    encode(message: MoveCallHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveCallHandlerConfig;
    fromJSON(object: any): MoveCallHandlerConfig;
    toJSON(message: MoveCallHandlerConfig): unknown;
    create(base?: DeepPartial<MoveCallHandlerConfig>): MoveCallHandlerConfig;
    fromPartial(object: DeepPartial<MoveCallHandlerConfig>): MoveCallHandlerConfig;
};
export declare const MoveResourceChangeConfig: {
    encode(message: MoveResourceChangeConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveResourceChangeConfig;
    fromJSON(object: any): MoveResourceChangeConfig;
    toJSON(message: MoveResourceChangeConfig): unknown;
    create(base?: DeepPartial<MoveResourceChangeConfig>): MoveResourceChangeConfig;
    fromPartial(object: DeepPartial<MoveResourceChangeConfig>): MoveResourceChangeConfig;
};
export declare const MoveCallFilter: {
    encode(message: MoveCallFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveCallFilter;
    fromJSON(object: any): MoveCallFilter;
    toJSON(message: MoveCallFilter): unknown;
    create(base?: DeepPartial<MoveCallFilter>): MoveCallFilter;
    fromPartial(object: DeepPartial<MoveCallFilter>): MoveCallFilter;
};
export declare const MoveCallFilter_FromAndToAddress: {
    encode(message: MoveCallFilter_FromAndToAddress, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MoveCallFilter_FromAndToAddress;
    fromJSON(object: any): MoveCallFilter_FromAndToAddress;
    toJSON(message: MoveCallFilter_FromAndToAddress): unknown;
    create(base?: DeepPartial<MoveCallFilter_FromAndToAddress>): MoveCallFilter_FromAndToAddress;
    fromPartial(object: DeepPartial<MoveCallFilter_FromAndToAddress>): MoveCallFilter_FromAndToAddress;
};
export declare const StarknetEventHandlerConfig: {
    encode(message: StarknetEventHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StarknetEventHandlerConfig;
    fromJSON(object: any): StarknetEventHandlerConfig;
    toJSON(message: StarknetEventHandlerConfig): unknown;
    create(base?: DeepPartial<StarknetEventHandlerConfig>): StarknetEventHandlerConfig;
    fromPartial(object: DeepPartial<StarknetEventHandlerConfig>): StarknetEventHandlerConfig;
};
export declare const BTCTransactionHandlerConfig: {
    encode(message: BTCTransactionHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionHandlerConfig;
    fromJSON(object: any): BTCTransactionHandlerConfig;
    toJSON(message: BTCTransactionHandlerConfig): unknown;
    create(base?: DeepPartial<BTCTransactionHandlerConfig>): BTCTransactionHandlerConfig;
    fromPartial(object: DeepPartial<BTCTransactionHandlerConfig>): BTCTransactionHandlerConfig;
};
export declare const BTCTransactionFilter: {
    encode(message: BTCTransactionFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionFilter;
    fromJSON(object: any): BTCTransactionFilter;
    toJSON(message: BTCTransactionFilter): unknown;
    create(base?: DeepPartial<BTCTransactionFilter>): BTCTransactionFilter;
    fromPartial(object: DeepPartial<BTCTransactionFilter>): BTCTransactionFilter;
};
export declare const BTCTransactionFilter_Condition: {
    encode(message: BTCTransactionFilter_Condition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionFilter_Condition;
    fromJSON(object: any): BTCTransactionFilter_Condition;
    toJSON(message: BTCTransactionFilter_Condition): unknown;
    create(base?: DeepPartial<BTCTransactionFilter_Condition>): BTCTransactionFilter_Condition;
    fromPartial(object: DeepPartial<BTCTransactionFilter_Condition>): BTCTransactionFilter_Condition;
};
export declare const BTCTransactionFilter_Filter: {
    encode(message: BTCTransactionFilter_Filter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionFilter_Filter;
    fromJSON(object: any): BTCTransactionFilter_Filter;
    toJSON(message: BTCTransactionFilter_Filter): unknown;
    create(base?: DeepPartial<BTCTransactionFilter_Filter>): BTCTransactionFilter_Filter;
    fromPartial(object: DeepPartial<BTCTransactionFilter_Filter>): BTCTransactionFilter_Filter;
};
export declare const BTCTransactionFilter_Filter_ConditionsEntry: {
    encode(message: BTCTransactionFilter_Filter_ConditionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionFilter_Filter_ConditionsEntry;
    fromJSON(object: any): BTCTransactionFilter_Filter_ConditionsEntry;
    toJSON(message: BTCTransactionFilter_Filter_ConditionsEntry): unknown;
    create(base?: DeepPartial<BTCTransactionFilter_Filter_ConditionsEntry>): BTCTransactionFilter_Filter_ConditionsEntry;
    fromPartial(object: DeepPartial<BTCTransactionFilter_Filter_ConditionsEntry>): BTCTransactionFilter_Filter_ConditionsEntry;
};
export declare const BTCTransactionFilter_Filters: {
    encode(message: BTCTransactionFilter_Filters, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionFilter_Filters;
    fromJSON(object: any): BTCTransactionFilter_Filters;
    toJSON(message: BTCTransactionFilter_Filters): unknown;
    create(base?: DeepPartial<BTCTransactionFilter_Filters>): BTCTransactionFilter_Filters;
    fromPartial(object: DeepPartial<BTCTransactionFilter_Filters>): BTCTransactionFilter_Filters;
};
export declare const BTCTransactionFilter_VinFilter: {
    encode(message: BTCTransactionFilter_VinFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionFilter_VinFilter;
    fromJSON(object: any): BTCTransactionFilter_VinFilter;
    toJSON(message: BTCTransactionFilter_VinFilter): unknown;
    create(base?: DeepPartial<BTCTransactionFilter_VinFilter>): BTCTransactionFilter_VinFilter;
    fromPartial(object: DeepPartial<BTCTransactionFilter_VinFilter>): BTCTransactionFilter_VinFilter;
};
export declare const BTCTransactionFilter_VOutFilter: {
    encode(message: BTCTransactionFilter_VOutFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BTCTransactionFilter_VOutFilter;
    fromJSON(object: any): BTCTransactionFilter_VOutFilter;
    toJSON(message: BTCTransactionFilter_VOutFilter): unknown;
    create(base?: DeepPartial<BTCTransactionFilter_VOutFilter>): BTCTransactionFilter_VOutFilter;
    fromPartial(object: DeepPartial<BTCTransactionFilter_VOutFilter>): BTCTransactionFilter_VOutFilter;
};
export declare const StarknetEventFilter: {
    encode(message: StarknetEventFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StarknetEventFilter;
    fromJSON(object: any): StarknetEventFilter;
    toJSON(message: StarknetEventFilter): unknown;
    create(base?: DeepPartial<StarknetEventFilter>): StarknetEventFilter;
    fromPartial(object: DeepPartial<StarknetEventFilter>): StarknetEventFilter;
};
export declare const FuelCallFilter: {
    encode(message: FuelCallFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FuelCallFilter;
    fromJSON(object: any): FuelCallFilter;
    toJSON(message: FuelCallFilter): unknown;
    create(base?: DeepPartial<FuelCallFilter>): FuelCallFilter;
    fromPartial(object: DeepPartial<FuelCallFilter>): FuelCallFilter;
};
export declare const FuelCallHandlerConfig: {
    encode(message: FuelCallHandlerConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FuelCallHandlerConfig;
    fromJSON(object: any): FuelCallHandlerConfig;
    toJSON(message: FuelCallHandlerConfig): unknown;
    create(base?: DeepPartial<FuelCallHandlerConfig>): FuelCallHandlerConfig;
    fromPartial(object: DeepPartial<FuelCallHandlerConfig>): FuelCallHandlerConfig;
};
export declare const Topic: {
    encode(message: Topic, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Topic;
    fromJSON(object: any): Topic;
    toJSON(message: Topic): unknown;
    create(base?: DeepPartial<Topic>): Topic;
    fromPartial(object: DeepPartial<Topic>): Topic;
};
export declare const ProcessBindingsRequest: {
    encode(message: ProcessBindingsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcessBindingsRequest;
    fromJSON(object: any): ProcessBindingsRequest;
    toJSON(message: ProcessBindingsRequest): unknown;
    create(base?: DeepPartial<ProcessBindingsRequest>): ProcessBindingsRequest;
    fromPartial(object: DeepPartial<ProcessBindingsRequest>): ProcessBindingsRequest;
};
export declare const ProcessBindingResponse: {
    encode(message: ProcessBindingResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcessBindingResponse;
    fromJSON(object: any): ProcessBindingResponse;
    toJSON(message: ProcessBindingResponse): unknown;
    create(base?: DeepPartial<ProcessBindingResponse>): ProcessBindingResponse;
    fromPartial(object: DeepPartial<ProcessBindingResponse>): ProcessBindingResponse;
};
export declare const ProcessStreamRequest: {
    encode(message: ProcessStreamRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcessStreamRequest;
    fromJSON(object: any): ProcessStreamRequest;
    toJSON(message: ProcessStreamRequest): unknown;
    create(base?: DeepPartial<ProcessStreamRequest>): ProcessStreamRequest;
    fromPartial(object: DeepPartial<ProcessStreamRequest>): ProcessStreamRequest;
};
export declare const ProcessStreamResponse: {
    encode(message: ProcessStreamResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcessStreamResponse;
    fromJSON(object: any): ProcessStreamResponse;
    toJSON(message: ProcessStreamResponse): unknown;
    create(base?: DeepPartial<ProcessStreamResponse>): ProcessStreamResponse;
    fromPartial(object: DeepPartial<ProcessStreamResponse>): ProcessStreamResponse;
};
export declare const PreprocessStreamRequest: {
    encode(message: PreprocessStreamRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PreprocessStreamRequest;
    fromJSON(object: any): PreprocessStreamRequest;
    toJSON(message: PreprocessStreamRequest): unknown;
    create(base?: DeepPartial<PreprocessStreamRequest>): PreprocessStreamRequest;
    fromPartial(object: DeepPartial<PreprocessStreamRequest>): PreprocessStreamRequest;
};
export declare const PreprocessStreamRequest_DataBindings: {
    encode(message: PreprocessStreamRequest_DataBindings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PreprocessStreamRequest_DataBindings;
    fromJSON(object: any): PreprocessStreamRequest_DataBindings;
    toJSON(message: PreprocessStreamRequest_DataBindings): unknown;
    create(base?: DeepPartial<PreprocessStreamRequest_DataBindings>): PreprocessStreamRequest_DataBindings;
    fromPartial(object: DeepPartial<PreprocessStreamRequest_DataBindings>): PreprocessStreamRequest_DataBindings;
};
export declare const PreprocessStreamResponse: {
    encode(message: PreprocessStreamResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PreprocessStreamResponse;
    fromJSON(object: any): PreprocessStreamResponse;
    toJSON(message: PreprocessStreamResponse): unknown;
    create(base?: DeepPartial<PreprocessStreamResponse>): PreprocessStreamResponse;
    fromPartial(object: DeepPartial<PreprocessStreamResponse>): PreprocessStreamResponse;
};
export declare const DBResponse: {
    encode(message: DBResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DBResponse;
    fromJSON(object: any): DBResponse;
    toJSON(message: DBResponse): unknown;
    create(base?: DeepPartial<DBResponse>): DBResponse;
    fromPartial(object: DeepPartial<DBResponse>): DBResponse;
};
export declare const Entity: {
    encode(message: Entity, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Entity;
    fromJSON(object: any): Entity;
    toJSON(message: Entity): unknown;
    create(base?: DeepPartial<Entity>): Entity;
    fromPartial(object: DeepPartial<Entity>): Entity;
};
export declare const EntityList: {
    encode(message: EntityList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EntityList;
    fromJSON(object: any): EntityList;
    toJSON(message: EntityList): unknown;
    create(base?: DeepPartial<EntityList>): EntityList;
    fromPartial(object: DeepPartial<EntityList>): EntityList;
};
export declare const DBRequest: {
    encode(message: DBRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DBRequest;
    fromJSON(object: any): DBRequest;
    toJSON(message: DBRequest): unknown;
    create(base?: DeepPartial<DBRequest>): DBRequest;
    fromPartial(object: DeepPartial<DBRequest>): DBRequest;
};
export declare const DBRequest_DBGet: {
    encode(message: DBRequest_DBGet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DBRequest_DBGet;
    fromJSON(object: any): DBRequest_DBGet;
    toJSON(message: DBRequest_DBGet): unknown;
    create(base?: DeepPartial<DBRequest_DBGet>): DBRequest_DBGet;
    fromPartial(object: DeepPartial<DBRequest_DBGet>): DBRequest_DBGet;
};
export declare const DBRequest_DBList: {
    encode(message: DBRequest_DBList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DBRequest_DBList;
    fromJSON(object: any): DBRequest_DBList;
    toJSON(message: DBRequest_DBList): unknown;
    create(base?: DeepPartial<DBRequest_DBList>): DBRequest_DBList;
    fromPartial(object: DeepPartial<DBRequest_DBList>): DBRequest_DBList;
};
export declare const DBRequest_DBUpsert: {
    encode(message: DBRequest_DBUpsert, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DBRequest_DBUpsert;
    fromJSON(object: any): DBRequest_DBUpsert;
    toJSON(message: DBRequest_DBUpsert): unknown;
    create(base?: DeepPartial<DBRequest_DBUpsert>): DBRequest_DBUpsert;
    fromPartial(object: DeepPartial<DBRequest_DBUpsert>): DBRequest_DBUpsert;
};
export declare const DBRequest_DBDelete: {
    encode(message: DBRequest_DBDelete, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DBRequest_DBDelete;
    fromJSON(object: any): DBRequest_DBDelete;
    toJSON(message: DBRequest_DBDelete): unknown;
    create(base?: DeepPartial<DBRequest_DBDelete>): DBRequest_DBDelete;
    fromPartial(object: DeepPartial<DBRequest_DBDelete>): DBRequest_DBDelete;
};
export declare const DBRequest_DBFilter: {
    encode(message: DBRequest_DBFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DBRequest_DBFilter;
    fromJSON(object: any): DBRequest_DBFilter;
    toJSON(message: DBRequest_DBFilter): unknown;
    create(base?: DeepPartial<DBRequest_DBFilter>): DBRequest_DBFilter;
    fromPartial(object: DeepPartial<DBRequest_DBFilter>): DBRequest_DBFilter;
};
export declare const Data: {
    encode(message: Data, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data;
    fromJSON(object: any): Data;
    toJSON(message: Data): unknown;
    create(base?: DeepPartial<Data>): Data;
    fromPartial(object: DeepPartial<Data>): Data;
};
export declare const Data_EthLog: {
    encode(message: Data_EthLog, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_EthLog;
    fromJSON(object: any): Data_EthLog;
    toJSON(message: Data_EthLog): unknown;
    create(base?: DeepPartial<Data_EthLog>): Data_EthLog;
    fromPartial(object: DeepPartial<Data_EthLog>): Data_EthLog;
};
export declare const Data_EthBlock: {
    encode(message: Data_EthBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_EthBlock;
    fromJSON(object: any): Data_EthBlock;
    toJSON(message: Data_EthBlock): unknown;
    create(base?: DeepPartial<Data_EthBlock>): Data_EthBlock;
    fromPartial(object: DeepPartial<Data_EthBlock>): Data_EthBlock;
};
export declare const Data_EthTransaction: {
    encode(message: Data_EthTransaction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_EthTransaction;
    fromJSON(object: any): Data_EthTransaction;
    toJSON(message: Data_EthTransaction): unknown;
    create(base?: DeepPartial<Data_EthTransaction>): Data_EthTransaction;
    fromPartial(object: DeepPartial<Data_EthTransaction>): Data_EthTransaction;
};
export declare const Data_EthTrace: {
    encode(message: Data_EthTrace, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_EthTrace;
    fromJSON(object: any): Data_EthTrace;
    toJSON(message: Data_EthTrace): unknown;
    create(base?: DeepPartial<Data_EthTrace>): Data_EthTrace;
    fromPartial(object: DeepPartial<Data_EthTrace>): Data_EthTrace;
};
export declare const Data_SolInstruction: {
    encode(message: Data_SolInstruction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_SolInstruction;
    fromJSON(object: any): Data_SolInstruction;
    toJSON(message: Data_SolInstruction): unknown;
    create(base?: DeepPartial<Data_SolInstruction>): Data_SolInstruction;
    fromPartial(object: DeepPartial<Data_SolInstruction>): Data_SolInstruction;
};
export declare const Data_AptEvent: {
    encode(message: Data_AptEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_AptEvent;
    fromJSON(object: any): Data_AptEvent;
    toJSON(message: Data_AptEvent): unknown;
    create(base?: DeepPartial<Data_AptEvent>): Data_AptEvent;
    fromPartial(object: DeepPartial<Data_AptEvent>): Data_AptEvent;
};
export declare const Data_AptCall: {
    encode(message: Data_AptCall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_AptCall;
    fromJSON(object: any): Data_AptCall;
    toJSON(message: Data_AptCall): unknown;
    create(base?: DeepPartial<Data_AptCall>): Data_AptCall;
    fromPartial(object: DeepPartial<Data_AptCall>): Data_AptCall;
};
export declare const Data_AptResource: {
    encode(message: Data_AptResource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_AptResource;
    fromJSON(object: any): Data_AptResource;
    toJSON(message: Data_AptResource): unknown;
    create(base?: DeepPartial<Data_AptResource>): Data_AptResource;
    fromPartial(object: DeepPartial<Data_AptResource>): Data_AptResource;
};
export declare const Data_SuiEvent: {
    encode(message: Data_SuiEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_SuiEvent;
    fromJSON(object: any): Data_SuiEvent;
    toJSON(message: Data_SuiEvent): unknown;
    create(base?: DeepPartial<Data_SuiEvent>): Data_SuiEvent;
    fromPartial(object: DeepPartial<Data_SuiEvent>): Data_SuiEvent;
};
export declare const Data_SuiCall: {
    encode(message: Data_SuiCall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_SuiCall;
    fromJSON(object: any): Data_SuiCall;
    toJSON(message: Data_SuiCall): unknown;
    create(base?: DeepPartial<Data_SuiCall>): Data_SuiCall;
    fromPartial(object: DeepPartial<Data_SuiCall>): Data_SuiCall;
};
export declare const Data_SuiObject: {
    encode(message: Data_SuiObject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_SuiObject;
    fromJSON(object: any): Data_SuiObject;
    toJSON(message: Data_SuiObject): unknown;
    create(base?: DeepPartial<Data_SuiObject>): Data_SuiObject;
    fromPartial(object: DeepPartial<Data_SuiObject>): Data_SuiObject;
};
export declare const Data_SuiObjectChange: {
    encode(message: Data_SuiObjectChange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_SuiObjectChange;
    fromJSON(object: any): Data_SuiObjectChange;
    toJSON(message: Data_SuiObjectChange): unknown;
    create(base?: DeepPartial<Data_SuiObjectChange>): Data_SuiObjectChange;
    fromPartial(object: DeepPartial<Data_SuiObjectChange>): Data_SuiObjectChange;
};
export declare const Data_FuelCall: {
    encode(message: Data_FuelCall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_FuelCall;
    fromJSON(object: any): Data_FuelCall;
    toJSON(message: Data_FuelCall): unknown;
    create(base?: DeepPartial<Data_FuelCall>): Data_FuelCall;
    fromPartial(object: DeepPartial<Data_FuelCall>): Data_FuelCall;
};
export declare const Data_FuelBlock: {
    encode(message: Data_FuelBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_FuelBlock;
    fromJSON(object: any): Data_FuelBlock;
    toJSON(message: Data_FuelBlock): unknown;
    create(base?: DeepPartial<Data_FuelBlock>): Data_FuelBlock;
    fromPartial(object: DeepPartial<Data_FuelBlock>): Data_FuelBlock;
};
export declare const Data_CosmosCall: {
    encode(message: Data_CosmosCall, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_CosmosCall;
    fromJSON(object: any): Data_CosmosCall;
    toJSON(message: Data_CosmosCall): unknown;
    create(base?: DeepPartial<Data_CosmosCall>): Data_CosmosCall;
    fromPartial(object: DeepPartial<Data_CosmosCall>): Data_CosmosCall;
};
export declare const Data_StarknetEvent: {
    encode(message: Data_StarknetEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_StarknetEvent;
    fromJSON(object: any): Data_StarknetEvent;
    toJSON(message: Data_StarknetEvent): unknown;
    create(base?: DeepPartial<Data_StarknetEvent>): Data_StarknetEvent;
    fromPartial(object: DeepPartial<Data_StarknetEvent>): Data_StarknetEvent;
};
export declare const Data_BTCTransaction: {
    encode(message: Data_BTCTransaction, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_BTCTransaction;
    fromJSON(object: any): Data_BTCTransaction;
    toJSON(message: Data_BTCTransaction): unknown;
    create(base?: DeepPartial<Data_BTCTransaction>): Data_BTCTransaction;
    fromPartial(object: DeepPartial<Data_BTCTransaction>): Data_BTCTransaction;
};
export declare const Data_BTCBlock: {
    encode(message: Data_BTCBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Data_BTCBlock;
    fromJSON(object: any): Data_BTCBlock;
    toJSON(message: Data_BTCBlock): unknown;
    create(base?: DeepPartial<Data_BTCBlock>): Data_BTCBlock;
    fromPartial(object: DeepPartial<Data_BTCBlock>): Data_BTCBlock;
};
export declare const DataBinding: {
    encode(message: DataBinding, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DataBinding;
    fromJSON(object: any): DataBinding;
    toJSON(message: DataBinding): unknown;
    create(base?: DeepPartial<DataBinding>): DataBinding;
    fromPartial(object: DeepPartial<DataBinding>): DataBinding;
};
export declare const StateResult: {
    encode(message: StateResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StateResult;
    fromJSON(object: any): StateResult;
    toJSON(message: StateResult): unknown;
    create(base?: DeepPartial<StateResult>): StateResult;
    fromPartial(object: DeepPartial<StateResult>): StateResult;
};
export declare const ProcessResult: {
    encode(message: ProcessResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcessResult;
    fromJSON(object: any): ProcessResult;
    toJSON(message: ProcessResult): unknown;
    create(base?: DeepPartial<ProcessResult>): ProcessResult;
    fromPartial(object: DeepPartial<ProcessResult>): ProcessResult;
};
export declare const EthCallParam: {
    encode(message: EthCallParam, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EthCallParam;
    fromJSON(object: any): EthCallParam;
    toJSON(message: EthCallParam): unknown;
    create(base?: DeepPartial<EthCallParam>): EthCallParam;
    fromPartial(object: DeepPartial<EthCallParam>): EthCallParam;
};
export declare const EthCallContext: {
    encode(message: EthCallContext, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EthCallContext;
    fromJSON(object: any): EthCallContext;
    toJSON(message: EthCallContext): unknown;
    create(base?: DeepPartial<EthCallContext>): EthCallContext;
    fromPartial(object: DeepPartial<EthCallContext>): EthCallContext;
};
export declare const PreprocessResult: {
    encode(message: PreprocessResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PreprocessResult;
    fromJSON(object: any): PreprocessResult;
    toJSON(message: PreprocessResult): unknown;
    create(base?: DeepPartial<PreprocessResult>): PreprocessResult;
    fromPartial(object: DeepPartial<PreprocessResult>): PreprocessResult;
};
export declare const PreparedData: {
    encode(message: PreparedData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PreparedData;
    fromJSON(object: any): PreparedData;
    toJSON(message: PreparedData): unknown;
    create(base?: DeepPartial<PreparedData>): PreparedData;
    fromPartial(object: DeepPartial<PreparedData>): PreparedData;
};
export declare const PreparedData_EthCallResultsEntry: {
    encode(message: PreparedData_EthCallResultsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PreparedData_EthCallResultsEntry;
    fromJSON(object: any): PreparedData_EthCallResultsEntry;
    toJSON(message: PreparedData_EthCallResultsEntry): unknown;
    create(base?: DeepPartial<PreparedData_EthCallResultsEntry>): PreparedData_EthCallResultsEntry;
    fromPartial(object: DeepPartial<PreparedData_EthCallResultsEntry>): PreparedData_EthCallResultsEntry;
};
export declare const RecordMetaData: {
    encode(message: RecordMetaData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RecordMetaData;
    fromJSON(object: any): RecordMetaData;
    toJSON(message: RecordMetaData): unknown;
    create(base?: DeepPartial<RecordMetaData>): RecordMetaData;
    fromPartial(object: DeepPartial<RecordMetaData>): RecordMetaData;
};
export declare const RecordMetaData_LabelsEntry: {
    encode(message: RecordMetaData_LabelsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RecordMetaData_LabelsEntry;
    fromJSON(object: any): RecordMetaData_LabelsEntry;
    toJSON(message: RecordMetaData_LabelsEntry): unknown;
    create(base?: DeepPartial<RecordMetaData_LabelsEntry>): RecordMetaData_LabelsEntry;
    fromPartial(object: DeepPartial<RecordMetaData_LabelsEntry>): RecordMetaData_LabelsEntry;
};
export declare const MetricValue: {
    encode(message: MetricValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MetricValue;
    fromJSON(object: any): MetricValue;
    toJSON(message: MetricValue): unknown;
    create(base?: DeepPartial<MetricValue>): MetricValue;
    fromPartial(object: DeepPartial<MetricValue>): MetricValue;
};
export declare const RuntimeInfo: {
    encode(message: RuntimeInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RuntimeInfo;
    fromJSON(object: any): RuntimeInfo;
    toJSON(message: RuntimeInfo): unknown;
    create(base?: DeepPartial<RuntimeInfo>): RuntimeInfo;
    fromPartial(object: DeepPartial<RuntimeInfo>): RuntimeInfo;
};
export declare const GaugeResult: {
    encode(message: GaugeResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GaugeResult;
    fromJSON(object: any): GaugeResult;
    toJSON(message: GaugeResult): unknown;
    create(base?: DeepPartial<GaugeResult>): GaugeResult;
    fromPartial(object: DeepPartial<GaugeResult>): GaugeResult;
};
export declare const CounterResult: {
    encode(message: CounterResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CounterResult;
    fromJSON(object: any): CounterResult;
    toJSON(message: CounterResult): unknown;
    create(base?: DeepPartial<CounterResult>): CounterResult;
    fromPartial(object: DeepPartial<CounterResult>): CounterResult;
};
export declare const EventTrackingResult: {
    encode(message: EventTrackingResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventTrackingResult;
    fromJSON(object: any): EventTrackingResult;
    toJSON(message: EventTrackingResult): unknown;
    create(base?: DeepPartial<EventTrackingResult>): EventTrackingResult;
    fromPartial(object: DeepPartial<EventTrackingResult>): EventTrackingResult;
};
export declare const ExportResult: {
    encode(message: ExportResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExportResult;
    fromJSON(object: any): ExportResult;
    toJSON(message: ExportResult): unknown;
    create(base?: DeepPartial<ExportResult>): ExportResult;
    fromPartial(object: DeepPartial<ExportResult>): ExportResult;
};
export type ProcessorDefinition = typeof ProcessorDefinition;
export declare const ProcessorDefinition: {
    readonly name: "Processor";
    readonly fullName: "processor.Processor";
    readonly methods: {
        readonly start: {
            readonly name: "Start";
            readonly requestType: {
                encode(message: StartRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): StartRequest;
                fromJSON(object: any): StartRequest;
                toJSON(message: StartRequest): unknown;
                create(base?: DeepPartial<StartRequest>): StartRequest;
                fromPartial(object: DeepPartial<StartRequest>): StartRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly stop: {
            readonly name: "Stop";
            readonly requestType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly getConfig: {
            readonly name: "GetConfig";
            readonly requestType: {
                encode(_: ProcessConfigRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProcessConfigRequest;
                fromJSON(_: any): ProcessConfigRequest;
                toJSON(_: ProcessConfigRequest): unknown;
                create(base?: DeepPartial<ProcessConfigRequest>): ProcessConfigRequest;
                fromPartial(_: DeepPartial<ProcessConfigRequest>): ProcessConfigRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ProcessConfigResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProcessConfigResponse;
                fromJSON(object: any): ProcessConfigResponse;
                toJSON(message: ProcessConfigResponse): unknown;
                create(base?: DeepPartial<ProcessConfigResponse>): ProcessConfigResponse;
                fromPartial(object: DeepPartial<ProcessConfigResponse>): ProcessConfigResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly processBindings: {
            readonly name: "ProcessBindings";
            readonly requestType: {
                encode(message: ProcessBindingsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProcessBindingsRequest;
                fromJSON(object: any): ProcessBindingsRequest;
                toJSON(message: ProcessBindingsRequest): unknown;
                create(base?: DeepPartial<ProcessBindingsRequest>): ProcessBindingsRequest;
                fromPartial(object: DeepPartial<ProcessBindingsRequest>): ProcessBindingsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ProcessBindingResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProcessBindingResponse;
                fromJSON(object: any): ProcessBindingResponse;
                toJSON(message: ProcessBindingResponse): unknown;
                create(base?: DeepPartial<ProcessBindingResponse>): ProcessBindingResponse;
                fromPartial(object: DeepPartial<ProcessBindingResponse>): ProcessBindingResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly processBindingsStream: {
            readonly name: "ProcessBindingsStream";
            readonly requestType: {
                encode(message: ProcessStreamRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProcessStreamRequest;
                fromJSON(object: any): ProcessStreamRequest;
                toJSON(message: ProcessStreamRequest): unknown;
                create(base?: DeepPartial<ProcessStreamRequest>): ProcessStreamRequest;
                fromPartial(object: DeepPartial<ProcessStreamRequest>): ProcessStreamRequest;
            };
            readonly requestStream: true;
            readonly responseType: {
                encode(message: ProcessStreamResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ProcessStreamResponse;
                fromJSON(object: any): ProcessStreamResponse;
                toJSON(message: ProcessStreamResponse): unknown;
                create(base?: DeepPartial<ProcessStreamResponse>): ProcessStreamResponse;
                fromPartial(object: DeepPartial<ProcessStreamResponse>): ProcessStreamResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        readonly preprocessBindingsStream: {
            readonly name: "PreprocessBindingsStream";
            readonly requestType: {
                encode(message: PreprocessStreamRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PreprocessStreamRequest;
                fromJSON(object: any): PreprocessStreamRequest;
                toJSON(message: PreprocessStreamRequest): unknown;
                create(base?: DeepPartial<PreprocessStreamRequest>): PreprocessStreamRequest;
                fromPartial(object: DeepPartial<PreprocessStreamRequest>): PreprocessStreamRequest;
            };
            readonly requestStream: true;
            readonly responseType: {
                encode(message: PreprocessStreamResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): PreprocessStreamResponse;
                fromJSON(object: any): PreprocessStreamResponse;
                toJSON(message: PreprocessStreamResponse): unknown;
                create(base?: DeepPartial<PreprocessStreamResponse>): PreprocessStreamResponse;
                fromPartial(object: DeepPartial<PreprocessStreamResponse>): PreprocessStreamResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
    };
};
export interface ProcessorServiceImplementation<CallContextExt = {}> {
    start(request: StartRequest, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    stop(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<Empty>>;
    getConfig(request: ProcessConfigRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ProcessConfigResponse>>;
    processBindings(request: ProcessBindingsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ProcessBindingResponse>>;
    processBindingsStream(request: AsyncIterable<ProcessStreamRequest>, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<ProcessStreamResponse>>;
    preprocessBindingsStream(request: AsyncIterable<PreprocessStreamRequest>, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<PreprocessStreamResponse>>;
}
export interface ProcessorClient<CallOptionsExt = {}> {
    start(request: DeepPartial<StartRequest>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    stop(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<Empty>;
    getConfig(request: DeepPartial<ProcessConfigRequest>, options?: CallOptions & CallOptionsExt): Promise<ProcessConfigResponse>;
    processBindings(request: DeepPartial<ProcessBindingsRequest>, options?: CallOptions & CallOptionsExt): Promise<ProcessBindingResponse>;
    processBindingsStream(request: AsyncIterable<DeepPartial<ProcessStreamRequest>>, options?: CallOptions & CallOptionsExt): AsyncIterable<ProcessStreamResponse>;
    preprocessBindingsStream(request: AsyncIterable<DeepPartial<PreprocessStreamRequest>>, options?: CallOptions & CallOptionsExt): AsyncIterable<PreprocessStreamResponse>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export type ServerStreamingMethodResult<Response> = {
    [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};
export {};
//# sourceMappingURL=processor.d.ts.map