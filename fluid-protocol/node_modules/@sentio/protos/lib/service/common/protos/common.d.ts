import _m0 from "protobufjs/minimal.js";
export declare enum Tier {
    FREE = 0,
    DEV = 1,
    PRO = 2,
    ENTERPRISE = 3,
    ANONYMOUS = 16,
    UNRECOGNIZED = -1
}
export declare function tierFromJSON(object: any): Tier;
export declare function tierToJSON(object: Tier): string;
export declare enum OrganizationRole {
    ORG_MEMBER = 0,
    ORG_ADMIN = 1,
    UNRECOGNIZED = -1
}
export declare function organizationRoleFromJSON(object: any): OrganizationRole;
export declare function organizationRoleToJSON(object: OrganizationRole): string;
export declare enum JoinOperator {
    AND = 0,
    OR = 1,
    THEN = 2,
    UNRECOGNIZED = -1
}
export declare function joinOperatorFromJSON(object: any): JoinOperator;
export declare function joinOperatorToJSON(object: JoinOperator): string;
export declare enum Permission {
    READ = 0,
    WRITE = 1,
    ADMIN = 2,
    UNRECOGNIZED = -1
}
export declare function permissionFromJSON(object: any): Permission;
export declare function permissionToJSON(object: Permission): string;
export declare enum NotificationType {
    GENERAL = 0,
    PROCESSOR_UPLOAD_FAILED = 101,
    PROCESSOR_UPLOAD_SUCCESS = 102,
    PROCESSOR_OBSOLETED = 103,
    PROCESSOR_STOPPED = 104,
    PROCESSOR_ACTIVATED = 105,
    PROCESSOR_GENERAL = 106,
    PROCESSOR_ERROR = 107,
    EXPORT_TASK_FAILED = 201,
    EXPORT_TASK_SUCCESS = 202,
    BILLING_INVOICE = 301,
    BILLING_PAYMENT = 302,
    BILLING_SUBSCRIPTION = 303,
    UNRECOGNIZED = -1
}
export declare function notificationTypeFromJSON(object: any): NotificationType;
export declare function notificationTypeToJSON(object: NotificationType): string;
export interface UsageTracker {
    apiSku: string;
    webuiSku: string;
    projectIdField: string;
    projectSlugField: string;
    projectOwnerField: string;
    versionField: string;
}
export interface AccessMeta {
    projectIdField: string;
    projectSlugField: string;
    ownerIdField: string;
    ownerNameField: string;
    processorIdField: string;
    processorVersionField: string;
}
export interface User {
    id: string;
    email: string;
    emailVerified: boolean;
    lastName: string;
    firstName: string;
    locale: string;
    nickname: string;
    picture: string;
    sub: string;
    updatedAt: bigint;
    createdAt: bigint;
    username: string;
    accountStatus: User_AccountStatus;
    tier: Tier;
}
export declare enum User_AccountStatus {
    PENDING = 0,
    SET_USERNAME = 1,
    BANNED = 9,
    ACTIVE = 10,
    UNRECOGNIZED = -1
}
export declare function user_AccountStatusFromJSON(object: any): User_AccountStatus;
export declare function user_AccountStatusToJSON(object: User_AccountStatus): string;
export interface UserInfo {
    id: string;
    lastName: string;
    firstName: string;
    nickname: string;
    picture: string;
    username: string;
}
export interface Owner {
    user?: User | undefined;
    organization?: Organization | undefined;
    tier: Tier;
}
export interface Project {
    id: string;
    displayName: string;
    description: string;
    createdAt: bigint;
    updatedAt: bigint;
    slug: string;
    ownerId: string;
    owner: Owner | undefined;
    visibility: Project_Visibility;
    type: Project_Type;
    members: Project_ProjectMember[];
    multiVersion: boolean;
    ownerName: string;
    notificationChannels: Channel[];
    views: ProjectView[];
    supersetEnable: boolean;
    superset: ProjectSuperset | undefined;
    enableDisk: boolean;
    enableMaterializedView: boolean;
}
export declare enum Project_Visibility {
    PUBLIC = 0,
    PRIVATE = 1,
    UNRECOGNIZED = -1
}
export declare function project_VisibilityFromJSON(object: any): Project_Visibility;
export declare function project_VisibilityToJSON(object: Project_Visibility): string;
export declare enum Project_Type {
    SENTIO = 0,
    SUBGRAPH = 1,
    UNRECOGNIZED = -1
}
export declare function project_TypeFromJSON(object: any): Project_Type;
export declare function project_TypeToJSON(object: Project_Type): string;
export interface Project_ProjectMember {
    user: UserInfo | undefined;
    role: string;
}
export interface ProjectInfo {
    id: string;
    displayName: string;
    description: string;
    createdAt: bigint;
    updatedAt: bigint;
    slug: string;
    owner: string;
    visibility: Project_Visibility;
    type: Project_Type;
    multiVersion: boolean;
    supersetEnable: boolean;
    superset: ProjectSuperset | undefined;
    enableDisk: boolean;
    enableMaterializedView: boolean;
}
export interface EventLogColumn {
    id: string;
    size: number;
    name: string;
    accessorKey: string;
    enableHiding: boolean;
    enableSorting: boolean;
    enableResizing: boolean;
}
export interface ColumnState {
    columnSizing: {
        [key: string]: number;
    };
    columnVisibility: {
        [key: string]: boolean;
    };
    columnOrder: string[];
    sorting: ColumnState_Sort[];
}
export interface ColumnState_ColumnSizingEntry {
    key: string;
    value: number;
}
export interface ColumnState_ColumnVisibilityEntry {
    key: string;
    value: boolean;
}
export interface ColumnState_Sort {
    id: string;
    desc: boolean;
}
export interface EventLogConfig {
    columns: EventLogColumn[];
    state: ColumnState | undefined;
}
export interface ProjectView {
    id: string;
    projectId: string;
    name: string;
    config: ProjectView_ProjectViewConfig | undefined;
}
export interface ProjectView_ProjectViewConfig {
    eventLog: EventLogConfig | undefined;
}
export interface Organization {
    id: string;
    oid: string;
    name: string;
    createdAt: bigint;
    updatedAt: bigint;
    members: Organization_Member[];
    displayName: string;
    logoUrl: string;
    projects: ProjectInfo[];
    tier: Tier;
}
export interface Organization_Member {
    user: UserInfo | undefined;
    role: OrganizationRole;
}
export interface ApiKey {
    id: string;
    name: string;
    ownerId: string;
    scopes: string[];
    createdAt: bigint;
    updatedAt: bigint;
    expiresAt: bigint;
    source: string;
}
export interface TimeRangeLite {
    start: string;
    end: string;
    step: number;
    timezone: string;
}
export interface TimeRange {
    start: TimeRange_TimeLike | undefined;
    end: TimeRange_TimeLike | undefined;
    step: bigint;
    interval: Duration | undefined;
    timezone: string;
}
export interface TimeRange_TimeLike {
    relativeTime?: TimeRange_RelativeTime | undefined;
    absoluteTime?: bigint | undefined;
}
export interface TimeRange_RelativeTime {
    unit: string;
    value: number;
    align: string;
}
export interface Duration {
    value: number;
    unit: string;
}
export interface Formula {
    expression: string;
    alias: string;
    id: string;
    disabled: boolean;
    functions: Function[];
}
export interface Argument {
    stringValue?: string | undefined;
    intValue?: number | undefined;
    doubleValue?: number | undefined;
    boolValue?: boolean | undefined;
    durationValue?: Duration | undefined;
}
export interface Function {
    name: string;
    arguments: Argument[];
}
export interface Query {
    query: string;
    alias: string;
    id: string;
    labelSelector: {
        [key: string]: string;
    };
    aggregate: Aggregate | undefined;
    functions: Function[];
    disabled: boolean;
}
export interface Query_LabelSelectorEntry {
    key: string;
    value: string;
}
export interface Aggregate {
    op: Aggregate_AggregateOps;
    grouping: string[];
}
export declare enum Aggregate_AggregateOps {
    AVG = 0,
    SUM = 1,
    MIN = 2,
    MAX = 3,
    COUNT = 4,
    UNRECOGNIZED = -1
}
export declare function aggregate_AggregateOpsFromJSON(object: any): Aggregate_AggregateOps;
export declare function aggregate_AggregateOpsToJSON(object: Aggregate_AggregateOps): string;
export interface Selector {
    key: string;
    operator: Selector_OperatorType;
    value: Any[];
}
export declare enum Selector_OperatorType {
    EQ = 0,
    NEQ = 1,
    EXISTS = 9,
    NOT_EXISTS = 10,
    GT = 2,
    GTE = 3,
    LT = 4,
    LTE = 5,
    BETWEEN = 7,
    NOT_BETWEEN = 8,
    CONTAINS = 11,
    NOT_CONTAINS = 12,
    IN_COHORTS = 13,
    NOT_IN_COHORTS = 14,
    UNRECOGNIZED = -1
}
export declare function selector_OperatorTypeFromJSON(object: any): Selector_OperatorType;
export declare function selector_OperatorTypeToJSON(object: Selector_OperatorType): string;
export interface SelectorExpr {
    selector?: Selector | undefined;
    logicExpr?: SelectorExpr_LogicExpr | undefined;
}
export interface SelectorExpr_LogicExpr {
    expressions: SelectorExpr[];
    operator: JoinOperator;
}
export interface CohortsGroup {
    joinOperator: JoinOperator;
    filters: CohortsFilter[];
}
export interface CohortsQuery {
    joinOperator: JoinOperator;
    groups: CohortsGroup[];
    name: string;
    id: string;
}
export interface SegmentationQuery {
    resource: SegmentationQuery_Resource | undefined;
    alias: string;
    id: string;
    aggregation: SegmentationQuery_Aggregation | undefined;
    selectorExpr: SegmentationQuery_SelectorExpr | undefined;
    groupBy: string[];
    limit: number;
    functions: Function[];
    disabled: boolean;
}
export declare enum SegmentationQuery_ResourceType {
    EVENTS = 0,
    COHORTS = 1,
    UNRECOGNIZED = -1
}
export declare function segmentationQuery_ResourceTypeFromJSON(object: any): SegmentationQuery_ResourceType;
export declare function segmentationQuery_ResourceTypeToJSON(object: SegmentationQuery_ResourceType): string;
export interface SegmentationQuery_Resource {
    name: string;
    type: SegmentationQuery_ResourceType;
    cohortsId?: string | undefined;
    cohortsQuery?: CohortsQuery | undefined;
}
export interface SegmentationQuery_Aggregation {
    total?: SegmentationQuery_Aggregation_Total | undefined;
    unique?: SegmentationQuery_Aggregation_Unique | undefined;
    countUnique?: SegmentationQuery_Aggregation_CountUnique | undefined;
    aggregateProperties?: SegmentationQuery_Aggregation_AggregateProperties | undefined;
}
export interface SegmentationQuery_Aggregation_Total {
}
export interface SegmentationQuery_Aggregation_Unique {
}
export interface SegmentationQuery_Aggregation_CountUnique {
    duration: Duration | undefined;
}
export interface SegmentationQuery_Aggregation_AggregateProperties {
    type: SegmentationQuery_Aggregation_AggregateProperties_AggregationType;
    propertyName: string;
}
export declare enum SegmentationQuery_Aggregation_AggregateProperties_AggregationType {
    SUM = 0,
    CUMULATIVE_SUM = 6,
    AVG = 1,
    MEDIAN = 2,
    MIN = 3,
    MAX = 4,
    DISTINCT_COUNT = 5,
    CUMULATIVE_DISTINCT_COUNT = 9,
    CUMULATIVE_COUNT = 12,
    LAST = 7,
    CUMULATIVE_LAST = 10,
    FIRST = 8,
    CUMULATIVE_FIRST = 11,
    PERCENTILE_25TH = 20,
    PERCENTILE_75TH = 21,
    PERCENTILE_90TH = 22,
    PERCENTILE_95TH = 23,
    PERCENTILE_99TH = 24,
    UNRECOGNIZED = -1
}
export declare function segmentationQuery_Aggregation_AggregateProperties_AggregationTypeFromJSON(object: any): SegmentationQuery_Aggregation_AggregateProperties_AggregationType;
export declare function segmentationQuery_Aggregation_AggregateProperties_AggregationTypeToJSON(object: SegmentationQuery_Aggregation_AggregateProperties_AggregationType): string;
export interface SegmentationQuery_SelectorExpr {
    selector?: Selector | undefined;
    logicExpr?: SegmentationQuery_SelectorExpr_LogicExpr | undefined;
}
export interface SegmentationQuery_SelectorExpr_LogicExpr {
    expressions: SegmentationQuery_SelectorExpr[];
    operator: JoinOperator;
}
export interface CohortsFilter {
    symbol: boolean;
    name: string;
    aggregation: CohortsFilter_Aggregation | undefined;
    selectorExpr: SelectorExpr | undefined;
    timeRange: TimeRangeLite | undefined;
}
export interface CohortsFilter_Aggregation {
    total?: CohortsFilter_Aggregation_Total | undefined;
    aggregateProperties?: CohortsFilter_Aggregation_AggregateProperties | undefined;
    operator: CohortsFilter_Aggregation_OperatorType;
    value: Any[];
}
export declare enum CohortsFilter_Aggregation_OperatorType {
    EQ = 0,
    NEQ = 1,
    GT = 2,
    GTE = 3,
    LT = 4,
    LTE = 5,
    BETWEEN = 7,
    NOT_BETWEEN = 8,
    UNRECOGNIZED = -1
}
export declare function cohortsFilter_Aggregation_OperatorTypeFromJSON(object: any): CohortsFilter_Aggregation_OperatorType;
export declare function cohortsFilter_Aggregation_OperatorTypeToJSON(object: CohortsFilter_Aggregation_OperatorType): string;
export interface CohortsFilter_Aggregation_Total {
}
export interface CohortsFilter_Aggregation_AggregateProperties {
    type: CohortsFilter_Aggregation_AggregateProperties_AggregationType;
    propertyName: string;
}
export declare enum CohortsFilter_Aggregation_AggregateProperties_AggregationType {
    SUM = 0,
    AVG = 1,
    MEDIAN = 2,
    MIN = 3,
    MAX = 4,
    DISTINCT_COUNT = 5,
    LAST = 6,
    FIRST = 7,
    UNRECOGNIZED = -1
}
export declare function cohortsFilter_Aggregation_AggregateProperties_AggregationTypeFromJSON(object: any): CohortsFilter_Aggregation_AggregateProperties_AggregationType;
export declare function cohortsFilter_Aggregation_AggregateProperties_AggregationTypeToJSON(object: CohortsFilter_Aggregation_AggregateProperties_AggregationType): string;
export interface Contract {
    address: string;
    name: string;
    chainId: string;
    id: string;
    source: Contract_Source;
}
export declare enum Contract_Source {
    PROCESSOR = 0,
    UI = 1,
    UNRECOGNIZED = -1
}
export declare function contract_SourceFromJSON(object: any): Contract_Source;
export declare function contract_SourceToJSON(object: Contract_Source): string;
export interface ErrorRecord {
    id: string;
    namespace: number;
    code: number;
    namespaceCode: number;
    message: string;
    createdAt: Date | undefined;
}
export interface StringList {
    values: string[];
}
export interface Any {
    intValue?: number | undefined;
    longValue?: bigint | undefined;
    doubleValue?: number | undefined;
    stringValue?: string | undefined;
    boolValue?: boolean | undefined;
    dateValue?: Date | undefined;
    listValue?: StringList | undefined;
}
export interface Channel {
    id: string;
    projectId: string;
    type: Channel_Type;
    slackWebhookUrl: string;
    emailAddress: string;
    name: string;
    customWebhookUrl: string;
    customHeaders: {
        [key: string]: string;
    };
    telegramReference: string;
    telegramChatId: string;
    slackTeam: string;
    slackChannel: string;
    pagerdutyConfig: {
        [key: string]: any;
    } | undefined;
}
export declare enum Channel_Type {
    UNKNOWN = 0,
    EMAIL = 1,
    SLACK = 2,
    TELEGRAM = 3,
    WEBHOOK = 4,
    DISCORD = 5,
    PAGERDUTY = 6,
    UNRECOGNIZED = -1
}
export declare function channel_TypeFromJSON(object: any): Channel_Type;
export declare function channel_TypeToJSON(object: Channel_Type): string;
export interface Channel_CustomHeadersEntry {
    key: string;
    value: string;
}
export interface EventLogEntry {
    message: string;
    timestamp: bigint;
    logLevel: string;
    logType: string;
    contractName: string;
    contractAddress: string;
    blockNumber: bigint;
    chainId: string;
    attributes: {
        [key: string]: any;
    } | undefined;
    id: string;
    transactionHash: string;
    highlightedMessage: string;
    distinctId: string;
    eventName: string;
    logIndex: number;
    transactionIndex: number;
}
export interface Matrix {
    samples: Matrix_Sample[];
    totalSamples: number;
}
export interface Matrix_Sample {
    metric: Matrix_Metric | undefined;
    values: Matrix_Value[];
}
export interface Matrix_Metric {
    name: string;
    labels: {
        [key: string]: string;
    };
    displayName: string;
}
export interface Matrix_Metric_LabelsEntry {
    key: string;
    value: string;
}
export interface Matrix_Value {
    timestamp: bigint;
    value: number;
}
export interface DashboardSharingRequest {
    sharingId: string;
    panelId: string;
    samplesLimit: number;
    timeRange: TimeRangeLite | undefined;
    version: number;
    variables: {
        [key: string]: any;
    } | undefined;
    samplesOffset: number;
}
export interface UserUsage {
    tier: Tier;
    projects: number;
    alerts: number;
}
export interface CoinID {
    symbol?: string | undefined;
    address?: CoinID_AddressIdentifier | undefined;
}
export interface CoinID_AddressIdentifier {
    address: string;
    chain: string;
}
export interface PriceSegmentationQuery {
    id: string;
    alias: string;
    coinId: CoinID[];
    disabled: boolean;
}
export interface TabularData {
    columns: string[];
    columnTypes: {
        [key: string]: TabularData_ColumnType;
    };
    rows: {
        [key: string]: any;
    }[];
    generatedAt: Date | undefined;
    cursor: string;
}
export declare enum TabularData_ColumnType {
    STRING = 0,
    NUMBER = 1,
    BOOLEAN = 2,
    LIST = 3,
    TIME = 4,
    UNRECOGNIZED = -1
}
export declare function tabularData_ColumnTypeFromJSON(object: any): TabularData_ColumnType;
export declare function tabularData_ColumnTypeToJSON(object: TabularData_ColumnType): string;
export interface TabularData_ColumnTypesEntry {
    key: string;
    value: TabularData_ColumnType;
}
export interface Account {
    name: string;
    id: string;
    contact: string;
    paymentInfo: {
        [key: string]: any;
    } | undefined;
    ownerId: string;
    owner: Owner | undefined;
    address: string;
    paymentMethod: string;
}
export interface ImportedProject {
    name: string;
    project: Project | undefined;
    imported: Project | undefined;
}
export interface ProjectSuperset {
    projectId: string;
    createdAt: Date | undefined;
    syncAt: Date | undefined;
}
export interface SegmentParameter {
    cohortId?: string | undefined;
    allUsers?: boolean | undefined;
}
export interface RetentionQuery {
    resources: RetentionQuery_Resource[];
    criteria: RetentionQuery_Criteria;
    interval: RetentionQuery_Interval | undefined;
    selectorExpr: SelectorExpr | undefined;
    groupBy: string[];
    segmentBy: SegmentParameter[];
    windowSize: number;
}
export declare enum RetentionQuery_Criteria {
    OnOrAfter = 0,
    On = 1,
    UNRECOGNIZED = -1
}
export declare function retentionQuery_CriteriaFromJSON(object: any): RetentionQuery_Criteria;
export declare function retentionQuery_CriteriaToJSON(object: RetentionQuery_Criteria): string;
export interface RetentionQuery_Filter {
    propertyFilter: SelectorExpr | undefined;
    timeFilter: RetentionQuery_Filter_TimeFilter | undefined;
}
export interface RetentionQuery_Filter_TimeFilter {
    type: RetentionQuery_Filter_TimeFilter_Type;
}
export declare enum RetentionQuery_Filter_TimeFilter_Type {
    Disable = 0,
    FirstInTimeRange = 1,
    FirstInGlobal = 2,
    UNRECOGNIZED = -1
}
export declare function retentionQuery_Filter_TimeFilter_TypeFromJSON(object: any): RetentionQuery_Filter_TimeFilter_Type;
export declare function retentionQuery_Filter_TimeFilter_TypeToJSON(object: RetentionQuery_Filter_TimeFilter_Type): string;
export interface RetentionQuery_Resource {
    eventNames: string[];
    filter: RetentionQuery_Filter | undefined;
}
export interface RetentionQuery_Interval {
    value: number;
    unit: RetentionQuery_Interval_Unit;
}
export declare enum RetentionQuery_Interval_Unit {
    Day = 0,
    Week = 1,
    Month = 2,
    UNRECOGNIZED = -1
}
export declare function retentionQuery_Interval_UnitFromJSON(object: any): RetentionQuery_Interval_Unit;
export declare function retentionQuery_Interval_UnitToJSON(object: RetentionQuery_Interval_Unit): string;
export interface RetentionMatrix {
    samples: RetentionMatrix_Sample[];
}
export interface RetentionMatrix_Sample {
    time: Date | undefined;
    segmentParameter: SegmentParameter | undefined;
    labels: {
        [key: string]: string;
    };
    totalCount: number;
    counts: number[];
    rates: number[];
}
export interface RetentionMatrix_Sample_LabelsEntry {
    key: string;
    value: string;
}
export interface ComputeStats {
    computedAt: Date | undefined;
    computeCostMs: bigint;
    binaryVersionHash: bigint;
    computedBy: string;
    isCached: boolean;
    isRefreshing: boolean;
}
export interface ClickhouseStatus {
    mutations: {
        [key: number]: ClickhouseStatus_Mutation;
    };
    processes: {
        [key: number]: ClickhouseStatus_Processes;
    };
}
export interface ClickhouseStatus_Mutation {
    undoneCnt: number;
}
export interface ClickhouseStatus_Process {
    query: string;
    queryKind: string;
    elapsed: number;
}
export interface ClickhouseStatus_Processes {
    processes: ClickhouseStatus_Process[];
}
export interface ClickhouseStatus_MutationsEntry {
    key: number;
    value: ClickhouseStatus_Mutation | undefined;
}
export interface ClickhouseStatus_ProcessesEntry {
    key: number;
    value: ClickhouseStatus_Processes | undefined;
}
export interface ProjectVariables {
    projectId: string;
    variables: ProjectVariables_Variable[];
}
export interface ProjectVariables_Variable {
    key: string;
    value: string;
    isSecret: boolean;
    updatedAt: Date | undefined;
}
export interface CachePolicy {
    cacheTtlSecs: number;
    cacheRefreshTtlSecs: number;
    forceRefresh: boolean;
    noCache: boolean;
}
export interface SystemSQLQuery {
    id: string;
    alias: string;
    name: string;
    tableName: string;
    aggregation: SystemSQLQuery_Aggregation | undefined;
    selectorExpr: SelectorExpr | undefined;
    groupBy: string[];
    disabled: boolean;
}
export interface SystemSQLQuery_Aggregation {
    total?: SystemSQLQuery_Aggregation_Total | undefined;
    countUnique?: SystemSQLQuery_Aggregation_CountUnique | undefined;
    aggregateProperties?: SystemSQLQuery_Aggregation_AggregateProperties | undefined;
}
export interface SystemSQLQuery_Aggregation_Total {
}
export interface SystemSQLQuery_Aggregation_CountUnique {
    duration: Duration | undefined;
}
export interface SystemSQLQuery_Aggregation_AggregateProperties {
    type: SystemSQLQuery_Aggregation_AggregateProperties_AggregationType;
    propertyName: string;
}
export declare enum SystemSQLQuery_Aggregation_AggregateProperties_AggregationType {
    SUM = 0,
    AVG = 1,
    MEDIAN = 2,
    MIN = 3,
    MAX = 4,
    DISTINCT_COUNT = 5,
    UNRECOGNIZED = -1
}
export declare function systemSQLQuery_Aggregation_AggregateProperties_AggregationTypeFromJSON(object: any): SystemSQLQuery_Aggregation_AggregateProperties_AggregationType;
export declare function systemSQLQuery_Aggregation_AggregateProperties_AggregationTypeToJSON(object: SystemSQLQuery_Aggregation_AggregateProperties_AggregationType): string;
export interface Notification {
    id: string;
    projectId: string;
    source: string;
    level: string;
    message: string;
    createdAt: Date | undefined;
    type: NotificationType;
    ownerId: string;
    owner: Owner | undefined;
    project: Project | undefined;
    attributes: {
        [key: string]: string;
    };
    read: boolean;
    repeat: number;
}
export interface Notification_AttributesEntry {
    key: string;
    value: string;
}
export interface RichValue {
    nullValue?: RichValue_NullValue | undefined;
    intValue?: number | undefined;
    floatValue?: number | undefined;
    bytesValue?: Uint8Array | undefined;
    boolValue?: boolean | undefined;
    stringValue?: string | undefined;
    timestampValue?: Date | undefined;
    bigintValue?: BigInteger | undefined;
    bigdecimalValue?: BigDecimal | undefined;
    listValue?: RichValueList | undefined;
    structValue?: RichStruct | undefined;
}
export declare enum RichValue_NullValue {
    NULL_VALUE = 0,
    UNRECOGNIZED = -1
}
export declare function richValue_NullValueFromJSON(object: any): RichValue_NullValue;
export declare function richValue_NullValueToJSON(object: RichValue_NullValue): string;
export interface RichStruct {
    fields: {
        [key: string]: RichValue;
    };
}
export interface RichStruct_FieldsEntry {
    key: string;
    value: RichValue | undefined;
}
export interface RichValueList {
    values: RichValue[];
}
export interface RichStructList {
    entities: RichStruct[];
}
export interface BigDecimal {
    value: BigInteger | undefined;
    exp: number;
}
export interface BigInteger {
    negative: boolean;
    data: Uint8Array;
}
export declare const UsageTracker: {
    encode(message: UsageTracker, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UsageTracker;
    fromJSON(object: any): UsageTracker;
    toJSON(message: UsageTracker): unknown;
    create(base?: DeepPartial<UsageTracker>): UsageTracker;
    fromPartial(object: DeepPartial<UsageTracker>): UsageTracker;
};
export declare const AccessMeta: {
    encode(message: AccessMeta, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccessMeta;
    fromJSON(object: any): AccessMeta;
    toJSON(message: AccessMeta): unknown;
    create(base?: DeepPartial<AccessMeta>): AccessMeta;
    fromPartial(object: DeepPartial<AccessMeta>): AccessMeta;
};
export declare const User: {
    encode(message: User, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): User;
    fromJSON(object: any): User;
    toJSON(message: User): unknown;
    create(base?: DeepPartial<User>): User;
    fromPartial(object: DeepPartial<User>): User;
};
export declare const UserInfo: {
    encode(message: UserInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserInfo;
    fromJSON(object: any): UserInfo;
    toJSON(message: UserInfo): unknown;
    create(base?: DeepPartial<UserInfo>): UserInfo;
    fromPartial(object: DeepPartial<UserInfo>): UserInfo;
};
export declare const Owner: {
    encode(message: Owner, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Owner;
    fromJSON(object: any): Owner;
    toJSON(message: Owner): unknown;
    create(base?: DeepPartial<Owner>): Owner;
    fromPartial(object: DeepPartial<Owner>): Owner;
};
export declare const Project: {
    encode(message: Project, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Project;
    fromJSON(object: any): Project;
    toJSON(message: Project): unknown;
    create(base?: DeepPartial<Project>): Project;
    fromPartial(object: DeepPartial<Project>): Project;
};
export declare const Project_ProjectMember: {
    encode(message: Project_ProjectMember, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Project_ProjectMember;
    fromJSON(object: any): Project_ProjectMember;
    toJSON(message: Project_ProjectMember): unknown;
    create(base?: DeepPartial<Project_ProjectMember>): Project_ProjectMember;
    fromPartial(object: DeepPartial<Project_ProjectMember>): Project_ProjectMember;
};
export declare const ProjectInfo: {
    encode(message: ProjectInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectInfo;
    fromJSON(object: any): ProjectInfo;
    toJSON(message: ProjectInfo): unknown;
    create(base?: DeepPartial<ProjectInfo>): ProjectInfo;
    fromPartial(object: DeepPartial<ProjectInfo>): ProjectInfo;
};
export declare const EventLogColumn: {
    encode(message: EventLogColumn, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventLogColumn;
    fromJSON(object: any): EventLogColumn;
    toJSON(message: EventLogColumn): unknown;
    create(base?: DeepPartial<EventLogColumn>): EventLogColumn;
    fromPartial(object: DeepPartial<EventLogColumn>): EventLogColumn;
};
export declare const ColumnState: {
    encode(message: ColumnState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ColumnState;
    fromJSON(object: any): ColumnState;
    toJSON(message: ColumnState): unknown;
    create(base?: DeepPartial<ColumnState>): ColumnState;
    fromPartial(object: DeepPartial<ColumnState>): ColumnState;
};
export declare const ColumnState_ColumnSizingEntry: {
    encode(message: ColumnState_ColumnSizingEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ColumnState_ColumnSizingEntry;
    fromJSON(object: any): ColumnState_ColumnSizingEntry;
    toJSON(message: ColumnState_ColumnSizingEntry): unknown;
    create(base?: DeepPartial<ColumnState_ColumnSizingEntry>): ColumnState_ColumnSizingEntry;
    fromPartial(object: DeepPartial<ColumnState_ColumnSizingEntry>): ColumnState_ColumnSizingEntry;
};
export declare const ColumnState_ColumnVisibilityEntry: {
    encode(message: ColumnState_ColumnVisibilityEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ColumnState_ColumnVisibilityEntry;
    fromJSON(object: any): ColumnState_ColumnVisibilityEntry;
    toJSON(message: ColumnState_ColumnVisibilityEntry): unknown;
    create(base?: DeepPartial<ColumnState_ColumnVisibilityEntry>): ColumnState_ColumnVisibilityEntry;
    fromPartial(object: DeepPartial<ColumnState_ColumnVisibilityEntry>): ColumnState_ColumnVisibilityEntry;
};
export declare const ColumnState_Sort: {
    encode(message: ColumnState_Sort, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ColumnState_Sort;
    fromJSON(object: any): ColumnState_Sort;
    toJSON(message: ColumnState_Sort): unknown;
    create(base?: DeepPartial<ColumnState_Sort>): ColumnState_Sort;
    fromPartial(object: DeepPartial<ColumnState_Sort>): ColumnState_Sort;
};
export declare const EventLogConfig: {
    encode(message: EventLogConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventLogConfig;
    fromJSON(object: any): EventLogConfig;
    toJSON(message: EventLogConfig): unknown;
    create(base?: DeepPartial<EventLogConfig>): EventLogConfig;
    fromPartial(object: DeepPartial<EventLogConfig>): EventLogConfig;
};
export declare const ProjectView: {
    encode(message: ProjectView, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectView;
    fromJSON(object: any): ProjectView;
    toJSON(message: ProjectView): unknown;
    create(base?: DeepPartial<ProjectView>): ProjectView;
    fromPartial(object: DeepPartial<ProjectView>): ProjectView;
};
export declare const ProjectView_ProjectViewConfig: {
    encode(message: ProjectView_ProjectViewConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectView_ProjectViewConfig;
    fromJSON(object: any): ProjectView_ProjectViewConfig;
    toJSON(message: ProjectView_ProjectViewConfig): unknown;
    create(base?: DeepPartial<ProjectView_ProjectViewConfig>): ProjectView_ProjectViewConfig;
    fromPartial(object: DeepPartial<ProjectView_ProjectViewConfig>): ProjectView_ProjectViewConfig;
};
export declare const Organization: {
    encode(message: Organization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Organization;
    fromJSON(object: any): Organization;
    toJSON(message: Organization): unknown;
    create(base?: DeepPartial<Organization>): Organization;
    fromPartial(object: DeepPartial<Organization>): Organization;
};
export declare const Organization_Member: {
    encode(message: Organization_Member, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Organization_Member;
    fromJSON(object: any): Organization_Member;
    toJSON(message: Organization_Member): unknown;
    create(base?: DeepPartial<Organization_Member>): Organization_Member;
    fromPartial(object: DeepPartial<Organization_Member>): Organization_Member;
};
export declare const ApiKey: {
    encode(message: ApiKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ApiKey;
    fromJSON(object: any): ApiKey;
    toJSON(message: ApiKey): unknown;
    create(base?: DeepPartial<ApiKey>): ApiKey;
    fromPartial(object: DeepPartial<ApiKey>): ApiKey;
};
export declare const TimeRangeLite: {
    encode(message: TimeRangeLite, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TimeRangeLite;
    fromJSON(object: any): TimeRangeLite;
    toJSON(message: TimeRangeLite): unknown;
    create(base?: DeepPartial<TimeRangeLite>): TimeRangeLite;
    fromPartial(object: DeepPartial<TimeRangeLite>): TimeRangeLite;
};
export declare const TimeRange: {
    encode(message: TimeRange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TimeRange;
    fromJSON(object: any): TimeRange;
    toJSON(message: TimeRange): unknown;
    create(base?: DeepPartial<TimeRange>): TimeRange;
    fromPartial(object: DeepPartial<TimeRange>): TimeRange;
};
export declare const TimeRange_TimeLike: {
    encode(message: TimeRange_TimeLike, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TimeRange_TimeLike;
    fromJSON(object: any): TimeRange_TimeLike;
    toJSON(message: TimeRange_TimeLike): unknown;
    create(base?: DeepPartial<TimeRange_TimeLike>): TimeRange_TimeLike;
    fromPartial(object: DeepPartial<TimeRange_TimeLike>): TimeRange_TimeLike;
};
export declare const TimeRange_RelativeTime: {
    encode(message: TimeRange_RelativeTime, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TimeRange_RelativeTime;
    fromJSON(object: any): TimeRange_RelativeTime;
    toJSON(message: TimeRange_RelativeTime): unknown;
    create(base?: DeepPartial<TimeRange_RelativeTime>): TimeRange_RelativeTime;
    fromPartial(object: DeepPartial<TimeRange_RelativeTime>): TimeRange_RelativeTime;
};
export declare const Duration: {
    encode(message: Duration, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Duration;
    fromJSON(object: any): Duration;
    toJSON(message: Duration): unknown;
    create(base?: DeepPartial<Duration>): Duration;
    fromPartial(object: DeepPartial<Duration>): Duration;
};
export declare const Formula: {
    encode(message: Formula, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Formula;
    fromJSON(object: any): Formula;
    toJSON(message: Formula): unknown;
    create(base?: DeepPartial<Formula>): Formula;
    fromPartial(object: DeepPartial<Formula>): Formula;
};
export declare const Argument: {
    encode(message: Argument, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Argument;
    fromJSON(object: any): Argument;
    toJSON(message: Argument): unknown;
    create(base?: DeepPartial<Argument>): Argument;
    fromPartial(object: DeepPartial<Argument>): Argument;
};
export declare const Function: {
    encode(message: Function, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Function;
    fromJSON(object: any): Function;
    toJSON(message: Function): unknown;
    create(base?: DeepPartial<Function>): Function;
    fromPartial(object: DeepPartial<Function>): Function;
};
export declare const Query: {
    encode(message: Query, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Query;
    fromJSON(object: any): Query;
    toJSON(message: Query): unknown;
    create(base?: DeepPartial<Query>): Query;
    fromPartial(object: DeepPartial<Query>): Query;
};
export declare const Query_LabelSelectorEntry: {
    encode(message: Query_LabelSelectorEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Query_LabelSelectorEntry;
    fromJSON(object: any): Query_LabelSelectorEntry;
    toJSON(message: Query_LabelSelectorEntry): unknown;
    create(base?: DeepPartial<Query_LabelSelectorEntry>): Query_LabelSelectorEntry;
    fromPartial(object: DeepPartial<Query_LabelSelectorEntry>): Query_LabelSelectorEntry;
};
export declare const Aggregate: {
    encode(message: Aggregate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Aggregate;
    fromJSON(object: any): Aggregate;
    toJSON(message: Aggregate): unknown;
    create(base?: DeepPartial<Aggregate>): Aggregate;
    fromPartial(object: DeepPartial<Aggregate>): Aggregate;
};
export declare const Selector: {
    encode(message: Selector, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Selector;
    fromJSON(object: any): Selector;
    toJSON(message: Selector): unknown;
    create(base?: DeepPartial<Selector>): Selector;
    fromPartial(object: DeepPartial<Selector>): Selector;
};
export declare const SelectorExpr: {
    encode(message: SelectorExpr, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SelectorExpr;
    fromJSON(object: any): SelectorExpr;
    toJSON(message: SelectorExpr): unknown;
    create(base?: DeepPartial<SelectorExpr>): SelectorExpr;
    fromPartial(object: DeepPartial<SelectorExpr>): SelectorExpr;
};
export declare const SelectorExpr_LogicExpr: {
    encode(message: SelectorExpr_LogicExpr, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SelectorExpr_LogicExpr;
    fromJSON(object: any): SelectorExpr_LogicExpr;
    toJSON(message: SelectorExpr_LogicExpr): unknown;
    create(base?: DeepPartial<SelectorExpr_LogicExpr>): SelectorExpr_LogicExpr;
    fromPartial(object: DeepPartial<SelectorExpr_LogicExpr>): SelectorExpr_LogicExpr;
};
export declare const CohortsGroup: {
    encode(message: CohortsGroup, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CohortsGroup;
    fromJSON(object: any): CohortsGroup;
    toJSON(message: CohortsGroup): unknown;
    create(base?: DeepPartial<CohortsGroup>): CohortsGroup;
    fromPartial(object: DeepPartial<CohortsGroup>): CohortsGroup;
};
export declare const CohortsQuery: {
    encode(message: CohortsQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CohortsQuery;
    fromJSON(object: any): CohortsQuery;
    toJSON(message: CohortsQuery): unknown;
    create(base?: DeepPartial<CohortsQuery>): CohortsQuery;
    fromPartial(object: DeepPartial<CohortsQuery>): CohortsQuery;
};
export declare const SegmentationQuery: {
    encode(message: SegmentationQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery;
    fromJSON(object: any): SegmentationQuery;
    toJSON(message: SegmentationQuery): unknown;
    create(base?: DeepPartial<SegmentationQuery>): SegmentationQuery;
    fromPartial(object: DeepPartial<SegmentationQuery>): SegmentationQuery;
};
export declare const SegmentationQuery_Resource: {
    encode(message: SegmentationQuery_Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_Resource;
    fromJSON(object: any): SegmentationQuery_Resource;
    toJSON(message: SegmentationQuery_Resource): unknown;
    create(base?: DeepPartial<SegmentationQuery_Resource>): SegmentationQuery_Resource;
    fromPartial(object: DeepPartial<SegmentationQuery_Resource>): SegmentationQuery_Resource;
};
export declare const SegmentationQuery_Aggregation: {
    encode(message: SegmentationQuery_Aggregation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_Aggregation;
    fromJSON(object: any): SegmentationQuery_Aggregation;
    toJSON(message: SegmentationQuery_Aggregation): unknown;
    create(base?: DeepPartial<SegmentationQuery_Aggregation>): SegmentationQuery_Aggregation;
    fromPartial(object: DeepPartial<SegmentationQuery_Aggregation>): SegmentationQuery_Aggregation;
};
export declare const SegmentationQuery_Aggregation_Total: {
    encode(_: SegmentationQuery_Aggregation_Total, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_Aggregation_Total;
    fromJSON(_: any): SegmentationQuery_Aggregation_Total;
    toJSON(_: SegmentationQuery_Aggregation_Total): unknown;
    create(base?: DeepPartial<SegmentationQuery_Aggregation_Total>): SegmentationQuery_Aggregation_Total;
    fromPartial(_: DeepPartial<SegmentationQuery_Aggregation_Total>): SegmentationQuery_Aggregation_Total;
};
export declare const SegmentationQuery_Aggregation_Unique: {
    encode(_: SegmentationQuery_Aggregation_Unique, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_Aggregation_Unique;
    fromJSON(_: any): SegmentationQuery_Aggregation_Unique;
    toJSON(_: SegmentationQuery_Aggregation_Unique): unknown;
    create(base?: DeepPartial<SegmentationQuery_Aggregation_Unique>): SegmentationQuery_Aggregation_Unique;
    fromPartial(_: DeepPartial<SegmentationQuery_Aggregation_Unique>): SegmentationQuery_Aggregation_Unique;
};
export declare const SegmentationQuery_Aggregation_CountUnique: {
    encode(message: SegmentationQuery_Aggregation_CountUnique, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_Aggregation_CountUnique;
    fromJSON(object: any): SegmentationQuery_Aggregation_CountUnique;
    toJSON(message: SegmentationQuery_Aggregation_CountUnique): unknown;
    create(base?: DeepPartial<SegmentationQuery_Aggregation_CountUnique>): SegmentationQuery_Aggregation_CountUnique;
    fromPartial(object: DeepPartial<SegmentationQuery_Aggregation_CountUnique>): SegmentationQuery_Aggregation_CountUnique;
};
export declare const SegmentationQuery_Aggregation_AggregateProperties: {
    encode(message: SegmentationQuery_Aggregation_AggregateProperties, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_Aggregation_AggregateProperties;
    fromJSON(object: any): SegmentationQuery_Aggregation_AggregateProperties;
    toJSON(message: SegmentationQuery_Aggregation_AggregateProperties): unknown;
    create(base?: DeepPartial<SegmentationQuery_Aggregation_AggregateProperties>): SegmentationQuery_Aggregation_AggregateProperties;
    fromPartial(object: DeepPartial<SegmentationQuery_Aggregation_AggregateProperties>): SegmentationQuery_Aggregation_AggregateProperties;
};
export declare const SegmentationQuery_SelectorExpr: {
    encode(message: SegmentationQuery_SelectorExpr, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_SelectorExpr;
    fromJSON(object: any): SegmentationQuery_SelectorExpr;
    toJSON(message: SegmentationQuery_SelectorExpr): unknown;
    create(base?: DeepPartial<SegmentationQuery_SelectorExpr>): SegmentationQuery_SelectorExpr;
    fromPartial(object: DeepPartial<SegmentationQuery_SelectorExpr>): SegmentationQuery_SelectorExpr;
};
export declare const SegmentationQuery_SelectorExpr_LogicExpr: {
    encode(message: SegmentationQuery_SelectorExpr_LogicExpr, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentationQuery_SelectorExpr_LogicExpr;
    fromJSON(object: any): SegmentationQuery_SelectorExpr_LogicExpr;
    toJSON(message: SegmentationQuery_SelectorExpr_LogicExpr): unknown;
    create(base?: DeepPartial<SegmentationQuery_SelectorExpr_LogicExpr>): SegmentationQuery_SelectorExpr_LogicExpr;
    fromPartial(object: DeepPartial<SegmentationQuery_SelectorExpr_LogicExpr>): SegmentationQuery_SelectorExpr_LogicExpr;
};
export declare const CohortsFilter: {
    encode(message: CohortsFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CohortsFilter;
    fromJSON(object: any): CohortsFilter;
    toJSON(message: CohortsFilter): unknown;
    create(base?: DeepPartial<CohortsFilter>): CohortsFilter;
    fromPartial(object: DeepPartial<CohortsFilter>): CohortsFilter;
};
export declare const CohortsFilter_Aggregation: {
    encode(message: CohortsFilter_Aggregation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CohortsFilter_Aggregation;
    fromJSON(object: any): CohortsFilter_Aggregation;
    toJSON(message: CohortsFilter_Aggregation): unknown;
    create(base?: DeepPartial<CohortsFilter_Aggregation>): CohortsFilter_Aggregation;
    fromPartial(object: DeepPartial<CohortsFilter_Aggregation>): CohortsFilter_Aggregation;
};
export declare const CohortsFilter_Aggregation_Total: {
    encode(_: CohortsFilter_Aggregation_Total, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CohortsFilter_Aggregation_Total;
    fromJSON(_: any): CohortsFilter_Aggregation_Total;
    toJSON(_: CohortsFilter_Aggregation_Total): unknown;
    create(base?: DeepPartial<CohortsFilter_Aggregation_Total>): CohortsFilter_Aggregation_Total;
    fromPartial(_: DeepPartial<CohortsFilter_Aggregation_Total>): CohortsFilter_Aggregation_Total;
};
export declare const CohortsFilter_Aggregation_AggregateProperties: {
    encode(message: CohortsFilter_Aggregation_AggregateProperties, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CohortsFilter_Aggregation_AggregateProperties;
    fromJSON(object: any): CohortsFilter_Aggregation_AggregateProperties;
    toJSON(message: CohortsFilter_Aggregation_AggregateProperties): unknown;
    create(base?: DeepPartial<CohortsFilter_Aggregation_AggregateProperties>): CohortsFilter_Aggregation_AggregateProperties;
    fromPartial(object: DeepPartial<CohortsFilter_Aggregation_AggregateProperties>): CohortsFilter_Aggregation_AggregateProperties;
};
export declare const Contract: {
    encode(message: Contract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Contract;
    fromJSON(object: any): Contract;
    toJSON(message: Contract): unknown;
    create(base?: DeepPartial<Contract>): Contract;
    fromPartial(object: DeepPartial<Contract>): Contract;
};
export declare const ErrorRecord: {
    encode(message: ErrorRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ErrorRecord;
    fromJSON(object: any): ErrorRecord;
    toJSON(message: ErrorRecord): unknown;
    create(base?: DeepPartial<ErrorRecord>): ErrorRecord;
    fromPartial(object: DeepPartial<ErrorRecord>): ErrorRecord;
};
export declare const StringList: {
    encode(message: StringList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StringList;
    fromJSON(object: any): StringList;
    toJSON(message: StringList): unknown;
    create(base?: DeepPartial<StringList>): StringList;
    fromPartial(object: DeepPartial<StringList>): StringList;
};
export declare const Any: {
    encode(message: Any, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Any;
    fromJSON(object: any): Any;
    toJSON(message: Any): unknown;
    create(base?: DeepPartial<Any>): Any;
    fromPartial(object: DeepPartial<Any>): Any;
};
export declare const Channel: {
    encode(message: Channel, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Channel;
    fromJSON(object: any): Channel;
    toJSON(message: Channel): unknown;
    create(base?: DeepPartial<Channel>): Channel;
    fromPartial(object: DeepPartial<Channel>): Channel;
};
export declare const Channel_CustomHeadersEntry: {
    encode(message: Channel_CustomHeadersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Channel_CustomHeadersEntry;
    fromJSON(object: any): Channel_CustomHeadersEntry;
    toJSON(message: Channel_CustomHeadersEntry): unknown;
    create(base?: DeepPartial<Channel_CustomHeadersEntry>): Channel_CustomHeadersEntry;
    fromPartial(object: DeepPartial<Channel_CustomHeadersEntry>): Channel_CustomHeadersEntry;
};
export declare const EventLogEntry: {
    encode(message: EventLogEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventLogEntry;
    fromJSON(object: any): EventLogEntry;
    toJSON(message: EventLogEntry): unknown;
    create(base?: DeepPartial<EventLogEntry>): EventLogEntry;
    fromPartial(object: DeepPartial<EventLogEntry>): EventLogEntry;
};
export declare const Matrix: {
    encode(message: Matrix, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Matrix;
    fromJSON(object: any): Matrix;
    toJSON(message: Matrix): unknown;
    create(base?: DeepPartial<Matrix>): Matrix;
    fromPartial(object: DeepPartial<Matrix>): Matrix;
};
export declare const Matrix_Sample: {
    encode(message: Matrix_Sample, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Matrix_Sample;
    fromJSON(object: any): Matrix_Sample;
    toJSON(message: Matrix_Sample): unknown;
    create(base?: DeepPartial<Matrix_Sample>): Matrix_Sample;
    fromPartial(object: DeepPartial<Matrix_Sample>): Matrix_Sample;
};
export declare const Matrix_Metric: {
    encode(message: Matrix_Metric, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Matrix_Metric;
    fromJSON(object: any): Matrix_Metric;
    toJSON(message: Matrix_Metric): unknown;
    create(base?: DeepPartial<Matrix_Metric>): Matrix_Metric;
    fromPartial(object: DeepPartial<Matrix_Metric>): Matrix_Metric;
};
export declare const Matrix_Metric_LabelsEntry: {
    encode(message: Matrix_Metric_LabelsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Matrix_Metric_LabelsEntry;
    fromJSON(object: any): Matrix_Metric_LabelsEntry;
    toJSON(message: Matrix_Metric_LabelsEntry): unknown;
    create(base?: DeepPartial<Matrix_Metric_LabelsEntry>): Matrix_Metric_LabelsEntry;
    fromPartial(object: DeepPartial<Matrix_Metric_LabelsEntry>): Matrix_Metric_LabelsEntry;
};
export declare const Matrix_Value: {
    encode(message: Matrix_Value, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Matrix_Value;
    fromJSON(object: any): Matrix_Value;
    toJSON(message: Matrix_Value): unknown;
    create(base?: DeepPartial<Matrix_Value>): Matrix_Value;
    fromPartial(object: DeepPartial<Matrix_Value>): Matrix_Value;
};
export declare const DashboardSharingRequest: {
    encode(message: DashboardSharingRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DashboardSharingRequest;
    fromJSON(object: any): DashboardSharingRequest;
    toJSON(message: DashboardSharingRequest): unknown;
    create(base?: DeepPartial<DashboardSharingRequest>): DashboardSharingRequest;
    fromPartial(object: DeepPartial<DashboardSharingRequest>): DashboardSharingRequest;
};
export declare const UserUsage: {
    encode(message: UserUsage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserUsage;
    fromJSON(object: any): UserUsage;
    toJSON(message: UserUsage): unknown;
    create(base?: DeepPartial<UserUsage>): UserUsage;
    fromPartial(object: DeepPartial<UserUsage>): UserUsage;
};
export declare const CoinID: {
    encode(message: CoinID, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CoinID;
    fromJSON(object: any): CoinID;
    toJSON(message: CoinID): unknown;
    create(base?: DeepPartial<CoinID>): CoinID;
    fromPartial(object: DeepPartial<CoinID>): CoinID;
};
export declare const CoinID_AddressIdentifier: {
    encode(message: CoinID_AddressIdentifier, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CoinID_AddressIdentifier;
    fromJSON(object: any): CoinID_AddressIdentifier;
    toJSON(message: CoinID_AddressIdentifier): unknown;
    create(base?: DeepPartial<CoinID_AddressIdentifier>): CoinID_AddressIdentifier;
    fromPartial(object: DeepPartial<CoinID_AddressIdentifier>): CoinID_AddressIdentifier;
};
export declare const PriceSegmentationQuery: {
    encode(message: PriceSegmentationQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PriceSegmentationQuery;
    fromJSON(object: any): PriceSegmentationQuery;
    toJSON(message: PriceSegmentationQuery): unknown;
    create(base?: DeepPartial<PriceSegmentationQuery>): PriceSegmentationQuery;
    fromPartial(object: DeepPartial<PriceSegmentationQuery>): PriceSegmentationQuery;
};
export declare const TabularData: {
    encode(message: TabularData, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TabularData;
    fromJSON(object: any): TabularData;
    toJSON(message: TabularData): unknown;
    create(base?: DeepPartial<TabularData>): TabularData;
    fromPartial(object: DeepPartial<TabularData>): TabularData;
};
export declare const TabularData_ColumnTypesEntry: {
    encode(message: TabularData_ColumnTypesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TabularData_ColumnTypesEntry;
    fromJSON(object: any): TabularData_ColumnTypesEntry;
    toJSON(message: TabularData_ColumnTypesEntry): unknown;
    create(base?: DeepPartial<TabularData_ColumnTypesEntry>): TabularData_ColumnTypesEntry;
    fromPartial(object: DeepPartial<TabularData_ColumnTypesEntry>): TabularData_ColumnTypesEntry;
};
export declare const Account: {
    encode(message: Account, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Account;
    fromJSON(object: any): Account;
    toJSON(message: Account): unknown;
    create(base?: DeepPartial<Account>): Account;
    fromPartial(object: DeepPartial<Account>): Account;
};
export declare const ImportedProject: {
    encode(message: ImportedProject, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ImportedProject;
    fromJSON(object: any): ImportedProject;
    toJSON(message: ImportedProject): unknown;
    create(base?: DeepPartial<ImportedProject>): ImportedProject;
    fromPartial(object: DeepPartial<ImportedProject>): ImportedProject;
};
export declare const ProjectSuperset: {
    encode(message: ProjectSuperset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectSuperset;
    fromJSON(object: any): ProjectSuperset;
    toJSON(message: ProjectSuperset): unknown;
    create(base?: DeepPartial<ProjectSuperset>): ProjectSuperset;
    fromPartial(object: DeepPartial<ProjectSuperset>): ProjectSuperset;
};
export declare const SegmentParameter: {
    encode(message: SegmentParameter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SegmentParameter;
    fromJSON(object: any): SegmentParameter;
    toJSON(message: SegmentParameter): unknown;
    create(base?: DeepPartial<SegmentParameter>): SegmentParameter;
    fromPartial(object: DeepPartial<SegmentParameter>): SegmentParameter;
};
export declare const RetentionQuery: {
    encode(message: RetentionQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionQuery;
    fromJSON(object: any): RetentionQuery;
    toJSON(message: RetentionQuery): unknown;
    create(base?: DeepPartial<RetentionQuery>): RetentionQuery;
    fromPartial(object: DeepPartial<RetentionQuery>): RetentionQuery;
};
export declare const RetentionQuery_Filter: {
    encode(message: RetentionQuery_Filter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionQuery_Filter;
    fromJSON(object: any): RetentionQuery_Filter;
    toJSON(message: RetentionQuery_Filter): unknown;
    create(base?: DeepPartial<RetentionQuery_Filter>): RetentionQuery_Filter;
    fromPartial(object: DeepPartial<RetentionQuery_Filter>): RetentionQuery_Filter;
};
export declare const RetentionQuery_Filter_TimeFilter: {
    encode(message: RetentionQuery_Filter_TimeFilter, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionQuery_Filter_TimeFilter;
    fromJSON(object: any): RetentionQuery_Filter_TimeFilter;
    toJSON(message: RetentionQuery_Filter_TimeFilter): unknown;
    create(base?: DeepPartial<RetentionQuery_Filter_TimeFilter>): RetentionQuery_Filter_TimeFilter;
    fromPartial(object: DeepPartial<RetentionQuery_Filter_TimeFilter>): RetentionQuery_Filter_TimeFilter;
};
export declare const RetentionQuery_Resource: {
    encode(message: RetentionQuery_Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionQuery_Resource;
    fromJSON(object: any): RetentionQuery_Resource;
    toJSON(message: RetentionQuery_Resource): unknown;
    create(base?: DeepPartial<RetentionQuery_Resource>): RetentionQuery_Resource;
    fromPartial(object: DeepPartial<RetentionQuery_Resource>): RetentionQuery_Resource;
};
export declare const RetentionQuery_Interval: {
    encode(message: RetentionQuery_Interval, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionQuery_Interval;
    fromJSON(object: any): RetentionQuery_Interval;
    toJSON(message: RetentionQuery_Interval): unknown;
    create(base?: DeepPartial<RetentionQuery_Interval>): RetentionQuery_Interval;
    fromPartial(object: DeepPartial<RetentionQuery_Interval>): RetentionQuery_Interval;
};
export declare const RetentionMatrix: {
    encode(message: RetentionMatrix, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionMatrix;
    fromJSON(object: any): RetentionMatrix;
    toJSON(message: RetentionMatrix): unknown;
    create(base?: DeepPartial<RetentionMatrix>): RetentionMatrix;
    fromPartial(object: DeepPartial<RetentionMatrix>): RetentionMatrix;
};
export declare const RetentionMatrix_Sample: {
    encode(message: RetentionMatrix_Sample, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionMatrix_Sample;
    fromJSON(object: any): RetentionMatrix_Sample;
    toJSON(message: RetentionMatrix_Sample): unknown;
    create(base?: DeepPartial<RetentionMatrix_Sample>): RetentionMatrix_Sample;
    fromPartial(object: DeepPartial<RetentionMatrix_Sample>): RetentionMatrix_Sample;
};
export declare const RetentionMatrix_Sample_LabelsEntry: {
    encode(message: RetentionMatrix_Sample_LabelsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RetentionMatrix_Sample_LabelsEntry;
    fromJSON(object: any): RetentionMatrix_Sample_LabelsEntry;
    toJSON(message: RetentionMatrix_Sample_LabelsEntry): unknown;
    create(base?: DeepPartial<RetentionMatrix_Sample_LabelsEntry>): RetentionMatrix_Sample_LabelsEntry;
    fromPartial(object: DeepPartial<RetentionMatrix_Sample_LabelsEntry>): RetentionMatrix_Sample_LabelsEntry;
};
export declare const ComputeStats: {
    encode(message: ComputeStats, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ComputeStats;
    fromJSON(object: any): ComputeStats;
    toJSON(message: ComputeStats): unknown;
    create(base?: DeepPartial<ComputeStats>): ComputeStats;
    fromPartial(object: DeepPartial<ComputeStats>): ComputeStats;
};
export declare const ClickhouseStatus: {
    encode(message: ClickhouseStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClickhouseStatus;
    fromJSON(object: any): ClickhouseStatus;
    toJSON(message: ClickhouseStatus): unknown;
    create(base?: DeepPartial<ClickhouseStatus>): ClickhouseStatus;
    fromPartial(object: DeepPartial<ClickhouseStatus>): ClickhouseStatus;
};
export declare const ClickhouseStatus_Mutation: {
    encode(message: ClickhouseStatus_Mutation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClickhouseStatus_Mutation;
    fromJSON(object: any): ClickhouseStatus_Mutation;
    toJSON(message: ClickhouseStatus_Mutation): unknown;
    create(base?: DeepPartial<ClickhouseStatus_Mutation>): ClickhouseStatus_Mutation;
    fromPartial(object: DeepPartial<ClickhouseStatus_Mutation>): ClickhouseStatus_Mutation;
};
export declare const ClickhouseStatus_Process: {
    encode(message: ClickhouseStatus_Process, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClickhouseStatus_Process;
    fromJSON(object: any): ClickhouseStatus_Process;
    toJSON(message: ClickhouseStatus_Process): unknown;
    create(base?: DeepPartial<ClickhouseStatus_Process>): ClickhouseStatus_Process;
    fromPartial(object: DeepPartial<ClickhouseStatus_Process>): ClickhouseStatus_Process;
};
export declare const ClickhouseStatus_Processes: {
    encode(message: ClickhouseStatus_Processes, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClickhouseStatus_Processes;
    fromJSON(object: any): ClickhouseStatus_Processes;
    toJSON(message: ClickhouseStatus_Processes): unknown;
    create(base?: DeepPartial<ClickhouseStatus_Processes>): ClickhouseStatus_Processes;
    fromPartial(object: DeepPartial<ClickhouseStatus_Processes>): ClickhouseStatus_Processes;
};
export declare const ClickhouseStatus_MutationsEntry: {
    encode(message: ClickhouseStatus_MutationsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClickhouseStatus_MutationsEntry;
    fromJSON(object: any): ClickhouseStatus_MutationsEntry;
    toJSON(message: ClickhouseStatus_MutationsEntry): unknown;
    create(base?: DeepPartial<ClickhouseStatus_MutationsEntry>): ClickhouseStatus_MutationsEntry;
    fromPartial(object: DeepPartial<ClickhouseStatus_MutationsEntry>): ClickhouseStatus_MutationsEntry;
};
export declare const ClickhouseStatus_ProcessesEntry: {
    encode(message: ClickhouseStatus_ProcessesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClickhouseStatus_ProcessesEntry;
    fromJSON(object: any): ClickhouseStatus_ProcessesEntry;
    toJSON(message: ClickhouseStatus_ProcessesEntry): unknown;
    create(base?: DeepPartial<ClickhouseStatus_ProcessesEntry>): ClickhouseStatus_ProcessesEntry;
    fromPartial(object: DeepPartial<ClickhouseStatus_ProcessesEntry>): ClickhouseStatus_ProcessesEntry;
};
export declare const ProjectVariables: {
    encode(message: ProjectVariables, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectVariables;
    fromJSON(object: any): ProjectVariables;
    toJSON(message: ProjectVariables): unknown;
    create(base?: DeepPartial<ProjectVariables>): ProjectVariables;
    fromPartial(object: DeepPartial<ProjectVariables>): ProjectVariables;
};
export declare const ProjectVariables_Variable: {
    encode(message: ProjectVariables_Variable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProjectVariables_Variable;
    fromJSON(object: any): ProjectVariables_Variable;
    toJSON(message: ProjectVariables_Variable): unknown;
    create(base?: DeepPartial<ProjectVariables_Variable>): ProjectVariables_Variable;
    fromPartial(object: DeepPartial<ProjectVariables_Variable>): ProjectVariables_Variable;
};
export declare const CachePolicy: {
    encode(message: CachePolicy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CachePolicy;
    fromJSON(object: any): CachePolicy;
    toJSON(message: CachePolicy): unknown;
    create(base?: DeepPartial<CachePolicy>): CachePolicy;
    fromPartial(object: DeepPartial<CachePolicy>): CachePolicy;
};
export declare const SystemSQLQuery: {
    encode(message: SystemSQLQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SystemSQLQuery;
    fromJSON(object: any): SystemSQLQuery;
    toJSON(message: SystemSQLQuery): unknown;
    create(base?: DeepPartial<SystemSQLQuery>): SystemSQLQuery;
    fromPartial(object: DeepPartial<SystemSQLQuery>): SystemSQLQuery;
};
export declare const SystemSQLQuery_Aggregation: {
    encode(message: SystemSQLQuery_Aggregation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SystemSQLQuery_Aggregation;
    fromJSON(object: any): SystemSQLQuery_Aggregation;
    toJSON(message: SystemSQLQuery_Aggregation): unknown;
    create(base?: DeepPartial<SystemSQLQuery_Aggregation>): SystemSQLQuery_Aggregation;
    fromPartial(object: DeepPartial<SystemSQLQuery_Aggregation>): SystemSQLQuery_Aggregation;
};
export declare const SystemSQLQuery_Aggregation_Total: {
    encode(_: SystemSQLQuery_Aggregation_Total, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SystemSQLQuery_Aggregation_Total;
    fromJSON(_: any): SystemSQLQuery_Aggregation_Total;
    toJSON(_: SystemSQLQuery_Aggregation_Total): unknown;
    create(base?: DeepPartial<SystemSQLQuery_Aggregation_Total>): SystemSQLQuery_Aggregation_Total;
    fromPartial(_: DeepPartial<SystemSQLQuery_Aggregation_Total>): SystemSQLQuery_Aggregation_Total;
};
export declare const SystemSQLQuery_Aggregation_CountUnique: {
    encode(message: SystemSQLQuery_Aggregation_CountUnique, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SystemSQLQuery_Aggregation_CountUnique;
    fromJSON(object: any): SystemSQLQuery_Aggregation_CountUnique;
    toJSON(message: SystemSQLQuery_Aggregation_CountUnique): unknown;
    create(base?: DeepPartial<SystemSQLQuery_Aggregation_CountUnique>): SystemSQLQuery_Aggregation_CountUnique;
    fromPartial(object: DeepPartial<SystemSQLQuery_Aggregation_CountUnique>): SystemSQLQuery_Aggregation_CountUnique;
};
export declare const SystemSQLQuery_Aggregation_AggregateProperties: {
    encode(message: SystemSQLQuery_Aggregation_AggregateProperties, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SystemSQLQuery_Aggregation_AggregateProperties;
    fromJSON(object: any): SystemSQLQuery_Aggregation_AggregateProperties;
    toJSON(message: SystemSQLQuery_Aggregation_AggregateProperties): unknown;
    create(base?: DeepPartial<SystemSQLQuery_Aggregation_AggregateProperties>): SystemSQLQuery_Aggregation_AggregateProperties;
    fromPartial(object: DeepPartial<SystemSQLQuery_Aggregation_AggregateProperties>): SystemSQLQuery_Aggregation_AggregateProperties;
};
export declare const Notification: {
    encode(message: Notification, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Notification;
    fromJSON(object: any): Notification;
    toJSON(message: Notification): unknown;
    create(base?: DeepPartial<Notification>): Notification;
    fromPartial(object: DeepPartial<Notification>): Notification;
};
export declare const Notification_AttributesEntry: {
    encode(message: Notification_AttributesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Notification_AttributesEntry;
    fromJSON(object: any): Notification_AttributesEntry;
    toJSON(message: Notification_AttributesEntry): unknown;
    create(base?: DeepPartial<Notification_AttributesEntry>): Notification_AttributesEntry;
    fromPartial(object: DeepPartial<Notification_AttributesEntry>): Notification_AttributesEntry;
};
export declare const RichValue: {
    encode(message: RichValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RichValue;
    fromJSON(object: any): RichValue;
    toJSON(message: RichValue): unknown;
    create(base?: DeepPartial<RichValue>): RichValue;
    fromPartial(object: DeepPartial<RichValue>): RichValue;
};
export declare const RichStruct: {
    encode(message: RichStruct, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RichStruct;
    fromJSON(object: any): RichStruct;
    toJSON(message: RichStruct): unknown;
    create(base?: DeepPartial<RichStruct>): RichStruct;
    fromPartial(object: DeepPartial<RichStruct>): RichStruct;
};
export declare const RichStruct_FieldsEntry: {
    encode(message: RichStruct_FieldsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RichStruct_FieldsEntry;
    fromJSON(object: any): RichStruct_FieldsEntry;
    toJSON(message: RichStruct_FieldsEntry): unknown;
    create(base?: DeepPartial<RichStruct_FieldsEntry>): RichStruct_FieldsEntry;
    fromPartial(object: DeepPartial<RichStruct_FieldsEntry>): RichStruct_FieldsEntry;
};
export declare const RichValueList: {
    encode(message: RichValueList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RichValueList;
    fromJSON(object: any): RichValueList;
    toJSON(message: RichValueList): unknown;
    create(base?: DeepPartial<RichValueList>): RichValueList;
    fromPartial(object: DeepPartial<RichValueList>): RichValueList;
};
export declare const RichStructList: {
    encode(message: RichStructList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RichStructList;
    fromJSON(object: any): RichStructList;
    toJSON(message: RichStructList): unknown;
    create(base?: DeepPartial<RichStructList>): RichStructList;
    fromPartial(object: DeepPartial<RichStructList>): RichStructList;
};
export declare const BigDecimal: {
    encode(message: BigDecimal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BigDecimal;
    fromJSON(object: any): BigDecimal;
    toJSON(message: BigDecimal): unknown;
    create(base?: DeepPartial<BigDecimal>): BigDecimal;
    fromPartial(object: DeepPartial<BigDecimal>): BigDecimal;
};
export declare const BigInteger: {
    encode(message: BigInteger, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BigInteger;
    fromJSON(object: any): BigInteger;
    toJSON(message: BigInteger): unknown;
    create(base?: DeepPartial<BigInteger>): BigInteger;
    fromPartial(object: DeepPartial<BigInteger>): BigInteger;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=common.d.ts.map