import type { CallContext, CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal.js";
import { Empty } from "../../../google/protobuf/empty.js";
export interface CoinID {
    symbol?: string | undefined;
    address?: CoinID_AddressIdentifier | undefined;
}
export interface CoinID_AddressIdentifier {
    address: string;
    chain: string;
}
export interface GetPriceRequest {
    timestamp: Date | undefined;
    coinId: CoinID | undefined;
    source: string;
}
export interface GetPriceResponse {
    price: number;
    timestamp: Date | undefined;
}
export interface BatchGetPricesRequest {
    timestamps: Date[];
    coinIds: CoinID[];
}
export interface BatchGetPricesResponse {
    prices: BatchGetPricesResponse_CoinPrice[];
}
export interface BatchGetPricesResponse_CoinPrice {
    coinId: CoinID | undefined;
    price?: BatchGetPricesResponse_CoinPrice_Price | undefined;
    error?: string | undefined;
}
export interface BatchGetPricesResponse_CoinPrice_Price {
    results: GetPriceResponse[];
}
export interface ListCoinsRequest {
    limit: number;
    offset: number;
    searchQuery: string;
    chain: string;
}
export interface ListCoinsResponse {
    coins: CoinID[];
    coinAddressesInChain: {
        [key: string]: CoinID;
    };
}
export interface ListCoinsResponse_CoinAddressesInChainEntry {
    key: string;
    value: CoinID | undefined;
}
export interface CheckLatestPriceResponse {
    prices: CheckLatestPriceResponse_CoinPrice[];
    latestPrice: CheckLatestPriceResponse_CoinPrice | undefined;
}
export interface CheckLatestPriceResponse_CoinPrice {
    coinId: CoinID | undefined;
    price: number;
    timestamp: Date | undefined;
}
export interface BackfillCoinRequest {
    name: string;
    symbol: string;
    chain: string;
    address: string;
    coingeckoId: string;
    decimals: number;
    logoUrl: string;
    projectUrl: string;
    accountAddress: string;
    moduleName: string;
    structName: string;
}
export interface BackfillCoinResponse {
    symbol: string;
    message: string;
}
export declare const CoinID: {
    encode(message: CoinID, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CoinID;
    fromJSON(object: any): CoinID;
    toJSON(message: CoinID): unknown;
    create(base?: DeepPartial<CoinID>): CoinID;
    fromPartial(object: DeepPartial<CoinID>): CoinID;
};
export declare const CoinID_AddressIdentifier: {
    encode(message: CoinID_AddressIdentifier, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CoinID_AddressIdentifier;
    fromJSON(object: any): CoinID_AddressIdentifier;
    toJSON(message: CoinID_AddressIdentifier): unknown;
    create(base?: DeepPartial<CoinID_AddressIdentifier>): CoinID_AddressIdentifier;
    fromPartial(object: DeepPartial<CoinID_AddressIdentifier>): CoinID_AddressIdentifier;
};
export declare const GetPriceRequest: {
    encode(message: GetPriceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPriceRequest;
    fromJSON(object: any): GetPriceRequest;
    toJSON(message: GetPriceRequest): unknown;
    create(base?: DeepPartial<GetPriceRequest>): GetPriceRequest;
    fromPartial(object: DeepPartial<GetPriceRequest>): GetPriceRequest;
};
export declare const GetPriceResponse: {
    encode(message: GetPriceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPriceResponse;
    fromJSON(object: any): GetPriceResponse;
    toJSON(message: GetPriceResponse): unknown;
    create(base?: DeepPartial<GetPriceResponse>): GetPriceResponse;
    fromPartial(object: DeepPartial<GetPriceResponse>): GetPriceResponse;
};
export declare const BatchGetPricesRequest: {
    encode(message: BatchGetPricesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BatchGetPricesRequest;
    fromJSON(object: any): BatchGetPricesRequest;
    toJSON(message: BatchGetPricesRequest): unknown;
    create(base?: DeepPartial<BatchGetPricesRequest>): BatchGetPricesRequest;
    fromPartial(object: DeepPartial<BatchGetPricesRequest>): BatchGetPricesRequest;
};
export declare const BatchGetPricesResponse: {
    encode(message: BatchGetPricesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BatchGetPricesResponse;
    fromJSON(object: any): BatchGetPricesResponse;
    toJSON(message: BatchGetPricesResponse): unknown;
    create(base?: DeepPartial<BatchGetPricesResponse>): BatchGetPricesResponse;
    fromPartial(object: DeepPartial<BatchGetPricesResponse>): BatchGetPricesResponse;
};
export declare const BatchGetPricesResponse_CoinPrice: {
    encode(message: BatchGetPricesResponse_CoinPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BatchGetPricesResponse_CoinPrice;
    fromJSON(object: any): BatchGetPricesResponse_CoinPrice;
    toJSON(message: BatchGetPricesResponse_CoinPrice): unknown;
    create(base?: DeepPartial<BatchGetPricesResponse_CoinPrice>): BatchGetPricesResponse_CoinPrice;
    fromPartial(object: DeepPartial<BatchGetPricesResponse_CoinPrice>): BatchGetPricesResponse_CoinPrice;
};
export declare const BatchGetPricesResponse_CoinPrice_Price: {
    encode(message: BatchGetPricesResponse_CoinPrice_Price, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BatchGetPricesResponse_CoinPrice_Price;
    fromJSON(object: any): BatchGetPricesResponse_CoinPrice_Price;
    toJSON(message: BatchGetPricesResponse_CoinPrice_Price): unknown;
    create(base?: DeepPartial<BatchGetPricesResponse_CoinPrice_Price>): BatchGetPricesResponse_CoinPrice_Price;
    fromPartial(object: DeepPartial<BatchGetPricesResponse_CoinPrice_Price>): BatchGetPricesResponse_CoinPrice_Price;
};
export declare const ListCoinsRequest: {
    encode(message: ListCoinsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListCoinsRequest;
    fromJSON(object: any): ListCoinsRequest;
    toJSON(message: ListCoinsRequest): unknown;
    create(base?: DeepPartial<ListCoinsRequest>): ListCoinsRequest;
    fromPartial(object: DeepPartial<ListCoinsRequest>): ListCoinsRequest;
};
export declare const ListCoinsResponse: {
    encode(message: ListCoinsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListCoinsResponse;
    fromJSON(object: any): ListCoinsResponse;
    toJSON(message: ListCoinsResponse): unknown;
    create(base?: DeepPartial<ListCoinsResponse>): ListCoinsResponse;
    fromPartial(object: DeepPartial<ListCoinsResponse>): ListCoinsResponse;
};
export declare const ListCoinsResponse_CoinAddressesInChainEntry: {
    encode(message: ListCoinsResponse_CoinAddressesInChainEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListCoinsResponse_CoinAddressesInChainEntry;
    fromJSON(object: any): ListCoinsResponse_CoinAddressesInChainEntry;
    toJSON(message: ListCoinsResponse_CoinAddressesInChainEntry): unknown;
    create(base?: DeepPartial<ListCoinsResponse_CoinAddressesInChainEntry>): ListCoinsResponse_CoinAddressesInChainEntry;
    fromPartial(object: DeepPartial<ListCoinsResponse_CoinAddressesInChainEntry>): ListCoinsResponse_CoinAddressesInChainEntry;
};
export declare const CheckLatestPriceResponse: {
    encode(message: CheckLatestPriceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckLatestPriceResponse;
    fromJSON(object: any): CheckLatestPriceResponse;
    toJSON(message: CheckLatestPriceResponse): unknown;
    create(base?: DeepPartial<CheckLatestPriceResponse>): CheckLatestPriceResponse;
    fromPartial(object: DeepPartial<CheckLatestPriceResponse>): CheckLatestPriceResponse;
};
export declare const CheckLatestPriceResponse_CoinPrice: {
    encode(message: CheckLatestPriceResponse_CoinPrice, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CheckLatestPriceResponse_CoinPrice;
    fromJSON(object: any): CheckLatestPriceResponse_CoinPrice;
    toJSON(message: CheckLatestPriceResponse_CoinPrice): unknown;
    create(base?: DeepPartial<CheckLatestPriceResponse_CoinPrice>): CheckLatestPriceResponse_CoinPrice;
    fromPartial(object: DeepPartial<CheckLatestPriceResponse_CoinPrice>): CheckLatestPriceResponse_CoinPrice;
};
export declare const BackfillCoinRequest: {
    encode(message: BackfillCoinRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BackfillCoinRequest;
    fromJSON(object: any): BackfillCoinRequest;
    toJSON(message: BackfillCoinRequest): unknown;
    create(base?: DeepPartial<BackfillCoinRequest>): BackfillCoinRequest;
    fromPartial(object: DeepPartial<BackfillCoinRequest>): BackfillCoinRequest;
};
export declare const BackfillCoinResponse: {
    encode(message: BackfillCoinResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BackfillCoinResponse;
    fromJSON(object: any): BackfillCoinResponse;
    toJSON(message: BackfillCoinResponse): unknown;
    create(base?: DeepPartial<BackfillCoinResponse>): BackfillCoinResponse;
    fromPartial(object: DeepPartial<BackfillCoinResponse>): BackfillCoinResponse;
};
export type PriceServiceDefinition = typeof PriceServiceDefinition;
export declare const PriceServiceDefinition: {
    readonly name: "PriceService";
    readonly fullName: "price_service.PriceService";
    readonly methods: {
        readonly getPrice: {
            readonly name: "GetPrice";
            readonly requestType: {
                encode(message: GetPriceRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetPriceRequest;
                fromJSON(object: any): GetPriceRequest;
                toJSON(message: GetPriceRequest): unknown;
                create(base?: DeepPartial<GetPriceRequest>): GetPriceRequest;
                fromPartial(object: DeepPartial<GetPriceRequest>): GetPriceRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: GetPriceResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): GetPriceResponse;
                fromJSON(object: any): GetPriceResponse;
                toJSON(message: GetPriceResponse): unknown;
                create(base?: DeepPartial<GetPriceResponse>): GetPriceResponse;
                fromPartial(object: DeepPartial<GetPriceResponse>): GetPriceResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 578365826: readonly [Uint8Array];
                };
            };
        };
        readonly batchGetPrices: {
            readonly name: "BatchGetPrices";
            readonly requestType: {
                encode(message: BatchGetPricesRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BatchGetPricesRequest;
                fromJSON(object: any): BatchGetPricesRequest;
                toJSON(message: BatchGetPricesRequest): unknown;
                create(base?: DeepPartial<BatchGetPricesRequest>): BatchGetPricesRequest;
                fromPartial(object: DeepPartial<BatchGetPricesRequest>): BatchGetPricesRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BatchGetPricesResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BatchGetPricesResponse;
                fromJSON(object: any): BatchGetPricesResponse;
                toJSON(message: BatchGetPricesResponse): unknown;
                create(base?: DeepPartial<BatchGetPricesResponse>): BatchGetPricesResponse;
                fromPartial(object: DeepPartial<BatchGetPricesResponse>): BatchGetPricesResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 578365826: readonly [Uint8Array];
                };
            };
        };
        readonly listCoins: {
            readonly name: "ListCoins";
            readonly requestType: {
                encode(message: ListCoinsRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListCoinsRequest;
                fromJSON(object: any): ListCoinsRequest;
                toJSON(message: ListCoinsRequest): unknown;
                create(base?: DeepPartial<ListCoinsRequest>): ListCoinsRequest;
                fromPartial(object: DeepPartial<ListCoinsRequest>): ListCoinsRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: ListCoinsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): ListCoinsResponse;
                fromJSON(object: any): ListCoinsResponse;
                toJSON(message: ListCoinsResponse): unknown;
                create(base?: DeepPartial<ListCoinsResponse>): ListCoinsResponse;
                fromPartial(object: DeepPartial<ListCoinsResponse>): ListCoinsResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 578365826: readonly [Uint8Array];
                };
            };
        };
        readonly checkLatestPrice: {
            readonly name: "CheckLatestPrice";
            readonly requestType: {
                encode(_: Empty, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): Empty;
                fromJSON(_: any): Empty;
                toJSON(_: Empty): unknown;
                create(base?: {}): Empty;
                fromPartial(_: {}): Empty;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: CheckLatestPriceResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): CheckLatestPriceResponse;
                fromJSON(object: any): CheckLatestPriceResponse;
                toJSON(message: CheckLatestPriceResponse): unknown;
                create(base?: DeepPartial<CheckLatestPriceResponse>): CheckLatestPriceResponse;
                fromPartial(object: DeepPartial<CheckLatestPriceResponse>): CheckLatestPriceResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 578365826: readonly [Uint8Array];
                };
            };
        };
        readonly backfillCoin: {
            readonly name: "BackfillCoin";
            readonly requestType: {
                encode(message: BackfillCoinRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BackfillCoinRequest;
                fromJSON(object: any): BackfillCoinRequest;
                toJSON(message: BackfillCoinRequest): unknown;
                create(base?: DeepPartial<BackfillCoinRequest>): BackfillCoinRequest;
                fromPartial(object: DeepPartial<BackfillCoinRequest>): BackfillCoinRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: BackfillCoinResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): BackfillCoinResponse;
                fromJSON(object: any): BackfillCoinResponse;
                toJSON(message: BackfillCoinResponse): unknown;
                create(base?: DeepPartial<BackfillCoinResponse>): BackfillCoinResponse;
                fromPartial(object: DeepPartial<BackfillCoinResponse>): BackfillCoinResponse;
            };
            readonly responseStream: false;
            readonly options: {
                readonly _unknownFields: {
                    readonly 578365826: readonly [Uint8Array];
                };
            };
        };
    };
};
export interface PriceServiceImplementation<CallContextExt = {}> {
    getPrice(request: GetPriceRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetPriceResponse>>;
    batchGetPrices(request: BatchGetPricesRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BatchGetPricesResponse>>;
    listCoins(request: ListCoinsRequest, context: CallContext & CallContextExt): Promise<DeepPartial<ListCoinsResponse>>;
    checkLatestPrice(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<CheckLatestPriceResponse>>;
    backfillCoin(request: BackfillCoinRequest, context: CallContext & CallContextExt): Promise<DeepPartial<BackfillCoinResponse>>;
}
export interface PriceServiceClient<CallOptionsExt = {}> {
    getPrice(request: DeepPartial<GetPriceRequest>, options?: CallOptions & CallOptionsExt): Promise<GetPriceResponse>;
    batchGetPrices(request: DeepPartial<BatchGetPricesRequest>, options?: CallOptions & CallOptionsExt): Promise<BatchGetPricesResponse>;
    listCoins(request: DeepPartial<ListCoinsRequest>, options?: CallOptions & CallOptionsExt): Promise<ListCoinsResponse>;
    checkLatestPrice(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<CheckLatestPriceResponse>;
    backfillCoin(request: DeepPartial<BackfillCoinRequest>, options?: CallOptions & CallOptionsExt): Promise<BackfillCoinResponse>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
//# sourceMappingURL=price.d.ts.map