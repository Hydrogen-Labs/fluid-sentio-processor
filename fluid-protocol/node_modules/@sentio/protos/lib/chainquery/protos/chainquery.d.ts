import type { CallContext, CallOptions } from "nice-grpc-common";
import _m0 from "protobufjs/minimal.js";
export interface AptosGetTxnsByFunctionRequest {
    network: string;
    fromVersion: bigint;
    toVersion: bigint;
    function: string;
    matchAll: boolean;
    typedArguments: string[];
    includeChanges: boolean;
    resourceChangesMoveTypePrefix: string;
}
export interface AptosGetTxnsByVersionRequest {
    network: string;
    fromVersion: bigint;
    toVersion: bigint;
    headerOnly?: boolean | undefined;
}
export interface AptosGetTxnsByEventRequest {
    network: string;
    fromVersion: bigint;
    toVersion: bigint;
    address: string;
    type: string;
    includeAllEvents: boolean;
    includeChanges: boolean;
    resourceChangesMoveTypePrefix: string;
}
export interface AptosSQLQueryRequest {
    network: string;
    fromVersion: bigint;
    toVersion: bigint;
    sql: string;
    arbitraryRange: boolean;
}
export interface QueryPhaseSummary {
    name: string;
    timeTookMs: bigint;
}
export interface QueryExecutionSummary {
    timeTookMs: bigint;
    resultNumRows?: bigint | undefined;
    resultNumBytes?: bigint | undefined;
    numPartitionsWithMaterializedView?: bigint | undefined;
    numPartitionsWithoutMaterializedView?: bigint | undefined;
    numPartitions?: bigint | undefined;
    phases: QueryPhaseSummary[];
    qcacheSignature?: string | undefined;
    qcacheHit?: boolean | undefined;
}
export interface AptosGetTxnsResponse {
    documents: Uint8Array[];
    executionSummary?: QueryExecutionSummary | undefined;
}
export interface AptosRefreshRequest {
}
export interface VoidResponse {
}
export interface EvmSQLQueryRequest {
    network: string;
    sql: string;
    nocache?: boolean | undefined;
}
export interface EvmGetHeaderRequest {
    network: string;
    fromBlock?: bigint | undefined;
    toBlock?: bigint | undefined;
    blockNumbers: bigint[];
}
export interface EvmQueryResponse {
    rows: Uint8Array[];
    executionSummary?: QueryExecutionSummary | undefined;
}
export interface SuiGetCheckpointTimeRequest {
    network: string;
    checkpointSequenceNumber: bigint;
}
export interface SuiGetCheckpointTimeResponse {
    checkpointTimestampMs?: bigint | undefined;
    transactionMinTimestampMs?: bigint | undefined;
    transactionMaxTimestampMs?: bigint | undefined;
}
export interface RemoteResultRequest {
    token: string;
    position: number;
    keepAlive: boolean;
}
export interface RemoteResultResponse {
    rows: Uint8Array[];
}
export declare const AptosGetTxnsByFunctionRequest: {
    encode(message: AptosGetTxnsByFunctionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByFunctionRequest;
    fromJSON(object: any): AptosGetTxnsByFunctionRequest;
    toJSON(message: AptosGetTxnsByFunctionRequest): unknown;
    create(base?: DeepPartial<AptosGetTxnsByFunctionRequest>): AptosGetTxnsByFunctionRequest;
    fromPartial(object: DeepPartial<AptosGetTxnsByFunctionRequest>): AptosGetTxnsByFunctionRequest;
};
export declare const AptosGetTxnsByVersionRequest: {
    encode(message: AptosGetTxnsByVersionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByVersionRequest;
    fromJSON(object: any): AptosGetTxnsByVersionRequest;
    toJSON(message: AptosGetTxnsByVersionRequest): unknown;
    create(base?: DeepPartial<AptosGetTxnsByVersionRequest>): AptosGetTxnsByVersionRequest;
    fromPartial(object: DeepPartial<AptosGetTxnsByVersionRequest>): AptosGetTxnsByVersionRequest;
};
export declare const AptosGetTxnsByEventRequest: {
    encode(message: AptosGetTxnsByEventRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByEventRequest;
    fromJSON(object: any): AptosGetTxnsByEventRequest;
    toJSON(message: AptosGetTxnsByEventRequest): unknown;
    create(base?: DeepPartial<AptosGetTxnsByEventRequest>): AptosGetTxnsByEventRequest;
    fromPartial(object: DeepPartial<AptosGetTxnsByEventRequest>): AptosGetTxnsByEventRequest;
};
export declare const AptosSQLQueryRequest: {
    encode(message: AptosSQLQueryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AptosSQLQueryRequest;
    fromJSON(object: any): AptosSQLQueryRequest;
    toJSON(message: AptosSQLQueryRequest): unknown;
    create(base?: DeepPartial<AptosSQLQueryRequest>): AptosSQLQueryRequest;
    fromPartial(object: DeepPartial<AptosSQLQueryRequest>): AptosSQLQueryRequest;
};
export declare const QueryPhaseSummary: {
    encode(message: QueryPhaseSummary, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPhaseSummary;
    fromJSON(object: any): QueryPhaseSummary;
    toJSON(message: QueryPhaseSummary): unknown;
    create(base?: DeepPartial<QueryPhaseSummary>): QueryPhaseSummary;
    fromPartial(object: DeepPartial<QueryPhaseSummary>): QueryPhaseSummary;
};
export declare const QueryExecutionSummary: {
    encode(message: QueryExecutionSummary, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryExecutionSummary;
    fromJSON(object: any): QueryExecutionSummary;
    toJSON(message: QueryExecutionSummary): unknown;
    create(base?: DeepPartial<QueryExecutionSummary>): QueryExecutionSummary;
    fromPartial(object: DeepPartial<QueryExecutionSummary>): QueryExecutionSummary;
};
export declare const AptosGetTxnsResponse: {
    encode(message: AptosGetTxnsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsResponse;
    fromJSON(object: any): AptosGetTxnsResponse;
    toJSON(message: AptosGetTxnsResponse): unknown;
    create(base?: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
    fromPartial(object: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
};
export declare const AptosRefreshRequest: {
    encode(_: AptosRefreshRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AptosRefreshRequest;
    fromJSON(_: any): AptosRefreshRequest;
    toJSON(_: AptosRefreshRequest): unknown;
    create(base?: DeepPartial<AptosRefreshRequest>): AptosRefreshRequest;
    fromPartial(_: DeepPartial<AptosRefreshRequest>): AptosRefreshRequest;
};
export declare const VoidResponse: {
    encode(_: VoidResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VoidResponse;
    fromJSON(_: any): VoidResponse;
    toJSON(_: VoidResponse): unknown;
    create(base?: DeepPartial<VoidResponse>): VoidResponse;
    fromPartial(_: DeepPartial<VoidResponse>): VoidResponse;
};
export declare const EvmSQLQueryRequest: {
    encode(message: EvmSQLQueryRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EvmSQLQueryRequest;
    fromJSON(object: any): EvmSQLQueryRequest;
    toJSON(message: EvmSQLQueryRequest): unknown;
    create(base?: DeepPartial<EvmSQLQueryRequest>): EvmSQLQueryRequest;
    fromPartial(object: DeepPartial<EvmSQLQueryRequest>): EvmSQLQueryRequest;
};
export declare const EvmGetHeaderRequest: {
    encode(message: EvmGetHeaderRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EvmGetHeaderRequest;
    fromJSON(object: any): EvmGetHeaderRequest;
    toJSON(message: EvmGetHeaderRequest): unknown;
    create(base?: DeepPartial<EvmGetHeaderRequest>): EvmGetHeaderRequest;
    fromPartial(object: DeepPartial<EvmGetHeaderRequest>): EvmGetHeaderRequest;
};
export declare const EvmQueryResponse: {
    encode(message: EvmQueryResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EvmQueryResponse;
    fromJSON(object: any): EvmQueryResponse;
    toJSON(message: EvmQueryResponse): unknown;
    create(base?: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
    fromPartial(object: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
};
export declare const SuiGetCheckpointTimeRequest: {
    encode(message: SuiGetCheckpointTimeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SuiGetCheckpointTimeRequest;
    fromJSON(object: any): SuiGetCheckpointTimeRequest;
    toJSON(message: SuiGetCheckpointTimeRequest): unknown;
    create(base?: DeepPartial<SuiGetCheckpointTimeRequest>): SuiGetCheckpointTimeRequest;
    fromPartial(object: DeepPartial<SuiGetCheckpointTimeRequest>): SuiGetCheckpointTimeRequest;
};
export declare const SuiGetCheckpointTimeResponse: {
    encode(message: SuiGetCheckpointTimeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SuiGetCheckpointTimeResponse;
    fromJSON(object: any): SuiGetCheckpointTimeResponse;
    toJSON(message: SuiGetCheckpointTimeResponse): unknown;
    create(base?: DeepPartial<SuiGetCheckpointTimeResponse>): SuiGetCheckpointTimeResponse;
    fromPartial(object: DeepPartial<SuiGetCheckpointTimeResponse>): SuiGetCheckpointTimeResponse;
};
export declare const RemoteResultRequest: {
    encode(message: RemoteResultRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteResultRequest;
    fromJSON(object: any): RemoteResultRequest;
    toJSON(message: RemoteResultRequest): unknown;
    create(base?: DeepPartial<RemoteResultRequest>): RemoteResultRequest;
    fromPartial(object: DeepPartial<RemoteResultRequest>): RemoteResultRequest;
};
export declare const RemoteResultResponse: {
    encode(message: RemoteResultResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoteResultResponse;
    fromJSON(object: any): RemoteResultResponse;
    toJSON(message: RemoteResultResponse): unknown;
    create(base?: DeepPartial<RemoteResultResponse>): RemoteResultResponse;
    fromPartial(object: DeepPartial<RemoteResultResponse>): RemoteResultResponse;
};
export type AptosQueryDefinition = typeof AptosQueryDefinition;
export declare const AptosQueryDefinition: {
    readonly name: "AptosQuery";
    readonly fullName: "chainquery.AptosQuery";
    readonly methods: {
        readonly aptosGetTxnsByFunction: {
            readonly name: "AptosGetTxnsByFunction";
            readonly requestType: {
                encode(message: AptosGetTxnsByFunctionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByFunctionRequest;
                fromJSON(object: any): AptosGetTxnsByFunctionRequest;
                toJSON(message: AptosGetTxnsByFunctionRequest): unknown;
                create(base?: DeepPartial<AptosGetTxnsByFunctionRequest>): AptosGetTxnsByFunctionRequest;
                fromPartial(object: DeepPartial<AptosGetTxnsByFunctionRequest>): AptosGetTxnsByFunctionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AptosGetTxnsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsResponse;
                fromJSON(object: any): AptosGetTxnsResponse;
                toJSON(message: AptosGetTxnsResponse): unknown;
                create(base?: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
                fromPartial(object: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly aptosGetTxnsByFunctionStream: {
            readonly name: "AptosGetTxnsByFunctionStream";
            readonly requestType: {
                encode(message: AptosGetTxnsByFunctionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByFunctionRequest;
                fromJSON(object: any): AptosGetTxnsByFunctionRequest;
                toJSON(message: AptosGetTxnsByFunctionRequest): unknown;
                create(base?: DeepPartial<AptosGetTxnsByFunctionRequest>): AptosGetTxnsByFunctionRequest;
                fromPartial(object: DeepPartial<AptosGetTxnsByFunctionRequest>): AptosGetTxnsByFunctionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AptosGetTxnsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsResponse;
                fromJSON(object: any): AptosGetTxnsResponse;
                toJSON(message: AptosGetTxnsResponse): unknown;
                create(base?: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
                fromPartial(object: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        readonly aptosGetTxnsByVersion: {
            readonly name: "AptosGetTxnsByVersion";
            readonly requestType: {
                encode(message: AptosGetTxnsByVersionRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByVersionRequest;
                fromJSON(object: any): AptosGetTxnsByVersionRequest;
                toJSON(message: AptosGetTxnsByVersionRequest): unknown;
                create(base?: DeepPartial<AptosGetTxnsByVersionRequest>): AptosGetTxnsByVersionRequest;
                fromPartial(object: DeepPartial<AptosGetTxnsByVersionRequest>): AptosGetTxnsByVersionRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AptosGetTxnsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsResponse;
                fromJSON(object: any): AptosGetTxnsResponse;
                toJSON(message: AptosGetTxnsResponse): unknown;
                create(base?: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
                fromPartial(object: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly aptosGetTxnsByEvent: {
            readonly name: "AptosGetTxnsByEvent";
            readonly requestType: {
                encode(message: AptosGetTxnsByEventRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByEventRequest;
                fromJSON(object: any): AptosGetTxnsByEventRequest;
                toJSON(message: AptosGetTxnsByEventRequest): unknown;
                create(base?: DeepPartial<AptosGetTxnsByEventRequest>): AptosGetTxnsByEventRequest;
                fromPartial(object: DeepPartial<AptosGetTxnsByEventRequest>): AptosGetTxnsByEventRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AptosGetTxnsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsResponse;
                fromJSON(object: any): AptosGetTxnsResponse;
                toJSON(message: AptosGetTxnsResponse): unknown;
                create(base?: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
                fromPartial(object: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly aptosGetTxnsByEventStream: {
            readonly name: "AptosGetTxnsByEventStream";
            readonly requestType: {
                encode(message: AptosGetTxnsByEventRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsByEventRequest;
                fromJSON(object: any): AptosGetTxnsByEventRequest;
                toJSON(message: AptosGetTxnsByEventRequest): unknown;
                create(base?: DeepPartial<AptosGetTxnsByEventRequest>): AptosGetTxnsByEventRequest;
                fromPartial(object: DeepPartial<AptosGetTxnsByEventRequest>): AptosGetTxnsByEventRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AptosGetTxnsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsResponse;
                fromJSON(object: any): AptosGetTxnsResponse;
                toJSON(message: AptosGetTxnsResponse): unknown;
                create(base?: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
                fromPartial(object: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        readonly aptosRefresh: {
            readonly name: "AptosRefresh";
            readonly requestType: {
                encode(_: AptosRefreshRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosRefreshRequest;
                fromJSON(_: any): AptosRefreshRequest;
                toJSON(_: AptosRefreshRequest): unknown;
                create(base?: DeepPartial<AptosRefreshRequest>): AptosRefreshRequest;
                fromPartial(_: DeepPartial<AptosRefreshRequest>): AptosRefreshRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: VoidResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VoidResponse;
                fromJSON(_: any): VoidResponse;
                toJSON(_: VoidResponse): unknown;
                create(base?: DeepPartial<VoidResponse>): VoidResponse;
                fromPartial(_: DeepPartial<VoidResponse>): VoidResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly aptosSQLQuery: {
            readonly name: "AptosSQLQuery";
            readonly requestType: {
                encode(message: AptosSQLQueryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosSQLQueryRequest;
                fromJSON(object: any): AptosSQLQueryRequest;
                toJSON(message: AptosSQLQueryRequest): unknown;
                create(base?: DeepPartial<AptosSQLQueryRequest>): AptosSQLQueryRequest;
                fromPartial(object: DeepPartial<AptosSQLQueryRequest>): AptosSQLQueryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: AptosGetTxnsResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): AptosGetTxnsResponse;
                fromJSON(object: any): AptosGetTxnsResponse;
                toJSON(message: AptosGetTxnsResponse): unknown;
                create(base?: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
                fromPartial(object: DeepPartial<AptosGetTxnsResponse>): AptosGetTxnsResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface AptosQueryServiceImplementation<CallContextExt = {}> {
    aptosGetTxnsByFunction(request: AptosGetTxnsByFunctionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AptosGetTxnsResponse>>;
    aptosGetTxnsByFunctionStream(request: AptosGetTxnsByFunctionRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<AptosGetTxnsResponse>>;
    aptosGetTxnsByVersion(request: AptosGetTxnsByVersionRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AptosGetTxnsResponse>>;
    aptosGetTxnsByEvent(request: AptosGetTxnsByEventRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AptosGetTxnsResponse>>;
    aptosGetTxnsByEventStream(request: AptosGetTxnsByEventRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<AptosGetTxnsResponse>>;
    aptosRefresh(request: AptosRefreshRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VoidResponse>>;
    aptosSQLQuery(request: AptosSQLQueryRequest, context: CallContext & CallContextExt): Promise<DeepPartial<AptosGetTxnsResponse>>;
}
export interface AptosQueryClient<CallOptionsExt = {}> {
    aptosGetTxnsByFunction(request: DeepPartial<AptosGetTxnsByFunctionRequest>, options?: CallOptions & CallOptionsExt): Promise<AptosGetTxnsResponse>;
    aptosGetTxnsByFunctionStream(request: DeepPartial<AptosGetTxnsByFunctionRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<AptosGetTxnsResponse>;
    aptosGetTxnsByVersion(request: DeepPartial<AptosGetTxnsByVersionRequest>, options?: CallOptions & CallOptionsExt): Promise<AptosGetTxnsResponse>;
    aptosGetTxnsByEvent(request: DeepPartial<AptosGetTxnsByEventRequest>, options?: CallOptions & CallOptionsExt): Promise<AptosGetTxnsResponse>;
    aptosGetTxnsByEventStream(request: DeepPartial<AptosGetTxnsByEventRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<AptosGetTxnsResponse>;
    aptosRefresh(request: DeepPartial<AptosRefreshRequest>, options?: CallOptions & CallOptionsExt): Promise<VoidResponse>;
    aptosSQLQuery(request: DeepPartial<AptosSQLQueryRequest>, options?: CallOptions & CallOptionsExt): Promise<AptosGetTxnsResponse>;
}
export type EvmQueryDefinition = typeof EvmQueryDefinition;
export declare const EvmQueryDefinition: {
    readonly name: "EvmQuery";
    readonly fullName: "chainquery.EvmQuery";
    readonly methods: {
        readonly evmSQLQuery: {
            readonly name: "EvmSQLQuery";
            readonly requestType: {
                encode(message: EvmSQLQueryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EvmSQLQueryRequest;
                fromJSON(object: any): EvmSQLQueryRequest;
                toJSON(message: EvmSQLQueryRequest): unknown;
                create(base?: DeepPartial<EvmSQLQueryRequest>): EvmSQLQueryRequest;
                fromPartial(object: DeepPartial<EvmSQLQueryRequest>): EvmSQLQueryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: EvmQueryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EvmQueryResponse;
                fromJSON(object: any): EvmQueryResponse;
                toJSON(message: EvmQueryResponse): unknown;
                create(base?: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
                fromPartial(object: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        readonly evmGetHeader: {
            readonly name: "EvmGetHeader";
            readonly requestType: {
                encode(message: EvmGetHeaderRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EvmGetHeaderRequest;
                fromJSON(object: any): EvmGetHeaderRequest;
                toJSON(message: EvmGetHeaderRequest): unknown;
                create(base?: DeepPartial<EvmGetHeaderRequest>): EvmGetHeaderRequest;
                fromPartial(object: DeepPartial<EvmGetHeaderRequest>): EvmGetHeaderRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: EvmQueryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EvmQueryResponse;
                fromJSON(object: any): EvmQueryResponse;
                toJSON(message: EvmQueryResponse): unknown;
                create(base?: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
                fromPartial(object: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly evmHintHeaderCache: {
            readonly name: "EvmHintHeaderCache";
            readonly requestType: {
                encode(message: EvmGetHeaderRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EvmGetHeaderRequest;
                fromJSON(object: any): EvmGetHeaderRequest;
                toJSON(message: EvmGetHeaderRequest): unknown;
                create(base?: DeepPartial<EvmGetHeaderRequest>): EvmGetHeaderRequest;
                fromPartial(object: DeepPartial<EvmGetHeaderRequest>): EvmGetHeaderRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: VoidResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VoidResponse;
                fromJSON(_: any): VoidResponse;
                toJSON(_: VoidResponse): unknown;
                create(base?: DeepPartial<VoidResponse>): VoidResponse;
                fromPartial(_: DeepPartial<VoidResponse>): VoidResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface EvmQueryServiceImplementation<CallContextExt = {}> {
    evmSQLQuery(request: EvmSQLQueryRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<EvmQueryResponse>>;
    evmGetHeader(request: EvmGetHeaderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<EvmQueryResponse>>;
    evmHintHeaderCache(request: EvmGetHeaderRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VoidResponse>>;
}
export interface EvmQueryClient<CallOptionsExt = {}> {
    evmSQLQuery(request: DeepPartial<EvmSQLQueryRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<EvmQueryResponse>;
    evmGetHeader(request: DeepPartial<EvmGetHeaderRequest>, options?: CallOptions & CallOptionsExt): Promise<EvmQueryResponse>;
    evmHintHeaderCache(request: DeepPartial<EvmGetHeaderRequest>, options?: CallOptions & CallOptionsExt): Promise<VoidResponse>;
}
export type SuiQueryDefinition = typeof SuiQueryDefinition;
export declare const SuiQueryDefinition: {
    readonly name: "SuiQuery";
    readonly fullName: "chainquery.SuiQuery";
    readonly methods: {
        readonly suiSQLQuery: {
            readonly name: "SuiSQLQuery";
            readonly requestType: {
                encode(message: EvmSQLQueryRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EvmSQLQueryRequest;
                fromJSON(object: any): EvmSQLQueryRequest;
                toJSON(message: EvmSQLQueryRequest): unknown;
                create(base?: DeepPartial<EvmSQLQueryRequest>): EvmSQLQueryRequest;
                fromPartial(object: DeepPartial<EvmSQLQueryRequest>): EvmSQLQueryRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: EvmQueryResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): EvmQueryResponse;
                fromJSON(object: any): EvmQueryResponse;
                toJSON(message: EvmQueryResponse): unknown;
                create(base?: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
                fromPartial(object: DeepPartial<EvmQueryResponse>): EvmQueryResponse;
            };
            readonly responseStream: true;
            readonly options: {};
        };
        readonly getCheckpointTime: {
            readonly name: "GetCheckpointTime";
            readonly requestType: {
                encode(message: SuiGetCheckpointTimeRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SuiGetCheckpointTimeRequest;
                fromJSON(object: any): SuiGetCheckpointTimeRequest;
                toJSON(message: SuiGetCheckpointTimeRequest): unknown;
                create(base?: DeepPartial<SuiGetCheckpointTimeRequest>): SuiGetCheckpointTimeRequest;
                fromPartial(object: DeepPartial<SuiGetCheckpointTimeRequest>): SuiGetCheckpointTimeRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: SuiGetCheckpointTimeResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): SuiGetCheckpointTimeResponse;
                fromJSON(object: any): SuiGetCheckpointTimeResponse;
                toJSON(message: SuiGetCheckpointTimeResponse): unknown;
                create(base?: DeepPartial<SuiGetCheckpointTimeResponse>): SuiGetCheckpointTimeResponse;
                fromPartial(object: DeepPartial<SuiGetCheckpointTimeResponse>): SuiGetCheckpointTimeResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface SuiQueryServiceImplementation<CallContextExt = {}> {
    suiSQLQuery(request: EvmSQLQueryRequest, context: CallContext & CallContextExt): ServerStreamingMethodResult<DeepPartial<EvmQueryResponse>>;
    getCheckpointTime(request: SuiGetCheckpointTimeRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SuiGetCheckpointTimeResponse>>;
}
export interface SuiQueryClient<CallOptionsExt = {}> {
    suiSQLQuery(request: DeepPartial<EvmSQLQueryRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<EvmQueryResponse>;
    getCheckpointTime(request: DeepPartial<SuiGetCheckpointTimeRequest>, options?: CallOptions & CallOptionsExt): Promise<SuiGetCheckpointTimeResponse>;
}
export type RemoteResultTransferServiceDefinition = typeof RemoteResultTransferServiceDefinition;
export declare const RemoteResultTransferServiceDefinition: {
    readonly name: "RemoteResultTransferService";
    readonly fullName: "chainquery.RemoteResultTransferService";
    readonly methods: {
        readonly getResult: {
            readonly name: "GetResult";
            readonly requestType: {
                encode(message: RemoteResultRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteResultRequest;
                fromJSON(object: any): RemoteResultRequest;
                toJSON(message: RemoteResultRequest): unknown;
                create(base?: DeepPartial<RemoteResultRequest>): RemoteResultRequest;
                fromPartial(object: DeepPartial<RemoteResultRequest>): RemoteResultRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(message: RemoteResultResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteResultResponse;
                fromJSON(object: any): RemoteResultResponse;
                toJSON(message: RemoteResultResponse): unknown;
                create(base?: DeepPartial<RemoteResultResponse>): RemoteResultResponse;
                fromPartial(object: DeepPartial<RemoteResultResponse>): RemoteResultResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
        readonly destroyResult: {
            readonly name: "DestroyResult";
            readonly requestType: {
                encode(message: RemoteResultRequest, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): RemoteResultRequest;
                fromJSON(object: any): RemoteResultRequest;
                toJSON(message: RemoteResultRequest): unknown;
                create(base?: DeepPartial<RemoteResultRequest>): RemoteResultRequest;
                fromPartial(object: DeepPartial<RemoteResultRequest>): RemoteResultRequest;
            };
            readonly requestStream: false;
            readonly responseType: {
                encode(_: VoidResponse, writer?: _m0.Writer): _m0.Writer;
                decode(input: _m0.Reader | Uint8Array, length?: number): VoidResponse;
                fromJSON(_: any): VoidResponse;
                toJSON(_: VoidResponse): unknown;
                create(base?: DeepPartial<VoidResponse>): VoidResponse;
                fromPartial(_: DeepPartial<VoidResponse>): VoidResponse;
            };
            readonly responseStream: false;
            readonly options: {};
        };
    };
};
export interface RemoteResultTransferServiceImplementation<CallContextExt = {}> {
    getResult(request: RemoteResultRequest, context: CallContext & CallContextExt): Promise<DeepPartial<RemoteResultResponse>>;
    destroyResult(request: RemoteResultRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VoidResponse>>;
}
export interface RemoteResultTransferServiceClient<CallOptionsExt = {}> {
    getResult(request: DeepPartial<RemoteResultRequest>, options?: CallOptions & CallOptionsExt): Promise<RemoteResultResponse>;
    destroyResult(request: DeepPartial<RemoteResultRequest>, options?: CallOptions & CallOptionsExt): Promise<VoidResponse>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export type ServerStreamingMethodResult<Response> = {
    [Symbol.asyncIterator](): AsyncIterator<Response, void>;
};
export {};
//# sourceMappingURL=chainquery.d.ts.map