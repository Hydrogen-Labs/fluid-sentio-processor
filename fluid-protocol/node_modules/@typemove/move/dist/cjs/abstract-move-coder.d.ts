import { DecodedStruct, TypeDescriptor } from './types.js';
import { InternalMoveFunction, InternalMoveModule, InternalMoveStruct } from './internal-models.js';
import { ChainAdapter } from './chain-adapter.js';
export declare abstract class AbstractMoveCoder<ModuleType, StructType> {
    protected moduleMapping: Map<string, InternalMoveModule>;
    private typeMapping;
    private funcMapping;
    adapter: ChainAdapter<ModuleType, StructType>;
    protected constructor(adapter: ChainAdapter<ModuleType, StructType>);
    contains(account: string, name: string): boolean;
    abstract load(module: ModuleType, address: string): InternalMoveModule;
    protected loadInternal(module: InternalMoveModule, address: string): void;
    private _loadInternal;
    protected decodeBigInt(data: any): bigint;
    private requestMap;
    getMoveStruct(type: string): Promise<InternalMoveStruct>;
    getMoveFunction(type: string): Promise<InternalMoveFunction>;
    protected decode<T>(data: any, type: TypeDescriptor<T>): Promise<T>;
    decodeArray(entries: any[], types: TypeDescriptor[], strict?: boolean): Promise<any[]>;
    encode(data: any): any;
    encodeArray(entriesDecoded: any[]): any[];
    decodeCallResult(res: any[], func: string): Promise<any[]>;
    filterAndDecodeStruct<T, ST extends StructType>(typeMatcher: TypeDescriptor<T>, structsWithTags: ST[]): Promise<DecodedStruct<ST, T>[]>;
    protected decodedStruct<T, ST extends StructType>(typeStruct: ST): Promise<DecodedStruct<ST, T> | undefined>;
    decodedType<T, ST>(typeStruct: ST, type: TypeDescriptor<T>): Promise<T | undefined>;
}
//# sourceMappingURL=abstract-move-coder.d.ts.map