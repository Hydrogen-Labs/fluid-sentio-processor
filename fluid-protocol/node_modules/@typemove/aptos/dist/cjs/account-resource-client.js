"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountResourceClient = void 0;
const move_coder_js_1 = require("./move-coder.js");
// type ResourceQuery = {
//   ledgerVersion?: bigint | number
// }
class AccountResourceClient {
    client;
    constructor(client) {
        this.client = client;
    }
    /**
     * Get all resources of an account, same as `getAccountResources` in aptos client
     * @param accountAddress
     * @param query
     */
    async getAll(accountAddress, options) {
        return this.client.getAccountResources({ accountAddress, options });
    }
    /**
     * Match a single resource with exact type, resource type should not contain any type
     * @param accountAddress
     * @param resourceType
     * @param options
     */
    async matchExact(accountAddress, resourceType, options) {
        if (resourceType.existAnyType()) {
            throw new Error('resource type for match call should not contain any type');
        }
        const typeStr = resourceType.getSignature();
        const result = await this.client.getAccountResource({ accountAddress, resourceType: typeStr, options });
        const resource = {
            type: typeStr,
            data: result
        };
        return (0, move_coder_js_1.defaultMoveCoder)(this.client.config.fullnode).decodeResource(resource);
    }
    /**
     * Match all resources with type pattern, it could be a partial type like `amm.Pool<aptos_coin.AptosCoin.type(), ANY_TYPE>`
     * @param accountAddress
     * @param resourceType
     * @param options
     */
    async matchAll(accountAddress, resourceType, options) {
        const result = await this.client.getAccountResources({ accountAddress, options });
        return (0, move_coder_js_1.defaultMoveCoder)(this.client.config.fullnode).filterAndDecodeResources(resourceType, result);
    }
}
exports.AccountResourceClient = AccountResourceClient;
//# sourceMappingURL=account-resource-client.js.map