"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultMoveCoder = exports.MoveCoder = void 0;
const move_1 = require("@typemove/move");
const aptos_chain_adapter_js_1 = require("./aptos-chain-adapter.js");
const to_internal_js_1 = require("./to-internal.js");
const ts_sdk_1 = require("@aptos-labs/ts-sdk");
class MoveCoder extends move_1.AbstractMoveCoder {
    constructor(client) {
        super(new aptos_chain_adapter_js_1.AptosChainAdapter(client));
    }
    load(module, address) {
        if (!module.abi) {
            throw Error('Module without abi');
        }
        let m = this.moduleMapping.get(module.abi.address + '::' + module.abi.name);
        // if (this.contains(module.abi.address, module.abi.name)) {
        //   return
        // }
        if (m) {
            return m;
        }
        m = (0, to_internal_js_1.toInternalModule)(module);
        this.loadInternal(m, address);
        return m;
    }
    decodeEvent(event) {
        // TODO fix type
        return this.decodedStruct(event);
    }
    filterAndDecodeEvents(type, resources) {
        if (typeof type === 'string') {
            type = (0, move_1.parseMoveType)(type);
        }
        // TODO fix type
        return this.filterAndDecodeStruct(type, resources);
    }
    decodeResource(res) {
        return this.decodedStruct(res);
    }
    filterAndDecodeResources(type, resources) {
        if (typeof type === 'string') {
            type = (0, move_1.parseMoveType)(type);
        }
        return this.filterAndDecodeStruct(type, resources);
    }
    async decodeFunctionPayload(payload) {
        const func = await this.getMoveFunction(payload.function);
        const params = this.adapter.getMeaningfulFunctionParams(func.params);
        const argumentsDecoded = await this.decodeArray(payload.arguments, params);
        return {
            ...payload,
            arguments_decoded: argumentsDecoded
        };
    }
}
exports.MoveCoder = MoveCoder;
// const MOVE_CODER = new MoveCoder(AptosNetwork.MAIN_NET)
// const TESTNET_MOVE_CODER = new MoveCoder(AptosNetwork.TEST_NET)
//
// export function defaultMoveCoder(network: AptosNetwork = AptosNetwork.MAIN_NET): MoveCoder {
//   if (network == AptosNetwork.MAIN_NET) {
//     return MOVE_CODER
//   }
//   return TESTNET_MOVE_CODER
// }
const DEFAULT_ENDPOINT = 'https://mainnet.aptoslabs.com/v1';
const CODER_MAP = new Map();
function defaultMoveCoder(endpoint = DEFAULT_ENDPOINT) {
    let coder = CODER_MAP.get(endpoint);
    if (!coder) {
        const config = new ts_sdk_1.AptosConfig({ fullnode: endpoint });
        coder = new MoveCoder(new ts_sdk_1.Aptos(config));
        CODER_MAP.set(endpoint, coder);
    }
    return coder;
}
exports.defaultMoveCoder = defaultMoveCoder;
//# sourceMappingURL=move-coder.js.map