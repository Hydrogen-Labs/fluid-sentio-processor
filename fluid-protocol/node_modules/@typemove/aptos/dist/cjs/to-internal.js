"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toInternalField = exports.toInternalStruct = exports.toInternalFunction = exports.toInternalModule = void 0;
const move_1 = require("@typemove/move");
const ts_sdk_1 = require("@aptos-labs/ts-sdk");
function toInternalModule(module) {
    if (!module.abi) {
        throw Error('module with no ABI found');
    }
    const abi = module.abi;
    return {
        address: abi.address,
        exposedFunctions: abi.exposed_functions.map(toInternalFunction),
        name: abi.name,
        structs: abi.structs.map(toInternalStruct)
    };
}
exports.toInternalModule = toInternalModule;
function toInternalFunction(func) {
    let visibility;
    switch (func.visibility) {
        case ts_sdk_1.MoveFunctionVisibility.PRIVATE:
            visibility = move_1.InternalMoveFunctionVisibility.PRIVATE;
            break;
        case ts_sdk_1.MoveFunctionVisibility.PUBLIC:
            visibility = move_1.InternalMoveFunctionVisibility.PUBLIC;
            break;
        case ts_sdk_1.MoveFunctionVisibility.FRIEND:
            visibility = move_1.InternalMoveFunctionVisibility.FRIEND;
            break;
    }
    return {
        typeParams: func.generic_type_params,
        isEntry: func.is_entry,
        isView: func.is_view,
        name: func.name,
        params: func.params.map(move_1.parseMoveType),
        return: func.return.map(move_1.parseMoveType),
        visibility: visibility
    };
}
exports.toInternalFunction = toInternalFunction;
function toInternalStruct(struct) {
    return {
        abilities: struct.abilities,
        fields: struct.fields.map(toInternalField),
        typeParams: struct.generic_type_params,
        isNative: struct.is_native,
        name: struct.name
    };
}
exports.toInternalStruct = toInternalStruct;
function toInternalField(module) {
    return {
        name: module.name,
        type: (0, move_1.parseMoveType)(module.type)
    };
}
exports.toInternalField = toInternalField;
//# sourceMappingURL=to-internal.js.map