import { AccountAddressInput, Aptos, LedgerVersionArg, PaginationArgs, MoveResource } from '@aptos-labs/ts-sdk';
import { TypeDescriptor } from '@typemove/move';
import { TypedMoveResource } from './models.js';
export declare class AccountResourceClient {
    client: Aptos;
    constructor(client: Aptos);
    /**
     * Get all resources of an account, same as `getAccountResources` in aptos client
     * @param accountAddress
     * @param query
     */
    getAll(accountAddress: AccountAddressInput, options?: PaginationArgs & LedgerVersionArg): Promise<MoveResource[]>;
    /**
     * Match a single resource with exact type, resource type should not contain any type
     * @param accountAddress
     * @param resourceType
     * @param options
     */
    matchExact<T>(accountAddress: AccountAddressInput, resourceType: TypeDescriptor<T>, options?: LedgerVersionArg): Promise<TypedMoveResource<T> | undefined>;
    /**
     * Match all resources with type pattern, it could be a partial type like `amm.Pool<aptos_coin.AptosCoin.type(), ANY_TYPE>`
     * @param accountAddress
     * @param resourceType
     * @param options
     */
    matchAll<T>(accountAddress: AccountAddressInput, resourceType: TypeDescriptor<T>, options?: PaginationArgs & LedgerVersionArg): Promise<TypedMoveResource<T>[]>;
}
//# sourceMappingURL=account-resource-client.d.ts.map