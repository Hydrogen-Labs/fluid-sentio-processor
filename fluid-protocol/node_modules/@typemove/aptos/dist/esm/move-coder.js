import { AbstractMoveCoder, parseMoveType } from '@typemove/move';
import { AptosChainAdapter } from './aptos-chain-adapter.js';
import { toInternalModule } from './to-internal.js';
import { Aptos, AptosConfig } from '@aptos-labs/ts-sdk';
export class MoveCoder extends AbstractMoveCoder {
    constructor(client) {
        super(new AptosChainAdapter(client));
    }
    load(module, address) {
        if (!module.abi) {
            throw Error('Module without abi');
        }
        let m = this.moduleMapping.get(module.abi.address + '::' + module.abi.name);
        // if (this.contains(module.abi.address, module.abi.name)) {
        //   return
        // }
        if (m) {
            return m;
        }
        m = toInternalModule(module);
        this.loadInternal(m, address);
        return m;
    }
    decodeEvent(event) {
        // TODO fix type
        return this.decodedStruct(event);
    }
    filterAndDecodeEvents(type, resources) {
        if (typeof type === 'string') {
            type = parseMoveType(type);
        }
        // TODO fix type
        return this.filterAndDecodeStruct(type, resources);
    }
    decodeResource(res) {
        return this.decodedStruct(res);
    }
    filterAndDecodeResources(type, resources) {
        if (typeof type === 'string') {
            type = parseMoveType(type);
        }
        return this.filterAndDecodeStruct(type, resources);
    }
    async decodeFunctionPayload(payload) {
        const func = await this.getMoveFunction(payload.function);
        const params = this.adapter.getMeaningfulFunctionParams(func.params);
        const argumentsDecoded = await this.decodeArray(payload.arguments, params);
        return {
            ...payload,
            arguments_decoded: argumentsDecoded
        };
    }
}
// const MOVE_CODER = new MoveCoder(AptosNetwork.MAIN_NET)
// const TESTNET_MOVE_CODER = new MoveCoder(AptosNetwork.TEST_NET)
//
// export function defaultMoveCoder(network: AptosNetwork = AptosNetwork.MAIN_NET): MoveCoder {
//   if (network == AptosNetwork.MAIN_NET) {
//     return MOVE_CODER
//   }
//   return TESTNET_MOVE_CODER
// }
const DEFAULT_ENDPOINT = 'https://mainnet.aptoslabs.com/v1';
const CODER_MAP = new Map();
export function defaultMoveCoder(endpoint = DEFAULT_ENDPOINT) {
    let coder = CODER_MAP.get(endpoint);
    if (!coder) {
        const config = new AptosConfig({ fullnode: endpoint });
        coder = new MoveCoder(new Aptos(config));
        CODER_MAP.set(endpoint, coder);
    }
    return coder;
}
//# sourceMappingURL=move-coder.js.map