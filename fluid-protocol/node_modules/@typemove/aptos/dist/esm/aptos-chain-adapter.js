import { ChainAdapter, moduleQname, SPLITTER } from '@typemove/move';
import { toInternalModule } from './to-internal.js';
export class AptosChainAdapter extends ChainAdapter {
    // static INSTANCE = new AptosChainAdapter()
    client;
    constructor(client) {
        super();
        this.client = client;
    }
    async fetchModules(account) {
        return await this.client.getAccountModules({
            accountAddress: account
        });
    }
    async fetchModule(account, module) {
        return await this.client.getAccountModule({
            accountAddress: account,
            moduleName: module
        });
    }
    toInternalModules(modules) {
        return modules.flatMap((m) => (m.abi ? [toInternalModule(m)] : []));
    }
    getMeaningfulFunctionParams(params) {
        if (params.length === 0) {
            return params;
        }
        if (params[0].qname === 'signer' && params[0].reference) {
            params = params.slice(1);
        }
        return params;
    }
    getAllEventStructs(modules) {
        const eventMap = new Map();
        for (const module of modules) {
            const qname = moduleQname(module);
            for (const struct of module.structs) {
                const abilities = new Set(struct.abilities);
                if (abilities.has('drop') && abilities.has('store')) {
                    eventMap.set(qname + SPLITTER + struct.name, struct);
                }
            }
        }
        return eventMap;
        // const eventMap = new Map<string, InternalMoveStruct>()
        // const structMap = new Map<string, InternalMoveStruct>()
        // for (const module of modules) {
        //   const qname = moduleQname(module)
        //   for (const struct of module.structs) {
        //     structMap.set(qname + SPLITTER + struct.name, struct)
        //   }
        // }
        //
        // for (const module of modules) {
        //   for (const struct of module.structs) {
        //     for (const field of struct.fields) {
        //       const t = field.type
        //       if (t.qname === '0x1::event::EventHandle') {
        //         const event = t.typeArgs[0].qname
        //         const eventStruct = structMap.get(event)
        //         if (eventStruct) {
        //           eventMap.set(event, eventStruct)
        //         }
        //       }
        //     }
        //   }
        // }
        // return eventMap
    }
    getType(data) {
        return data.type;
    }
    getData(data) {
        if ('data' in data && 'type' in data) {
            return data.data;
        }
        return data;
    }
    async getChainId() {
        return (await this.client.getChainId()).toString();
    }
}
//# sourceMappingURL=aptos-chain-adapter.js.map