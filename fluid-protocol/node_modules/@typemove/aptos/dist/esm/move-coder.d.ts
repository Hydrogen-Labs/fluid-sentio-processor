import { AbstractMoveCoder, InternalMoveModule, TypeDescriptor } from '@typemove/move';
import { TypedEventInstance, TypedFunctionPayload, TypedMoveResource } from './models.js';
import { Aptos, EntryFunctionPayloadResponse, Event, MoveModuleBytecode, MoveResource } from '@aptos-labs/ts-sdk';
export declare class MoveCoder extends AbstractMoveCoder<MoveModuleBytecode, Event | MoveResource> {
    constructor(client: Aptos);
    load(module: MoveModuleBytecode, address: string): InternalMoveModule;
    decodeEvent<T>(event: Event): Promise<TypedEventInstance<T> | undefined>;
    filterAndDecodeEvents<T>(type: string | TypeDescriptor<T>, resources: Event[]): Promise<TypedEventInstance<T>[]>;
    decodeResource<T>(res: MoveResource): Promise<TypedMoveResource<T> | undefined>;
    filterAndDecodeResources<T>(type: string | TypeDescriptor<T>, resources: MoveResource[]): Promise<TypedMoveResource<T>[]>;
    decodeFunctionPayload<T extends Array<any>>(payload: EntryFunctionPayloadResponse): Promise<TypedFunctionPayload<T>>;
}
export declare function defaultMoveCoder(endpoint?: string): MoveCoder;
//# sourceMappingURL=move-coder.d.ts.map