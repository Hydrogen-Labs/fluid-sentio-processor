"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.zklogin_verified_id = exports.versioned = exports.vec_set = exports.vec_map = exports.vdf = exports.url = exports.types = exports.tx_context = exports.transfer_policy = exports.transfer = exports.token = exports.table_vec = exports.table = exports.sui = exports.random = exports.priority_queue = exports.poseidon = exports.pay = exports.package_ = exports.object_table = exports.object_bag = exports.object_ = exports.math = exports.linked_table = exports.kiosk_extension = exports.kiosk = exports.hmac = exports.hex = exports.hash = exports.group_ops = exports.groth16 = exports.event = exports.ed25519 = exports.ecvrf = exports.ecdsa_r1 = exports.ecdsa_k1 = exports.dynamic_object_field = exports.dynamic_field = exports.display = exports.deny_list = exports.config = exports.coin = exports.clock = exports.borrow = exports.bls12381 = exports.bcs = exports.balance = exports.bag = exports.authenticator_state = exports.address = void 0;
exports.loadAllTypes = exports.zklogin_verified_issuer = void 0;
const tslib_1 = require("tslib");
/* Generated types for 0x2, original address 0x2 */
const move_1 = require("@typemove/move");
const sui_1 = require("@typemove/sui");
const sui_2 = require("@typemove/sui");
const transactions_1 = require("@mysten/sui.js/transactions");
const sui_3 = require("@typemove/sui");
const _0x1 = tslib_1.__importStar(require("./0x1.js"));
var address;
(function (address) {
    let builder;
    (function (builder) {
        function fromAsciiBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::from_ascii_bytes",
                arguments: _args,
            });
        }
        builder.fromAsciiBytes = fromAsciiBytes;
        function fromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::from_bytes",
                arguments: _args,
            });
        }
        builder.fromBytes = fromBytes;
        function fromU256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::from_u256",
                arguments: _args,
            });
        }
        builder.fromU256 = fromU256;
        function length(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::length",
                arguments: _args,
            });
        }
        builder.length = length;
        function max(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::max",
                arguments: _args,
            });
        }
        builder.max = max;
        function toAsciiString(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::to_ascii_string",
                arguments: _args,
            });
        }
        builder.toAsciiString = toAsciiString;
        function toBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::to_bytes",
                arguments: _args,
            });
        }
        builder.toBytes = toBytes;
        function toString(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::to_string",
                arguments: _args,
            });
        }
        builder.toString = toString;
        function toU256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::address::to_u256",
                arguments: _args,
            });
        }
        builder.toU256 = toU256;
    })(builder = address.builder || (address.builder = {}));
    let view;
    (function (view) {
        async function fromAsciiBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromAsciiBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromAsciiBytes = fromAsciiBytes;
        async function fromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromBytes = fromBytes;
        async function fromU256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromU256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromU256 = fromU256;
        async function length(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.length(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.length = length;
        async function max(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.max(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.max = max;
        async function toAsciiString(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.toAsciiString(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.toAsciiString = toAsciiString;
        async function toBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.toBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.toBytes = toBytes;
        async function toString(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.toString(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.toString = toString;
        async function toU256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.toU256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.toU256 = toU256;
    })(view = address.view || (address.view = {}));
})(address || (exports.address = address = {}));
var authenticator_state;
(function (authenticator_state) {
    let ActiveJwk;
    (function (ActiveJwk) {
        ActiveJwk.TYPE_QNAME = "0x2::authenticator_state::ActiveJwk";
        const TYPE = new move_1.TypeDescriptor(ActiveJwk.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ActiveJwk.type = type;
    })(ActiveJwk = authenticator_state.ActiveJwk || (authenticator_state.ActiveJwk = {}));
    let AuthenticatorState;
    (function (AuthenticatorState) {
        AuthenticatorState.TYPE_QNAME = "0x2::authenticator_state::AuthenticatorState";
        const TYPE = new move_1.TypeDescriptor(AuthenticatorState.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        AuthenticatorState.type = type;
    })(AuthenticatorState = authenticator_state.AuthenticatorState || (authenticator_state.AuthenticatorState = {}));
    let AuthenticatorStateInner;
    (function (AuthenticatorStateInner) {
        AuthenticatorStateInner.TYPE_QNAME = "0x2::authenticator_state::AuthenticatorStateInner";
        const TYPE = new move_1.TypeDescriptor(AuthenticatorStateInner.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        AuthenticatorStateInner.type = type;
    })(AuthenticatorStateInner = authenticator_state.AuthenticatorStateInner || (authenticator_state.AuthenticatorStateInner = {}));
    let JWK;
    (function (JWK) {
        JWK.TYPE_QNAME = "0x2::authenticator_state::JWK";
        const TYPE = new move_1.TypeDescriptor(JWK.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        JWK.type = type;
    })(JWK = authenticator_state.JWK || (authenticator_state.JWK = {}));
    let JwkId;
    (function (JwkId) {
        JwkId.TYPE_QNAME = "0x2::authenticator_state::JwkId";
        const TYPE = new move_1.TypeDescriptor(JwkId.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        JwkId.type = type;
    })(JwkId = authenticator_state.JwkId || (authenticator_state.JwkId = {}));
})(authenticator_state || (exports.authenticator_state = authenticator_state = {}));
var bag;
(function (bag) {
    let Bag;
    (function (Bag) {
        Bag.TYPE_QNAME = "0x2::bag::Bag";
        const TYPE = new move_1.TypeDescriptor(Bag.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Bag.type = type;
    })(Bag = bag.Bag || (bag.Bag = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.add = add;
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function contains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.contains = contains;
        function containsWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::contains_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.containsWithType = containsWithType;
        function destroyEmpty(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::destroy_empty",
                arguments: _args,
            });
        }
        builder.destroyEmpty = destroyEmpty;
        function isEmpty(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::is_empty",
                arguments: _args,
            });
        }
        builder.isEmpty = isEmpty;
        function length(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::length",
                arguments: _args,
            });
        }
        builder.length = length;
        function new_(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bag::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
    })(builder = bag.builder || (bag.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function contains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.contains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.contains = contains;
        async function containsWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.containsWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.containsWithType = containsWithType;
        async function destroyEmpty(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyEmpty(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyEmpty = destroyEmpty;
        async function isEmpty(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function length(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.length(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.length = length;
        async function new_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
    })(view = bag.view || (bag.view = {}));
})(bag || (exports.bag = bag = {}));
var balance;
(function (balance) {
    let Balance;
    (function (Balance) {
        Balance.TYPE_QNAME = "0x2::balance::Balance";
        const TYPE = new move_1.TypeDescriptor(Balance.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Balance.type = type;
    })(Balance = balance.Balance || (balance.Balance = {}));
    let Supply;
    (function (Supply) {
        Supply.TYPE_QNAME = "0x2::balance::Supply";
        const TYPE = new move_1.TypeDescriptor(Supply.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Supply.type = type;
    })(Supply = balance.Supply || (balance.Supply = {}));
    let builder;
    (function (builder) {
        function createSupply(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::create_supply",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.createSupply = createSupply;
        function decreaseSupply(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::decrease_supply",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.decreaseSupply = decreaseSupply;
        function destroySupply(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::destroy_supply",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroySupply = destroySupply;
        function destroyZero(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::destroy_zero",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroyZero = destroyZero;
        function increaseSupply(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::increase_supply",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.increaseSupply = increaseSupply;
        function join(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::join",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.join = join;
        function split(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::split",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.split = split;
        function supplyValue(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::supply_value",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.supplyValue = supplyValue;
        function value(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::value",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.value = value;
        function withdrawAll(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::withdraw_all",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.withdrawAll = withdrawAll;
        function zero(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::balance::zero",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.zero = zero;
    })(builder = balance.builder || (balance.builder = {}));
    let view;
    (function (view) {
        async function createSupply(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.createSupply(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.createSupply = createSupply;
        async function decreaseSupply(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.decreaseSupply(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.decreaseSupply = decreaseSupply;
        async function destroySupply(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroySupply(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroySupply = destroySupply;
        async function destroyZero(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyZero(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyZero = destroyZero;
        async function increaseSupply(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.increaseSupply(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.increaseSupply = increaseSupply;
        async function join(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.join(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.join = join;
        async function split(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.split(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.split = split;
        async function supplyValue(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.supplyValue(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.supplyValue = supplyValue;
        async function value(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.value(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.value = value;
        async function withdrawAll(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.withdrawAll(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.withdrawAll = withdrawAll;
        async function zero(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.zero(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.zero = zero;
    })(view = balance.view || (balance.view = {}));
})(balance || (exports.balance = balance = {}));
var bcs;
(function (bcs) {
    let BCS;
    (function (BCS) {
        BCS.TYPE_QNAME = "0x2::bcs::BCS";
        const TYPE = new move_1.TypeDescriptor(BCS.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        BCS.type = type;
    })(BCS = bcs.BCS || (bcs.BCS = {}));
    let builder;
    (function (builder) {
        function intoRemainderBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::into_remainder_bytes",
                arguments: _args,
            });
        }
        builder.intoRemainderBytes = intoRemainderBytes;
        function new_(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function peelAddress(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_address",
                arguments: _args,
            });
        }
        builder.peelAddress = peelAddress;
        function peelBool(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_bool",
                arguments: _args,
            });
        }
        builder.peelBool = peelBool;
        function peelOptionAddress(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_address",
                arguments: _args,
            });
        }
        builder.peelOptionAddress = peelOptionAddress;
        function peelOptionBool(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_bool",
                arguments: _args,
            });
        }
        builder.peelOptionBool = peelOptionBool;
        function peelOptionU128(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_u128",
                arguments: _args,
            });
        }
        builder.peelOptionU128 = peelOptionU128;
        function peelOptionU16(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_u16",
                arguments: _args,
            });
        }
        builder.peelOptionU16 = peelOptionU16;
        function peelOptionU256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_u256",
                arguments: _args,
            });
        }
        builder.peelOptionU256 = peelOptionU256;
        function peelOptionU32(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_u32",
                arguments: _args,
            });
        }
        builder.peelOptionU32 = peelOptionU32;
        function peelOptionU64(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_u64",
                arguments: _args,
            });
        }
        builder.peelOptionU64 = peelOptionU64;
        function peelOptionU8(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_option_u8",
                arguments: _args,
            });
        }
        builder.peelOptionU8 = peelOptionU8;
        function peelU128(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_u128",
                arguments: _args,
            });
        }
        builder.peelU128 = peelU128;
        function peelU16(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_u16",
                arguments: _args,
            });
        }
        builder.peelU16 = peelU16;
        function peelU256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_u256",
                arguments: _args,
            });
        }
        builder.peelU256 = peelU256;
        function peelU32(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_u32",
                arguments: _args,
            });
        }
        builder.peelU32 = peelU32;
        function peelU64(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_u64",
                arguments: _args,
            });
        }
        builder.peelU64 = peelU64;
        function peelU8(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_u8",
                arguments: _args,
            });
        }
        builder.peelU8 = peelU8;
        function peelVecAddress(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_address",
                arguments: _args,
            });
        }
        builder.peelVecAddress = peelVecAddress;
        function peelVecBool(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_bool",
                arguments: _args,
            });
        }
        builder.peelVecBool = peelVecBool;
        function peelVecLength(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_length",
                arguments: _args,
            });
        }
        builder.peelVecLength = peelVecLength;
        function peelVecU128(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_u128",
                arguments: _args,
            });
        }
        builder.peelVecU128 = peelVecU128;
        function peelVecU16(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_u16",
                arguments: _args,
            });
        }
        builder.peelVecU16 = peelVecU16;
        function peelVecU256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_u256",
                arguments: _args,
            });
        }
        builder.peelVecU256 = peelVecU256;
        function peelVecU32(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_u32",
                arguments: _args,
            });
        }
        builder.peelVecU32 = peelVecU32;
        function peelVecU64(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_u64",
                arguments: _args,
            });
        }
        builder.peelVecU64 = peelVecU64;
        function peelVecU8(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_u8",
                arguments: _args,
            });
        }
        builder.peelVecU8 = peelVecU8;
        function peelVecVecU8(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::peel_vec_vec_u8",
                arguments: _args,
            });
        }
        builder.peelVecVecU8 = peelVecVecU8;
        function toBytes(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bcs::to_bytes",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.toBytes = toBytes;
    })(builder = bcs.builder || (bcs.builder = {}));
    let view;
    (function (view) {
        async function intoRemainderBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.intoRemainderBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.intoRemainderBytes = intoRemainderBytes;
        async function new_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function peelAddress(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelAddress = peelAddress;
        async function peelBool(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelBool(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelBool = peelBool;
        async function peelOptionAddress(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionAddress = peelOptionAddress;
        async function peelOptionBool(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionBool(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionBool = peelOptionBool;
        async function peelOptionU128(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionU128(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionU128 = peelOptionU128;
        async function peelOptionU16(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionU16(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionU16 = peelOptionU16;
        async function peelOptionU256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionU256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionU256 = peelOptionU256;
        async function peelOptionU32(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionU32(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionU32 = peelOptionU32;
        async function peelOptionU64(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionU64(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionU64 = peelOptionU64;
        async function peelOptionU8(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelOptionU8(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelOptionU8 = peelOptionU8;
        async function peelU128(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelU128(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelU128 = peelU128;
        async function peelU16(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelU16(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelU16 = peelU16;
        async function peelU256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelU256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelU256 = peelU256;
        async function peelU32(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelU32(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelU32 = peelU32;
        async function peelU64(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelU64(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelU64 = peelU64;
        async function peelU8(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelU8(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelU8 = peelU8;
        async function peelVecAddress(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecAddress = peelVecAddress;
        async function peelVecBool(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecBool(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecBool = peelVecBool;
        async function peelVecLength(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecLength(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecLength = peelVecLength;
        async function peelVecU128(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecU128(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecU128 = peelVecU128;
        async function peelVecU16(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecU16(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecU16 = peelVecU16;
        async function peelVecU256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecU256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecU256 = peelVecU256;
        async function peelVecU32(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecU32(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecU32 = peelVecU32;
        async function peelVecU64(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecU64(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecU64 = peelVecU64;
        async function peelVecU8(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecU8(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecU8 = peelVecU8;
        async function peelVecVecU8(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.peelVecVecU8(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.peelVecVecU8 = peelVecVecU8;
        async function toBytes(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.toBytes(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.toBytes = toBytes;
    })(view = bcs.view || (bcs.view = {}));
})(bcs || (exports.bcs = bcs = {}));
var bls12381;
(function (bls12381) {
    let G1;
    (function (G1) {
        G1.TYPE_QNAME = "0x2::bls12381::G1";
        const TYPE = new move_1.TypeDescriptor(G1.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        G1.type = type;
    })(G1 = bls12381.G1 || (bls12381.G1 = {}));
    let G2;
    (function (G2) {
        G2.TYPE_QNAME = "0x2::bls12381::G2";
        const TYPE = new move_1.TypeDescriptor(G2.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        G2.type = type;
    })(G2 = bls12381.G2 || (bls12381.G2 = {}));
    let GT;
    (function (GT) {
        GT.TYPE_QNAME = "0x2::bls12381::GT";
        const TYPE = new move_1.TypeDescriptor(GT.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        GT.type = type;
    })(GT = bls12381.GT || (bls12381.GT = {}));
    let Scalar;
    (function (Scalar) {
        Scalar.TYPE_QNAME = "0x2::bls12381::Scalar";
        const TYPE = new move_1.TypeDescriptor(Scalar.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Scalar.type = type;
    })(Scalar = bls12381.Scalar || (bls12381.Scalar = {}));
    let builder;
    (function (builder) {
        function bls12381MinPkVerify(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::bls12381_min_pk_verify",
                arguments: _args,
            });
        }
        builder.bls12381MinPkVerify = bls12381MinPkVerify;
        function bls12381MinSigVerify(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::bls12381_min_sig_verify",
                arguments: _args,
            });
        }
        builder.bls12381MinSigVerify = bls12381MinSigVerify;
        function g1Add(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_add",
                arguments: _args,
            });
        }
        builder.g1Add = g1Add;
        function g1Div(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_div",
                arguments: _args,
            });
        }
        builder.g1Div = g1Div;
        function g1FromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_from_bytes",
                arguments: _args,
            });
        }
        builder.g1FromBytes = g1FromBytes;
        function g1Generator(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_generator",
                arguments: _args,
            });
        }
        builder.g1Generator = g1Generator;
        function g1Identity(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_identity",
                arguments: _args,
            });
        }
        builder.g1Identity = g1Identity;
        function g1Mul(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_mul",
                arguments: _args,
            });
        }
        builder.g1Mul = g1Mul;
        function g1MultiScalarMultiplication(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_multi_scalar_multiplication",
                arguments: _args,
            });
        }
        builder.g1MultiScalarMultiplication = g1MultiScalarMultiplication;
        function g1Neg(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_neg",
                arguments: _args,
            });
        }
        builder.g1Neg = g1Neg;
        function g1Sub(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g1_sub",
                arguments: _args,
            });
        }
        builder.g1Sub = g1Sub;
        function g2Add(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_add",
                arguments: _args,
            });
        }
        builder.g2Add = g2Add;
        function g2Div(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_div",
                arguments: _args,
            });
        }
        builder.g2Div = g2Div;
        function g2FromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_from_bytes",
                arguments: _args,
            });
        }
        builder.g2FromBytes = g2FromBytes;
        function g2Generator(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_generator",
                arguments: _args,
            });
        }
        builder.g2Generator = g2Generator;
        function g2Identity(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_identity",
                arguments: _args,
            });
        }
        builder.g2Identity = g2Identity;
        function g2Mul(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_mul",
                arguments: _args,
            });
        }
        builder.g2Mul = g2Mul;
        function g2MultiScalarMultiplication(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_multi_scalar_multiplication",
                arguments: _args,
            });
        }
        builder.g2MultiScalarMultiplication = g2MultiScalarMultiplication;
        function g2Neg(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_neg",
                arguments: _args,
            });
        }
        builder.g2Neg = g2Neg;
        function g2Sub(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::g2_sub",
                arguments: _args,
            });
        }
        builder.g2Sub = g2Sub;
        function gtAdd(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::gt_add",
                arguments: _args,
            });
        }
        builder.gtAdd = gtAdd;
        function gtDiv(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::gt_div",
                arguments: _args,
            });
        }
        builder.gtDiv = gtDiv;
        function gtGenerator(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::gt_generator",
                arguments: _args,
            });
        }
        builder.gtGenerator = gtGenerator;
        function gtIdentity(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::gt_identity",
                arguments: _args,
            });
        }
        builder.gtIdentity = gtIdentity;
        function gtMul(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::gt_mul",
                arguments: _args,
            });
        }
        builder.gtMul = gtMul;
        function gtNeg(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::gt_neg",
                arguments: _args,
            });
        }
        builder.gtNeg = gtNeg;
        function gtSub(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::gt_sub",
                arguments: _args,
            });
        }
        builder.gtSub = gtSub;
        function hashToG1(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::hash_to_g1",
                arguments: _args,
            });
        }
        builder.hashToG1 = hashToG1;
        function hashToG2(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::hash_to_g2",
                arguments: _args,
            });
        }
        builder.hashToG2 = hashToG2;
        function pairing(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::pairing",
                arguments: _args,
            });
        }
        builder.pairing = pairing;
        function scalarAdd(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_add",
                arguments: _args,
            });
        }
        builder.scalarAdd = scalarAdd;
        function scalarDiv(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_div",
                arguments: _args,
            });
        }
        builder.scalarDiv = scalarDiv;
        function scalarFromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_from_bytes",
                arguments: _args,
            });
        }
        builder.scalarFromBytes = scalarFromBytes;
        function scalarFromU64(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_from_u64",
                arguments: _args,
            });
        }
        builder.scalarFromU64 = scalarFromU64;
        function scalarInv(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_inv",
                arguments: _args,
            });
        }
        builder.scalarInv = scalarInv;
        function scalarMul(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_mul",
                arguments: _args,
            });
        }
        builder.scalarMul = scalarMul;
        function scalarNeg(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_neg",
                arguments: _args,
            });
        }
        builder.scalarNeg = scalarNeg;
        function scalarOne(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_one",
                arguments: _args,
            });
        }
        builder.scalarOne = scalarOne;
        function scalarSub(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_sub",
                arguments: _args,
            });
        }
        builder.scalarSub = scalarSub;
        function scalarZero(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::bls12381::scalar_zero",
                arguments: _args,
            });
        }
        builder.scalarZero = scalarZero;
    })(builder = bls12381.builder || (bls12381.builder = {}));
    let view;
    (function (view) {
        async function bls12381MinPkVerify(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.bls12381MinPkVerify(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.bls12381MinPkVerify = bls12381MinPkVerify;
        async function bls12381MinSigVerify(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.bls12381MinSigVerify(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.bls12381MinSigVerify = bls12381MinSigVerify;
        async function g1Add(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1Add(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1Add = g1Add;
        async function g1Div(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1Div(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1Div = g1Div;
        async function g1FromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1FromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1FromBytes = g1FromBytes;
        async function g1Generator(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1Generator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1Generator = g1Generator;
        async function g1Identity(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1Identity(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1Identity = g1Identity;
        async function g1Mul(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1Mul(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1Mul = g1Mul;
        async function g1MultiScalarMultiplication(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1MultiScalarMultiplication(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1MultiScalarMultiplication = g1MultiScalarMultiplication;
        async function g1Neg(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1Neg(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1Neg = g1Neg;
        async function g1Sub(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g1Sub(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g1Sub = g1Sub;
        async function g2Add(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2Add(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2Add = g2Add;
        async function g2Div(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2Div(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2Div = g2Div;
        async function g2FromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2FromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2FromBytes = g2FromBytes;
        async function g2Generator(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2Generator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2Generator = g2Generator;
        async function g2Identity(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2Identity(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2Identity = g2Identity;
        async function g2Mul(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2Mul(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2Mul = g2Mul;
        async function g2MultiScalarMultiplication(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2MultiScalarMultiplication(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2MultiScalarMultiplication = g2MultiScalarMultiplication;
        async function g2Neg(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2Neg(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2Neg = g2Neg;
        async function g2Sub(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.g2Sub(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.g2Sub = g2Sub;
        async function gtAdd(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.gtAdd(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.gtAdd = gtAdd;
        async function gtDiv(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.gtDiv(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.gtDiv = gtDiv;
        async function gtGenerator(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.gtGenerator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.gtGenerator = gtGenerator;
        async function gtIdentity(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.gtIdentity(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.gtIdentity = gtIdentity;
        async function gtMul(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.gtMul(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.gtMul = gtMul;
        async function gtNeg(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.gtNeg(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.gtNeg = gtNeg;
        async function gtSub(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.gtSub(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.gtSub = gtSub;
        async function hashToG1(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.hashToG1(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hashToG1 = hashToG1;
        async function hashToG2(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.hashToG2(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hashToG2 = hashToG2;
        async function pairing(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.pairing(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pairing = pairing;
        async function scalarAdd(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarAdd(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarAdd = scalarAdd;
        async function scalarDiv(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarDiv(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarDiv = scalarDiv;
        async function scalarFromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarFromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarFromBytes = scalarFromBytes;
        async function scalarFromU64(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarFromU64(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarFromU64 = scalarFromU64;
        async function scalarInv(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarInv(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarInv = scalarInv;
        async function scalarMul(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarMul(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarMul = scalarMul;
        async function scalarNeg(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarNeg(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarNeg = scalarNeg;
        async function scalarOne(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarOne(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarOne = scalarOne;
        async function scalarSub(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarSub(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarSub = scalarSub;
        async function scalarZero(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.scalarZero(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.scalarZero = scalarZero;
    })(view = bls12381.view || (bls12381.view = {}));
})(bls12381 || (exports.bls12381 = bls12381 = {}));
var borrow;
(function (borrow_1) {
    let Borrow;
    (function (Borrow) {
        Borrow.TYPE_QNAME = "0x2::borrow::Borrow";
        const TYPE = new move_1.TypeDescriptor(Borrow.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Borrow.type = type;
    })(Borrow = borrow_1.Borrow || (borrow_1.Borrow = {}));
    let Referent;
    (function (Referent) {
        Referent.TYPE_QNAME = "0x2::borrow::Referent";
        const TYPE = new move_1.TypeDescriptor(Referent.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Referent.type = type;
    })(Referent = borrow_1.Referent || (borrow_1.Referent = {}));
    let builder;
    (function (builder) {
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::borrow::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function destroy(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::borrow::destroy",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroy = destroy;
        function new_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::borrow::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function putBack(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::borrow::put_back",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.putBack = putBack;
    })(builder = borrow_1.builder || (borrow_1.builder = {}));
    let view;
    (function (view) {
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function destroy(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroy(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroy = destroy;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function putBack(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.putBack(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.putBack = putBack;
    })(view = borrow_1.view || (borrow_1.view = {}));
})(borrow || (exports.borrow = borrow = {}));
var clock;
(function (clock) {
    let Clock;
    (function (Clock) {
        Clock.TYPE_QNAME = "0x2::clock::Clock";
        const TYPE = new move_1.TypeDescriptor(Clock.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Clock.type = type;
    })(Clock = clock.Clock || (clock.Clock = {}));
    let builder;
    (function (builder) {
        function timestampMs(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::clock::timestamp_ms",
                arguments: _args,
            });
        }
        builder.timestampMs = timestampMs;
    })(builder = clock.builder || (clock.builder = {}));
    let view;
    (function (view) {
        async function timestampMs(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.timestampMs(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.timestampMs = timestampMs;
    })(view = clock.view || (clock.view = {}));
})(clock || (exports.clock = clock = {}));
var coin;
(function (coin) {
    let Coin;
    (function (Coin) {
        Coin.TYPE_QNAME = "0x2::coin::Coin";
        const TYPE = new move_1.TypeDescriptor(Coin.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Coin.type = type;
    })(Coin = coin.Coin || (coin.Coin = {}));
    let CoinMetadata;
    (function (CoinMetadata) {
        CoinMetadata.TYPE_QNAME = "0x2::coin::CoinMetadata";
        const TYPE = new move_1.TypeDescriptor(CoinMetadata.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        CoinMetadata.type = type;
    })(CoinMetadata = coin.CoinMetadata || (coin.CoinMetadata = {}));
    let CurrencyCreated;
    (function (CurrencyCreated) {
        CurrencyCreated.TYPE_QNAME = "0x2::coin::CurrencyCreated";
        const TYPE = new move_1.TypeDescriptor(CurrencyCreated.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        CurrencyCreated.type = type;
    })(CurrencyCreated = coin.CurrencyCreated || (coin.CurrencyCreated = {}));
    let DenyCap;
    (function (DenyCap) {
        DenyCap.TYPE_QNAME = "0x2::coin::DenyCap";
        const TYPE = new move_1.TypeDescriptor(DenyCap.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        DenyCap.type = type;
    })(DenyCap = coin.DenyCap || (coin.DenyCap = {}));
    let DenyCapV2;
    (function (DenyCapV2) {
        DenyCapV2.TYPE_QNAME = "0x2::coin::DenyCapV2";
        const TYPE = new move_1.TypeDescriptor(DenyCapV2.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        DenyCapV2.type = type;
    })(DenyCapV2 = coin.DenyCapV2 || (coin.DenyCapV2 = {}));
    let RegulatedCoinMetadata;
    (function (RegulatedCoinMetadata) {
        RegulatedCoinMetadata.TYPE_QNAME = "0x2::coin::RegulatedCoinMetadata";
        const TYPE = new move_1.TypeDescriptor(RegulatedCoinMetadata.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        RegulatedCoinMetadata.type = type;
    })(RegulatedCoinMetadata = coin.RegulatedCoinMetadata || (coin.RegulatedCoinMetadata = {}));
    let TreasuryCap;
    (function (TreasuryCap) {
        TreasuryCap.TYPE_QNAME = "0x2::coin::TreasuryCap";
        const TYPE = new move_1.TypeDescriptor(TreasuryCap.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TreasuryCap.type = type;
    })(TreasuryCap = coin.TreasuryCap || (coin.TreasuryCap = {}));
    let builder;
    (function (builder) {
        function balance(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::balance",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.balance = balance;
        function balanceMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::balance_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.balanceMut = balanceMut;
        function burn(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::burn",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.burn = burn;
        function createCurrency(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[3], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[4], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[5], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::create_currency",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.createCurrency = createCurrency;
        function createRegulatedCurrency(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[3], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[4], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[5], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::create_regulated_currency",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.createRegulatedCurrency = createRegulatedCurrency;
        function createRegulatedCurrencyV2(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[3], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[4], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[5], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[6], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::create_regulated_currency_v2",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.createRegulatedCurrencyV2 = createRegulatedCurrencyV2;
        function denyListAdd(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListAdd = denyListAdd;
        function denyListContains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListContains = denyListContains;
        function denyListRemove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListRemove = denyListRemove;
        function denyListV2Add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2Add = denyListV2Add;
        function denyListV2ContainsCurrentEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_contains_current_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2ContainsCurrentEpoch = denyListV2ContainsCurrentEpoch;
        function denyListV2ContainsNextEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_contains_next_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2ContainsNextEpoch = denyListV2ContainsNextEpoch;
        function denyListV2DisableGlobalPause(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_disable_global_pause",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2DisableGlobalPause = denyListV2DisableGlobalPause;
        function denyListV2EnableGlobalPause(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_enable_global_pause",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2EnableGlobalPause = denyListV2EnableGlobalPause;
        function denyListV2IsGlobalPauseEnabledCurrentEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_is_global_pause_enabled_current_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2IsGlobalPauseEnabledCurrentEpoch = denyListV2IsGlobalPauseEnabledCurrentEpoch;
        function denyListV2IsGlobalPauseEnabledNextEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_is_global_pause_enabled_next_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2IsGlobalPauseEnabledNextEpoch = denyListV2IsGlobalPauseEnabledNextEpoch;
        function denyListV2Remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::deny_list_v2_remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.denyListV2Remove = denyListV2Remove;
        function destroyZero(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::destroy_zero",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroyZero = destroyZero;
        function divideIntoN(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::divide_into_n",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.divideIntoN = divideIntoN;
        function fromBalance(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::from_balance",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fromBalance = fromBalance;
        function getDecimals(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::get_decimals",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.getDecimals = getDecimals;
        function getDescription(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::get_description",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.getDescription = getDescription;
        function getIconUrl(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::get_icon_url",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.getIconUrl = getIconUrl;
        function getName(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::get_name",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.getName = getName;
        function getSymbol(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::get_symbol",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.getSymbol = getSymbol;
        function intoBalance(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::into_balance",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.intoBalance = intoBalance;
        function join(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::join",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.join = join;
        function migrateRegulatedCurrencyToV2(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::migrate_regulated_currency_to_v2",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.migrateRegulatedCurrencyToV2 = migrateRegulatedCurrencyToV2;
        function mint(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::mint",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.mint = mint;
        function mintAndTransfer(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::mint_and_transfer",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.mintAndTransfer = mintAndTransfer;
        function mintBalance(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::mint_balance",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.mintBalance = mintBalance;
        function put(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::put",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.put = put;
        function split(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::split",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.split = split;
        function supply(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::supply",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.supply = supply;
        function supplyImmut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::supply_immut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.supplyImmut = supplyImmut;
        function supplyMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::supply_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.supplyMut = supplyMut;
        function take(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::take",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.take = take;
        function totalSupply(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::total_supply",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.totalSupply = totalSupply;
        function treasuryIntoSupply(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::treasury_into_supply",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.treasuryIntoSupply = treasuryIntoSupply;
        function updateDescription(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::update_description",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.updateDescription = updateDescription;
        function updateIconUrl(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::update_icon_url",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.updateIconUrl = updateIconUrl;
        function updateName(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::update_name",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.updateName = updateName;
        function updateSymbol(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::update_symbol",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.updateSymbol = updateSymbol;
        function value(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::value",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.value = value;
        function zero(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::coin::zero",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.zero = zero;
    })(builder = coin.builder || (coin.builder = {}));
    let view;
    (function (view) {
        async function balance(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.balance(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.balance = balance;
        async function balanceMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.balanceMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.balanceMut = balanceMut;
        async function burn(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.burn(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.burn = burn;
        async function createCurrency(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.createCurrency(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.createCurrency = createCurrency;
        async function createRegulatedCurrency(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.createRegulatedCurrency(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.createRegulatedCurrency = createRegulatedCurrency;
        async function createRegulatedCurrencyV2(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.createRegulatedCurrencyV2(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.createRegulatedCurrencyV2 = createRegulatedCurrencyV2;
        async function denyListAdd(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListAdd(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListAdd = denyListAdd;
        async function denyListContains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListContains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListContains = denyListContains;
        async function denyListRemove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListRemove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListRemove = denyListRemove;
        async function denyListV2Add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2Add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2Add = denyListV2Add;
        async function denyListV2ContainsCurrentEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2ContainsCurrentEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2ContainsCurrentEpoch = denyListV2ContainsCurrentEpoch;
        async function denyListV2ContainsNextEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2ContainsNextEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2ContainsNextEpoch = denyListV2ContainsNextEpoch;
        async function denyListV2DisableGlobalPause(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2DisableGlobalPause(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2DisableGlobalPause = denyListV2DisableGlobalPause;
        async function denyListV2EnableGlobalPause(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2EnableGlobalPause(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2EnableGlobalPause = denyListV2EnableGlobalPause;
        async function denyListV2IsGlobalPauseEnabledCurrentEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2IsGlobalPauseEnabledCurrentEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2IsGlobalPauseEnabledCurrentEpoch = denyListV2IsGlobalPauseEnabledCurrentEpoch;
        async function denyListV2IsGlobalPauseEnabledNextEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2IsGlobalPauseEnabledNextEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2IsGlobalPauseEnabledNextEpoch = denyListV2IsGlobalPauseEnabledNextEpoch;
        async function denyListV2Remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.denyListV2Remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.denyListV2Remove = denyListV2Remove;
        async function destroyZero(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyZero(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyZero = destroyZero;
        async function divideIntoN(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.divideIntoN(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.divideIntoN = divideIntoN;
        async function fromBalance(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromBalance(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromBalance = fromBalance;
        async function getDecimals(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getDecimals(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getDecimals = getDecimals;
        async function getDescription(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getDescription(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getDescription = getDescription;
        async function getIconUrl(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getIconUrl(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getIconUrl = getIconUrl;
        async function getName(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getName(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getName = getName;
        async function getSymbol(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getSymbol(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getSymbol = getSymbol;
        async function intoBalance(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.intoBalance(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.intoBalance = intoBalance;
        async function join(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.join(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.join = join;
        async function migrateRegulatedCurrencyToV2(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.migrateRegulatedCurrencyToV2(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.migrateRegulatedCurrencyToV2 = migrateRegulatedCurrencyToV2;
        async function mint(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.mint(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.mint = mint;
        async function mintAndTransfer(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.mintAndTransfer(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.mintAndTransfer = mintAndTransfer;
        async function mintBalance(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.mintBalance(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.mintBalance = mintBalance;
        async function put(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.put(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.put = put;
        async function split(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.split(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.split = split;
        async function supply(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.supply(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.supply = supply;
        async function supplyImmut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.supplyImmut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.supplyImmut = supplyImmut;
        async function supplyMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.supplyMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.supplyMut = supplyMut;
        async function take(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.take(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.take = take;
        async function totalSupply(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.totalSupply(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.totalSupply = totalSupply;
        async function treasuryIntoSupply(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.treasuryIntoSupply(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.treasuryIntoSupply = treasuryIntoSupply;
        async function updateDescription(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.updateDescription(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateDescription = updateDescription;
        async function updateIconUrl(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.updateIconUrl(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateIconUrl = updateIconUrl;
        async function updateName(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.updateName(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateName = updateName;
        async function updateSymbol(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.updateSymbol(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateSymbol = updateSymbol;
        async function value(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.value(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.value = value;
        async function zero(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.zero(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.zero = zero;
    })(view = coin.view || (coin.view = {}));
})(coin || (exports.coin = coin = {}));
var config;
(function (config) {
    let Config;
    (function (Config) {
        Config.TYPE_QNAME = "0x2::config::Config";
        const TYPE = new move_1.TypeDescriptor(Config.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Config.type = type;
    })(Config = config.Config || (config.Config = {}));
    let Setting;
    (function (Setting) {
        Setting.TYPE_QNAME = "0x2::config::Setting";
        const TYPE = new move_1.TypeDescriptor(Setting.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Setting.type = type;
    })(Setting = config.Setting || (config.Setting = {}));
    let SettingData;
    (function (SettingData) {
        SettingData.TYPE_QNAME = "0x2::config::SettingData";
        const TYPE = new move_1.TypeDescriptor(SettingData.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        SettingData.type = type;
    })(SettingData = config.SettingData || (config.SettingData = {}));
    let builder;
    (function (builder) {
        function addForNextEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::add_for_next_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.addForNextEpoch = addForNextEpoch;
        function borrowForNextEpochMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::borrow_for_next_epoch_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.borrowForNextEpochMut = borrowForNextEpochMut;
        function existsWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::exists_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.existsWithType = existsWithType;
        function existsWithTypeForNextEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::exists_with_type_for_next_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.existsWithTypeForNextEpoch = existsWithTypeForNextEpoch;
        function new_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function readSetting(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::read_setting",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.readSetting = readSetting;
        function readSettingForNextEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::read_setting_for_next_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.readSettingForNextEpoch = readSettingForNextEpoch;
        function removeForNextEpoch(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::remove_for_next_epoch",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.removeForNextEpoch = removeForNextEpoch;
        function share(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::share",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.share = share;
        function transfer(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::config::transfer",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.transfer = transfer;
    })(builder = config.builder || (config.builder = {}));
    let view;
    (function (view) {
        async function addForNextEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addForNextEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addForNextEpoch = addForNextEpoch;
        async function borrowForNextEpochMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowForNextEpochMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowForNextEpochMut = borrowForNextEpochMut;
        async function existsWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.existsWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.existsWithType = existsWithType;
        async function existsWithTypeForNextEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.existsWithTypeForNextEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.existsWithTypeForNextEpoch = existsWithTypeForNextEpoch;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function readSetting(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.readSetting(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.readSetting = readSetting;
        async function readSettingForNextEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.readSettingForNextEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.readSettingForNextEpoch = readSettingForNextEpoch;
        async function removeForNextEpoch(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeForNextEpoch(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeForNextEpoch = removeForNextEpoch;
        async function share(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.share(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.share = share;
        async function transfer(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.transfer(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.transfer = transfer;
    })(view = config.view || (config.view = {}));
})(config || (exports.config = config = {}));
var deny_list;
(function (deny_list) {
    let AddressKey;
    (function (AddressKey) {
        AddressKey.TYPE_QNAME = "0x2::deny_list::AddressKey";
        const TYPE = new move_1.TypeDescriptor(AddressKey.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        AddressKey.type = type;
    })(AddressKey = deny_list.AddressKey || (deny_list.AddressKey = {}));
    let ConfigKey;
    (function (ConfigKey) {
        ConfigKey.TYPE_QNAME = "0x2::deny_list::ConfigKey";
        const TYPE = new move_1.TypeDescriptor(ConfigKey.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ConfigKey.type = type;
    })(ConfigKey = deny_list.ConfigKey || (deny_list.ConfigKey = {}));
    let ConfigWriteCap;
    (function (ConfigWriteCap) {
        ConfigWriteCap.TYPE_QNAME = "0x2::deny_list::ConfigWriteCap";
        const TYPE = new move_1.TypeDescriptor(ConfigWriteCap.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ConfigWriteCap.type = type;
    })(ConfigWriteCap = deny_list.ConfigWriteCap || (deny_list.ConfigWriteCap = {}));
    let DenyList;
    (function (DenyList) {
        DenyList.TYPE_QNAME = "0x2::deny_list::DenyList";
        const TYPE = new move_1.TypeDescriptor(DenyList.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        DenyList.type = type;
    })(DenyList = deny_list.DenyList || (deny_list.DenyList = {}));
    let GlobalPauseKey;
    (function (GlobalPauseKey) {
        GlobalPauseKey.TYPE_QNAME = "0x2::deny_list::GlobalPauseKey";
        const TYPE = new move_1.TypeDescriptor(GlobalPauseKey.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        GlobalPauseKey.type = type;
    })(GlobalPauseKey = deny_list.GlobalPauseKey || (deny_list.GlobalPauseKey = {}));
    let PerTypeConfigCreated;
    (function (PerTypeConfigCreated) {
        PerTypeConfigCreated.TYPE_QNAME = "0x2::deny_list::PerTypeConfigCreated";
        const TYPE = new move_1.TypeDescriptor(PerTypeConfigCreated.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        PerTypeConfigCreated.type = type;
    })(PerTypeConfigCreated = deny_list.PerTypeConfigCreated || (deny_list.PerTypeConfigCreated = {}));
    let PerTypeList;
    (function (PerTypeList) {
        PerTypeList.TYPE_QNAME = "0x2::deny_list::PerTypeList";
        const TYPE = new move_1.TypeDescriptor(PerTypeList.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        PerTypeList.type = type;
    })(PerTypeList = deny_list.PerTypeList || (deny_list.PerTypeList = {}));
    let builder;
    (function (builder) {
        function migrateV1ToV2(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::migrate_v1_to_v2",
                arguments: _args,
            });
        }
        builder.migrateV1ToV2 = migrateV1ToV2;
        function v1Add(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v1_add",
                arguments: _args,
            });
        }
        builder.v1Add = v1Add;
        function v1Contains(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v1_contains",
                arguments: _args,
            });
        }
        builder.v1Contains = v1Contains;
        function v1Remove(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v1_remove",
                arguments: _args,
            });
        }
        builder.v1Remove = v1Remove;
        function v2Add(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_add",
                arguments: _args,
            });
        }
        builder.v2Add = v2Add;
        function v2ContainsCurrentEpoch(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_contains_current_epoch",
                arguments: _args,
            });
        }
        builder.v2ContainsCurrentEpoch = v2ContainsCurrentEpoch;
        function v2ContainsNextEpoch(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_contains_next_epoch",
                arguments: _args,
            });
        }
        builder.v2ContainsNextEpoch = v2ContainsNextEpoch;
        function v2DisableGlobalPause(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_disable_global_pause",
                arguments: _args,
            });
        }
        builder.v2DisableGlobalPause = v2DisableGlobalPause;
        function v2EnableGlobalPause(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_enable_global_pause",
                arguments: _args,
            });
        }
        builder.v2EnableGlobalPause = v2EnableGlobalPause;
        function v2IsGlobalPauseEnabledCurrentEpoch(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_is_global_pause_enabled_current_epoch",
                arguments: _args,
            });
        }
        builder.v2IsGlobalPauseEnabledCurrentEpoch = v2IsGlobalPauseEnabledCurrentEpoch;
        function v2IsGlobalPauseEnabledNextEpoch(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_is_global_pause_enabled_next_epoch",
                arguments: _args,
            });
        }
        builder.v2IsGlobalPauseEnabledNextEpoch = v2IsGlobalPauseEnabledNextEpoch;
        function v2Remove(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::deny_list::v2_remove",
                arguments: _args,
            });
        }
        builder.v2Remove = v2Remove;
    })(builder = deny_list.builder || (deny_list.builder = {}));
    let view;
    (function (view) {
        async function migrateV1ToV2(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.migrateV1ToV2(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.migrateV1ToV2 = migrateV1ToV2;
        async function v1Add(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v1Add(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v1Add = v1Add;
        async function v1Contains(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v1Contains(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v1Contains = v1Contains;
        async function v1Remove(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v1Remove(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v1Remove = v1Remove;
        async function v2Add(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2Add(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2Add = v2Add;
        async function v2ContainsCurrentEpoch(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2ContainsCurrentEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2ContainsCurrentEpoch = v2ContainsCurrentEpoch;
        async function v2ContainsNextEpoch(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2ContainsNextEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2ContainsNextEpoch = v2ContainsNextEpoch;
        async function v2DisableGlobalPause(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2DisableGlobalPause(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2DisableGlobalPause = v2DisableGlobalPause;
        async function v2EnableGlobalPause(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2EnableGlobalPause(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2EnableGlobalPause = v2EnableGlobalPause;
        async function v2IsGlobalPauseEnabledCurrentEpoch(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2IsGlobalPauseEnabledCurrentEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2IsGlobalPauseEnabledCurrentEpoch = v2IsGlobalPauseEnabledCurrentEpoch;
        async function v2IsGlobalPauseEnabledNextEpoch(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2IsGlobalPauseEnabledNextEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2IsGlobalPauseEnabledNextEpoch = v2IsGlobalPauseEnabledNextEpoch;
        async function v2Remove(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.v2Remove(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.v2Remove = v2Remove;
    })(view = deny_list.view || (deny_list.view = {}));
})(deny_list || (exports.deny_list = deny_list = {}));
var display;
(function (display) {
    let Display;
    (function (Display) {
        Display.TYPE_QNAME = "0x2::display::Display";
        const TYPE = new move_1.TypeDescriptor(Display.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Display.type = type;
    })(Display = display.Display || (display.Display = {}));
    let DisplayCreated;
    (function (DisplayCreated) {
        DisplayCreated.TYPE_QNAME = "0x2::display::DisplayCreated";
        const TYPE = new move_1.TypeDescriptor(DisplayCreated.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        DisplayCreated.type = type;
    })(DisplayCreated = display.DisplayCreated || (display.DisplayCreated = {}));
    let VersionUpdated;
    (function (VersionUpdated) {
        VersionUpdated.TYPE_QNAME = "0x2::display::VersionUpdated";
        const TYPE = new move_1.TypeDescriptor(VersionUpdated.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        VersionUpdated.type = type;
    })(VersionUpdated = display.VersionUpdated || (display.VersionUpdated = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.add = add;
        function addMultiple(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::add_multiple",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.addMultiple = addMultiple;
        function createAndKeep(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::create_and_keep",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.createAndKeep = createAndKeep;
        function edit(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::edit",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.edit = edit;
        function fields(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::fields",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fields = fields;
        function isAuthorized(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::is_authorized",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.isAuthorized = isAuthorized;
        function new_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function newWithFields(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::new_with_fields",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.newWithFields = newWithFields;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.remove = remove;
        function updateVersion(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::update_version",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.updateVersion = updateVersion;
        function version(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::display::version",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.version = version;
    })(builder = display.builder || (display.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function addMultiple(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addMultiple(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addMultiple = addMultiple;
        async function createAndKeep(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.createAndKeep(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.createAndKeep = createAndKeep;
        async function edit(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.edit(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.edit = edit;
        async function fields(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fields(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fields = fields;
        async function isAuthorized(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isAuthorized(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isAuthorized = isAuthorized;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function newWithFields(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.newWithFields(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newWithFields = newWithFields;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
        async function updateVersion(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.updateVersion(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateVersion = updateVersion;
        async function version(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.version(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.version = version;
    })(view = display.view || (display.view = {}));
})(display || (exports.display = display = {}));
var dynamic_field;
(function (dynamic_field) {
    let Field;
    (function (Field) {
        Field.TYPE_QNAME = "0x2::dynamic_field::Field";
        const TYPE = new move_1.TypeDescriptor(Field.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE, arg1 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0, arg1);
        }
        Field.type = type;
    })(Field = dynamic_field.Field || (dynamic_field.Field = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.add = add;
        function addChildObject(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::add_child_object",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.addChildObject = addChildObject;
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowChildObject(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::borrow_child_object",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrowChildObject = borrowChildObject;
        function borrowChildObjectMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::borrow_child_object_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrowChildObjectMut = borrowChildObjectMut;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function exists_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::exists_",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.exists_ = exists_;
        function existsWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::exists_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.existsWithType = existsWithType;
        function fieldInfo(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::field_info",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fieldInfo = fieldInfo;
        function fieldInfoMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::field_info_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fieldInfoMut = fieldInfoMut;
        function hasChildObject(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::has_child_object",
                arguments: _args,
            });
        }
        builder.hasChildObject = hasChildObject;
        function hasChildObjectWithTy(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::has_child_object_with_ty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.hasChildObjectWithTy = hasChildObjectWithTy;
        function hashTypeAndKey(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::hash_type_and_key",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.hashTypeAndKey = hashTypeAndKey;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
        function removeChildObject(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::remove_child_object",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.removeChildObject = removeChildObject;
        function removeIfExists(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_field::remove_if_exists",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.removeIfExists = removeIfExists;
    })(builder = dynamic_field.builder || (dynamic_field.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function addChildObject(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addChildObject(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addChildObject = addChildObject;
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowChildObject(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowChildObject(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowChildObject = borrowChildObject;
        async function borrowChildObjectMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowChildObjectMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowChildObjectMut = borrowChildObjectMut;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function exists_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.exists_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.exists_ = exists_;
        async function existsWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.existsWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.existsWithType = existsWithType;
        async function fieldInfo(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fieldInfo(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fieldInfo = fieldInfo;
        async function fieldInfoMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fieldInfoMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fieldInfoMut = fieldInfoMut;
        async function hasChildObject(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasChildObject(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasChildObject = hasChildObject;
        async function hasChildObjectWithTy(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasChildObjectWithTy(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasChildObjectWithTy = hasChildObjectWithTy;
        async function hashTypeAndKey(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.hashTypeAndKey(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hashTypeAndKey = hashTypeAndKey;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
        async function removeChildObject(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeChildObject(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeChildObject = removeChildObject;
        async function removeIfExists(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeIfExists(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeIfExists = removeIfExists;
    })(view = dynamic_field.view || (dynamic_field.view = {}));
})(dynamic_field || (exports.dynamic_field = dynamic_field = {}));
var dynamic_object_field;
(function (dynamic_object_field) {
    let Wrapper;
    (function (Wrapper) {
        Wrapper.TYPE_QNAME = "0x2::dynamic_object_field::Wrapper";
        const TYPE = new move_1.TypeDescriptor(Wrapper.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Wrapper.type = type;
    })(Wrapper = dynamic_object_field.Wrapper || (dynamic_object_field.Wrapper = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.add = add;
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function exists_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::exists_",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.exists_ = exists_;
        function existsWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::exists_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.existsWithType = existsWithType;
        function id(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::id",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.id = id;
        function internalAdd(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::internal_add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.internalAdd = internalAdd;
        function internalBorrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::internal_borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.internalBorrow = internalBorrow;
        function internalBorrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::internal_borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.internalBorrowMut = internalBorrowMut;
        function internalExistsWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::internal_exists_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.internalExistsWithType = internalExistsWithType;
        function internalRemove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::internal_remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.internalRemove = internalRemove;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::dynamic_object_field::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
    })(builder = dynamic_object_field.builder || (dynamic_object_field.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function exists_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.exists_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.exists_ = exists_;
        async function existsWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.existsWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.existsWithType = existsWithType;
        async function id(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.id(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.id = id;
        async function internalAdd(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.internalAdd(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.internalAdd = internalAdd;
        async function internalBorrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.internalBorrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.internalBorrow = internalBorrow;
        async function internalBorrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.internalBorrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.internalBorrowMut = internalBorrowMut;
        async function internalExistsWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.internalExistsWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.internalExistsWithType = internalExistsWithType;
        async function internalRemove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.internalRemove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.internalRemove = internalRemove;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
    })(view = dynamic_object_field.view || (dynamic_object_field.view = {}));
})(dynamic_object_field || (exports.dynamic_object_field = dynamic_object_field = {}));
var ecdsa_k1;
(function (ecdsa_k1) {
    let builder;
    (function (builder) {
        function decompressPubkey(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::ecdsa_k1::decompress_pubkey",
                arguments: _args,
            });
        }
        builder.decompressPubkey = decompressPubkey;
        function secp256k1Ecrecover(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::ecdsa_k1::secp256k1_ecrecover",
                arguments: _args,
            });
        }
        builder.secp256k1Ecrecover = secp256k1Ecrecover;
        function secp256k1Verify(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::ecdsa_k1::secp256k1_verify",
                arguments: _args,
            });
        }
        builder.secp256k1Verify = secp256k1Verify;
    })(builder = ecdsa_k1.builder || (ecdsa_k1.builder = {}));
    let view;
    (function (view) {
        async function decompressPubkey(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.decompressPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.decompressPubkey = decompressPubkey;
        async function secp256k1Ecrecover(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.secp256k1Ecrecover(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.secp256k1Ecrecover = secp256k1Ecrecover;
        async function secp256k1Verify(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.secp256k1Verify(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.secp256k1Verify = secp256k1Verify;
    })(view = ecdsa_k1.view || (ecdsa_k1.view = {}));
})(ecdsa_k1 || (exports.ecdsa_k1 = ecdsa_k1 = {}));
var ecdsa_r1;
(function (ecdsa_r1) {
    let builder;
    (function (builder) {
        function secp256r1Ecrecover(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::ecdsa_r1::secp256r1_ecrecover",
                arguments: _args,
            });
        }
        builder.secp256r1Ecrecover = secp256r1Ecrecover;
        function secp256r1Verify(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::ecdsa_r1::secp256r1_verify",
                arguments: _args,
            });
        }
        builder.secp256r1Verify = secp256r1Verify;
    })(builder = ecdsa_r1.builder || (ecdsa_r1.builder = {}));
    let view;
    (function (view) {
        async function secp256r1Ecrecover(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.secp256r1Ecrecover(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.secp256r1Ecrecover = secp256r1Ecrecover;
        async function secp256r1Verify(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.secp256r1Verify(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.secp256r1Verify = secp256r1Verify;
    })(view = ecdsa_r1.view || (ecdsa_r1.view = {}));
})(ecdsa_r1 || (exports.ecdsa_r1 = ecdsa_r1 = {}));
var ecvrf;
(function (ecvrf) {
    let builder;
    (function (builder) {
        function ecvrfVerify(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::ecvrf::ecvrf_verify",
                arguments: _args,
            });
        }
        builder.ecvrfVerify = ecvrfVerify;
    })(builder = ecvrf.builder || (ecvrf.builder = {}));
    let view;
    (function (view) {
        async function ecvrfVerify(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.ecvrfVerify(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.ecvrfVerify = ecvrfVerify;
    })(view = ecvrf.view || (ecvrf.view = {}));
})(ecvrf || (exports.ecvrf = ecvrf = {}));
var ed25519;
(function (ed25519) {
    let builder;
    (function (builder) {
        function ed25519Verify(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::ed25519::ed25519_verify",
                arguments: _args,
            });
        }
        builder.ed25519Verify = ed25519Verify;
    })(builder = ed25519.builder || (ed25519.builder = {}));
    let view;
    (function (view) {
        async function ed25519Verify(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.ed25519Verify(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.ed25519Verify = ed25519Verify;
    })(view = ed25519.view || (ed25519.view = {}));
})(ed25519 || (exports.ed25519 = ed25519 = {}));
var event;
(function (event) {
    let builder;
    (function (builder) {
        function emit(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::event::emit",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.emit = emit;
    })(builder = event.builder || (event.builder = {}));
    let view;
    (function (view) {
        async function emit(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.emit(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.emit = emit;
    })(view = event.view || (event.view = {}));
})(event || (exports.event = event = {}));
var groth16;
(function (groth16) {
    let Curve;
    (function (Curve) {
        Curve.TYPE_QNAME = "0x2::groth16::Curve";
        const TYPE = new move_1.TypeDescriptor(Curve.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Curve.type = type;
    })(Curve = groth16.Curve || (groth16.Curve = {}));
    let PreparedVerifyingKey;
    (function (PreparedVerifyingKey) {
        PreparedVerifyingKey.TYPE_QNAME = "0x2::groth16::PreparedVerifyingKey";
        const TYPE = new move_1.TypeDescriptor(PreparedVerifyingKey.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        PreparedVerifyingKey.type = type;
    })(PreparedVerifyingKey = groth16.PreparedVerifyingKey || (groth16.PreparedVerifyingKey = {}));
    let ProofPoints;
    (function (ProofPoints) {
        ProofPoints.TYPE_QNAME = "0x2::groth16::ProofPoints";
        const TYPE = new move_1.TypeDescriptor(ProofPoints.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ProofPoints.type = type;
    })(ProofPoints = groth16.ProofPoints || (groth16.ProofPoints = {}));
    let PublicProofInputs;
    (function (PublicProofInputs) {
        PublicProofInputs.TYPE_QNAME = "0x2::groth16::PublicProofInputs";
        const TYPE = new move_1.TypeDescriptor(PublicProofInputs.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        PublicProofInputs.type = type;
    })(PublicProofInputs = groth16.PublicProofInputs || (groth16.PublicProofInputs = {}));
    let builder;
    (function (builder) {
        function bls12381(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::bls12381",
                arguments: _args,
            });
        }
        builder.bls12381 = bls12381;
        function bn254(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::bn254",
                arguments: _args,
            });
        }
        builder.bn254 = bn254;
        function prepareVerifyingKey(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::prepare_verifying_key",
                arguments: _args,
            });
        }
        builder.prepareVerifyingKey = prepareVerifyingKey;
        function proofPointsFromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::proof_points_from_bytes",
                arguments: _args,
            });
        }
        builder.proofPointsFromBytes = proofPointsFromBytes;
        function publicProofInputsFromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::public_proof_inputs_from_bytes",
                arguments: _args,
            });
        }
        builder.publicProofInputsFromBytes = publicProofInputsFromBytes;
        function pvkFromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::pvk_from_bytes",
                arguments: _args,
            });
        }
        builder.pvkFromBytes = pvkFromBytes;
        function pvkToBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::pvk_to_bytes",
                arguments: _args,
            });
        }
        builder.pvkToBytes = pvkToBytes;
        function verifyGroth16Proof(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::groth16::verify_groth16_proof",
                arguments: _args,
            });
        }
        builder.verifyGroth16Proof = verifyGroth16Proof;
    })(builder = groth16.builder || (groth16.builder = {}));
    let view;
    (function (view) {
        async function bls12381(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.bls12381(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.bls12381 = bls12381;
        async function bn254(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.bn254(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.bn254 = bn254;
        async function prepareVerifyingKey(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.prepareVerifyingKey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.prepareVerifyingKey = prepareVerifyingKey;
        async function proofPointsFromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.proofPointsFromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.proofPointsFromBytes = proofPointsFromBytes;
        async function publicProofInputsFromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.publicProofInputsFromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.publicProofInputsFromBytes = publicProofInputsFromBytes;
        async function pvkFromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.pvkFromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pvkFromBytes = pvkFromBytes;
        async function pvkToBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.pvkToBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pvkToBytes = pvkToBytes;
        async function verifyGroth16Proof(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.verifyGroth16Proof(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.verifyGroth16Proof = verifyGroth16Proof;
    })(view = groth16.view || (groth16.view = {}));
})(groth16 || (exports.groth16 = groth16 = {}));
var group_ops;
(function (group_ops) {
    let Element;
    (function (Element) {
        Element.TYPE_QNAME = "0x2::group_ops::Element";
        const TYPE = new move_1.TypeDescriptor(Element.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Element.type = type;
    })(Element = group_ops.Element || (group_ops.Element = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.add = add;
        function bytes(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::bytes",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.bytes = bytes;
        function div(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::div",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.div = div;
        function equal(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::equal",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.equal = equal;
        function fromBytes(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::from_bytes",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fromBytes = fromBytes;
        function hashTo(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::hash_to",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.hashTo = hashTo;
        function mul(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::mul",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.mul = mul;
        function multiScalarMultiplication(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::multi_scalar_multiplication",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.multiScalarMultiplication = multiScalarMultiplication;
        function pairing(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::pairing",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.pairing = pairing;
        function setAsPrefix(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::set_as_prefix",
                arguments: _args,
            });
        }
        builder.setAsPrefix = setAsPrefix;
        function sub(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::group_ops::sub",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.sub = sub;
    })(builder = group_ops.builder || (group_ops.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function bytes(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.bytes(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.bytes = bytes;
        async function div(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.div(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.div = div;
        async function equal(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.equal(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.equal = equal;
        async function fromBytes(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromBytes(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromBytes = fromBytes;
        async function hashTo(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.hashTo(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hashTo = hashTo;
        async function mul(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.mul(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.mul = mul;
        async function multiScalarMultiplication(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.multiScalarMultiplication(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.multiScalarMultiplication = multiScalarMultiplication;
        async function pairing(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.pairing(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pairing = pairing;
        async function setAsPrefix(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.setAsPrefix(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.setAsPrefix = setAsPrefix;
        async function sub(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.sub(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.sub = sub;
    })(view = group_ops.view || (group_ops.view = {}));
})(group_ops || (exports.group_ops = group_ops = {}));
var hash;
(function (hash) {
    let builder;
    (function (builder) {
        function blake2b256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::hash::blake2b256",
                arguments: _args,
            });
        }
        builder.blake2b256 = blake2b256;
        function keccak256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::hash::keccak256",
                arguments: _args,
            });
        }
        builder.keccak256 = keccak256;
    })(builder = hash.builder || (hash.builder = {}));
    let view;
    (function (view) {
        async function blake2b256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.blake2b256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.blake2b256 = blake2b256;
        async function keccak256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.keccak256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.keccak256 = keccak256;
    })(view = hash.view || (hash.view = {}));
})(hash || (exports.hash = hash = {}));
var hex;
(function (hex) {
    let builder;
    (function (builder) {
        function decode(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::hex::decode",
                arguments: _args,
            });
        }
        builder.decode = decode;
        function encode(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::hex::encode",
                arguments: _args,
            });
        }
        builder.encode = encode;
    })(builder = hex.builder || (hex.builder = {}));
    let view;
    (function (view) {
        async function decode(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.decode(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.decode = decode;
        async function encode(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.encode(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.encode = encode;
    })(view = hex.view || (hex.view = {}));
})(hex || (exports.hex = hex = {}));
var hmac;
(function (hmac) {
    let builder;
    (function (builder) {
        function hmacSha3256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::hmac::hmac_sha3_256",
                arguments: _args,
            });
        }
        builder.hmacSha3256 = hmacSha3256;
    })(builder = hmac.builder || (hmac.builder = {}));
    let view;
    (function (view) {
        async function hmacSha3256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.hmacSha3256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hmacSha3256 = hmacSha3256;
    })(view = hmac.view || (hmac.view = {}));
})(hmac || (exports.hmac = hmac = {}));
var kiosk;
(function (kiosk) {
    let Borrow;
    (function (Borrow) {
        Borrow.TYPE_QNAME = "0x2::kiosk::Borrow";
        const TYPE = new move_1.TypeDescriptor(Borrow.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Borrow.type = type;
    })(Borrow = kiosk.Borrow || (kiosk.Borrow = {}));
    let Item;
    (function (Item) {
        Item.TYPE_QNAME = "0x2::kiosk::Item";
        const TYPE = new move_1.TypeDescriptor(Item.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Item.type = type;
    })(Item = kiosk.Item || (kiosk.Item = {}));
    let ItemDelisted;
    (function (ItemDelisted) {
        ItemDelisted.TYPE_QNAME = "0x2::kiosk::ItemDelisted";
        const TYPE = new move_1.TypeDescriptor(ItemDelisted.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        ItemDelisted.type = type;
    })(ItemDelisted = kiosk.ItemDelisted || (kiosk.ItemDelisted = {}));
    let ItemListed;
    (function (ItemListed) {
        ItemListed.TYPE_QNAME = "0x2::kiosk::ItemListed";
        const TYPE = new move_1.TypeDescriptor(ItemListed.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        ItemListed.type = type;
    })(ItemListed = kiosk.ItemListed || (kiosk.ItemListed = {}));
    let ItemPurchased;
    (function (ItemPurchased) {
        ItemPurchased.TYPE_QNAME = "0x2::kiosk::ItemPurchased";
        const TYPE = new move_1.TypeDescriptor(ItemPurchased.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        ItemPurchased.type = type;
    })(ItemPurchased = kiosk.ItemPurchased || (kiosk.ItemPurchased = {}));
    let Kiosk;
    (function (Kiosk) {
        Kiosk.TYPE_QNAME = "0x2::kiosk::Kiosk";
        const TYPE = new move_1.TypeDescriptor(Kiosk.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Kiosk.type = type;
    })(Kiosk = kiosk.Kiosk || (kiosk.Kiosk = {}));
    let KioskOwnerCap;
    (function (KioskOwnerCap) {
        KioskOwnerCap.TYPE_QNAME = "0x2::kiosk::KioskOwnerCap";
        const TYPE = new move_1.TypeDescriptor(KioskOwnerCap.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        KioskOwnerCap.type = type;
    })(KioskOwnerCap = kiosk.KioskOwnerCap || (kiosk.KioskOwnerCap = {}));
    let Listing;
    (function (Listing) {
        Listing.TYPE_QNAME = "0x2::kiosk::Listing";
        const TYPE = new move_1.TypeDescriptor(Listing.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Listing.type = type;
    })(Listing = kiosk.Listing || (kiosk.Listing = {}));
    let Lock;
    (function (Lock) {
        Lock.TYPE_QNAME = "0x2::kiosk::Lock";
        const TYPE = new move_1.TypeDescriptor(Lock.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Lock.type = type;
    })(Lock = kiosk.Lock || (kiosk.Lock = {}));
    let PurchaseCap;
    (function (PurchaseCap) {
        PurchaseCap.TYPE_QNAME = "0x2::kiosk::PurchaseCap";
        const TYPE = new move_1.TypeDescriptor(PurchaseCap.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        PurchaseCap.type = type;
    })(PurchaseCap = kiosk.PurchaseCap || (kiosk.PurchaseCap = {}));
    let builder;
    (function (builder) {
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function borrowVal(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::borrow_val",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrowVal = borrowVal;
        function closeAndWithdraw(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::close_and_withdraw",
                arguments: _args,
            });
        }
        builder.closeAndWithdraw = closeAndWithdraw;
        function default_(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::default",
                arguments: _args,
            });
        }
        builder.default_ = default_;
        function delist(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::delist",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.delist = delist;
        function hasAccess(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::has_access",
                arguments: _args,
            });
        }
        builder.hasAccess = hasAccess;
        function hasItem(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::has_item",
                arguments: _args,
            });
        }
        builder.hasItem = hasItem;
        function hasItemWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::has_item_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.hasItemWithType = hasItemWithType;
        function isListed(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::is_listed",
                arguments: _args,
            });
        }
        builder.isListed = isListed;
        function isListedExclusively(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::is_listed_exclusively",
                arguments: _args,
            });
        }
        builder.isListedExclusively = isListedExclusively;
        function isLocked(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::is_locked",
                arguments: _args,
            });
        }
        builder.isLocked = isLocked;
        function itemCount(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::item_count",
                arguments: _args,
            });
        }
        builder.itemCount = itemCount;
        function kioskOwnerCapFor(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::kiosk_owner_cap_for",
                arguments: _args,
            });
        }
        builder.kioskOwnerCapFor = kioskOwnerCapFor;
        function list(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::list",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.list = list;
        function listWithPurchaseCap(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::list_with_purchase_cap",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.listWithPurchaseCap = listWithPurchaseCap;
        function lock(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::lock",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.lock = lock;
        function lockInternal(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::lock_internal",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.lockInternal = lockInternal;
        function new_(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function owner(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::owner",
                arguments: _args,
            });
        }
        builder.owner = owner;
        function place(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::place",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.place = place;
        function placeAndList(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::place_and_list",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.placeAndList = placeAndList;
        function placeInternal(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::place_internal",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.placeInternal = placeInternal;
        function profitsAmount(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::profits_amount",
                arguments: _args,
            });
        }
        builder.profitsAmount = profitsAmount;
        function profitsMut(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::profits_mut",
                arguments: _args,
            });
        }
        builder.profitsMut = profitsMut;
        function purchase(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::purchase",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.purchase = purchase;
        function purchaseCapItem(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::purchase_cap_item",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.purchaseCapItem = purchaseCapItem;
        function purchaseCapKiosk(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::purchase_cap_kiosk",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.purchaseCapKiosk = purchaseCapKiosk;
        function purchaseCapMinPrice(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::purchase_cap_min_price",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.purchaseCapMinPrice = purchaseCapMinPrice;
        function purchaseWithCap(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::purchase_with_cap",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.purchaseWithCap = purchaseWithCap;
        function returnPurchaseCap(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::return_purchase_cap",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.returnPurchaseCap = returnPurchaseCap;
        function returnVal(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::return_val",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.returnVal = returnVal;
        function setAllowExtensions(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::set_allow_extensions",
                arguments: _args,
            });
        }
        builder.setAllowExtensions = setAllowExtensions;
        function setOwner(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::set_owner",
                arguments: _args,
            });
        }
        builder.setOwner = setOwner;
        function setOwnerCustom(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::set_owner_custom",
                arguments: _args,
            });
        }
        builder.setOwnerCustom = setOwnerCustom;
        function take(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::take",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.take = take;
        function uid(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::uid",
                arguments: _args,
            });
        }
        builder.uid = uid;
        function uidMut(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::uid_mut",
                arguments: _args,
            });
        }
        builder.uidMut = uidMut;
        function uidMutAsOwner(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::uid_mut_as_owner",
                arguments: _args,
            });
        }
        builder.uidMutAsOwner = uidMutAsOwner;
        function uidMutInternal(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::uid_mut_internal",
                arguments: _args,
            });
        }
        builder.uidMutInternal = uidMutInternal;
        function withdraw(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk::withdraw",
                arguments: _args,
            });
        }
        builder.withdraw = withdraw;
    })(builder = kiosk.builder || (kiosk.builder = {}));
    let view;
    (function (view) {
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function borrowVal(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowVal(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowVal = borrowVal;
        async function closeAndWithdraw(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.closeAndWithdraw(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.closeAndWithdraw = closeAndWithdraw;
        async function delist(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.delist(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.delist = delist;
        async function hasAccess(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasAccess(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasAccess = hasAccess;
        async function hasItem(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasItem(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasItem = hasItem;
        async function hasItemWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasItemWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasItemWithType = hasItemWithType;
        async function isListed(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.isListed(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isListed = isListed;
        async function isListedExclusively(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.isListedExclusively(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isListedExclusively = isListedExclusively;
        async function isLocked(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.isLocked(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isLocked = isLocked;
        async function itemCount(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.itemCount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.itemCount = itemCount;
        async function kioskOwnerCapFor(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.kioskOwnerCapFor(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.kioskOwnerCapFor = kioskOwnerCapFor;
        async function list(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.list(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.list = list;
        async function listWithPurchaseCap(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.listWithPurchaseCap(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.listWithPurchaseCap = listWithPurchaseCap;
        async function lock(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.lock(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.lock = lock;
        async function lockInternal(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.lockInternal(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.lockInternal = lockInternal;
        async function new_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function owner(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.owner(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.owner = owner;
        async function place(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.place(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.place = place;
        async function placeAndList(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.placeAndList(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.placeAndList = placeAndList;
        async function placeInternal(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.placeInternal(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.placeInternal = placeInternal;
        async function profitsAmount(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.profitsAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.profitsAmount = profitsAmount;
        async function profitsMut(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.profitsMut(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.profitsMut = profitsMut;
        async function purchase(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.purchase(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.purchase = purchase;
        async function purchaseCapItem(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.purchaseCapItem(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.purchaseCapItem = purchaseCapItem;
        async function purchaseCapKiosk(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.purchaseCapKiosk(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.purchaseCapKiosk = purchaseCapKiosk;
        async function purchaseCapMinPrice(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.purchaseCapMinPrice(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.purchaseCapMinPrice = purchaseCapMinPrice;
        async function purchaseWithCap(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.purchaseWithCap(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.purchaseWithCap = purchaseWithCap;
        async function returnPurchaseCap(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.returnPurchaseCap(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.returnPurchaseCap = returnPurchaseCap;
        async function returnVal(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.returnVal(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.returnVal = returnVal;
        async function setAllowExtensions(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.setAllowExtensions(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.setAllowExtensions = setAllowExtensions;
        async function setOwner(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.setOwner(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.setOwner = setOwner;
        async function setOwnerCustom(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.setOwnerCustom(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.setOwnerCustom = setOwnerCustom;
        async function take(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.take(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.take = take;
        async function uid(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uid(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uid = uid;
        async function uidMut(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidMut(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidMut = uidMut;
        async function uidMutAsOwner(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidMutAsOwner(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidMutAsOwner = uidMutAsOwner;
        async function uidMutInternal(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidMutInternal(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidMutInternal = uidMutInternal;
        async function withdraw(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.withdraw(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.withdraw = withdraw;
    })(view = kiosk.view || (kiosk.view = {}));
})(kiosk || (exports.kiosk = kiosk = {}));
var kiosk_extension;
(function (kiosk_extension) {
    let Extension;
    (function (Extension) {
        Extension.TYPE_QNAME = "0x2::kiosk_extension::Extension";
        const TYPE = new move_1.TypeDescriptor(Extension.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Extension.type = type;
    })(Extension = kiosk_extension.Extension || (kiosk_extension.Extension = {}));
    let ExtensionKey;
    (function (ExtensionKey) {
        ExtensionKey.TYPE_QNAME = "0x2::kiosk_extension::ExtensionKey";
        const TYPE = new move_1.TypeDescriptor(ExtensionKey.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        ExtensionKey.type = type;
    })(ExtensionKey = kiosk_extension.ExtensionKey || (kiosk_extension.ExtensionKey = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.add = add;
        function canLock(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::can_lock",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.canLock = canLock;
        function canPlace(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::can_place",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.canPlace = canPlace;
        function disable(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::disable",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.disable = disable;
        function enable(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::enable",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.enable = enable;
        function isEnabled(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::is_enabled",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.isEnabled = isEnabled;
        function isInstalled(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::is_installed",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.isInstalled = isInstalled;
        function lock(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::lock",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.lock = lock;
        function place(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::place",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.place = place;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.remove = remove;
        function storage(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::storage",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.storage = storage;
        function storageMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::kiosk_extension::storage_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.storageMut = storageMut;
    })(builder = kiosk_extension.builder || (kiosk_extension.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function canLock(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.canLock(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.canLock = canLock;
        async function canPlace(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.canPlace(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.canPlace = canPlace;
        async function disable(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.disable(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.disable = disable;
        async function enable(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.enable(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.enable = enable;
        async function isEnabled(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEnabled(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEnabled = isEnabled;
        async function isInstalled(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isInstalled(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isInstalled = isInstalled;
        async function lock(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.lock(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.lock = lock;
        async function place(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.place(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.place = place;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
        async function storage(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.storage(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.storage = storage;
        async function storageMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.storageMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.storageMut = storageMut;
    })(view = kiosk_extension.view || (kiosk_extension.view = {}));
})(kiosk_extension || (exports.kiosk_extension = kiosk_extension = {}));
var linked_table;
(function (linked_table) {
    let LinkedTable;
    (function (LinkedTable) {
        LinkedTable.TYPE_QNAME = "0x2::linked_table::LinkedTable";
        const TYPE = new move_1.TypeDescriptor(LinkedTable.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE, arg1 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0, arg1);
        }
        LinkedTable.type = type;
    })(LinkedTable = linked_table.LinkedTable || (linked_table.LinkedTable = {}));
    let Node;
    (function (Node) {
        Node.TYPE_QNAME = "0x2::linked_table::Node";
        const TYPE = new move_1.TypeDescriptor(Node.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE, arg1 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0, arg1);
        }
        Node.type = type;
    })(Node = linked_table.Node || (linked_table.Node = {}));
    let builder;
    (function (builder) {
        function back(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::back",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.back = back;
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function contains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.contains = contains;
        function destroyEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::destroy_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.destroyEmpty = destroyEmpty;
        function drop(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::drop",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.drop = drop;
        function front(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::front",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.front = front;
        function isEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::is_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.isEmpty = isEmpty;
        function length(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::length",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.length = length;
        function new_(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function next(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::next",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.next = next;
        function popBack(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::pop_back",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.popBack = popBack;
        function popFront(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::pop_front",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.popFront = popFront;
        function prev(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::prev",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.prev = prev;
        function pushBack(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::push_back",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.pushBack = pushBack;
        function pushFront(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::push_front",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.pushFront = pushFront;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::linked_table::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
    })(builder = linked_table.builder || (linked_table.builder = {}));
    let view;
    (function (view) {
        async function back(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.back(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.back = back;
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function contains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.contains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.contains = contains;
        async function destroyEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyEmpty = destroyEmpty;
        async function drop(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.drop(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.drop = drop;
        async function front(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.front(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.front = front;
        async function isEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function length(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.length(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.length = length;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function next(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.next(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.next = next;
        async function popBack(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.popBack(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.popBack = popBack;
        async function popFront(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.popFront(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.popFront = popFront;
        async function prev(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.prev(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.prev = prev;
        async function pushBack(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.pushBack(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pushBack = pushBack;
        async function pushFront(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.pushFront(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pushFront = pushFront;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
    })(view = linked_table.view || (linked_table.view = {}));
})(linked_table || (exports.linked_table = linked_table = {}));
var math;
(function (math) {
    let builder;
    (function (builder) {
        function diff(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::math::diff",
                arguments: _args,
            });
        }
        builder.diff = diff;
        function divideAndRoundUp(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::math::divide_and_round_up",
                arguments: _args,
            });
        }
        builder.divideAndRoundUp = divideAndRoundUp;
        function max(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::math::max",
                arguments: _args,
            });
        }
        builder.max = max;
        function min(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::math::min",
                arguments: _args,
            });
        }
        builder.min = min;
        function pow(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::math::pow",
                arguments: _args,
            });
        }
        builder.pow = pow;
        function sqrt(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::math::sqrt",
                arguments: _args,
            });
        }
        builder.sqrt = sqrt;
        function sqrtU128(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::math::sqrt_u128",
                arguments: _args,
            });
        }
        builder.sqrtU128 = sqrtU128;
    })(builder = math.builder || (math.builder = {}));
    let view;
    (function (view) {
        async function diff(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.diff(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.diff = diff;
        async function divideAndRoundUp(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.divideAndRoundUp(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.divideAndRoundUp = divideAndRoundUp;
        async function max(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.max(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.max = max;
        async function min(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.min(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.min = min;
        async function pow(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.pow(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pow = pow;
        async function sqrt(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.sqrt(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.sqrt = sqrt;
        async function sqrtU128(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.sqrtU128(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.sqrtU128 = sqrtU128;
    })(view = math.view || (math.view = {}));
})(math || (exports.math = math = {}));
var object_;
(function (object_) {
    let ID;
    (function (ID) {
        ID.TYPE_QNAME = "0x2::object::ID";
        const TYPE = new move_1.TypeDescriptor(ID.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ID.type = type;
    })(ID = object_.ID || (object_.ID = {}));
    let UID;
    (function (UID) {
        UID.TYPE_QNAME = "0x2::object::UID";
        const TYPE = new move_1.TypeDescriptor(UID.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        UID.type = type;
    })(UID = object_.UID || (object_.UID = {}));
    let builder;
    (function (builder) {
        function authenticatorState(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::authenticator_state",
                arguments: _args,
            });
        }
        builder.authenticatorState = authenticatorState;
        function borrowId(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::borrow_id",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrowId = borrowId;
        function clock(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::clock",
                arguments: _args,
            });
        }
        builder.clock = clock;
        function delete_(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::delete",
                arguments: _args,
            });
        }
        builder.delete_ = delete_;
        function id(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::id",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.id = id;
        function idAddress(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::id_address",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.idAddress = idAddress;
        function idBytes(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::id_bytes",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.idBytes = idBytes;
        function idFromAddress(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::id_from_address",
                arguments: _args,
            });
        }
        builder.idFromAddress = idFromAddress;
        function idFromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::id_from_bytes",
                arguments: _args,
            });
        }
        builder.idFromBytes = idFromBytes;
        function idToAddress(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::id_to_address",
                arguments: _args,
            });
        }
        builder.idToAddress = idToAddress;
        function idToBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::id_to_bytes",
                arguments: _args,
            });
        }
        builder.idToBytes = idToBytes;
        function new_(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function newUidFromHash(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::new_uid_from_hash",
                arguments: _args,
            });
        }
        builder.newUidFromHash = newUidFromHash;
        function randomnessState(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::randomness_state",
                arguments: _args,
            });
        }
        builder.randomnessState = randomnessState;
        function suiDenyListObjectId(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::sui_deny_list_object_id",
                arguments: _args,
            });
        }
        builder.suiDenyListObjectId = suiDenyListObjectId;
        function uidAsInner(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::uid_as_inner",
                arguments: _args,
            });
        }
        builder.uidAsInner = uidAsInner;
        function uidToAddress(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::uid_to_address",
                arguments: _args,
            });
        }
        builder.uidToAddress = uidToAddress;
        function uidToBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::uid_to_bytes",
                arguments: _args,
            });
        }
        builder.uidToBytes = uidToBytes;
        function uidToInner(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object::uid_to_inner",
                arguments: _args,
            });
        }
        builder.uidToInner = uidToInner;
    })(builder = object_.builder || (object_.builder = {}));
    let view;
    (function (view) {
        async function authenticatorState(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.authenticatorState(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.authenticatorState = authenticatorState;
        async function borrowId(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowId(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowId = borrowId;
        async function clock(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.clock(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.clock = clock;
        async function delete_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.delete_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.delete_ = delete_;
        async function id(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.id(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.id = id;
        async function idAddress(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.idAddress(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.idAddress = idAddress;
        async function idBytes(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.idBytes(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.idBytes = idBytes;
        async function idFromAddress(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.idFromAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.idFromAddress = idFromAddress;
        async function idFromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.idFromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.idFromBytes = idFromBytes;
        async function idToAddress(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.idToAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.idToAddress = idToAddress;
        async function idToBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.idToBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.idToBytes = idToBytes;
        async function new_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function newUidFromHash(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.newUidFromHash(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newUidFromHash = newUidFromHash;
        async function randomnessState(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.randomnessState(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.randomnessState = randomnessState;
        async function suiDenyListObjectId(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.suiDenyListObjectId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.suiDenyListObjectId = suiDenyListObjectId;
        async function uidAsInner(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidAsInner(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidAsInner = uidAsInner;
        async function uidToAddress(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidToAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidToAddress = uidToAddress;
        async function uidToBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidToBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidToBytes = uidToBytes;
        async function uidToInner(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidToInner(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidToInner = uidToInner;
    })(view = object_.view || (object_.view = {}));
})(object_ || (exports.object_ = object_ = {}));
var object_bag;
(function (object_bag) {
    let ObjectBag;
    (function (ObjectBag) {
        ObjectBag.TYPE_QNAME = "0x2::object_bag::ObjectBag";
        const TYPE = new move_1.TypeDescriptor(ObjectBag.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ObjectBag.type = type;
    })(ObjectBag = object_bag.ObjectBag || (object_bag.ObjectBag = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.add = add;
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function contains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.contains = contains;
        function containsWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::contains_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.containsWithType = containsWithType;
        function destroyEmpty(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::destroy_empty",
                arguments: _args,
            });
        }
        builder.destroyEmpty = destroyEmpty;
        function isEmpty(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::is_empty",
                arguments: _args,
            });
        }
        builder.isEmpty = isEmpty;
        function length(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::length",
                arguments: _args,
            });
        }
        builder.length = length;
        function new_(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
        function valueId(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_bag::value_id",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.valueId = valueId;
    })(builder = object_bag.builder || (object_bag.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function contains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.contains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.contains = contains;
        async function containsWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.containsWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.containsWithType = containsWithType;
        async function destroyEmpty(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyEmpty(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyEmpty = destroyEmpty;
        async function isEmpty(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function length(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.length(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.length = length;
        async function new_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
        async function valueId(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.valueId(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.valueId = valueId;
    })(view = object_bag.view || (object_bag.view = {}));
})(object_bag || (exports.object_bag = object_bag = {}));
var object_table;
(function (object_table) {
    let ObjectTable;
    (function (ObjectTable) {
        ObjectTable.TYPE_QNAME = "0x2::object_table::ObjectTable";
        const TYPE = new move_1.TypeDescriptor(ObjectTable.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE, arg1 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0, arg1);
        }
        ObjectTable.type = type;
    })(ObjectTable = object_table.ObjectTable || (object_table.ObjectTable = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.add = add;
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function contains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.contains = contains;
        function destroyEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::destroy_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.destroyEmpty = destroyEmpty;
        function isEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::is_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.isEmpty = isEmpty;
        function length(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::length",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.length = length;
        function new_(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
        function valueId(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::object_table::value_id",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.valueId = valueId;
    })(builder = object_table.builder || (object_table.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function contains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.contains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.contains = contains;
        async function destroyEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyEmpty = destroyEmpty;
        async function isEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function length(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.length(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.length = length;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
        async function valueId(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.valueId(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.valueId = valueId;
    })(view = object_table.view || (object_table.view = {}));
})(object_table || (exports.object_table = object_table = {}));
var package_;
(function (package_) {
    let Publisher;
    (function (Publisher) {
        Publisher.TYPE_QNAME = "0x2::package::Publisher";
        const TYPE = new move_1.TypeDescriptor(Publisher.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Publisher.type = type;
    })(Publisher = package_.Publisher || (package_.Publisher = {}));
    let UpgradeCap;
    (function (UpgradeCap) {
        UpgradeCap.TYPE_QNAME = "0x2::package::UpgradeCap";
        const TYPE = new move_1.TypeDescriptor(UpgradeCap.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        UpgradeCap.type = type;
    })(UpgradeCap = package_.UpgradeCap || (package_.UpgradeCap = {}));
    let UpgradeReceipt;
    (function (UpgradeReceipt) {
        UpgradeReceipt.TYPE_QNAME = "0x2::package::UpgradeReceipt";
        const TYPE = new move_1.TypeDescriptor(UpgradeReceipt.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        UpgradeReceipt.type = type;
    })(UpgradeReceipt = package_.UpgradeReceipt || (package_.UpgradeReceipt = {}));
    let UpgradeTicket;
    (function (UpgradeTicket) {
        UpgradeTicket.TYPE_QNAME = "0x2::package::UpgradeTicket";
        const TYPE = new move_1.TypeDescriptor(UpgradeTicket.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        UpgradeTicket.type = type;
    })(UpgradeTicket = package_.UpgradeTicket || (package_.UpgradeTicket = {}));
    let builder;
    (function (builder) {
        function additivePolicy(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::additive_policy",
                arguments: _args,
            });
        }
        builder.additivePolicy = additivePolicy;
        function authorizeUpgrade(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::authorize_upgrade",
                arguments: _args,
            });
        }
        builder.authorizeUpgrade = authorizeUpgrade;
        function burnPublisher(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::burn_publisher",
                arguments: _args,
            });
        }
        builder.burnPublisher = burnPublisher;
        function claim(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::claim",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.claim = claim;
        function claimAndKeep(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::claim_and_keep",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.claimAndKeep = claimAndKeep;
        function commitUpgrade(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::commit_upgrade",
                arguments: _args,
            });
        }
        builder.commitUpgrade = commitUpgrade;
        function compatiblePolicy(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::compatible_policy",
                arguments: _args,
            });
        }
        builder.compatiblePolicy = compatiblePolicy;
        function depOnlyPolicy(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::dep_only_policy",
                arguments: _args,
            });
        }
        builder.depOnlyPolicy = depOnlyPolicy;
        function fromModule(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::from_module",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fromModule = fromModule;
        function fromPackage(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::from_package",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fromPackage = fromPackage;
        function makeImmutable(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::make_immutable",
                arguments: _args,
            });
        }
        builder.makeImmutable = makeImmutable;
        function onlyAdditiveUpgrades(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::only_additive_upgrades",
                arguments: _args,
            });
        }
        builder.onlyAdditiveUpgrades = onlyAdditiveUpgrades;
        function onlyDepUpgrades(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::only_dep_upgrades",
                arguments: _args,
            });
        }
        builder.onlyDepUpgrades = onlyDepUpgrades;
        function publishedModule(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::published_module",
                arguments: _args,
            });
        }
        builder.publishedModule = publishedModule;
        function publishedPackage(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::published_package",
                arguments: _args,
            });
        }
        builder.publishedPackage = publishedPackage;
        function receiptCap(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::receipt_cap",
                arguments: _args,
            });
        }
        builder.receiptCap = receiptCap;
        function receiptPackage(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::receipt_package",
                arguments: _args,
            });
        }
        builder.receiptPackage = receiptPackage;
        function ticketDigest(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::ticket_digest",
                arguments: _args,
            });
        }
        builder.ticketDigest = ticketDigest;
        function ticketPackage(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::ticket_package",
                arguments: _args,
            });
        }
        builder.ticketPackage = ticketPackage;
        function ticketPolicy(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::ticket_policy",
                arguments: _args,
            });
        }
        builder.ticketPolicy = ticketPolicy;
        function upgradePackage(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::upgrade_package",
                arguments: _args,
            });
        }
        builder.upgradePackage = upgradePackage;
        function upgradePolicy(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::upgrade_policy",
                arguments: _args,
            });
        }
        builder.upgradePolicy = upgradePolicy;
        function version(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::package::version",
                arguments: _args,
            });
        }
        builder.version = version;
    })(builder = package_.builder || (package_.builder = {}));
    let view;
    (function (view) {
        async function additivePolicy(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.additivePolicy(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.additivePolicy = additivePolicy;
        async function authorizeUpgrade(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.authorizeUpgrade(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.authorizeUpgrade = authorizeUpgrade;
        async function burnPublisher(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.burnPublisher(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.burnPublisher = burnPublisher;
        async function claim(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.claim(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.claim = claim;
        async function claimAndKeep(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.claimAndKeep(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.claimAndKeep = claimAndKeep;
        async function commitUpgrade(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.commitUpgrade(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.commitUpgrade = commitUpgrade;
        async function compatiblePolicy(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.compatiblePolicy(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.compatiblePolicy = compatiblePolicy;
        async function depOnlyPolicy(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.depOnlyPolicy(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.depOnlyPolicy = depOnlyPolicy;
        async function fromModule(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromModule(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromModule = fromModule;
        async function fromPackage(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromPackage(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromPackage = fromPackage;
        async function makeImmutable(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.makeImmutable(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.makeImmutable = makeImmutable;
        async function onlyAdditiveUpgrades(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.onlyAdditiveUpgrades(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.onlyAdditiveUpgrades = onlyAdditiveUpgrades;
        async function onlyDepUpgrades(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.onlyDepUpgrades(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.onlyDepUpgrades = onlyDepUpgrades;
        async function publishedModule(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.publishedModule(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.publishedModule = publishedModule;
        async function publishedPackage(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.publishedPackage(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.publishedPackage = publishedPackage;
        async function receiptCap(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.receiptCap(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.receiptCap = receiptCap;
        async function receiptPackage(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.receiptPackage(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.receiptPackage = receiptPackage;
        async function ticketDigest(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.ticketDigest(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.ticketDigest = ticketDigest;
        async function ticketPackage(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.ticketPackage(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.ticketPackage = ticketPackage;
        async function ticketPolicy(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.ticketPolicy(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.ticketPolicy = ticketPolicy;
        async function upgradePackage(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.upgradePackage(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.upgradePackage = upgradePackage;
        async function upgradePolicy(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.upgradePolicy(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.upgradePolicy = upgradePolicy;
        async function version(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.version(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.version = version;
    })(view = package_.view || (package_.view = {}));
})(package_ || (exports.package_ = package_ = {}));
var pay;
(function (pay) {
    let builder;
    (function (builder) {
        function divideAndKeep(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::divide_and_keep",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.divideAndKeep = divideAndKeep;
        function join(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::join",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.join = join;
        function joinVec(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::join_vec",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.joinVec = joinVec;
        function joinVecAndTransfer(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::join_vec_and_transfer",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.joinVecAndTransfer = joinVecAndTransfer;
        function keep(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::keep",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.keep = keep;
        function split(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::split",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.split = split;
        function splitAndTransfer(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::split_and_transfer",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.splitAndTransfer = splitAndTransfer;
        function splitVec(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::pay::split_vec",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.splitVec = splitVec;
    })(builder = pay.builder || (pay.builder = {}));
    let view;
    (function (view) {
        async function divideAndKeep(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.divideAndKeep(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.divideAndKeep = divideAndKeep;
        async function join(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.join(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.join = join;
        async function joinVec(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.joinVec(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.joinVec = joinVec;
        async function joinVecAndTransfer(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.joinVecAndTransfer(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.joinVecAndTransfer = joinVecAndTransfer;
        async function keep(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.keep(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.keep = keep;
        async function split(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.split(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.split = split;
        async function splitAndTransfer(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.splitAndTransfer(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.splitAndTransfer = splitAndTransfer;
        async function splitVec(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.splitVec(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.splitVec = splitVec;
    })(view = pay.view || (pay.view = {}));
})(pay || (exports.pay = pay = {}));
var poseidon;
(function (poseidon) {
    let builder;
    (function (builder) {
        function poseidonBn254(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::poseidon::poseidon_bn254",
                arguments: _args,
            });
        }
        builder.poseidonBn254 = poseidonBn254;
    })(builder = poseidon.builder || (poseidon.builder = {}));
    let view;
    (function (view) {
        async function poseidonBn254(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.poseidonBn254(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.poseidonBn254 = poseidonBn254;
    })(view = poseidon.view || (poseidon.view = {}));
})(poseidon || (exports.poseidon = poseidon = {}));
var priority_queue;
(function (priority_queue) {
    let Entry;
    (function (Entry) {
        Entry.TYPE_QNAME = "0x2::priority_queue::Entry";
        const TYPE = new move_1.TypeDescriptor(Entry.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Entry.type = type;
    })(Entry = priority_queue.Entry || (priority_queue.Entry = {}));
    let PriorityQueue;
    (function (PriorityQueue) {
        PriorityQueue.TYPE_QNAME = "0x2::priority_queue::PriorityQueue";
        const TYPE = new move_1.TypeDescriptor(PriorityQueue.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        PriorityQueue.type = type;
    })(PriorityQueue = priority_queue.PriorityQueue || (priority_queue.PriorityQueue = {}));
    let builder;
    (function (builder) {
        function createEntries(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::priority_queue::create_entries",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.createEntries = createEntries;
        function insert(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::priority_queue::insert",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.insert = insert;
        function new_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::priority_queue::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function newEntry(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::priority_queue::new_entry",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.newEntry = newEntry;
        function popMax(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::priority_queue::pop_max",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.popMax = popMax;
        function priorities(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::priority_queue::priorities",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.priorities = priorities;
    })(builder = priority_queue.builder || (priority_queue.builder = {}));
    let view;
    (function (view) {
        async function createEntries(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.createEntries(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.createEntries = createEntries;
        async function insert(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.insert(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.insert = insert;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function newEntry(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.newEntry(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newEntry = newEntry;
        async function popMax(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.popMax(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.popMax = popMax;
        async function priorities(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.priorities(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.priorities = priorities;
    })(view = priority_queue.view || (priority_queue.view = {}));
})(priority_queue || (exports.priority_queue = priority_queue = {}));
var random;
(function (random) {
    let Random;
    (function (Random) {
        Random.TYPE_QNAME = "0x2::random::Random";
        const TYPE = new move_1.TypeDescriptor(Random.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Random.type = type;
    })(Random = random.Random || (random.Random = {}));
    let RandomGenerator;
    (function (RandomGenerator) {
        RandomGenerator.TYPE_QNAME = "0x2::random::RandomGenerator";
        const TYPE = new move_1.TypeDescriptor(RandomGenerator.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        RandomGenerator.type = type;
    })(RandomGenerator = random.RandomGenerator || (random.RandomGenerator = {}));
    let RandomInner;
    (function (RandomInner) {
        RandomInner.TYPE_QNAME = "0x2::random::RandomInner";
        const TYPE = new move_1.TypeDescriptor(RandomInner.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        RandomInner.type = type;
    })(RandomInner = random.RandomInner || (random.RandomInner = {}));
    let builder;
    (function (builder) {
        function generateBool(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_bool",
                arguments: _args,
            });
        }
        builder.generateBool = generateBool;
        function generateBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_bytes",
                arguments: _args,
            });
        }
        builder.generateBytes = generateBytes;
        function generateU128(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u128",
                arguments: _args,
            });
        }
        builder.generateU128 = generateU128;
        function generateU128InRange(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u128_in_range",
                arguments: _args,
            });
        }
        builder.generateU128InRange = generateU128InRange;
        function generateU16(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u16",
                arguments: _args,
            });
        }
        builder.generateU16 = generateU16;
        function generateU16InRange(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u16_in_range",
                arguments: _args,
            });
        }
        builder.generateU16InRange = generateU16InRange;
        function generateU256(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u256",
                arguments: _args,
            });
        }
        builder.generateU256 = generateU256;
        function generateU32(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u32",
                arguments: _args,
            });
        }
        builder.generateU32 = generateU32;
        function generateU32InRange(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u32_in_range",
                arguments: _args,
            });
        }
        builder.generateU32InRange = generateU32InRange;
        function generateU64(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u64",
                arguments: _args,
            });
        }
        builder.generateU64 = generateU64;
        function generateU64InRange(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u64_in_range",
                arguments: _args,
            });
        }
        builder.generateU64InRange = generateU64InRange;
        function generateU8(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u8",
                arguments: _args,
            });
        }
        builder.generateU8 = generateU8;
        function generateU8InRange(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::generate_u8_in_range",
                arguments: _args,
            });
        }
        builder.generateU8InRange = generateU8InRange;
        function newGenerator(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::new_generator",
                arguments: _args,
            });
        }
        builder.newGenerator = newGenerator;
        function shuffle(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::random::shuffle",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.shuffle = shuffle;
    })(builder = random.builder || (random.builder = {}));
    let view;
    (function (view) {
        async function generateBool(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateBool(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateBool = generateBool;
        async function generateBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateBytes = generateBytes;
        async function generateU128(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU128(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU128 = generateU128;
        async function generateU128InRange(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU128InRange(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU128InRange = generateU128InRange;
        async function generateU16(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU16(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU16 = generateU16;
        async function generateU16InRange(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU16InRange(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU16InRange = generateU16InRange;
        async function generateU256(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU256(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU256 = generateU256;
        async function generateU32(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU32(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU32 = generateU32;
        async function generateU32InRange(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU32InRange(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU32InRange = generateU32InRange;
        async function generateU64(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU64(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU64 = generateU64;
        async function generateU64InRange(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU64InRange(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU64InRange = generateU64InRange;
        async function generateU8(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU8(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU8 = generateU8;
        async function generateU8InRange(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.generateU8InRange(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.generateU8InRange = generateU8InRange;
        async function newGenerator(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.newGenerator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newGenerator = newGenerator;
        async function shuffle(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.shuffle(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.shuffle = shuffle;
    })(view = random.view || (random.view = {}));
})(random || (exports.random = random = {}));
var sui;
(function (sui) {
    let SUI;
    (function (SUI) {
        SUI.TYPE_QNAME = "0x2::sui::SUI";
        const TYPE = new move_1.TypeDescriptor(SUI.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        SUI.type = type;
    })(SUI = sui.SUI || (sui.SUI = {}));
    let builder;
    (function (builder) {
        function transfer(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::sui::transfer",
                arguments: _args,
            });
        }
        builder.transfer = transfer;
    })(builder = sui.builder || (sui.builder = {}));
    let view;
    (function (view) {
        async function transfer(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.transfer(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.transfer = transfer;
    })(view = sui.view || (sui.view = {}));
})(sui || (exports.sui = sui = {}));
var table;
(function (table) {
    let Table;
    (function (Table) {
        Table.TYPE_QNAME = "0x2::table::Table";
        const TYPE = new move_1.TypeDescriptor(Table.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE, arg1 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0, arg1);
        }
        Table.type = type;
    })(Table = table.Table || (table.Table = {}));
    let builder;
    (function (builder) {
        function add(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::add",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.add = add;
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function contains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.contains = contains;
        function destroyEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::destroy_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.destroyEmpty = destroyEmpty;
        function drop(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::drop",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.drop = drop;
        function isEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::is_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.isEmpty = isEmpty;
        function length(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::length",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.length = length;
        function new_(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
    })(builder = table.builder || (table.builder = {}));
    let view;
    (function (view) {
        async function add(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.add(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.add = add;
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function contains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.contains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.contains = contains;
        async function destroyEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyEmpty = destroyEmpty;
        async function drop(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.drop(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.drop = drop;
        async function isEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function length(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.length(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.length = length;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
    })(view = table.view || (table.view = {}));
})(table || (exports.table = table = {}));
var table_vec;
(function (table_vec) {
    let TableVec;
    (function (TableVec) {
        TableVec.TYPE_QNAME = "0x2::table_vec::TableVec";
        const TYPE = new move_1.TypeDescriptor(TableVec.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TableVec.type = type;
    })(TableVec = table_vec.TableVec || (table_vec.TableVec = {}));
    let builder;
    (function (builder) {
        function borrow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::borrow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrow = borrow;
        function borrowMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::borrow_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.borrowMut = borrowMut;
        function destroyEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::destroy_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroyEmpty = destroyEmpty;
        function drop(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::drop",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.drop = drop;
        function empty(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.empty = empty;
        function isEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::is_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.isEmpty = isEmpty;
        function length(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::length",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.length = length;
        function popBack(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::pop_back",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.popBack = popBack;
        function pushBack(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::push_back",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.pushBack = pushBack;
        function singleton(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::singleton",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.singleton = singleton;
        function swap(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::swap",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.swap = swap;
        function swapRemove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::table_vec::swap_remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.swapRemove = swapRemove;
    })(builder = table_vec.builder || (table_vec.builder = {}));
    let view;
    (function (view) {
        async function borrow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrow = borrow;
        async function borrowMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.borrowMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.borrowMut = borrowMut;
        async function destroyEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyEmpty = destroyEmpty;
        async function drop(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.drop(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.drop = drop;
        async function empty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.empty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.empty = empty;
        async function isEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function length(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.length(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.length = length;
        async function popBack(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.popBack(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.popBack = popBack;
        async function pushBack(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.pushBack(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pushBack = pushBack;
        async function singleton(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.singleton(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.singleton = singleton;
        async function swap(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.swap(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.swap = swap;
        async function swapRemove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.swapRemove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.swapRemove = swapRemove;
    })(view = table_vec.view || (table_vec.view = {}));
})(table_vec || (exports.table_vec = table_vec = {}));
var token;
(function (token) {
    let ActionRequest;
    (function (ActionRequest) {
        ActionRequest.TYPE_QNAME = "0x2::token::ActionRequest";
        const TYPE = new move_1.TypeDescriptor(ActionRequest.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        ActionRequest.type = type;
    })(ActionRequest = token.ActionRequest || (token.ActionRequest = {}));
    let RuleKey;
    (function (RuleKey) {
        RuleKey.TYPE_QNAME = "0x2::token::RuleKey";
        const TYPE = new move_1.TypeDescriptor(RuleKey.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        RuleKey.type = type;
    })(RuleKey = token.RuleKey || (token.RuleKey = {}));
    let Token;
    (function (Token) {
        Token.TYPE_QNAME = "0x2::token::Token";
        const TYPE = new move_1.TypeDescriptor(Token.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Token.type = type;
    })(Token = token.Token || (token.Token = {}));
    let TokenPolicy;
    (function (TokenPolicy) {
        TokenPolicy.TYPE_QNAME = "0x2::token::TokenPolicy";
        const TYPE = new move_1.TypeDescriptor(TokenPolicy.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TokenPolicy.type = type;
    })(TokenPolicy = token.TokenPolicy || (token.TokenPolicy = {}));
    let TokenPolicyCap;
    (function (TokenPolicyCap) {
        TokenPolicyCap.TYPE_QNAME = "0x2::token::TokenPolicyCap";
        const TYPE = new move_1.TypeDescriptor(TokenPolicyCap.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TokenPolicyCap.type = type;
    })(TokenPolicyCap = token.TokenPolicyCap || (token.TokenPolicyCap = {}));
    let TokenPolicyCreated;
    (function (TokenPolicyCreated) {
        TokenPolicyCreated.TYPE_QNAME = "0x2::token::TokenPolicyCreated";
        const TYPE = new move_1.TypeDescriptor(TokenPolicyCreated.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TokenPolicyCreated.type = type;
    })(TokenPolicyCreated = token.TokenPolicyCreated || (token.TokenPolicyCreated = {}));
    let builder;
    (function (builder) {
        function action(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::action",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.action = action;
        function addApproval(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::add_approval",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.addApproval = addApproval;
        function addRuleConfig(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::add_rule_config",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.addRuleConfig = addRuleConfig;
        function addRuleForAction(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::add_rule_for_action",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.addRuleForAction = addRuleForAction;
        function allow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::allow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.allow = allow;
        function amount(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::amount",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.amount = amount;
        function approvals(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::approvals",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.approvals = approvals;
        function burn(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::burn",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.burn = burn;
        function confirmRequest(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::confirm_request",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.confirmRequest = confirmRequest;
        function confirmRequestMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::confirm_request_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.confirmRequestMut = confirmRequestMut;
        function confirmWithPolicyCap(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::confirm_with_policy_cap",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.confirmWithPolicyCap = confirmWithPolicyCap;
        function confirmWithTreasuryCap(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::confirm_with_treasury_cap",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.confirmWithTreasuryCap = confirmWithTreasuryCap;
        function destroyZero(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::destroy_zero",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroyZero = destroyZero;
        function disallow(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::disallow",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.disallow = disallow;
        function flush(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::flush",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.flush = flush;
        function fromCoin(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::from_coin",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fromCoin = fromCoin;
        function fromCoinAction(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::from_coin_action",
                arguments: _args,
            });
        }
        builder.fromCoinAction = fromCoinAction;
        function hasRuleConfig(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::has_rule_config",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.hasRuleConfig = hasRuleConfig;
        function hasRuleConfigWithType(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::has_rule_config_with_type",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.hasRuleConfigWithType = hasRuleConfigWithType;
        function isAllowed(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::is_allowed",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.isAllowed = isAllowed;
        function join(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::join",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.join = join;
        function keep(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::keep",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.keep = keep;
        function mint(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::mint",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.mint = mint;
        function newPolicy(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::new_policy",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.newPolicy = newPolicy;
        function newRequest(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::new_request",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.newRequest = newRequest;
        function recipient(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::recipient",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.recipient = recipient;
        function removeRuleConfig(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::remove_rule_config",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.removeRuleConfig = removeRuleConfig;
        function removeRuleForAction(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::remove_rule_for_action",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.removeRuleForAction = removeRuleForAction;
        function ruleConfig(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::rule_config",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.ruleConfig = ruleConfig;
        function ruleConfigMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::rule_config_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.ruleConfigMut = ruleConfigMut;
        function rules(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::rules",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.rules = rules;
        function sender(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::sender",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.sender = sender;
        function sharePolicy(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::share_policy",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.sharePolicy = sharePolicy;
        function spend(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::spend",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.spend = spend;
        function spendAction(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::spend_action",
                arguments: _args,
            });
        }
        builder.spendAction = spendAction;
        function spent(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::spent",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.spent = spent;
        function spentBalance(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::spent_balance",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.spentBalance = spentBalance;
        function split(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::split",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.split = split;
        function toCoin(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::to_coin",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.toCoin = toCoin;
        function toCoinAction(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::to_coin_action",
                arguments: _args,
            });
        }
        builder.toCoinAction = toCoinAction;
        function transfer(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::transfer",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.transfer = transfer;
        function transferAction(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::transfer_action",
                arguments: _args,
            });
        }
        builder.transferAction = transferAction;
        function value(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::value",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.value = value;
        function zero(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::token::zero",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.zero = zero;
    })(builder = token.builder || (token.builder = {}));
    let view;
    (function (view) {
        async function action(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.action(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.action = action;
        async function addApproval(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addApproval(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addApproval = addApproval;
        async function addRuleConfig(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addRuleConfig(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addRuleConfig = addRuleConfig;
        async function addRuleForAction(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addRuleForAction(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addRuleForAction = addRuleForAction;
        async function allow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.allow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.allow = allow;
        async function amount(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.amount(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.amount = amount;
        async function approvals(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.approvals(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.approvals = approvals;
        async function burn(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.burn(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.burn = burn;
        async function confirmRequest(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.confirmRequest(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.confirmRequest = confirmRequest;
        async function confirmRequestMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.confirmRequestMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.confirmRequestMut = confirmRequestMut;
        async function confirmWithPolicyCap(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.confirmWithPolicyCap(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.confirmWithPolicyCap = confirmWithPolicyCap;
        async function confirmWithTreasuryCap(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.confirmWithTreasuryCap(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.confirmWithTreasuryCap = confirmWithTreasuryCap;
        async function destroyZero(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyZero(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyZero = destroyZero;
        async function disallow(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.disallow(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.disallow = disallow;
        async function flush(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.flush(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.flush = flush;
        async function fromCoin(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromCoin(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromCoin = fromCoin;
        async function fromCoinAction(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromCoinAction(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromCoinAction = fromCoinAction;
        async function hasRuleConfig(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasRuleConfig(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasRuleConfig = hasRuleConfig;
        async function hasRuleConfigWithType(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasRuleConfigWithType(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasRuleConfigWithType = hasRuleConfigWithType;
        async function isAllowed(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isAllowed(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isAllowed = isAllowed;
        async function join(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.join(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.join = join;
        async function keep(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.keep(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.keep = keep;
        async function mint(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.mint(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.mint = mint;
        async function newPolicy(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.newPolicy(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newPolicy = newPolicy;
        async function newRequest(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.newRequest(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newRequest = newRequest;
        async function recipient(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.recipient(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.recipient = recipient;
        async function removeRuleConfig(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeRuleConfig(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeRuleConfig = removeRuleConfig;
        async function removeRuleForAction(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeRuleForAction(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeRuleForAction = removeRuleForAction;
        async function ruleConfig(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.ruleConfig(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.ruleConfig = ruleConfig;
        async function ruleConfigMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.ruleConfigMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.ruleConfigMut = ruleConfigMut;
        async function rules(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.rules(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.rules = rules;
        async function sender(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.sender(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.sender = sender;
        async function sharePolicy(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.sharePolicy(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.sharePolicy = sharePolicy;
        async function spend(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.spend(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.spend = spend;
        async function spendAction(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.spendAction(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.spendAction = spendAction;
        async function spent(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.spent(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.spent = spent;
        async function spentBalance(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.spentBalance(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.spentBalance = spentBalance;
        async function split(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.split(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.split = split;
        async function toCoin(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.toCoin(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.toCoin = toCoin;
        async function toCoinAction(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.toCoinAction(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.toCoinAction = toCoinAction;
        async function transfer(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.transfer(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.transfer = transfer;
        async function transferAction(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.transferAction(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.transferAction = transferAction;
        async function value(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.value(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.value = value;
        async function zero(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.zero(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.zero = zero;
    })(view = token.view || (token.view = {}));
})(token || (exports.token = token = {}));
var transfer;
(function (transfer_1) {
    let Receiving;
    (function (Receiving) {
        Receiving.TYPE_QNAME = "0x2::transfer::Receiving";
        const TYPE = new move_1.TypeDescriptor(Receiving.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        Receiving.type = type;
    })(Receiving = transfer_1.Receiving || (transfer_1.Receiving = {}));
    let builder;
    (function (builder) {
        function freezeObject(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::freeze_object",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.freezeObject = freezeObject;
        function freezeObjectImpl(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::freeze_object_impl",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.freezeObjectImpl = freezeObjectImpl;
        function publicFreezeObject(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::public_freeze_object",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.publicFreezeObject = publicFreezeObject;
        function publicReceive(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::public_receive",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.publicReceive = publicReceive;
        function publicShareObject(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::public_share_object",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.publicShareObject = publicShareObject;
        function publicTransfer(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::public_transfer",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.publicTransfer = publicTransfer;
        function receive(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::receive",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.receive = receive;
        function receivingObjectId(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::receiving_object_id",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.receivingObjectId = receivingObjectId;
        function shareObject(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::share_object",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.shareObject = shareObject;
        function shareObjectImpl(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::share_object_impl",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.shareObjectImpl = shareObjectImpl;
        function transfer(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::transfer",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.transfer = transfer;
        function transferImpl(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer::transfer_impl",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.transferImpl = transferImpl;
    })(builder = transfer_1.builder || (transfer_1.builder = {}));
    let view;
    (function (view) {
        async function freezeObject(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.freezeObject(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.freezeObject = freezeObject;
        async function freezeObjectImpl(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.freezeObjectImpl(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.freezeObjectImpl = freezeObjectImpl;
        async function publicFreezeObject(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.publicFreezeObject(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.publicFreezeObject = publicFreezeObject;
        async function publicReceive(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.publicReceive(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.publicReceive = publicReceive;
        async function publicShareObject(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.publicShareObject(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.publicShareObject = publicShareObject;
        async function publicTransfer(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.publicTransfer(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.publicTransfer = publicTransfer;
        async function receive(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.receive(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.receive = receive;
        async function receivingObjectId(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.receivingObjectId(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.receivingObjectId = receivingObjectId;
        async function shareObject(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.shareObject(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.shareObject = shareObject;
        async function shareObjectImpl(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.shareObjectImpl(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.shareObjectImpl = shareObjectImpl;
        async function transfer(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.transfer(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.transfer = transfer;
        async function transferImpl(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.transferImpl(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.transferImpl = transferImpl;
    })(view = transfer_1.view || (transfer_1.view = {}));
})(transfer || (exports.transfer = transfer = {}));
var transfer_policy;
(function (transfer_policy) {
    let RuleKey;
    (function (RuleKey) {
        RuleKey.TYPE_QNAME = "0x2::transfer_policy::RuleKey";
        const TYPE = new move_1.TypeDescriptor(RuleKey.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        RuleKey.type = type;
    })(RuleKey = transfer_policy.RuleKey || (transfer_policy.RuleKey = {}));
    let TransferPolicy;
    (function (TransferPolicy) {
        TransferPolicy.TYPE_QNAME = "0x2::transfer_policy::TransferPolicy";
        const TYPE = new move_1.TypeDescriptor(TransferPolicy.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TransferPolicy.type = type;
    })(TransferPolicy = transfer_policy.TransferPolicy || (transfer_policy.TransferPolicy = {}));
    let TransferPolicyCap;
    (function (TransferPolicyCap) {
        TransferPolicyCap.TYPE_QNAME = "0x2::transfer_policy::TransferPolicyCap";
        const TYPE = new move_1.TypeDescriptor(TransferPolicyCap.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TransferPolicyCap.type = type;
    })(TransferPolicyCap = transfer_policy.TransferPolicyCap || (transfer_policy.TransferPolicyCap = {}));
    let TransferPolicyCreated;
    (function (TransferPolicyCreated) {
        TransferPolicyCreated.TYPE_QNAME = "0x2::transfer_policy::TransferPolicyCreated";
        const TYPE = new move_1.TypeDescriptor(TransferPolicyCreated.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TransferPolicyCreated.type = type;
    })(TransferPolicyCreated = transfer_policy.TransferPolicyCreated || (transfer_policy.TransferPolicyCreated = {}));
    let TransferPolicyDestroyed;
    (function (TransferPolicyDestroyed) {
        TransferPolicyDestroyed.TYPE_QNAME = "0x2::transfer_policy::TransferPolicyDestroyed";
        const TYPE = new move_1.TypeDescriptor(TransferPolicyDestroyed.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TransferPolicyDestroyed.type = type;
    })(TransferPolicyDestroyed = transfer_policy.TransferPolicyDestroyed || (transfer_policy.TransferPolicyDestroyed = {}));
    let TransferRequest;
    (function (TransferRequest) {
        TransferRequest.TYPE_QNAME = "0x2::transfer_policy::TransferRequest";
        const TYPE = new move_1.TypeDescriptor(TransferRequest.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        TransferRequest.type = type;
    })(TransferRequest = transfer_policy.TransferRequest || (transfer_policy.TransferRequest = {}));
    let builder;
    (function (builder) {
        function addReceipt(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::add_receipt",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.addReceipt = addReceipt;
        function addRule(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::add_rule",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.addRule = addRule;
        function addToBalance(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::add_to_balance",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.addToBalance = addToBalance;
        function confirmRequest(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::confirm_request",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.confirmRequest = confirmRequest;
        function default_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::default",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.default_ = default_;
        function destroyAndWithdraw(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::destroy_and_withdraw",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroyAndWithdraw = destroyAndWithdraw;
        function from(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::from",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.from = from;
        function getRule(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::get_rule",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.getRule = getRule;
        function hasRule(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::has_rule",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.hasRule = hasRule;
        function item(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::item",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.item = item;
        function new_(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::new",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.new_ = new_;
        function newRequest(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::new_request",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.newRequest = newRequest;
        function paid(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::paid",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.paid = paid;
        function removeRule(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::remove_rule",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                    typeof typeArguments[2] === "string"
                        ? typeArguments[2]
                        : typeArguments[2].getSignature(),
                ],
            });
        }
        builder.removeRule = removeRule;
        function rules(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::rules",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.rules = rules;
        function uid(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::uid",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.uid = uid;
        function uidMutAsOwner(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::uid_mut_as_owner",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.uidMutAsOwner = uidMutAsOwner;
        function withdraw(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::transfer_policy::withdraw",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.withdraw = withdraw;
    })(builder = transfer_policy.builder || (transfer_policy.builder = {}));
    let view;
    (function (view) {
        async function addReceipt(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addReceipt(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addReceipt = addReceipt;
        async function addRule(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addRule(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addRule = addRule;
        async function addToBalance(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.addToBalance(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.addToBalance = addToBalance;
        async function confirmRequest(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.confirmRequest(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.confirmRequest = confirmRequest;
        async function destroyAndWithdraw(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyAndWithdraw(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyAndWithdraw = destroyAndWithdraw;
        async function from(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.from(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.from = from;
        async function getRule(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getRule(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getRule = getRule;
        async function hasRule(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.hasRule(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hasRule = hasRule;
        async function item(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.item(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.item = item;
        async function new_(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.new_(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function newRequest(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.newRequest(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newRequest = newRequest;
        async function paid(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.paid(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.paid = paid;
        async function removeRule(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeRule(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeRule = removeRule;
        async function rules(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.rules(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.rules = rules;
        async function uid(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.uid(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uid = uid;
        async function uidMutAsOwner(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.uidMutAsOwner(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.uidMutAsOwner = uidMutAsOwner;
        async function withdraw(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.withdraw(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.withdraw = withdraw;
    })(view = transfer_policy.view || (transfer_policy.view = {}));
})(transfer_policy || (exports.transfer_policy = transfer_policy = {}));
var tx_context;
(function (tx_context) {
    let TxContext;
    (function (TxContext) {
        TxContext.TYPE_QNAME = "0x2::tx_context::TxContext";
        const TYPE = new move_1.TypeDescriptor(TxContext.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        TxContext.type = type;
    })(TxContext = tx_context.TxContext || (tx_context.TxContext = {}));
    let builder;
    (function (builder) {
        function digest(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::tx_context::digest",
                arguments: _args,
            });
        }
        builder.digest = digest;
        function epoch(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::tx_context::epoch",
                arguments: _args,
            });
        }
        builder.epoch = epoch;
        function epochTimestampMs(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::tx_context::epoch_timestamp_ms",
                arguments: _args,
            });
        }
        builder.epochTimestampMs = epochTimestampMs;
        function freshObjectAddress(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::tx_context::fresh_object_address",
                arguments: _args,
            });
        }
        builder.freshObjectAddress = freshObjectAddress;
        function sender(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::tx_context::sender",
                arguments: _args,
            });
        }
        builder.sender = sender;
    })(builder = tx_context.builder || (tx_context.builder = {}));
    let view;
    (function (view) {
        async function digest(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.digest(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.digest = digest;
        async function epoch(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.epoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.epoch = epoch;
        async function epochTimestampMs(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.epochTimestampMs(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.epochTimestampMs = epochTimestampMs;
        async function freshObjectAddress(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.freshObjectAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.freshObjectAddress = freshObjectAddress;
        async function sender(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.sender(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.sender = sender;
    })(view = tx_context.view || (tx_context.view = {}));
})(tx_context || (exports.tx_context = tx_context = {}));
var types;
(function (types) {
    let builder;
    (function (builder) {
        function isOneTimeWitness(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::types::is_one_time_witness",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.isOneTimeWitness = isOneTimeWitness;
    })(builder = types.builder || (types.builder = {}));
    let view;
    (function (view) {
        async function isOneTimeWitness(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isOneTimeWitness(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isOneTimeWitness = isOneTimeWitness;
    })(view = types.view || (types.view = {}));
})(types || (exports.types = types = {}));
var url;
(function (url) {
    let Url;
    (function (Url) {
        Url.TYPE_QNAME = "0x2::url::Url";
        const TYPE = new move_1.TypeDescriptor(Url.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Url.type = type;
    })(Url = url.Url || (url.Url = {}));
    let builder;
    (function (builder) {
        function innerUrl(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::url::inner_url",
                arguments: _args,
            });
        }
        builder.innerUrl = innerUrl;
        function newUnsafe(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::url::new_unsafe",
                arguments: _args,
            });
        }
        builder.newUnsafe = newUnsafe;
        function newUnsafeFromBytes(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::url::new_unsafe_from_bytes",
                arguments: _args,
            });
        }
        builder.newUnsafeFromBytes = newUnsafeFromBytes;
        function update(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::url::update",
                arguments: _args,
            });
        }
        builder.update = update;
    })(builder = url.builder || (url.builder = {}));
    let view;
    (function (view) {
        async function innerUrl(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.innerUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.innerUrl = innerUrl;
        async function newUnsafe(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.newUnsafe(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newUnsafe = newUnsafe;
        async function newUnsafeFromBytes(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.newUnsafeFromBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.newUnsafeFromBytes = newUnsafeFromBytes;
        async function update(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.update(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.update = update;
    })(view = url.view || (url.view = {}));
})(url || (exports.url = url = {}));
var vdf;
(function (vdf) {
    let builder;
    (function (builder) {
        function hashToInput(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vdf::hash_to_input",
                arguments: _args,
            });
        }
        builder.hashToInput = hashToInput;
        function vdfVerify(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vdf::vdf_verify",
                arguments: _args,
            });
        }
        builder.vdfVerify = vdfVerify;
    })(builder = vdf.builder || (vdf.builder = {}));
    let view;
    (function (view) {
        async function hashToInput(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.hashToInput(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.hashToInput = hashToInput;
        async function vdfVerify(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.vdfVerify(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.vdfVerify = vdfVerify;
    })(view = vdf.view || (vdf.view = {}));
})(vdf || (exports.vdf = vdf = {}));
var vec_map;
(function (vec_map) {
    let Entry;
    (function (Entry) {
        Entry.TYPE_QNAME = "0x2::vec_map::Entry";
        const TYPE = new move_1.TypeDescriptor(Entry.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE, arg1 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0, arg1);
        }
        Entry.type = type;
    })(Entry = vec_map.Entry || (vec_map.Entry = {}));
    let VecMap;
    (function (VecMap) {
        VecMap.TYPE_QNAME = "0x2::vec_map::VecMap";
        const TYPE = new move_1.TypeDescriptor(VecMap.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE, arg1 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0, arg1);
        }
        VecMap.type = type;
    })(VecMap = vec_map.VecMap || (vec_map.VecMap = {}));
    let builder;
    (function (builder) {
        function contains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.contains = contains;
        function destroyEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::destroy_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.destroyEmpty = destroyEmpty;
        function empty(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.empty = empty;
        function fromKeysValues(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrVec)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::from_keys_values",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.fromKeysValues = fromKeysValues;
        function get(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::get",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.get = get;
        function getEntryByIdx(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::get_entry_by_idx",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.getEntryByIdx = getEntryByIdx;
        function getEntryByIdxMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::get_entry_by_idx_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.getEntryByIdxMut = getEntryByIdxMut;
        function getIdx(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::get_idx",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.getIdx = getIdx;
        function getIdxOpt(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::get_idx_opt",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.getIdxOpt = getIdxOpt;
        function getMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::get_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.getMut = getMut;
        function insert(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::insert",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.insert = insert;
        function intoKeysValues(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::into_keys_values",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.intoKeysValues = intoKeysValues;
        function isEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::is_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.isEmpty = isEmpty;
        function keys(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::keys",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.keys = keys;
        function pop(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::pop",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.pop = pop;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.remove = remove;
        function removeEntryByIdx(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::remove_entry_by_idx",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.removeEntryByIdx = removeEntryByIdx;
        function size(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::size",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.size = size;
        function tryGet(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_map::try_get",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                    typeof typeArguments[1] === "string"
                        ? typeArguments[1]
                        : typeArguments[1].getSignature(),
                ],
            });
        }
        builder.tryGet = tryGet;
    })(builder = vec_map.builder || (vec_map.builder = {}));
    let view;
    (function (view) {
        async function contains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.contains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.contains = contains;
        async function destroyEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroyEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroyEmpty = destroyEmpty;
        async function empty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.empty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.empty = empty;
        async function fromKeysValues(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromKeysValues(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromKeysValues = fromKeysValues;
        async function get(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.get(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.get = get;
        async function getEntryByIdx(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getEntryByIdx(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getEntryByIdx = getEntryByIdx;
        async function getEntryByIdxMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getEntryByIdxMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getEntryByIdxMut = getEntryByIdxMut;
        async function getIdx(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getIdx(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getIdx = getIdx;
        async function getIdxOpt(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getIdxOpt(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getIdxOpt = getIdxOpt;
        async function getMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.getMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.getMut = getMut;
        async function insert(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.insert(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.insert = insert;
        async function intoKeysValues(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.intoKeysValues(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.intoKeysValues = intoKeysValues;
        async function isEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function keys(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.keys(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.keys = keys;
        async function pop(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.pop(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.pop = pop;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
        async function removeEntryByIdx(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeEntryByIdx(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeEntryByIdx = removeEntryByIdx;
        async function size(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.size(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.size = size;
        async function tryGet(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.tryGet(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.tryGet = tryGet;
    })(view = vec_map.view || (vec_map.view = {}));
})(vec_map || (exports.vec_map = vec_map = {}));
var vec_set;
(function (vec_set) {
    let VecSet;
    (function (VecSet) {
        VecSet.TYPE_QNAME = "0x2::vec_set::VecSet";
        const TYPE = new move_1.TypeDescriptor(VecSet.TYPE_QNAME);
        function type(arg0 = move_1.ANY_TYPE) {
            return TYPE.apply(arg0);
        }
        VecSet.type = type;
    })(VecSet = vec_set.VecSet || (vec_set.VecSet = {}));
    let builder;
    (function (builder) {
        function contains(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::contains",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.contains = contains;
        function empty(tx, args, typeArguments) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.empty = empty;
        function fromKeys(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrVec)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::from_keys",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.fromKeys = fromKeys;
        function insert(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::insert",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.insert = insert;
        function intoKeys(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::into_keys",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.intoKeys = intoKeys;
        function isEmpty(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::is_empty",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.isEmpty = isEmpty;
        function keys(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::keys",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.keys = keys;
        function remove(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::remove",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.remove = remove;
        function singleton(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::singleton",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.singleton = singleton;
        function size(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::vec_set::size",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.size = size;
    })(builder = vec_set.builder || (vec_set.builder = {}));
    let view;
    (function (view) {
        async function contains(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.contains(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.contains = contains;
        async function empty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.empty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.empty = empty;
        async function fromKeys(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.fromKeys(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.fromKeys = fromKeys;
        async function insert(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.insert(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.insert = insert;
        async function intoKeys(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.intoKeys(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.intoKeys = intoKeys;
        async function isEmpty(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.isEmpty(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEmpty = isEmpty;
        async function keys(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.keys(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.keys = keys;
        async function remove(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.remove(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.remove = remove;
        async function singleton(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.singleton(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.singleton = singleton;
        async function size(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.size(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.size = size;
    })(view = vec_set.view || (vec_set.view = {}));
})(vec_set || (exports.vec_set = vec_set = {}));
var versioned;
(function (versioned) {
    let VersionChangeCap;
    (function (VersionChangeCap) {
        VersionChangeCap.TYPE_QNAME = "0x2::versioned::VersionChangeCap";
        const TYPE = new move_1.TypeDescriptor(VersionChangeCap.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        VersionChangeCap.type = type;
    })(VersionChangeCap = versioned.VersionChangeCap || (versioned.VersionChangeCap = {}));
    let Versioned;
    (function (Versioned) {
        Versioned.TYPE_QNAME = "0x2::versioned::Versioned";
        const TYPE = new move_1.TypeDescriptor(Versioned.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Versioned.type = type;
    })(Versioned = versioned.Versioned || (versioned.Versioned = {}));
    let builder;
    (function (builder) {
        function create(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::versioned::create",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.create = create;
        function destroy(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::versioned::destroy",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.destroy = destroy;
        function loadValue(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::versioned::load_value",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.loadValue = loadValue;
        function loadValueMut(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::versioned::load_value_mut",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.loadValueMut = loadValueMut;
        function removeValueForUpgrade(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::versioned::remove_value_for_upgrade",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.removeValueForUpgrade = removeValueForUpgrade;
        function upgrade(tx, args, typeArguments) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::versioned::upgrade",
                arguments: _args,
                typeArguments: [
                    typeof typeArguments[0] === "string"
                        ? typeArguments[0]
                        : typeArguments[0].getSignature(),
                ],
            });
        }
        builder.upgrade = upgrade;
        function version(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::versioned::version",
                arguments: _args,
            });
        }
        builder.version = version;
    })(builder = versioned.builder || (versioned.builder = {}));
    let view;
    (function (view) {
        async function create(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.create(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.create = create;
        async function destroy(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.destroy(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroy = destroy;
        async function loadValue(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.loadValue(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.loadValue = loadValue;
        async function loadValueMut(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.loadValueMut(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.loadValueMut = loadValueMut;
        async function removeValueForUpgrade(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.removeValueForUpgrade(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.removeValueForUpgrade = removeValueForUpgrade;
        async function upgrade(client, args, typeArguments) {
            const tx = new transactions_1.TransactionBlock();
            builder.upgrade(tx, args, typeArguments);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.upgrade = upgrade;
        async function version(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.version(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.version = version;
    })(view = versioned.view || (versioned.view = {}));
})(versioned || (exports.versioned = versioned = {}));
var zklogin_verified_id;
(function (zklogin_verified_id) {
    let VerifiedID;
    (function (VerifiedID) {
        VerifiedID.TYPE_QNAME = "0x2::zklogin_verified_id::VerifiedID";
        const TYPE = new move_1.TypeDescriptor(VerifiedID.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        VerifiedID.type = type;
    })(VerifiedID = zklogin_verified_id.VerifiedID || (zklogin_verified_id.VerifiedID = {}));
    let builder;
    (function (builder) {
        function audience(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::audience",
                arguments: _args,
            });
        }
        builder.audience = audience;
        function checkZkloginId(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[3], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[4], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[5], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::check_zklogin_id",
                arguments: _args,
            });
        }
        builder.checkZkloginId = checkZkloginId;
        function delete_(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::delete",
                arguments: _args,
            });
        }
        builder.delete_ = delete_;
        function issuer(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::issuer",
                arguments: _args,
            });
        }
        builder.issuer = issuer;
        function keyClaimName(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::key_claim_name",
                arguments: _args,
            });
        }
        builder.keyClaimName = keyClaimName;
        function keyClaimValue(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::key_claim_value",
                arguments: _args,
            });
        }
        builder.keyClaimValue = keyClaimValue;
        function owner(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::owner",
                arguments: _args,
            });
        }
        builder.owner = owner;
        function verifyZkloginId(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[2], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[3], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[4], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_id::verify_zklogin_id",
                arguments: _args,
            });
        }
        builder.verifyZkloginId = verifyZkloginId;
    })(builder = zklogin_verified_id.builder || (zklogin_verified_id.builder = {}));
    let view;
    (function (view) {
        async function audience(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.audience(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.audience = audience;
        async function checkZkloginId(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.checkZkloginId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.checkZkloginId = checkZkloginId;
        async function delete_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.delete_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.delete_ = delete_;
        async function issuer(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.issuer(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.issuer = issuer;
        async function keyClaimName(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.keyClaimName(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.keyClaimName = keyClaimName;
        async function keyClaimValue(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.keyClaimValue(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.keyClaimValue = keyClaimValue;
        async function owner(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.owner(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.owner = owner;
        async function verifyZkloginId(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.verifyZkloginId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.verifyZkloginId = verifyZkloginId;
    })(view = zklogin_verified_id.view || (zklogin_verified_id.view = {}));
})(zklogin_verified_id || (exports.zklogin_verified_id = zklogin_verified_id = {}));
var zklogin_verified_issuer;
(function (zklogin_verified_issuer) {
    let VerifiedIssuer;
    (function (VerifiedIssuer) {
        VerifiedIssuer.TYPE_QNAME = "0x2::zklogin_verified_issuer::VerifiedIssuer";
        const TYPE = new move_1.TypeDescriptor(VerifiedIssuer.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        VerifiedIssuer.type = type;
    })(VerifiedIssuer = zklogin_verified_issuer.VerifiedIssuer || (zklogin_verified_issuer.VerifiedIssuer = {}));
    let builder;
    (function (builder) {
        function checkZkloginIssuer(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            _args.push((0, sui_3.transactionArgumentOrObject)(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_issuer::check_zklogin_issuer",
                arguments: _args,
            });
        }
        builder.checkZkloginIssuer = checkZkloginIssuer;
        function delete_(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_issuer::delete",
                arguments: _args,
            });
        }
        builder.delete_ = delete_;
        function issuer(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_issuer::issuer",
                arguments: _args,
            });
        }
        builder.issuer = issuer;
        function owner(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrObject)(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_issuer::owner",
                arguments: _args,
            });
        }
        builder.owner = owner;
        function verifyZkloginIssuer(tx, args) {
            const _args = [];
            _args.push((0, sui_3.transactionArgumentOrPure)(args[0], tx));
            _args.push((0, sui_3.transactionArgumentOrPure)(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x2::zklogin_verified_issuer::verify_zklogin_issuer",
                arguments: _args,
            });
        }
        builder.verifyZkloginIssuer = verifyZkloginIssuer;
    })(builder = zklogin_verified_issuer.builder || (zklogin_verified_issuer.builder = {}));
    let view;
    (function (view) {
        async function checkZkloginIssuer(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.checkZkloginIssuer(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.checkZkloginIssuer = checkZkloginIssuer;
        async function delete_(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.delete_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.delete_ = delete_;
        async function issuer(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.issuer(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.issuer = issuer;
        async function owner(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.owner(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.owner = owner;
        async function verifyZkloginIssuer(client, args) {
            const tx = new transactions_1.TransactionBlock();
            builder.verifyZkloginIssuer(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: sui_2.ZERO_ADDRESS,
            });
            return (await (0, sui_2.getMoveCoder)(client)).decodeDevInspectResult(inspectRes);
        }
        view.verifyZkloginIssuer = verifyZkloginIssuer;
    })(view = zklogin_verified_issuer.view || (zklogin_verified_issuer.view = {}));
})(zklogin_verified_issuer || (exports.zklogin_verified_issuer = zklogin_verified_issuer = {}));
const MODULES = JSON.parse('{"address":{"fileFormatVersion":6,"address":"0x2","name":"address","friends":[],"structs":{},"exposedFunctions":{"from_ascii_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":["Address"]},"from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":["Address"]},"from_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["Address"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"max":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U256"]},"to_ascii_string":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Vector":"U8"}]},"to_string":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"to_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":["U256"]}}},"authenticator_state":{"fileFormatVersion":6,"address":"0x2","name":"authenticator_state","friends":[],"structs":{"ActiveJwk":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"jwk_id","type":{"Struct":{"address":"0x2","module":"authenticator_state","name":"JwkId","typeArguments":[]}}},{"name":"jwk","type":{"Struct":{"address":"0x2","module":"authenticator_state","name":"JWK","typeArguments":[]}}},{"name":"epoch","type":"U64"}]},"AuthenticatorState":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"version","type":"U64"}]},"AuthenticatorStateInner":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"version","type":"U64"},{"name":"active_jwks","type":{"Vector":{"Struct":{"address":"0x2","module":"authenticator_state","name":"ActiveJwk","typeArguments":[]}}}}]},"JWK":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"kty","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"e","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"n","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"alg","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"JwkId":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"iss","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"kid","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]}},"exposedFunctions":{}},"bag":{"fileFormatVersion":6,"address":"0x2","name":"bag","friends":[],"structs":{"Bag":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"size","type":"U64"}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"contains_with_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]}}},"balance":{"fileFormatVersion":6,"address":"0x2","name":"balance","friends":[{"address":"0x2","name":"sui"}],"structs":{"Balance":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"value","type":"U64"}]},"Supply":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"value","type":"U64"}]}},"exposedFunctions":{"create_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}]},"decrease_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}],"return":["U64"]},"destroy_supply":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}],"return":["U64"]},"destroy_zero":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"increase_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]},"join":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}],"return":["U64"]},"split":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]},"supply_value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"withdraw_all":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]}}},"bcs":{"fileFormatVersion":6,"address":"0x2","name":"bcs","friends":[],"structs":{"BCS":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}}]}},"exposedFunctions":{"into_remainder_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}],"return":[{"Vector":"U8"}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}]},"peel_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["Address"]},"peel_bool":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["Bool"]},"peel_option_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}]},"peel_option_bool":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Bool"]}}]},"peel_option_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U128"]}}]},"peel_option_u16":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U16"]}}]},"peel_option_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U256"]}}]},"peel_option_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U32"]}}]},"peel_option_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}]},"peel_option_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}}]},"peel_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["U128"]},"peel_u16":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["U16"]},"peel_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["U256"]},"peel_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["U32"]},"peel_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["U64"]},"peel_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["U8"]},"peel_vec_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"peel_vec_bool":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"Bool"}]},"peel_vec_length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":["U64"]},"peel_vec_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"U128"}]},"peel_vec_u16":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"U16"}]},"peel_vec_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"U256"}]},"peel_vec_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"U32"}]},"peel_vec_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"U64"}]},"peel_vec_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"peel_vec_vec_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"bcs","name":"BCS","typeArguments":[]}}}],"return":[{"Vector":{"Vector":"U8"}}]},"to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}}],"return":[{"Vector":"U8"}]}}},"bls12381":{"fileFormatVersion":6,"address":"0x2","name":"bls12381","friends":[],"structs":{"G1":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"G2":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"GT":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"Scalar":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"bls12381_min_pk_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}}],"return":["Bool"]},"bls12381_min_sig_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}}],"return":["Bool"]},"g1_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_generator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_identity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_multi_scalar_multiplication":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}},{"Reference":{"Vector":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g1_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"g2_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_generator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_identity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_multi_scalar_multiplication":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}},{"Reference":{"Vector":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"g2_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"gt_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"gt_div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"gt_generator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"gt_identity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"gt_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"gt_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"gt_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"hash_to_g1":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}]},"hash_to_g2":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}]},"pairing":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G1","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"G2","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"GT","typeArguments":[]}}]}}]},"scalar_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_from_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_inv":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_one":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]},"scalar_zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"Struct":{"address":"0x2","module":"bls12381","name":"Scalar","typeArguments":[]}}]}}]}}},"borrow":{"fileFormatVersion":6,"address":"0x2","name":"borrow","friends":[],"structs":{"Borrow":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"ref","type":"Address"},{"name":"obj","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Referent":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Store","Key"]},"isPhantom":false}],"fields":[{"name":"id","type":"Address"},{"name":"value","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"borrow","name":"Referent","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"TypeParameter":0},{"Struct":{"address":"0x2","module":"borrow","name":"Borrow","typeArguments":[]}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Struct":{"address":"0x2","module":"borrow","name":"Referent","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"borrow","name":"Referent","typeArguments":[{"TypeParameter":0}]}}]},"put_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"borrow","name":"Referent","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0},{"Struct":{"address":"0x2","module":"borrow","name":"Borrow","typeArguments":[]}}],"return":[]}}},"clock":{"fileFormatVersion":6,"address":"0x2","name":"clock","friends":[],"structs":{"Clock":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"timestamp_ms","type":"U64"}]}},"exposedFunctions":{"timestamp_ms":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U64"]}}},"coin":{"fileFormatVersion":6,"address":"0x2","name":"coin","friends":[],"structs":{"Coin":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}}]},"CoinMetadata":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"decimals","type":"U8"},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"symbol","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"description","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"icon_url","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}]}}}]},"CurrencyCreated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"decimals","type":"U8"}]},"DenyCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"DenyCapV2":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"allow_global_pause","type":"Bool"}]},"RegulatedCoinMetadata":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"coin_metadata_object","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"deny_cap_object","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"TreasuryCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"total_supply","type":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}}]}},"exposedFunctions":{"balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}}]},"balance_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}}]},"burn":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":["U64"]},"create_currency":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U8",{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]},"create_regulated_currency":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U8",{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"DenyCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]},"create_regulated_currency_v2":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U8",{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}]}},"Bool",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}]},"deny_list_add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"DenyCap","typeArguments":[{"TypeParameter":0}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deny_list_contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"Address"],"return":["Bool"]},"deny_list_remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"DenyCap","typeArguments":[{"TypeParameter":0}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deny_list_v2_add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deny_list_v2_contains_current_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"Address",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Bool"]},"deny_list_v2_contains_next_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"Address"],"return":["Bool"]},"deny_list_v2_disable_global_pause":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deny_list_v2_enable_global_pause":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deny_list_v2_is_global_pause_enabled_current_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Bool"]},"deny_list_v2_is_global_pause_enabled_next_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}}],"return":["Bool"]},"deny_list_v2_remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"destroy_zero":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"divide_into_n":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}}]},"from_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"get_decimals":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}],"return":["U8"]},"get_description":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"get_icon_url":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}]}}]},"get_name":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"get_symbol":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"into_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]},"join":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"migrate_regulated_currency_to_v2":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"DenyCap","typeArguments":[{"TypeParameter":0}]}},"Bool",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"DenyCapV2","typeArguments":[{"TypeParameter":0}]}}]},"mint":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"mint_and_transfer":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},"U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"mint_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]},"put":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"split":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}}]},"supply_immut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}}]},"supply_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}}]},"take":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"total_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"treasury_into_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}]},"update_description":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"update_icon_url":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"update_name":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"update_symbol":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]},"value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}}},"config":{"fileFormatVersion":6,"address":"0x2","name":"config","friends":[{"address":"0x2","name":"deny_list"}],"structs":{"Config":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"Setting":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false}],"fields":[{"name":"data","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"config","name":"SettingData","typeArguments":[{"TypeParameter":0}]}}]}}}]},"SettingData":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false}],"fields":[{"name":"newer_value_epoch","type":"U64"},{"name":"newer_value","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"older_value_opt","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}}]}},"exposedFunctions":{"add_for_next_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"TypeParameter":0}},{"TypeParameter":1},{"TypeParameter":2},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":2}]}}]},"borrow_for_next_epoch_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"TypeParameter":0}},{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"MutableReference":{"TypeParameter":2}}]},"exists_with_type":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":1}],"return":["Bool"]},"exists_with_type_for_next_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":1},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Bool"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}]},"read_setting":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"TypeParameter":0},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":1}]}}]},"read_setting_for_next_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":1}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":2}]}}]},"remove_for_next_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"TypeParameter":0}},{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":2}]}}]},"share":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"transfer":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"config","name":"Config","typeArguments":[{"TypeParameter":0}]}},"Address"],"return":[]}}},"deny_list":{"fileFormatVersion":6,"address":"0x2","name":"deny_list","friends":[{"address":"0x2","name":"coin"}],"structs":{"AddressKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pos0","type":"Address"}]},"ConfigKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"per_type_index","type":"U64"},{"name":"per_type_key","type":{"Vector":"U8"}}]},"ConfigWriteCap":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"DenyList":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"lists","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"GlobalPauseKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"PerTypeConfigCreated":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"key","type":{"Struct":{"address":"0x2","module":"deny_list","name":"ConfigKey","typeArguments":[]}}},{"name":"config_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"PerTypeList":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"denied_count","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["Address","U64"]}}},{"name":"denied_addresses","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Vector":"U8"},{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}]}}}]}},"exposedFunctions":{"migrate_v1_to_v2":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"v1_add":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},"Address"],"return":[]},"v1_contains":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},"Address"],"return":["Bool"]},"v1_remove":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},"Address"],"return":[]},"v2_add":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"v2_contains_current_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},"Address",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Bool"]},"v2_contains_next_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},"Address"],"return":["Bool"]},"v2_disable_global_pause":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"v2_enable_global_pause":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"v2_is_global_pause_enabled_current_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Bool"]},"v2_is_global_pause_enabled_next_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"}],"return":["Bool"]},"v2_remove":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"deny_list","name":"DenyList","typeArguments":[]}}},"U64",{"Vector":"U8"},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"display":{"fileFormatVersion":6,"address":"0x2","name":"display","friends":[],"structs":{"Display":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":["Key"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"fields","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"name":"version","type":"U16"}]},"DisplayCreated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":["Key"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"VersionUpdated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":["Key"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"version","type":"U16"},{"name":"fields","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"add_multiple":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}},{"Vector":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}],"return":[]},"create_and_keep":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"edit":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"fields":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}}]},"is_authorized":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}}],"return":["Bool"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}]},"new_with_fields":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}]},"remove":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"update_version":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}}],"return":[]},"version":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"display","name":"Display","typeArguments":[{"TypeParameter":0}]}}}],"return":["U16"]}}},"dynamic_field":{"fileFormatVersion":6,"address":"0x2","name":"dynamic_field","friends":[{"address":"0x2","name":"config"},{"address":"0x2","name":"dynamic_object_field"}],"structs":{"Field":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false},{"constraints":{"abilities":["Store"]},"isPhantom":false}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"name","type":{"TypeParameter":0}},{"name":"value","type":{"TypeParameter":1}}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"add_child_object":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":["Address",{"TypeParameter":0}],"return":[]},"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_child_object":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},"Address"],"return":[{"Reference":{"TypeParameter":0}}]},"borrow_child_object_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},"Address"],"return":[{"MutableReference":{"TypeParameter":0}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"exists_":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"exists_with_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"field_info":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},"Address"]},"field_info_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},"Address"]},"has_child_object":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address","Address"],"return":["Bool"]},"has_child_object_with_ty":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":["Address","Address"],"return":["Bool"]},"hash_type_and_key":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":["Address",{"TypeParameter":0}],"return":["Address"]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"remove_child_object":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":["Address","Address"],"return":[{"TypeParameter":0}]},"remove_if_exists":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":1}]}}]}}},"dynamic_object_field":{"fileFormatVersion":6,"address":"0x2","name":"dynamic_object_field","friends":[{"address":"0x2","name":"deny_list"}],"structs":{"Wrapper":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":false}],"fields":[{"name":"name","type":{"TypeParameter":0}}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"exists_":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"exists_with_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}]},"internal_add":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"internal_borrow":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"internal_borrow_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"internal_exists_with_type":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"internal_remove":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]}}},"ecdsa_k1":{"fileFormatVersion":6,"address":"0x2","name":"ecdsa_k1","friends":[],"structs":{},"exposedFunctions":{"decompress_pubkey":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Vector":"U8"}]},"secp256k1_ecrecover":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},"U8"],"return":[{"Vector":"U8"}]},"secp256k1_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},"U8"],"return":["Bool"]}}},"ecdsa_r1":{"fileFormatVersion":6,"address":"0x2","name":"ecdsa_r1","friends":[],"structs":{},"exposedFunctions":{"secp256r1_ecrecover":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},"U8"],"return":[{"Vector":"U8"}]},"secp256r1_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},"U8"],"return":["Bool"]}}},"ecvrf":{"fileFormatVersion":6,"address":"0x2","name":"ecvrf","friends":[],"structs":{},"exposedFunctions":{"ecvrf_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}}],"return":["Bool"]}}},"ed25519":{"fileFormatVersion":6,"address":"0x2","name":"ed25519","friends":[],"structs":{},"exposedFunctions":{"ed25519_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}}],"return":["Bool"]}}},"event":{"fileFormatVersion":6,"address":"0x2","name":"event","friends":[],"structs":{},"exposedFunctions":{"emit":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"TypeParameter":0}],"return":[]}}},"groth16":{"fileFormatVersion":6,"address":"0x2","name":"groth16","friends":[],"structs":{"Curve":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":"U8"}]},"PreparedVerifyingKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"vk_gamma_abc_g1_bytes","type":{"Vector":"U8"}},{"name":"alpha_g1_beta_g2_bytes","type":{"Vector":"U8"}},{"name":"gamma_g2_neg_pc_bytes","type":{"Vector":"U8"}},{"name":"delta_g2_neg_pc_bytes","type":{"Vector":"U8"}}]},"ProofPoints":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}}]},"PublicProofInputs":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":{"Vector":"U8"}}]}},"exposedFunctions":{"bls12381":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"groth16","name":"Curve","typeArguments":[]}}]},"bn254":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"groth16","name":"Curve","typeArguments":[]}}]},"prepare_verifying_key":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"groth16","name":"Curve","typeArguments":[]}}},{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x2","module":"groth16","name":"PreparedVerifyingKey","typeArguments":[]}}]},"proof_points_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"groth16","name":"ProofPoints","typeArguments":[]}}]},"public_proof_inputs_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"groth16","name":"PublicProofInputs","typeArguments":[]}}]},"pvk_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"groth16","name":"PreparedVerifyingKey","typeArguments":[]}}]},"pvk_to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"groth16","name":"PreparedVerifyingKey","typeArguments":[]}}],"return":[{"Vector":{"Vector":"U8"}}]},"verify_groth16_proof":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"groth16","name":"Curve","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"groth16","name":"PreparedVerifyingKey","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"groth16","name":"PublicProofInputs","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"groth16","name":"ProofPoints","typeArguments":[]}}}],"return":["Bool"]}}},"group_ops":{"fileFormatVersion":6,"address":"0x2","name":"group_ops","friends":[{"address":"0x2","name":"bls12381"}],"structs":{"Element":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"bytes","type":{"Vector":"U8"}}]}},"exposedFunctions":{"add":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":["U8",{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}]},"bytes":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Vector":"U8"}}]},"div":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U8",{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":1}]}}]},"equal":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"from_bytes":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":["U8",{"Reference":{"Vector":"U8"}},"Bool"],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}]},"hash_to":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":["U8",{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}]},"mul":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U8",{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":1}]}}]},"multi_scalar_multiplication":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U8",{"Reference":{"Vector":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}}},{"Reference":{"Vector":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":1}]}}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":1}]}}]},"pairing":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":["U8",{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":2}]}}]},"set_as_prefix":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U64","Bool",{"MutableReference":{"Vector":"U8"}}],"return":[]},"sub":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":["U8",{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"group_ops","name":"Element","typeArguments":[{"TypeParameter":0}]}}]}}},"hash":{"fileFormatVersion":6,"address":"0x2","name":"hash","friends":[],"structs":{},"exposedFunctions":{"blake2b256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Vector":"U8"}]},"keccak256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Vector":"U8"}]}}},"hex":{"fileFormatVersion":6,"address":"0x2","name":"hex","friends":[],"structs":{},"exposedFunctions":{"decode":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Vector":"U8"}]},"encode":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Vector":"U8"}]}}},"hmac":{"fileFormatVersion":6,"address":"0x2","name":"hmac","friends":[],"structs":{},"exposedFunctions":{"hmac_sha3_256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}}],"return":[{"Vector":"U8"}]}}},"kiosk":{"fileFormatVersion":6,"address":"0x2","name":"kiosk","friends":[{"address":"0x2","name":"kiosk_extension"}],"structs":{"Borrow":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"kiosk_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"item_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Item":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"ItemDelisted":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":["Store","Key"]},"isPhantom":true}],"fields":[{"name":"kiosk","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"ItemListed":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":["Store","Key"]},"isPhantom":true}],"fields":[{"name":"kiosk","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"price","type":"U64"}]},"ItemPurchased":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":["Store","Key"]},"isPhantom":true}],"fields":[{"name":"kiosk","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"price","type":"U64"}]},"Kiosk":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"profits","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"owner","type":"Address"},{"name":"item_count","type":"U32"},{"name":"allow_extensions","type":"Bool"}]},"KioskOwnerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"for","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Listing":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"is_exclusive","type":"Bool"}]},"Lock":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"PurchaseCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":["Store","Key"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"kiosk_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"item_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"min_price","type":"U64"}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Reference":{"TypeParameter":0}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"MutableReference":{"TypeParameter":0}}]},"borrow_val":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"TypeParameter":0},{"Struct":{"address":"0x2","module":"kiosk","name":"Borrow","typeArguments":[]}}]},"close_and_withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}},{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"default":{"visibility":"Private","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"delist":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]},"has_access":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":["Bool"]},"has_item":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"has_item_with_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"is_listed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"is_listed_exclusively":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"is_locked":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"item_count":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":["U32"]},"kiosk_owner_cap_for":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"list":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64"],"return":[]},"list_with_purchase_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"kiosk","name":"PurchaseCap","typeArguments":[{"TypeParameter":0}]}}]},"lock":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":[]},"lock_internal":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}},{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}]},"owner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":["Address"]},"place":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"place_and_list":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"TypeParameter":0},"U64"],"return":[]},"place_internal":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"profits_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":["U64"]},"profits_mut":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}}]},"purchase":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[{"TypeParameter":0},{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}]},"purchase_cap_item":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"PurchaseCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"purchase_cap_kiosk":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"PurchaseCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"purchase_cap_min_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"PurchaseCap","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"purchase_with_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"kiosk","name":"PurchaseCap","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[{"TypeParameter":0},{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}]},"return_purchase_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"kiosk","name":"PurchaseCap","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"return_val":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0x2","module":"kiosk","name":"Borrow","typeArguments":[]}}],"return":[]},"set_allow_extensions":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},"Bool"],"return":[]},"set_owner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"set_owner_custom":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},"Address"],"return":[]},"take":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"TypeParameter":0}]},"uid":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"uid_mut":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"uid_mut_as_owner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"uid_mut_internal":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]}}},"kiosk_extension":{"fileFormatVersion":6,"address":"0x2","name":"kiosk_extension","friends":[],"structs":{"Extension":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"storage","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"name":"permissions","type":"U128"},{"name":"is_enabled","type":"Bool"}]},"ExtensionKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},"U128",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"can_lock":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":["Bool"]},"can_place":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":["Bool"]},"disable":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":[]},"enable":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":[]},"is_enabled":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":["Bool"]},"is_installed":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":["Bool"]},"lock":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store","Key"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"TypeParameter":1},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":1}]}}}],"return":[]},"place":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store","Key"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"TypeParameter":1},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":1}]}}}],"return":[]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":[]},"storage":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"storage_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]}}},"linked_table":{"fileFormatVersion":6,"address":"0x2","name":"linked_table","friends":[],"structs":{"LinkedTable":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false},{"constraints":{"abilities":["Store"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"size","type":"U64"},{"name":"head","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"tail","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}}]},"Node":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false},{"constraints":{"abilities":["Store"]},"isPhantom":false}],"fields":[{"name":"prev","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"next","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"value","type":{"TypeParameter":1}}]}},"exposedFunctions":{"back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}}]},"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"drop":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}}]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"next":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}}]},"pop_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"pop_front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"prev":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}}]},"push_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"push_front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]}}},"math":{"fileFormatVersion":6,"address":"0x2","name":"math","friends":[],"structs":{},"exposedFunctions":{"diff":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"divide_and_round_up":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"max":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"min":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"pow":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U8"],"return":["U64"]},"sqrt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":["U64"]},"sqrt_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U128"]}}},"object":{"fileFormatVersion":6,"address":"0x2","name":"object","friends":[{"address":"0x2","name":"authenticator_state"},{"address":"0x2","name":"clock"},{"address":"0x2","name":"deny_list"},{"address":"0x2","name":"dynamic_field"},{"address":"0x2","name":"random"}],"structs":{"ID":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bytes","type":"Address"}]},"UID":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"authenticator_state":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}]},"borrow_id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"TypeParameter":0}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"clock":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}]},"delete":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}],"return":[]},"id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"TypeParameter":0}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"id_address":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"TypeParameter":0}}],"return":["Address"]},"id_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"TypeParameter":0}}],"return":[{"Vector":"U8"}]},"id_from_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"id_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"id_to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":["Address"]},"id_to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}]},"new_uid_from_hash":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}]},"randomness_state":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}]},"sui_deny_list_object_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}]},"uid_as_inner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"uid_to_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":["Address"]},"uid_to_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[{"Vector":"U8"}]},"uid_to_inner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}},"object_bag":{"fileFormatVersion":6,"address":"0x2","name":"object_bag","friends":[],"structs":{"ObjectBag":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"size","type":"U64"}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"contains_with_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}},{"TypeParameter":0}],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"value_id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_bag","name":"ObjectBag","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}]}}},"object_table":{"fileFormatVersion":6,"address":"0x2","name":"object_table","friends":[],"structs":{"ObjectTable":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":true},{"constraints":{"abilities":["Store","Key"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"size","type":"U64"}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"value_id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object_table","name":"ObjectTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}]}}},"package":{"fileFormatVersion":6,"address":"0x2","name":"package","friends":[],"structs":{"Publisher":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"package","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"module_name","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"UpgradeCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"package","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"version","type":"U64"},{"name":"policy","type":"U8"}]},"UpgradeReceipt":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"cap","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"package","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"UpgradeTicket":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"cap","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"package","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"policy","type":"U8"},{"name":"digest","type":{"Vector":"U8"}}]}},"exposedFunctions":{"additive_policy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U8"]},"authorize_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}},"U8",{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"burn_publisher":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}],"return":[]},"claim":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}]},"claim_and_keep":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"commit_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[]},"compatible_policy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U8"]},"dep_only_policy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U8"]},"from_module":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}}],"return":["Bool"]},"from_package":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}}],"return":["Bool"]},"make_immutable":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}],"return":[]},"only_additive_upgrades":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}],"return":[]},"only_dep_upgrades":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}],"return":[]},"published_module":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"published_package":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"receipt_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"receipt_package":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"ticket_digest":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}}],"return":[{"Reference":{"Vector":"U8"}}]},"ticket_package":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"ticket_policy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}}],"return":["U8"]},"upgrade_package":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"upgrade_policy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}],"return":["U8"]},"version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}],"return":["U64"]}}},"pay":{"fileFormatVersion":6,"address":"0x2","name":"pay","friends":[],"structs":{},"exposedFunctions":{"divide_and_keep":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"join":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"join_vec":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}}],"return":[]},"join_vec_and_transfer":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[]},"keep":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"split":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"split_and_transfer":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"split_vec":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"Vector":"U64"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"poseidon":{"fileFormatVersion":6,"address":"0x2","name":"poseidon","friends":[],"structs":{},"exposedFunctions":{"poseidon_bn254":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U256"}}],"return":["U256"]}}},"priority_queue":{"fileFormatVersion":6,"address":"0x2","name":"priority_queue","friends":[],"structs":{"Entry":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Drop"]},"isPhantom":false}],"fields":[{"name":"priority","type":"U64"},{"name":"value","type":{"TypeParameter":0}}]},"PriorityQueue":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Drop"]},"isPhantom":false}],"fields":[{"name":"entries","type":{"Vector":{"Struct":{"address":"0x2","module":"priority_queue","name":"Entry","typeArguments":[{"TypeParameter":0}]}}}}]}},"exposedFunctions":{"create_entries":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Vector":"U64"},{"Vector":{"TypeParameter":0}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"priority_queue","name":"Entry","typeArguments":[{"TypeParameter":0}]}}}]},"insert":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"priority_queue","name":"PriorityQueue","typeArguments":[{"TypeParameter":0}]}}},"U64",{"TypeParameter":0}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"priority_queue","name":"Entry","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"priority_queue","name":"PriorityQueue","typeArguments":[{"TypeParameter":0}]}}]},"new_entry":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":["U64",{"TypeParameter":0}],"return":[{"Struct":{"address":"0x2","module":"priority_queue","name":"Entry","typeArguments":[{"TypeParameter":0}]}}]},"pop_max":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"priority_queue","name":"PriorityQueue","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64",{"TypeParameter":0}]},"priorities":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"priority_queue","name":"PriorityQueue","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U64"}]}}},"prover":{"fileFormatVersion":6,"address":"0x2","name":"prover","friends":[],"structs":{},"exposedFunctions":{}},"random":{"fileFormatVersion":6,"address":"0x2","name":"random","friends":[],"structs":{"Random":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"inner","type":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}]},"RandomGenerator":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"seed","type":{"Vector":"U8"}},{"name":"counter","type":"U16"},{"name":"buffer","type":{"Vector":"U8"}}]},"RandomInner":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"version","type":"U64"},{"name":"epoch","type":"U64"},{"name":"randomness_round","type":"U64"},{"name":"random_bytes","type":{"Vector":"U8"}}]}},"exposedFunctions":{"generate_bool":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}}],"return":["Bool"]},"generate_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}},"U16"],"return":[{"Vector":"U8"}]},"generate_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}}],"return":["U128"]},"generate_u128_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}},"U128","U128"],"return":["U128"]},"generate_u16":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}}],"return":["U16"]},"generate_u16_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}},"U16","U16"],"return":["U16"]},"generate_u256":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}}],"return":["U256"]},"generate_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}}],"return":["U32"]},"generate_u32_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}},"U32","U32"],"return":["U32"]},"generate_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}}],"return":["U64"]},"generate_u64_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}},"U64","U64"],"return":["U64"]},"generate_u8":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}}],"return":["U8"]},"generate_u8_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}},"U8","U8"],"return":["U8"]},"new_generator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"random","name":"Random","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}]},"shuffle":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"random","name":"RandomGenerator","typeArguments":[]}}},{"MutableReference":{"Vector":{"TypeParameter":0}}}],"return":[]}}},"sui":{"fileFormatVersion":6,"address":"0x2","name":"sui","friends":[],"structs":{"SUI":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"transfer":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"Address"],"return":[]}}},"table":{"fileFormatVersion":6,"address":"0x2","name":"table","friends":[],"structs":{"Table":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":true},{"constraints":{"abilities":["Store"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"size","type":"U64"}]}},"exposedFunctions":{"add":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"drop":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]}}},"table_vec":{"fileFormatVersion":6,"address":"0x2","name":"table_vec","friends":[],"structs":{"TableVec":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Store"]},"isPhantom":true}],"fields":[{"name":"contents","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"TypeParameter":0}]}}}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Reference":{"TypeParameter":0}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"MutableReference":{"TypeParameter":0}}]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"drop":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop","Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"pop_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"TypeParameter":0}]},"push_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":[]},"singleton":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}]},"swap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}},"U64","U64"],"return":[]},"swap_remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"TypeParameter":0}]}}},"token":{"fileFormatVersion":6,"address":"0x2","name":"token","friends":[],"structs":{"ActionRequest":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"amount","type":"U64"},{"name":"sender","type":"Address"},{"name":"recipient","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"spent_balance","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]}}},{"name":"approvals","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}}]},"RuleKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"is_protected","type":"Bool"}]},"Token":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}}]},"TokenPolicy":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"spent_balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"rules","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}]}}}]},"TokenPolicyCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"for","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"TokenPolicyCreated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"is_mutable","type":"Bool"}]}},"exposedFunctions":{"action":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"add_approval":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]}],"parameters":[{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"add_rule_config":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]},{"abilities":["Store"]}],"parameters":[{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":2},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"add_rule_for_action":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"allow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"amount":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"approvals":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}]},"burn":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"confirm_request":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","Address",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}]},"confirm_request_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","Address",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}]},"confirm_with_policy_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","Address",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}]},"confirm_with_treasury_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","Address",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}]},"destroy_zero":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"disallow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"flush":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"from_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}]},"from_coin_action":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"has_rule_config":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"has_rule_config_with_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"is_allowed":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}],"return":["Bool"]},"join":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"keep":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"mint":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}]},"new_policy":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}]},"new_request":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}]},"recipient":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}]},"remove_rule_config":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"TypeParameter":2}]},"remove_rule_for_action":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"rule_config":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]},{"abilities":["Store"]}],"parameters":[{"TypeParameter":1},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"TypeParameter":2}}]},"rule_config_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]},{"abilities":["Store"]}],"parameters":[{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicyCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"TypeParameter":2}}]},"rules":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}]},"sender":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":["Address"]},"share_policy":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"spend":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}]},"spend_action":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"spent":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}]},"spent_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"TokenPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"split":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}]},"to_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}]},"to_coin_action":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"ActionRequest","typeArguments":[{"TypeParameter":0}]}}]},"transfer_action":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"token","name":"Token","typeArguments":[{"TypeParameter":0}]}}]}}},"transfer":{"fileFormatVersion":6,"address":"0x2","name":"transfer","friends":[],"structs":{"Receiving":{"abilities":{"abilities":["Drop"]},"typeParameters":[{"constraints":{"abilities":["Key"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"version","type":"U64"}]}},"exposedFunctions":{"freeze_object":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"TypeParameter":0}],"return":[]},"freeze_object_impl":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"TypeParameter":0}],"return":[]},"public_freeze_object":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"TypeParameter":0}],"return":[]},"public_receive":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0}]},"public_share_object":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"TypeParameter":0}],"return":[]},"public_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"TypeParameter":0},"Address"],"return":[]},"receive":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0}]},"receiving_object_id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"share_object":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"TypeParameter":0}],"return":[]},"share_object_impl":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"TypeParameter":0}],"return":[]},"transfer":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"TypeParameter":0},"Address"],"return":[]},"transfer_impl":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Key"]}],"parameters":[{"TypeParameter":0},"Address"],"return":[]}}},"transfer_policy":{"fileFormatVersion":6,"address":"0x2","name":"transfer_policy","friends":[],"structs":{"RuleKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Drop"]},"isPhantom":true}],"fields":[{"name":"dummy_field","type":"Bool"}]},"TransferPolicy":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"rules","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}}]},"TransferPolicyCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"policy_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"TransferPolicyCreated":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"TransferPolicyDestroyed":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"TransferRequest":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"item","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"paid","type":"U64"},{"name":"from","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"receipts","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}}]}},"exposedFunctions":{"add_receipt":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]}],"parameters":[{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":[]},"add_rule":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]},{"abilities":["Drop","Store"]}],"parameters":[{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":2}],"return":[]},"add_to_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]}],"parameters":[{"TypeParameter":1},{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[]},"confirm_request":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64",{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"default":{"visibility":"Private","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"destroy_and_withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicyCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"get_rule":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]},{"abilities":["Drop","Store"]}],"parameters":[{"TypeParameter":1},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"TypeParameter":2}}]},"has_rule":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"item":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicyCap","typeArguments":[{"TypeParameter":0}]}}]},"new_request":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64",{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}]},"paid":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"remove_rule":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":["Drop"]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicyCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[]},"rules":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]}}}]},"uid":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"uid_mut_as_owner":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicyCap","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicyCap","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]}}},"tx_context":{"fileFormatVersion":6,"address":"0x2","name":"tx_context","friends":[],"structs":{"TxContext":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"sender","type":"Address"},{"name":"tx_hash","type":{"Vector":"U8"}},{"name":"epoch","type":"U64"},{"name":"epoch_timestamp_ms","type":"U64"},{"name":"ids_created","type":"U64"}]}},"exposedFunctions":{"digest":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Reference":{"Vector":"U8"}}]},"epoch":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"epoch_timestamp_ms":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"fresh_object_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Address"]},"sender":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["Address"]}}},"types":{"fileFormatVersion":6,"address":"0x2","name":"types","friends":[],"structs":{},"exposedFunctions":{"is_one_time_witness":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Reference":{"TypeParameter":0}}],"return":["Bool"]}}},"url":{"fileFormatVersion":6,"address":"0x2","name":"url","friends":[],"structs":{"Url":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"url","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]}},"exposedFunctions":{"inner_url":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"new_unsafe":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}]},"new_unsafe_from_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}]},"update":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":[]}}},"vdf":{"fileFormatVersion":6,"address":"0x2","name":"vdf","friends":[],"structs":{},"exposedFunctions":{"hash_to_input":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Vector":"U8"}]},"vdf_verify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},{"Reference":{"Vector":"U8"}},"U64"],"return":["Bool"]}}},"vec_map":{"fileFormatVersion":6,"address":"0x2","name":"vec_map","friends":[],"structs":{"Entry":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Copy"]},"isPhantom":false},{"constraints":{"abilities":[]},"isPhantom":false}],"fields":[{"name":"key","type":{"TypeParameter":0}},{"name":"value","type":{"TypeParameter":1}}]},"VecMap":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Copy"]},"isPhantom":false},{"constraints":{"abilities":[]},"isPhantom":false}],"fields":[{"name":"contents","type":{"Vector":{"Struct":{"address":"0x2","module":"vec_map","name":"Entry","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}}]}},"exposedFunctions":{"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"TypeParameter":0}}],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"from_keys_values":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Vector":{"TypeParameter":0}},{"Vector":{"TypeParameter":1}}],"return":[{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"get":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"TypeParameter":0}}],"return":[{"Reference":{"TypeParameter":1}}]},"get_entry_by_idx":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64"],"return":[{"Reference":{"TypeParameter":0}},{"Reference":{"TypeParameter":1}}]},"get_entry_by_idx_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64"],"return":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"TypeParameter":1}}]},"get_idx":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"TypeParameter":0}}],"return":["U64"]},"get_idx_opt":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"TypeParameter":0}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}]},"get_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"TypeParameter":0}}],"return":[{"MutableReference":{"TypeParameter":1}}]},"insert":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"into_keys_values":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[{"Vector":{"TypeParameter":0}},{"Vector":{"TypeParameter":1}}]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"keys":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Vector":{"TypeParameter":0}}]},"pop":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"TypeParameter":0}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"remove_entry_by_idx":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64"],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"size":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"try_get":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy"]},{"abilities":["Copy"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"TypeParameter":0}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":1}]}}]}}},"vec_set":{"fileFormatVersion":6,"address":"0x2","name":"vec_set","friends":[],"structs":{"VecSet":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop"]},"isPhantom":false}],"fields":[{"name":"contents","type":{"Vector":{"TypeParameter":0}}}]}},"exposedFunctions":{"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"TypeParameter":0}}],"return":["Bool"]},"empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[],"return":[{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}]},"from_keys":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Vector":{"TypeParameter":0}}],"return":[{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}]},"insert":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}},{"TypeParameter":0}],"return":[]},"into_keys":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Vector":{"TypeParameter":0}}]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"keys":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Vector":{"TypeParameter":0}}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"TypeParameter":0}}],"return":[]},"singleton":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"TypeParameter":0}],"return":[{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}]},"size":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]}}},"versioned":{"fileFormatVersion":6,"address":"0x2","name":"versioned","friends":[],"structs":{"VersionChangeCap":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"versioned_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"old_version","type":"U64"}]},"Versioned":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"version","type":"U64"}]}},"exposedFunctions":{"create":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":["U64",{"TypeParameter":0},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}],"return":[{"TypeParameter":0}]},"load_value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}],"return":[{"Reference":{"TypeParameter":0}}]},"load_value_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}],"return":[{"MutableReference":{"TypeParameter":0}}]},"remove_value_for_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}],"return":[{"TypeParameter":0},{"Struct":{"address":"0x2","module":"versioned","name":"VersionChangeCap","typeArguments":[]}}]},"upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}},"U64",{"TypeParameter":0},{"Struct":{"address":"0x2","module":"versioned","name":"VersionChangeCap","typeArguments":[]}}],"return":[]},"version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}],"return":["U64"]}}},"zklogin_verified_id":{"fileFormatVersion":6,"address":"0x2","name":"zklogin_verified_id","friends":[],"structs":{"VerifiedID":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"owner","type":"Address"},{"name":"key_claim_name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"key_claim_value","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"issuer","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"audience","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]}},"exposedFunctions":{"audience":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"zklogin_verified_id","name":"VerifiedID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"check_zklogin_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address",{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},"U256"],"return":["Bool"]},"delete":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"zklogin_verified_id","name":"VerifiedID","typeArguments":[]}}],"return":[]},"issuer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"zklogin_verified_id","name":"VerifiedID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"key_claim_name":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"zklogin_verified_id","name":"VerifiedID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"key_claim_value":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"zklogin_verified_id","name":"VerifiedID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"owner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"zklogin_verified_id","name":"VerifiedID","typeArguments":[]}}}],"return":["Address"]},"verify_zklogin_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U256",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"zklogin_verified_issuer":{"fileFormatVersion":6,"address":"0x2","name":"zklogin_verified_issuer","friends":[],"structs":{"VerifiedIssuer":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"owner","type":"Address"},{"name":"issuer","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]}},"exposedFunctions":{"check_zklogin_issuer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address","U256",{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}],"return":["Bool"]},"delete":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"zklogin_verified_issuer","name":"VerifiedIssuer","typeArguments":[]}}],"return":[]},"issuer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"zklogin_verified_issuer","name":"VerifiedIssuer","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"owner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"zklogin_verified_issuer","name":"VerifiedIssuer","typeArguments":[]}}}],"return":["Address"]},"verify_zklogin_issuer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}}}');
function loadAllTypes(coder) {
    _0x1.loadAllTypes(coder);
    for (const m of Object.values(MODULES)) {
        coder.load(m, "0x2");
    }
}
exports.loadAllTypes = loadAllTypes;
loadAllTypes((0, sui_1.defaultMoveCoder)());
//# sourceMappingURL=0x2.js.map