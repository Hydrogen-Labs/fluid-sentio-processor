import { TypeDescriptor } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";
import { TypedDevInspectResults } from "@typemove/sui";
import { TransactionBlock, TransactionArgument, TransactionObjectArgument } from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
export declare namespace address {
    namespace builder {
        function length(tx: TransactionBlock, args: []): TransactionArgument & [];
    }
    namespace view {
        function length(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace ascii {
    type Char = string;
    namespace Char {
        const TYPE_QNAME = "0x1::ascii::Char";
        function type(): TypeDescriptor<Char>;
    }
    type String = string;
    namespace String {
        const TYPE_QNAME = "0x1::ascii::String";
        function type(): TypeDescriptor<String>;
    }
    namespace builder {
        function allCharactersPrintable(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function append(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            ascii.String | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function asBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function byte(tx: TransactionBlock, args: [ascii.Char | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function char(tx: TransactionBlock, args: [number | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function indexOf(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function insert(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            ascii.String | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function intoBytes(tx: TransactionBlock, args: [ascii.String | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isEmpty(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isPrintableChar(tx: TransactionBlock, args: [number | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isValidChar(tx: TransactionBlock, args: [number | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function length(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function popChar(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function pushChar(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            ascii.Char | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function string_(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function substring(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function toLowercase(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function toUppercase(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function tryString(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function allCharactersPrintable(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function append(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            ascii.String | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function asBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function byte(client: SuiClient, args: [ascii.Char | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function char(client: SuiClient, args: [number | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.Char]>>;
        function indexOf(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function insert(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            ascii.String | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function intoBytes(client: SuiClient, args: [ascii.String | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function isEmpty(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isPrintableChar(client: SuiClient, args: [number | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isValidChar(client: SuiClient, args: [number | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function popChar(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.Char]>>;
        function pushChar(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            ascii.Char | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function string_(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function substring(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function toLowercase(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function toUppercase(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function tryString(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[option.Option<ascii.String>]>>;
    }
}
export declare namespace bcs {
    namespace builder {
        function toBytes<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function toBytes<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[number[]]>>;
    }
}
export declare namespace bit_vector {
    interface BitVector {
        length: bigint;
        bit_field: Boolean[];
    }
    namespace BitVector {
        const TYPE_QNAME = "0x1::bit_vector::BitVector";
        function type(): TypeDescriptor<BitVector>;
    }
    interface BitVectorInstance extends TypedEventInstance<BitVector> {
        data_decoded: BitVector;
        type_arguments: [];
    }
    namespace builder {
        function isIndexSet(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function length(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function longestSetSequenceStartingAt(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function new_(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function set(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function shiftLeft(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function unset(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function isIndexSet(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function longestSetSequenceStartingAt(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function new_(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bit_vector.BitVector]>>;
        function set(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function shiftLeft(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function unset(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace debug {
    namespace builder {
        function print<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function printStackTrace(tx: TransactionBlock, args: []): TransactionArgument & [];
    }
    namespace view {
        function print<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function printStackTrace(client: SuiClient, args: []): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace fixed_point32 {
    interface FixedPoint32 {
        value: bigint;
    }
    namespace FixedPoint32 {
        const TYPE_QNAME = "0x1::fixed_point32::FixedPoint32";
        function type(): TypeDescriptor<FixedPoint32>;
    }
    interface FixedPoint32Instance extends TypedEventInstance<FixedPoint32> {
        data_decoded: FixedPoint32;
        type_arguments: [];
    }
    namespace builder {
        function createFromRational(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function createFromRawValue(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function divideU64(tx: TransactionBlock, args: [
            bigint | TransactionArgument,
            fixed_point32.FixedPoint32 | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getRawValue(tx: TransactionBlock, args: [fixed_point32.FixedPoint32 | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isZero(tx: TransactionBlock, args: [fixed_point32.FixedPoint32 | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function multiplyU64(tx: TransactionBlock, args: [
            bigint | TransactionArgument,
            fixed_point32.FixedPoint32 | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function createFromRational(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[fixed_point32.FixedPoint32]>>;
        function createFromRawValue(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[fixed_point32.FixedPoint32]>>;
        function divideU64(client: SuiClient, args: [
            bigint | TransactionArgument,
            fixed_point32.FixedPoint32 | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function getRawValue(client: SuiClient, args: [fixed_point32.FixedPoint32 | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function isZero(client: SuiClient, args: [fixed_point32.FixedPoint32 | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function multiplyU64(client: SuiClient, args: [
            bigint | TransactionArgument,
            fixed_point32.FixedPoint32 | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace hash {
    namespace builder {
        function sha2256(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function sha3256(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function sha2256(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function sha3256(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
    }
}
export declare namespace macros {
    namespace builder { }
    namespace view { }
}
export declare namespace option {
    type Option<T> = T | undefined;
    namespace Option {
        const TYPE_QNAME = "0x1::option::Option";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Option<T0>>;
    }
    namespace builder {
        function borrow<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function borrowMut<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function borrowWithDefault<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function contains<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyNone<T0 = any>(tx: TransactionBlock, args: [option.Option<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function destroySome<T0 = any>(tx: TransactionBlock, args: [option.Option<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function destroyWithDefault<T0 = any>(tx: TransactionBlock, args: [option.Option<T0> | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function extract<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function fill<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getWithDefault<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isNone<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function isSome<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function none<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
        function some<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function swap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function swapOrFill<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function toVec<T0 = any>(tx: TransactionBlock, args: [option.Option<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function borrow<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowWithDefault<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function contains<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyNone<T0 = any>(client: SuiClient, args: [option.Option<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function destroySome<T0 = any>(client: SuiClient, args: [option.Option<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function destroyWithDefault<T0 = any>(client: SuiClient, args: [option.Option<T0> | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function extract<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function fill<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function getWithDefault<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function isNone<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isSome<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function none<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[option.Option<T0>]>>;
        function some<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[option.Option<T0>]>>;
        function swap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function swapOrFill<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[option.Option<T0>]>>;
        function toVec<T0 = any>(client: SuiClient, args: [option.Option<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0[] | string]>>;
    }
}
export declare namespace string_ {
    interface String {
        bytes: number[];
    }
    namespace String {
        const TYPE_QNAME = "0x1::string::String";
        function type(): TypeDescriptor<String>;
    }
    interface StringInstance extends TypedEventInstance<String> {
        data_decoded: String;
        type_arguments: [];
    }
    namespace builder {
        function append(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function appendUtf8(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function asBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function bytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function fromAscii(tx: TransactionBlock, args: [ascii.String | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function indexOf(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function insert(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function intoBytes(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isEmpty(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function length(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function subString(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function substring(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function toAscii(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function tryUtf8(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function utf8(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function append(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function appendUtf8(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function asBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function bytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function fromAscii(client: SuiClient, args: [ascii.String | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function indexOf(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function insert(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function intoBytes(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function isEmpty(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function subString(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function substring(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function toAscii(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function tryUtf8(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[option.Option<string>]>>;
        function utf8(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
    }
}
export declare namespace type_name {
    interface TypeName {
        name: ascii.String;
    }
    namespace TypeName {
        const TYPE_QNAME = "0x1::type_name::TypeName";
        function type(): TypeDescriptor<TypeName>;
    }
    interface TypeNameInstance extends TypedEventInstance<TypeName> {
        data_decoded: TypeName;
        type_arguments: [];
    }
    namespace builder {
        function borrowString(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function get<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
        function getAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function getModule(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function getWithOriginalIds<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
        function intoString(tx: TransactionBlock, args: [type_name.TypeName | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isPrimitive(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function borrowString(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function get<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[type_name.TypeName]>>;
        function getAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function getModule(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function getWithOriginalIds<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[type_name.TypeName]>>;
        function intoString(client: SuiClient, args: [type_name.TypeName | TransactionArgument]): Promise<TypedDevInspectResults<[ascii.String]>>;
        function isPrimitive(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace u128 {
    namespace builder {
        function diff(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function divideAndRoundUp(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function max(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function min(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pow(tx: TransactionBlock, args: [bigint | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function sqrt(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function diff(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function divideAndRoundUp(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function max(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function min(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function pow(client: SuiClient, args: [bigint | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function sqrt(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace u16 {
    namespace builder {
        function diff(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function divideAndRoundUp(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function max(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function min(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pow(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function sqrt(tx: TransactionBlock, args: [number | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function diff(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function divideAndRoundUp(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function max(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function min(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function pow(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function sqrt(client: SuiClient, args: [number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
    }
}
export declare namespace u256 {
    namespace builder {
        function diff(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function divideAndRoundUp(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function max(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function min(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pow(tx: TransactionBlock, args: [bigint | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function diff(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function divideAndRoundUp(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function max(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function min(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function pow(client: SuiClient, args: [bigint | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace u32 {
    namespace builder {
        function diff(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function divideAndRoundUp(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function max(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function min(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pow(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function sqrt(tx: TransactionBlock, args: [number | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function diff(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function divideAndRoundUp(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function max(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function min(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function pow(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function sqrt(client: SuiClient, args: [number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
    }
}
export declare namespace u64 {
    namespace builder {
        function diff(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function divideAndRoundUp(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function max(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function min(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pow(tx: TransactionBlock, args: [bigint | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function sqrt(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function diff(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function divideAndRoundUp(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function max(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function min(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function pow(client: SuiClient, args: [bigint | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function sqrt(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace u8 {
    namespace builder {
        function diff(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function divideAndRoundUp(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function max(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function min(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pow(tx: TransactionBlock, args: [number | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function sqrt(tx: TransactionBlock, args: [number | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function diff(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function divideAndRoundUp(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function max(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function min(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function pow(client: SuiClient, args: [number | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function sqrt(client: SuiClient, args: [number | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
    }
}
export declare namespace vector {
    namespace builder {
        function append<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrow<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function contains<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty<T0 = any>(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function empty<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
        function indexOf<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function insert<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function isEmpty<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function length<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function popBack<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function pushBack<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function remove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function reverse<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function singleton<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function swap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function swapRemove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function append<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function borrow<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function contains<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyEmpty<T0 = any>(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function empty<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0[] | string]>>;
        function indexOf<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean, bigint]>>;
        function insert<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function isEmpty<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function popBack<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function pushBack<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function remove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function reverse<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function singleton<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0[] | string]>>;
        function swap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function swapRemove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
    }
}
export declare function loadAllTypes(coder: MoveCoder): void;
//# sourceMappingURL=0x1.d.ts.map