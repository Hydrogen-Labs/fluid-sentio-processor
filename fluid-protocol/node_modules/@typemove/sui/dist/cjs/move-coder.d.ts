import { TypedDevInspectResults, TypedEventInstance } from './models.js';
import { AbstractMoveCoder, DecodedStruct, TypeDescriptor, InternalMoveModule } from '@typemove/move';
import { MoveCallSuiTransaction, SuiCallArg, SuiEvent, SuiMoveNormalizedModule, SuiMoveObject, DevInspectResults, SuiClient } from '@mysten/sui.js/client';
import { dynamic_field } from './builtin/0x2.js';
import { BCS } from '@mysten/bcs';
export type Encoding = 'base58' | 'base64' | 'hex';
export declare class MoveCoder extends AbstractMoveCoder<SuiMoveNormalizedModule, SuiEvent | SuiMoveObject> {
    bcs: BCS;
    constructor(client: SuiClient);
    load(module: SuiMoveNormalizedModule, address: string): InternalMoveModule;
    protected decode(data: any, type: TypeDescriptor): Promise<any>;
    decodeEvent<T>(event: SuiEvent): Promise<TypedEventInstance<T> | undefined>;
    filterAndDecodeEvents<T>(type: TypeDescriptor<T> | string, resources: SuiEvent[]): Promise<TypedEventInstance<T>[]>;
    getDynamicFields<T1, T2>(objects: SuiMoveObject[], keyType?: TypeDescriptor<T1>, valueType?: TypeDescriptor<T2>): Promise<dynamic_field.Field<T1, T2>[]>;
    filterAndDecodeObjects<T>(type: TypeDescriptor<T>, objects: SuiMoveObject[]): Promise<DecodedStruct<SuiMoveObject, T>[]>;
    decodeFunctionPayload(payload: MoveCallSuiTransaction, inputs: SuiCallArg[]): Promise<MoveCallSuiTransaction>;
    private _registerBCSType;
    private bcsRegistered;
    registerBCSTypes(type: TypeDescriptor): Promise<void>;
    decodeBCS(type: TypeDescriptor, data: Uint8Array | string, encoding?: Encoding): Promise<any>;
    decodeDevInspectResult<T extends any[]>(inspectRes: DevInspectResults): Promise<TypedDevInspectResults<T>>;
}
export declare function defaultMoveCoder(endpoint?: string): MoveCoder;
export declare function getMoveCoder(client: SuiClient): Promise<MoveCoder>;
//# sourceMappingURL=move-coder.d.ts.map