import { InternalMoveModule, InternalMoveStruct, ChainAdapter, TypeDescriptor } from '@typemove/move';
import { SuiMoveNormalizedModule, SuiEvent, SuiMoveObject, SuiClient } from '@mysten/sui.js/client';
export declare class SuiChainAdapter extends ChainAdapter<SuiMoveNormalizedModule, SuiEvent | SuiMoveObject> {
    getChainId(): Promise<string>;
    client: SuiClient;
    constructor(client: SuiClient);
    fetchModule(account: string, module: string): Promise<SuiMoveNormalizedModule>;
    fetchModules(account: string): Promise<SuiMoveNormalizedModule[]>;
    getMeaningfulFunctionParams(params: TypeDescriptor[]): TypeDescriptor[];
    toInternalModules(modules: SuiMoveNormalizedModule[]): InternalMoveModule[];
    getAllEventStructs(modules: InternalMoveModule[]): Map<string, InternalMoveStruct>;
    getType(base: SuiEvent | SuiMoveObject): string;
    getData(val: SuiEvent | SuiMoveObject): any;
}
//# sourceMappingURL=sui-chain-adapter.d.ts.map