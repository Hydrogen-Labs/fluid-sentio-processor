import { TypeDescriptor } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";
import { TypedDevInspectResults } from "@typemove/sui";
import { TransactionBlock, TransactionArgument, TransactionObjectArgument } from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
import * as _0x1 from "./0x1.js";
export declare namespace address {
    namespace builder {
        function fromAsciiBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function fromBytes(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function fromU256(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function length(tx: TransactionBlock, args: []): TransactionArgument & [];
        function max(tx: TransactionBlock, args: []): TransactionArgument & [];
        function toAsciiString(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function toBytes(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function toString(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function toU256(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function fromAsciiBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function fromBytes(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function fromU256(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function length(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
        function max(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
        function toAsciiString(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.ascii.String]>>;
        function toBytes(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function toString(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function toU256(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace authenticator_state {
    interface ActiveJwk {
        jwk_id: authenticator_state.JwkId;
        jwk: authenticator_state.JWK;
        epoch: bigint;
    }
    namespace ActiveJwk {
        const TYPE_QNAME = "0x2::authenticator_state::ActiveJwk";
        function type(): TypeDescriptor<ActiveJwk>;
    }
    interface ActiveJwkInstance extends TypedEventInstance<ActiveJwk> {
        data_decoded: ActiveJwk;
        type_arguments: [];
    }
    interface AuthenticatorState {
        id: object_.UID;
        version: bigint;
    }
    namespace AuthenticatorState {
        const TYPE_QNAME = "0x2::authenticator_state::AuthenticatorState";
        function type(): TypeDescriptor<AuthenticatorState>;
    }
    interface AuthenticatorStateInner {
        version: bigint;
        active_jwks: authenticator_state.ActiveJwk[];
    }
    namespace AuthenticatorStateInner {
        const TYPE_QNAME = "0x2::authenticator_state::AuthenticatorStateInner";
        function type(): TypeDescriptor<AuthenticatorStateInner>;
    }
    interface JWK {
        kty: string;
        e: string;
        n: string;
        alg: string;
    }
    namespace JWK {
        const TYPE_QNAME = "0x2::authenticator_state::JWK";
        function type(): TypeDescriptor<JWK>;
    }
    interface JWKInstance extends TypedEventInstance<JWK> {
        data_decoded: JWK;
        type_arguments: [];
    }
    interface JwkId {
        iss: string;
        kid: string;
    }
    namespace JwkId {
        const TYPE_QNAME = "0x2::authenticator_state::JwkId";
        function type(): TypeDescriptor<JwkId>;
    }
    interface JwkIdInstance extends TypedEventInstance<JwkId> {
        data_decoded: JwkId;
        type_arguments: [];
    }
    namespace builder { }
    namespace view { }
}
export declare namespace bag {
    interface Bag {
        id: object_.UID;
        size: bigint;
    }
    namespace Bag {
        const TYPE_QNAME = "0x2::bag::Bag";
        function type(): TypeDescriptor<Bag>;
    }
    namespace builder {
        function add<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function contains<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function containsWithType<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty(tx: TransactionBlock, args: [bag.Bag | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isEmpty(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function length(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function new_(tx: TransactionBlock, args: []): TransactionArgument & [];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function add<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function borrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function contains<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function containsWithType<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyEmpty(client: SuiClient, args: [bag.Bag | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function isEmpty(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function new_(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bag.Bag]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
    }
}
export declare namespace balance {
    type Balance<T> = bigint;
    namespace Balance {
        const TYPE_QNAME = "0x2::balance::Balance";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Balance<T0>>;
    }
    interface Supply<T0> {
        value: bigint;
    }
    namespace Supply {
        const TYPE_QNAME = "0x2::balance::Supply";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Supply<T0>>;
    }
    namespace builder {
        function createSupply<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function decreaseSupply<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            balance.Balance<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroySupply<T0 = any>(tx: TransactionBlock, args: [balance.Supply<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function destroyZero<T0 = any>(tx: TransactionBlock, args: [balance.Balance<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function increaseSupply<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function join<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            balance.Balance<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function split<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function supplyValue<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function value<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function withdrawAll<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function zero<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
    }
    namespace view {
        function createSupply<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Supply<T0>]>>;
        function decreaseSupply<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            balance.Balance<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function destroySupply<T0 = any>(client: SuiClient, args: [balance.Supply<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function destroyZero<T0 = any>(client: SuiClient, args: [balance.Balance<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function increaseSupply<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Balance<T0>]>>;
        function join<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            balance.Balance<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function split<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Balance<T0>]>>;
        function supplyValue<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function value<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function withdrawAll<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Balance<T0>]>>;
        function zero<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Balance<T0>]>>;
    }
}
export declare namespace bcs {
    interface BCS {
        bytes: number[];
    }
    namespace BCS {
        const TYPE_QNAME = "0x2::bcs::BCS";
        function type(): TypeDescriptor<BCS>;
    }
    interface BCSInstance extends TypedEventInstance<BCS> {
        data_decoded: BCS;
        type_arguments: [];
    }
    namespace builder {
        function intoRemainderBytes(tx: TransactionBlock, args: [bcs.BCS | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function new_(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelBool(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionBool(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionU128(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionU16(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionU256(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionU32(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionU64(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelOptionU8(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelU128(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelU16(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelU256(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelU32(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelU64(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelU8(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecBool(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecLength(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecU128(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecU16(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecU256(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecU32(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecU64(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecU8(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function peelVecVecU8(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function toBytes<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function intoRemainderBytes(client: SuiClient, args: [bcs.BCS | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function new_(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[bcs.BCS]>>;
        function peelAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function peelBool(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function peelOptionAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<string>]>>;
        function peelOptionBool(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<Boolean>]>>;
        function peelOptionU128(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<bigint>]>>;
        function peelOptionU16(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<number>]>>;
        function peelOptionU256(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<bigint>]>>;
        function peelOptionU32(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<number>]>>;
        function peelOptionU64(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<bigint>]>>;
        function peelOptionU8(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.option.Option<number>]>>;
        function peelU128(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function peelU16(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function peelU256(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function peelU32(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function peelU64(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function peelU8(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function peelVecAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string[]]>>;
        function peelVecBool(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean[]]>>;
        function peelVecLength(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function peelVecU128(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint[]]>>;
        function peelVecU16(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function peelVecU256(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint[]]>>;
        function peelVecU32(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function peelVecU64(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint[]]>>;
        function peelVecU8(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function peelVecVecU8(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[][]]>>;
        function toBytes<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[number[]]>>;
    }
}
export declare namespace bls12381 {
    interface G1 {
        dummy_field: Boolean;
    }
    namespace G1 {
        const TYPE_QNAME = "0x2::bls12381::G1";
        function type(): TypeDescriptor<G1>;
    }
    interface G2 {
        dummy_field: Boolean;
    }
    namespace G2 {
        const TYPE_QNAME = "0x2::bls12381::G2";
        function type(): TypeDescriptor<G2>;
    }
    interface GT {
        dummy_field: Boolean;
    }
    namespace GT {
        const TYPE_QNAME = "0x2::bls12381::GT";
        function type(): TypeDescriptor<GT>;
    }
    interface Scalar {
        dummy_field: Boolean;
    }
    namespace Scalar {
        const TYPE_QNAME = "0x2::bls12381::Scalar";
        function type(): TypeDescriptor<Scalar>;
    }
    namespace builder {
        function bls12381MinPkVerify(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function bls12381MinSigVerify(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function g1Add(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g1Div(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g1FromBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function g1Generator(tx: TransactionBlock, args: []): TransactionArgument & [];
        function g1Identity(tx: TransactionBlock, args: []): TransactionArgument & [];
        function g1Mul(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g1MultiScalarMultiplication(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g1Neg(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function g1Sub(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g2Add(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g2Div(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g2FromBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function g2Generator(tx: TransactionBlock, args: []): TransactionArgument & [];
        function g2Identity(tx: TransactionBlock, args: []): TransactionArgument & [];
        function g2Mul(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g2MultiScalarMultiplication(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function g2Neg(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function g2Sub(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function gtAdd(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function gtDiv(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function gtGenerator(tx: TransactionBlock, args: []): TransactionArgument & [];
        function gtIdentity(tx: TransactionBlock, args: []): TransactionArgument & [];
        function gtMul(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function gtNeg(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function gtSub(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function hashToG1(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function hashToG2(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function pairing(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function scalarAdd(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function scalarDiv(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function scalarFromBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function scalarFromU64(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function scalarInv(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function scalarMul(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function scalarNeg(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function scalarOne(tx: TransactionBlock, args: []): TransactionArgument & [];
        function scalarSub(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function scalarZero(tx: TransactionBlock, args: []): TransactionArgument & [];
    }
    namespace view {
        function bls12381MinPkVerify(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function bls12381MinSigVerify(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function g1Add(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1Div(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1FromBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1Generator(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1Identity(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1Mul(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1MultiScalarMultiplication(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1Neg(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g1Sub(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function g2Add(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2Div(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2FromBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2Generator(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2Identity(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2Mul(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2MultiScalarMultiplication(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2Neg(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function g2Sub(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function gtAdd(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function gtDiv(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function gtGenerator(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function gtIdentity(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function gtMul(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function gtNeg(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function gtSub(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function hashToG1(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G1>]>>;
        function hashToG2(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.G2>]>>;
        function pairing(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.GT>]>>;
        function scalarAdd(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarDiv(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarFromBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarFromU64(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarInv(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarMul(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarNeg(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarOne(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarSub(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
        function scalarZero(client: SuiClient, args: []): Promise<TypedDevInspectResults<[group_ops.Element<bls12381.Scalar>]>>;
    }
}
export declare namespace borrow {
    interface Borrow {
        ref: string;
        obj: object_.ID;
    }
    namespace Borrow {
        const TYPE_QNAME = "0x2::borrow::Borrow";
        function type(): TypeDescriptor<Borrow>;
    }
    interface Referent<T0> {
        id: string;
        value: _0x1.option.Option<T0>;
    }
    namespace Referent {
        const TYPE_QNAME = "0x2::borrow::Referent";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Referent<T0>>;
    }
    namespace builder {
        function borrow<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function destroy<T0 = any>(tx: TransactionBlock, args: [borrow.Referent<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function new_<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function putBack<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            borrow.Borrow | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function borrow<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0, borrow.Borrow]>>;
        function destroy<T0 = any>(client: SuiClient, args: [borrow.Referent<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function new_<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[borrow.Referent<T0>]>>;
        function putBack<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            borrow.Borrow | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace clock {
    interface Clock {
        id: object_.UID;
        timestamp_ms: bigint;
    }
    namespace Clock {
        const TYPE_QNAME = "0x2::clock::Clock";
        function type(): TypeDescriptor<Clock>;
    }
    namespace builder {
        function timestampMs(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function timestampMs(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace coin {
    type Coin<T> = string;
    namespace Coin {
        const TYPE_QNAME = "0x2::coin::Coin";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Coin<T0>>;
    }
    interface CoinMetadata<T0> {
        id: object_.UID;
        decimals: number;
        name: string;
        symbol: _0x1.ascii.String;
        description: string;
        icon_url: _0x1.option.Option<url.Url>;
    }
    namespace CoinMetadata {
        const TYPE_QNAME = "0x2::coin::CoinMetadata";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<CoinMetadata<T0>>;
    }
    interface CurrencyCreated<T0> {
        decimals: number;
    }
    namespace CurrencyCreated {
        const TYPE_QNAME = "0x2::coin::CurrencyCreated";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<CurrencyCreated<T0>>;
    }
    interface CurrencyCreatedInstance extends TypedEventInstance<CurrencyCreated<any>> {
        data_decoded: CurrencyCreated<any>;
        type_arguments: [string];
    }
    interface DenyCap<T0> {
        id: object_.UID;
    }
    namespace DenyCap {
        const TYPE_QNAME = "0x2::coin::DenyCap";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<DenyCap<T0>>;
    }
    interface DenyCapV2<T0> {
        id: object_.UID;
        allow_global_pause: Boolean;
    }
    namespace DenyCapV2 {
        const TYPE_QNAME = "0x2::coin::DenyCapV2";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<DenyCapV2<T0>>;
    }
    interface RegulatedCoinMetadata<T0> {
        id: object_.UID;
        coin_metadata_object: object_.ID;
        deny_cap_object: object_.ID;
    }
    namespace RegulatedCoinMetadata {
        const TYPE_QNAME = "0x2::coin::RegulatedCoinMetadata";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<RegulatedCoinMetadata<T0>>;
    }
    interface TreasuryCap<T0> {
        id: object_.UID;
        total_supply: balance.Supply<T0>;
    }
    namespace TreasuryCap {
        const TYPE_QNAME = "0x2::coin::TreasuryCap";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TreasuryCap<T0>>;
    }
    namespace builder {
        function balance<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function balanceMut<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function burn<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function createCurrency<T0 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<url.Url> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function createRegulatedCurrency<T0 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<url.Url> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function createRegulatedCurrencyV2<T0 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<url.Url> | TransactionArgument,
            Boolean | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function denyListAdd<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function denyListContains<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function denyListRemove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function denyListV2Add<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function denyListV2ContainsCurrentEpoch<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function denyListV2ContainsNextEpoch<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function denyListV2DisableGlobalPause<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function denyListV2EnableGlobalPause<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function denyListV2IsGlobalPauseEnabledCurrentEpoch<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function denyListV2IsGlobalPauseEnabledNextEpoch<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function denyListV2Remove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function destroyZero<T0 = any>(tx: TransactionBlock, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function divideIntoN<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function fromBalance<T0 = any>(tx: TransactionBlock, args: [balance.Balance<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function getDecimals<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function getDescription<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function getIconUrl<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function getName<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function getSymbol<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function intoBalance<T0 = any>(tx: TransactionBlock, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function join<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function migrateRegulatedCurrencyToV2<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.DenyCap<T0> | TransactionArgument,
            Boolean | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function mint<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function mintAndTransfer<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function mintBalance<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function put<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function split<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function supply<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function supplyImmut<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function supplyMut<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function take<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function totalSupply<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function treasuryIntoSupply<T0 = any>(tx: TransactionBlock, args: [coin.TreasuryCap<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function updateDescription<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateIconUrl<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.ascii.String | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateName<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateSymbol<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.ascii.String | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function value<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function zero<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
    }
    namespace view {
        function balance<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function balanceMut<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function burn<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function createCurrency<T0 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<url.Url> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.TreasuryCap<T0>, coin.CoinMetadata<T0>]>>;
        function createRegulatedCurrency<T0 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<url.Url> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[
            coin.TreasuryCap<T0>,
            coin.DenyCap<T0>,
            coin.CoinMetadata<T0>
        ]>>;
        function createRegulatedCurrencyV2<T0 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<url.Url> | TransactionArgument,
            Boolean | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[
            coin.TreasuryCap<T0>,
            coin.DenyCapV2<T0>,
            coin.CoinMetadata<T0>
        ]>>;
        function denyListAdd<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function denyListContains<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function denyListRemove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function denyListV2Add<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function denyListV2ContainsCurrentEpoch<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function denyListV2ContainsNextEpoch<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function denyListV2DisableGlobalPause<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function denyListV2EnableGlobalPause<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function denyListV2IsGlobalPauseEnabledCurrentEpoch<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function denyListV2IsGlobalPauseEnabledNextEpoch<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function denyListV2Remove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function destroyZero<T0 = any>(client: SuiClient, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function divideIntoN<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<T0>[]]>>;
        function fromBalance<T0 = any>(client: SuiClient, args: [balance.Balance<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<T0>]>>;
        function getDecimals<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[number]>>;
        function getDescription<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function getIconUrl<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<url.Url>]>>;
        function getName<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function getSymbol<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[_0x1.ascii.String]>>;
        function intoBalance<T0 = any>(client: SuiClient, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Balance<T0>]>>;
        function join<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function migrateRegulatedCurrencyToV2<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.DenyCap<T0> | TransactionArgument,
            Boolean | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.DenyCapV2<T0>]>>;
        function mint<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<T0>]>>;
        function mintAndTransfer<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function mintBalance<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Balance<T0>]>>;
        function put<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function split<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<T0>]>>;
        function supply<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function supplyImmut<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function supplyMut<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function take<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<T0>]>>;
        function totalSupply<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function treasuryIntoSupply<T0 = any>(client: SuiClient, args: [coin.TreasuryCap<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[balance.Supply<T0>]>>;
        function updateDescription<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function updateIconUrl<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.ascii.String | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function updateName<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function updateSymbol<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.ascii.String | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function value<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function zero<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<T0>]>>;
    }
}
export declare namespace config {
    interface Config<T0> {
        id: object_.UID;
    }
    namespace Config {
        const TYPE_QNAME = "0x2::config::Config";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Config<T0>>;
    }
    interface Setting<T0> {
        data: _0x1.option.Option<config.SettingData<T0>>;
    }
    namespace Setting {
        const TYPE_QNAME = "0x2::config::Setting";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Setting<T0>>;
    }
    interface SettingData<T0> {
        newer_value_epoch: bigint;
        newer_value: _0x1.option.Option<T0>;
        older_value_opt: _0x1.option.Option<T0>;
    }
    namespace SettingData {
        const TYPE_QNAME = "0x2::config::SettingData";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<SettingData<T0>>;
    }
    namespace builder {
        function addForNextEpoch<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument,
            T2 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrowForNextEpochMut<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function existsWithType<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function existsWithTypeForNextEpoch<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function new_<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function readSetting<T0 = any, T1 = any>(tx: TransactionBlock, args: [object_.ID | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function readSettingForNextEpoch<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function removeForNextEpoch<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function share<T0 = any>(tx: TransactionBlock, args: [config.Config<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function transfer<T0 = any>(tx: TransactionBlock, args: [
            config.Config<T0> | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function addForNextEpoch<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument,
            T2 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[_0x1.option.Option<T2>]>>;
        function borrowForNextEpochMut<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[string]>>;
        function existsWithType<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function existsWithTypeForNextEpoch<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function new_<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[config.Config<T0>]>>;
        function readSetting<T0 = any, T1 = any>(client: SuiClient, args: [object_.ID | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<T1>]>>;
        function readSettingForNextEpoch<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[_0x1.option.Option<T2>]>>;
        function removeForNextEpoch<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[_0x1.option.Option<T2>]>>;
        function share<T0 = any>(client: SuiClient, args: [config.Config<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function transfer<T0 = any>(client: SuiClient, args: [
            config.Config<T0> | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace deny_list {
    interface AddressKey {
        pos0: string;
    }
    namespace AddressKey {
        const TYPE_QNAME = "0x2::deny_list::AddressKey";
        function type(): TypeDescriptor<AddressKey>;
    }
    interface AddressKeyInstance extends TypedEventInstance<AddressKey> {
        data_decoded: AddressKey;
        type_arguments: [];
    }
    interface ConfigKey {
        per_type_index: bigint;
        per_type_key: number[];
    }
    namespace ConfigKey {
        const TYPE_QNAME = "0x2::deny_list::ConfigKey";
        function type(): TypeDescriptor<ConfigKey>;
    }
    interface ConfigKeyInstance extends TypedEventInstance<ConfigKey> {
        data_decoded: ConfigKey;
        type_arguments: [];
    }
    interface ConfigWriteCap {
        dummy_field: Boolean;
    }
    namespace ConfigWriteCap {
        const TYPE_QNAME = "0x2::deny_list::ConfigWriteCap";
        function type(): TypeDescriptor<ConfigWriteCap>;
    }
    interface DenyList {
        id: object_.UID;
        lists: bag.Bag;
    }
    namespace DenyList {
        const TYPE_QNAME = "0x2::deny_list::DenyList";
        function type(): TypeDescriptor<DenyList>;
    }
    interface GlobalPauseKey {
        dummy_field: Boolean;
    }
    namespace GlobalPauseKey {
        const TYPE_QNAME = "0x2::deny_list::GlobalPauseKey";
        function type(): TypeDescriptor<GlobalPauseKey>;
    }
    interface GlobalPauseKeyInstance extends TypedEventInstance<GlobalPauseKey> {
        data_decoded: GlobalPauseKey;
        type_arguments: [];
    }
    interface PerTypeConfigCreated {
        key: deny_list.ConfigKey;
        config_id: object_.ID;
    }
    namespace PerTypeConfigCreated {
        const TYPE_QNAME = "0x2::deny_list::PerTypeConfigCreated";
        function type(): TypeDescriptor<PerTypeConfigCreated>;
    }
    interface PerTypeConfigCreatedInstance extends TypedEventInstance<PerTypeConfigCreated> {
        data_decoded: PerTypeConfigCreated;
        type_arguments: [];
    }
    interface PerTypeList {
        id: object_.UID;
        denied_count: table.Table<string, bigint>;
        denied_addresses: table.Table<number[], vec_set.VecSet<string>>;
    }
    namespace PerTypeList {
        const TYPE_QNAME = "0x2::deny_list::PerTypeList";
        function type(): TypeDescriptor<PerTypeList>;
    }
    namespace builder {
        function migrateV1ToV2(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v1Add(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v1Contains(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v1Remove(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2Add(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2ContainsCurrentEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2ContainsNextEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2DisableGlobalPause(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2EnableGlobalPause(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2IsGlobalPauseEnabledCurrentEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2IsGlobalPauseEnabledNextEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function v2Remove(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function migrateV1ToV2(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function v1Add(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function v1Contains(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function v1Remove(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function v2Add(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function v2ContainsCurrentEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function v2ContainsNextEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function v2DisableGlobalPause(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function v2EnableGlobalPause(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function v2IsGlobalPauseEnabledCurrentEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function v2IsGlobalPauseEnabledNextEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function v2Remove(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace display {
    interface Display<T0> {
        id: object_.UID;
        fields: vec_map.VecMap<string, string>;
        version: number;
    }
    namespace Display {
        const TYPE_QNAME = "0x2::display::Display";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Display<T0>>;
    }
    interface DisplayCreated<T0> {
        id: object_.ID;
    }
    namespace DisplayCreated {
        const TYPE_QNAME = "0x2::display::DisplayCreated";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<DisplayCreated<T0>>;
    }
    interface DisplayCreatedInstance extends TypedEventInstance<DisplayCreated<any>> {
        data_decoded: DisplayCreated<any>;
        type_arguments: [string];
    }
    interface VersionUpdated<T0> {
        id: object_.ID;
        version: number;
        fields: vec_map.VecMap<string, string>;
    }
    namespace VersionUpdated {
        const TYPE_QNAME = "0x2::display::VersionUpdated";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<VersionUpdated<T0>>;
    }
    interface VersionUpdatedInstance extends TypedEventInstance<VersionUpdated<any>> {
        data_decoded: VersionUpdated<any>;
        type_arguments: [string];
    }
    namespace builder {
        function add<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function addMultiple<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function createAndKeep<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function edit<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function fields<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function isAuthorized<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function new_<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function newWithFields<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function remove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateVersion<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function version<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function add<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function addMultiple<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function createAndKeep<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function edit<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function fields<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function isAuthorized<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function new_<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[display.Display<T0>]>>;
        function newWithFields<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[display.Display<T0>]>>;
        function remove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function updateVersion<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function version<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[number]>>;
    }
}
export declare namespace dynamic_field {
    interface Field<T0, T1> {
        id: object_.UID;
        name: T0;
        value: T1;
    }
    namespace Field {
        const TYPE_QNAME = "0x2::dynamic_field::Field";
        function type<T0, T1>(arg0?: TypeDescriptor<T0>, arg1?: TypeDescriptor<T1>): TypeDescriptor<Field<T0, T1>>;
    }
    namespace builder {
        function add<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function addChildObject<T0 = any>(tx: TransactionBlock, args: [string | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowChildObject<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowChildObjectMut<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function exists_<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function existsWithType<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function fieldInfo<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function fieldInfoMut<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function hasChildObject(tx: TransactionBlock, args: [string | TransactionArgument, string | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function hasChildObjectWithTy<T0 = any>(tx: TransactionBlock, args: [string | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function hashTypeAndKey<T0 = any>(tx: TransactionBlock, args: [string | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function removeChildObject<T0 = any>(tx: TransactionBlock, args: [string | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function removeIfExists<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function add<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function addChildObject<T0 = any>(client: SuiClient, args: [string | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function borrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowChildObject<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowChildObjectMut<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function exists_<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function existsWithType<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function fieldInfo<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string, string]>>;
        function fieldInfoMut<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string, string]>>;
        function hasChildObject(client: SuiClient, args: [string | TransactionArgument, string | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function hasChildObjectWithTy<T0 = any>(client: SuiClient, args: [string | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function hashTypeAndKey<T0 = any>(client: SuiClient, args: [string | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
        function removeChildObject<T0 = any>(client: SuiClient, args: [string | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function removeIfExists<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<T1>]>>;
    }
}
export declare namespace dynamic_object_field {
    interface Wrapper<T0> {
        name: T0;
    }
    namespace Wrapper {
        const TYPE_QNAME = "0x2::dynamic_object_field::Wrapper";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Wrapper<T0>>;
    }
    interface WrapperInstance extends TypedEventInstance<Wrapper<any>> {
        data_decoded: Wrapper<any>;
        type_arguments: [string];
    }
    namespace builder {
        function add<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function exists_<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function existsWithType<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function id<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function internalAdd<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function internalBorrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function internalBorrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function internalExistsWithType<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function internalRemove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function add<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function borrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function exists_<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function existsWithType<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function id<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<object_.ID>]>>;
        function internalAdd<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function internalBorrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function internalBorrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function internalExistsWithType<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function internalRemove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
    }
}
export declare namespace ecdsa_k1 {
    namespace builder {
        function decompressPubkey(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function secp256k1Ecrecover(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function secp256k1Verify(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function decompressPubkey(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function secp256k1Ecrecover(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[number[]]>>;
        function secp256k1Verify(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace ecdsa_r1 {
    namespace builder {
        function secp256r1Ecrecover(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function secp256r1Verify(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function secp256r1Ecrecover(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[number[]]>>;
        function secp256r1Verify(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace ecvrf {
    namespace builder {
        function ecvrfVerify(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function ecvrfVerify(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace ed25519 {
    namespace builder {
        function ed25519Verify(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function ed25519Verify(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace event {
    namespace builder {
        function emit<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function emit<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace groth16 {
    interface Curve {
        id: number;
    }
    namespace Curve {
        const TYPE_QNAME = "0x2::groth16::Curve";
        function type(): TypeDescriptor<Curve>;
    }
    interface CurveInstance extends TypedEventInstance<Curve> {
        data_decoded: Curve;
        type_arguments: [];
    }
    interface PreparedVerifyingKey {
        vk_gamma_abc_g1_bytes: number[];
        alpha_g1_beta_g2_bytes: number[];
        gamma_g2_neg_pc_bytes: number[];
        delta_g2_neg_pc_bytes: number[];
    }
    namespace PreparedVerifyingKey {
        const TYPE_QNAME = "0x2::groth16::PreparedVerifyingKey";
        function type(): TypeDescriptor<PreparedVerifyingKey>;
    }
    interface PreparedVerifyingKeyInstance extends TypedEventInstance<PreparedVerifyingKey> {
        data_decoded: PreparedVerifyingKey;
        type_arguments: [];
    }
    interface ProofPoints {
        bytes: number[];
    }
    namespace ProofPoints {
        const TYPE_QNAME = "0x2::groth16::ProofPoints";
        function type(): TypeDescriptor<ProofPoints>;
    }
    interface ProofPointsInstance extends TypedEventInstance<ProofPoints> {
        data_decoded: ProofPoints;
        type_arguments: [];
    }
    interface PublicProofInputs {
        bytes: number[];
    }
    namespace PublicProofInputs {
        const TYPE_QNAME = "0x2::groth16::PublicProofInputs";
        function type(): TypeDescriptor<PublicProofInputs>;
    }
    interface PublicProofInputsInstance extends TypedEventInstance<PublicProofInputs> {
        data_decoded: PublicProofInputs;
        type_arguments: [];
    }
    namespace builder {
        function bls12381(tx: TransactionBlock, args: []): TransactionArgument & [];
        function bn254(tx: TransactionBlock, args: []): TransactionArgument & [];
        function prepareVerifyingKey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function proofPointsFromBytes(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function publicProofInputsFromBytes(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function pvkFromBytes(tx: TransactionBlock, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function pvkToBytes(tx: TransactionBlock, args: [groth16.PreparedVerifyingKey | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function verifyGroth16Proof(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function bls12381(client: SuiClient, args: []): Promise<TypedDevInspectResults<[groth16.Curve]>>;
        function bn254(client: SuiClient, args: []): Promise<TypedDevInspectResults<[groth16.Curve]>>;
        function prepareVerifyingKey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[groth16.PreparedVerifyingKey]>>;
        function proofPointsFromBytes(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[groth16.ProofPoints]>>;
        function publicProofInputsFromBytes(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[groth16.PublicProofInputs]>>;
        function pvkFromBytes(client: SuiClient, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[groth16.PreparedVerifyingKey]>>;
        function pvkToBytes(client: SuiClient, args: [groth16.PreparedVerifyingKey | TransactionArgument]): Promise<TypedDevInspectResults<[number[][]]>>;
        function verifyGroth16Proof(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace group_ops {
    interface Element<T0> {
        bytes: number[];
    }
    namespace Element {
        const TYPE_QNAME = "0x2::group_ops::Element";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Element<T0>>;
    }
    interface ElementInstance extends TypedEventInstance<Element<any>> {
        data_decoded: Element<any>;
        type_arguments: [string];
    }
    namespace builder {
        function add<T0 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function bytes<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function div<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function equal<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function fromBytes<T0 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            Boolean | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function hashTo<T0 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function mul<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function multiScalarMultiplication<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function pairing<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function setAsPrefix(tx: TransactionBlock, args: [
            bigint | TransactionArgument,
            Boolean | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function sub<T0 = any>(tx: TransactionBlock, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function add<T0 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[group_ops.Element<T0>]>>;
        function bytes<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function div<T0 = any, T1 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[group_ops.Element<T1>]>>;
        function equal<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function fromBytes<T0 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            Boolean | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[group_ops.Element<T0>]>>;
        function hashTo<T0 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[group_ops.Element<T0>]>>;
        function mul<T0 = any, T1 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[group_ops.Element<T1>]>>;
        function multiScalarMultiplication<T0 = any, T1 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[group_ops.Element<T1>]>>;
        function pairing<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[group_ops.Element<T2>]>>;
        function setAsPrefix(client: SuiClient, args: [
            bigint | TransactionArgument,
            Boolean | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function sub<T0 = any>(client: SuiClient, args: [
            number | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[group_ops.Element<T0>]>>;
    }
}
export declare namespace hash {
    namespace builder {
        function blake2b256(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function keccak256(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function blake2b256(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function keccak256(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
    }
}
export declare namespace hex {
    namespace builder {
        function decode(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function encode(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function decode(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function encode(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
    }
}
export declare namespace hmac {
    namespace builder {
        function hmacSha3256(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function hmacSha3256(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[number[]]>>;
    }
}
export declare namespace kiosk {
    interface Borrow {
        kiosk_id: object_.ID;
        item_id: object_.ID;
    }
    namespace Borrow {
        const TYPE_QNAME = "0x2::kiosk::Borrow";
        function type(): TypeDescriptor<Borrow>;
    }
    interface Item {
        id: object_.ID;
    }
    namespace Item {
        const TYPE_QNAME = "0x2::kiosk::Item";
        function type(): TypeDescriptor<Item>;
    }
    interface ItemInstance extends TypedEventInstance<Item> {
        data_decoded: Item;
        type_arguments: [];
    }
    interface ItemDelisted<T0> {
        kiosk: object_.ID;
        id: object_.ID;
    }
    namespace ItemDelisted {
        const TYPE_QNAME = "0x2::kiosk::ItemDelisted";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<ItemDelisted<T0>>;
    }
    interface ItemDelistedInstance extends TypedEventInstance<ItemDelisted<any>> {
        data_decoded: ItemDelisted<any>;
        type_arguments: [string];
    }
    interface ItemListed<T0> {
        kiosk: object_.ID;
        id: object_.ID;
        price: bigint;
    }
    namespace ItemListed {
        const TYPE_QNAME = "0x2::kiosk::ItemListed";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<ItemListed<T0>>;
    }
    interface ItemListedInstance extends TypedEventInstance<ItemListed<any>> {
        data_decoded: ItemListed<any>;
        type_arguments: [string];
    }
    interface ItemPurchased<T0> {
        kiosk: object_.ID;
        id: object_.ID;
        price: bigint;
    }
    namespace ItemPurchased {
        const TYPE_QNAME = "0x2::kiosk::ItemPurchased";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<ItemPurchased<T0>>;
    }
    interface ItemPurchasedInstance extends TypedEventInstance<ItemPurchased<any>> {
        data_decoded: ItemPurchased<any>;
        type_arguments: [string];
    }
    interface Kiosk {
        id: object_.UID;
        profits: balance.Balance<sui.SUI>;
        owner: string;
        item_count: number;
        allow_extensions: Boolean;
    }
    namespace Kiosk {
        const TYPE_QNAME = "0x2::kiosk::Kiosk";
        function type(): TypeDescriptor<Kiosk>;
    }
    interface KioskOwnerCap {
        id: object_.UID;
        for: object_.ID;
    }
    namespace KioskOwnerCap {
        const TYPE_QNAME = "0x2::kiosk::KioskOwnerCap";
        function type(): TypeDescriptor<KioskOwnerCap>;
    }
    interface Listing {
        id: object_.ID;
        is_exclusive: Boolean;
    }
    namespace Listing {
        const TYPE_QNAME = "0x2::kiosk::Listing";
        function type(): TypeDescriptor<Listing>;
    }
    interface ListingInstance extends TypedEventInstance<Listing> {
        data_decoded: Listing;
        type_arguments: [];
    }
    interface Lock {
        id: object_.ID;
    }
    namespace Lock {
        const TYPE_QNAME = "0x2::kiosk::Lock";
        function type(): TypeDescriptor<Lock>;
    }
    interface LockInstance extends TypedEventInstance<Lock> {
        data_decoded: Lock;
        type_arguments: [];
    }
    interface PurchaseCap<T0> {
        id: object_.UID;
        kiosk_id: object_.ID;
        item_id: object_.ID;
        min_price: bigint;
    }
    namespace PurchaseCap {
        const TYPE_QNAME = "0x2::kiosk::PurchaseCap";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<PurchaseCap<T0>>;
    }
    namespace builder {
        function borrow<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrowMut<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrowVal<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function closeAndWithdraw(tx: TransactionBlock, args: [
            kiosk.Kiosk | TransactionArgument,
            kiosk.KioskOwnerCap | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function default_(tx: TransactionBlock, args: []): TransactionArgument & [];
        function delist<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function hasAccess(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function hasItem(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function hasItemWithType<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isListed(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isListedExclusively(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isLocked(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function itemCount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function kioskOwnerCapFor(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function list<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function listWithPurchaseCap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function lock<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function lockInternal<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function new_(tx: TransactionBlock, args: []): TransactionArgument & [];
        function owner(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function place<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function placeAndList<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function placeInternal<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function profitsAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function profitsMut(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function purchase<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument,
            coin.Coin<sui.SUI> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function purchaseCapItem<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function purchaseCapKiosk<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function purchaseCapMinPrice<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function purchaseWithCap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            kiosk.PurchaseCap<T0> | TransactionArgument,
            coin.Coin<sui.SUI> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function returnPurchaseCap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            kiosk.PurchaseCap<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function returnVal<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            kiosk.Borrow | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function setAllowExtensions(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            Boolean | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function setOwner(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function setOwnerCustom(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function take<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function uid(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function uidMut(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function uidMutAsOwner(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function uidMutInternal(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function withdraw(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function borrow<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowVal<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0, kiosk.Borrow]>>;
        function closeAndWithdraw(client: SuiClient, args: [
            kiosk.Kiosk | TransactionArgument,
            kiosk.KioskOwnerCap | TransactionArgument
        ]): Promise<TypedDevInspectResults<[coin.Coin<sui.SUI>]>>;
        function delist<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function hasAccess(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function hasItem(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function hasItemWithType<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isListed(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isListedExclusively(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isLocked(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function itemCount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function kioskOwnerCapFor(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function list<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function listWithPurchaseCap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[kiosk.PurchaseCap<T0>]>>;
        function lock<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function lockInternal<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function new_(client: SuiClient, args: []): Promise<TypedDevInspectResults<[kiosk.Kiosk, kiosk.KioskOwnerCap]>>;
        function owner(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function place<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function placeAndList<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function placeInternal<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function profitsAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function profitsMut(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function purchase<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument,
            coin.Coin<sui.SUI> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0, transfer_policy.TransferRequest<T0>]>>;
        function purchaseCapItem<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function purchaseCapKiosk<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function purchaseCapMinPrice<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function purchaseWithCap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            kiosk.PurchaseCap<T0> | TransactionArgument,
            coin.Coin<sui.SUI> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0, transfer_policy.TransferRequest<T0>]>>;
        function returnPurchaseCap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            kiosk.PurchaseCap<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function returnVal<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            kiosk.Borrow | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function setAllowExtensions(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            Boolean | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function setOwner(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function setOwnerCustom(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function take<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function uid(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function uidMut(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function uidMutAsOwner(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function uidMutInternal(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function withdraw(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument
        ]): Promise<TypedDevInspectResults<[coin.Coin<sui.SUI>]>>;
    }
}
export declare namespace kiosk_extension {
    interface Extension {
        storage: bag.Bag;
        permissions: bigint;
        is_enabled: Boolean;
    }
    namespace Extension {
        const TYPE_QNAME = "0x2::kiosk_extension::Extension";
        function type(): TypeDescriptor<Extension>;
    }
    interface ExtensionKey<T0> {
        dummy_field: Boolean;
    }
    namespace ExtensionKey {
        const TYPE_QNAME = "0x2::kiosk_extension::ExtensionKey";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<ExtensionKey<T0>>;
    }
    interface ExtensionKeyInstance extends TypedEventInstance<ExtensionKey<any>> {
        data_decoded: ExtensionKey<any>;
        type_arguments: [string];
    }
    namespace builder {
        function add<T0 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function canLock<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function canPlace<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function disable<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function enable<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isEnabled<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function isInstalled<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function lock<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function place<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function remove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function storage<T0 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function storageMut<T0 = any>(tx: TransactionBlock, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function add<T0 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function canLock<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function canPlace<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function disable<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function enable<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function isEnabled<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isInstalled<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function lock<T0 = any, T1 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function place<T0 = any, T1 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function remove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function storage<T0 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function storageMut<T0 = any>(client: SuiClient, args: [
            T0 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
    }
}
export declare namespace linked_table {
    interface LinkedTable<T0, T1> {
        id: object_.UID;
        size: bigint;
        head: _0x1.option.Option<T0>;
        tail: _0x1.option.Option<T0>;
    }
    namespace LinkedTable {
        const TYPE_QNAME = "0x2::linked_table::LinkedTable";
        function type<T0, T1>(arg0?: TypeDescriptor<T0>, arg1?: TypeDescriptor<T1>): TypeDescriptor<LinkedTable<T0, T1>>;
    }
    interface Node<T0, T1> {
        prev: _0x1.option.Option<T0>;
        next: _0x1.option.Option<T0>;
        value: T1;
    }
    namespace Node {
        const TYPE_QNAME = "0x2::linked_table::Node";
        function type<T0, T1>(arg0?: TypeDescriptor<T0>, arg1?: TypeDescriptor<T1>): TypeDescriptor<Node<T0, T1>>;
    }
    namespace builder {
        function back<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function borrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function contains<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [linked_table.LinkedTable<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function drop<T0 = any, T1 = any>(tx: TransactionBlock, args: [linked_table.LinkedTable<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function front<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function isEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function length<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function new_<T0 = any, T1 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [];
        function next<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function popBack<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function popFront<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function prev<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pushBack<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function pushFront<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function back<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function contains<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyEmpty<T0 = any, T1 = any>(client: SuiClient, args: [linked_table.LinkedTable<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function drop<T0 = any, T1 = any>(client: SuiClient, args: [linked_table.LinkedTable<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function front<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function isEmpty<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function new_<T0 = any, T1 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[linked_table.LinkedTable<T0, T1>]>>;
        function next<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function popBack<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T0, T1]>>;
        function popFront<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T0, T1]>>;
        function prev<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function pushBack<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function pushFront<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
    }
}
export declare namespace math {
    namespace builder {
        function diff(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function divideAndRoundUp(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function max(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function min(tx: TransactionBlock, args: [bigint | TransactionArgument, bigint | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function pow(tx: TransactionBlock, args: [bigint | TransactionArgument, number | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function sqrt(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function sqrtU128(tx: TransactionBlock, args: [bigint | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function diff(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function divideAndRoundUp(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function max(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function min(client: SuiClient, args: [bigint | TransactionArgument, bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function pow(client: SuiClient, args: [bigint | TransactionArgument, number | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function sqrt(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function sqrtU128(client: SuiClient, args: [bigint | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace object_ {
    type ID = string;
    namespace ID {
        const TYPE_QNAME = "0x2::object::ID";
        function type(): TypeDescriptor<ID>;
    }
    interface UID {
        id: object_.ID;
    }
    namespace UID {
        const TYPE_QNAME = "0x2::object::UID";
        function type(): TypeDescriptor<UID>;
    }
    namespace builder {
        function authenticatorState(tx: TransactionBlock, args: []): TransactionArgument & [];
        function borrowId<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function clock(tx: TransactionBlock, args: []): TransactionArgument & [];
        function delete_(tx: TransactionBlock, args: [object_.UID | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function id<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function idAddress<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function idBytes<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function idFromAddress(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function idFromBytes(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function idToAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function idToBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function new_(tx: TransactionBlock, args: []): TransactionArgument & [];
        function newUidFromHash(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function randomnessState(tx: TransactionBlock, args: []): TransactionArgument & [];
        function suiDenyListObjectId(tx: TransactionBlock, args: []): TransactionArgument & [];
        function uidAsInner(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function uidToAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function uidToBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function uidToInner(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function authenticatorState(client: SuiClient, args: []): Promise<TypedDevInspectResults<[object_.UID]>>;
        function borrowId<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function clock(client: SuiClient, args: []): Promise<TypedDevInspectResults<[object_.UID]>>;
        function delete_(client: SuiClient, args: [object_.UID | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function id<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function idAddress<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function idBytes<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[number[]]>>;
        function idFromAddress(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function idFromBytes(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function idToAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function idToBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function new_(client: SuiClient, args: []): Promise<TypedDevInspectResults<[object_.UID]>>;
        function newUidFromHash(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[object_.UID]>>;
        function randomnessState(client: SuiClient, args: []): Promise<TypedDevInspectResults<[object_.UID]>>;
        function suiDenyListObjectId(client: SuiClient, args: []): Promise<TypedDevInspectResults<[object_.UID]>>;
        function uidAsInner(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function uidToAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function uidToBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function uidToInner(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
    }
}
export declare namespace object_bag {
    interface ObjectBag {
        id: object_.UID;
        size: bigint;
    }
    namespace ObjectBag {
        const TYPE_QNAME = "0x2::object_bag::ObjectBag";
        function type(): TypeDescriptor<ObjectBag>;
    }
    namespace builder {
        function add<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function contains<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function containsWithType<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty(tx: TransactionBlock, args: [object_bag.ObjectBag | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isEmpty(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function length(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function new_(tx: TransactionBlock, args: []): TransactionArgument & [];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function valueId<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function add<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function borrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function contains<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function containsWithType<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyEmpty(client: SuiClient, args: [object_bag.ObjectBag | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function isEmpty(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function new_(client: SuiClient, args: []): Promise<TypedDevInspectResults<[object_bag.ObjectBag]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
        function valueId<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<object_.ID>]>>;
    }
}
export declare namespace object_table {
    interface ObjectTable<T0, T1> {
        id: object_.UID;
        size: bigint;
    }
    namespace ObjectTable {
        const TYPE_QNAME = "0x2::object_table::ObjectTable";
        function type<T0, T1>(arg0?: TypeDescriptor<T0>, arg1?: TypeDescriptor<T1>): TypeDescriptor<ObjectTable<T0, T1>>;
    }
    namespace builder {
        function add<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function contains<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [object_table.ObjectTable<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function isEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function length<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function new_<T0 = any, T1 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function valueId<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function add<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function borrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function contains<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyEmpty<T0 = any, T1 = any>(client: SuiClient, args: [object_table.ObjectTable<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function isEmpty<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function new_<T0 = any, T1 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[object_table.ObjectTable<T0, T1>]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
        function valueId<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<object_.ID>]>>;
    }
}
export declare namespace package_ {
    interface Publisher {
        id: object_.UID;
        package: _0x1.ascii.String;
        module_name: _0x1.ascii.String;
    }
    namespace Publisher {
        const TYPE_QNAME = "0x2::package::Publisher";
        function type(): TypeDescriptor<Publisher>;
    }
    interface UpgradeCap {
        id: object_.UID;
        package: object_.ID;
        version: bigint;
        policy: number;
    }
    namespace UpgradeCap {
        const TYPE_QNAME = "0x2::package::UpgradeCap";
        function type(): TypeDescriptor<UpgradeCap>;
    }
    interface UpgradeReceipt {
        cap: object_.ID;
        package: object_.ID;
    }
    namespace UpgradeReceipt {
        const TYPE_QNAME = "0x2::package::UpgradeReceipt";
        function type(): TypeDescriptor<UpgradeReceipt>;
    }
    interface UpgradeTicket {
        cap: object_.ID;
        package: object_.ID;
        policy: number;
        digest: number[];
    }
    namespace UpgradeTicket {
        const TYPE_QNAME = "0x2::package::UpgradeTicket";
        function type(): TypeDescriptor<UpgradeTicket>;
    }
    namespace builder {
        function additivePolicy(tx: TransactionBlock, args: []): TransactionArgument & [];
        function authorizeUpgrade(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function burnPublisher(tx: TransactionBlock, args: [package_.Publisher | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function claim<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function claimAndKeep<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function commitUpgrade(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            package_.UpgradeReceipt | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function compatiblePolicy(tx: TransactionBlock, args: []): TransactionArgument & [];
        function depOnlyPolicy(tx: TransactionBlock, args: []): TransactionArgument & [];
        function fromModule<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function fromPackage<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function makeImmutable(tx: TransactionBlock, args: [package_.UpgradeCap | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function onlyAdditiveUpgrades(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function onlyDepUpgrades(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function publishedModule(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function publishedPackage(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function receiptCap(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function receiptPackage(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function ticketDigest(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function ticketPackage(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function ticketPolicy(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function upgradePackage(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function upgradePolicy(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function version(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function additivePolicy(client: SuiClient, args: []): Promise<TypedDevInspectResults<[number]>>;
        function authorizeUpgrade(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[package_.UpgradeTicket]>>;
        function burnPublisher(client: SuiClient, args: [package_.Publisher | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function claim<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[package_.Publisher]>>;
        function claimAndKeep<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function commitUpgrade(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            package_.UpgradeReceipt | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function compatiblePolicy(client: SuiClient, args: []): Promise<TypedDevInspectResults<[number]>>;
        function depOnlyPolicy(client: SuiClient, args: []): Promise<TypedDevInspectResults<[number]>>;
        function fromModule<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function fromPackage<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function makeImmutable(client: SuiClient, args: [package_.UpgradeCap | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function onlyAdditiveUpgrades(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function onlyDepUpgrades(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function publishedModule(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function publishedPackage(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function receiptCap(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function receiptPackage(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function ticketDigest(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function ticketPackage(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function ticketPolicy(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function upgradePackage(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function upgradePolicy(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function version(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace pay {
    namespace builder {
        function divideAndKeep<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function join<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function joinVec<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function joinVecAndTransfer<T0 = any>(tx: TransactionBlock, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function keep<T0 = any>(tx: TransactionBlock, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function split<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function splitAndTransfer<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function splitVec<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function divideAndKeep<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function join<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function joinVec<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function joinVecAndTransfer<T0 = any>(client: SuiClient, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function keep<T0 = any>(client: SuiClient, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function split<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function splitAndTransfer<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function splitVec<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace poseidon {
    namespace builder {
        function poseidonBn254(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function poseidonBn254(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace priority_queue {
    interface Entry<T0> {
        priority: bigint;
        value: T0;
    }
    namespace Entry {
        const TYPE_QNAME = "0x2::priority_queue::Entry";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Entry<T0>>;
    }
    interface PriorityQueue<T0> {
        entries: priority_queue.Entry<T0>[];
    }
    namespace PriorityQueue {
        const TYPE_QNAME = "0x2::priority_queue::PriorityQueue";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<PriorityQueue<T0>>;
    }
    namespace builder {
        function createEntries<T0 = any>(tx: TransactionBlock, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function insert<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function new_<T0 = any>(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function newEntry<T0 = any>(tx: TransactionBlock, args: [bigint | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function popMax<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function priorities<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function createEntries<T0 = any>(client: SuiClient, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[priority_queue.Entry<T0>[]]>>;
        function insert<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function new_<T0 = any>(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[priority_queue.PriorityQueue<T0>]>>;
        function newEntry<T0 = any>(client: SuiClient, args: [bigint | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[priority_queue.Entry<T0>]>>;
        function popMax<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint, T0]>>;
        function priorities<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint[]]>>;
    }
}
export declare namespace prover {
    namespace builder { }
    namespace view { }
}
export declare namespace random {
    interface Random {
        id: object_.UID;
        inner: versioned.Versioned;
    }
    namespace Random {
        const TYPE_QNAME = "0x2::random::Random";
        function type(): TypeDescriptor<Random>;
    }
    interface RandomGenerator {
        seed: number[];
        counter: number;
        buffer: number[];
    }
    namespace RandomGenerator {
        const TYPE_QNAME = "0x2::random::RandomGenerator";
        function type(): TypeDescriptor<RandomGenerator>;
    }
    interface RandomInner {
        version: bigint;
        epoch: bigint;
        randomness_round: bigint;
        random_bytes: number[];
    }
    namespace RandomInner {
        const TYPE_QNAME = "0x2::random::RandomInner";
        function type(): TypeDescriptor<RandomInner>;
    }
    namespace builder {
        function generateBool(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function generateBytes(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function generateU128(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function generateU128InRange(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function generateU16(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function generateU16InRange(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function generateU256(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function generateU32(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function generateU32InRange(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function generateU64(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function generateU64InRange(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function generateU8(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function generateU8InRange(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function newGenerator(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function shuffle<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function generateBool(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function generateBytes(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[number[]]>>;
        function generateU128(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function generateU128InRange(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function generateU16(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function generateU16InRange(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[number]>>;
        function generateU256(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function generateU32(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function generateU32InRange(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[number]>>;
        function generateU64(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function generateU64InRange(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function generateU8(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number]>>;
        function generateU8InRange(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[number]>>;
        function newGenerator(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[random.RandomGenerator]>>;
        function shuffle<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace sui {
    interface SUI {
        dummy_field: Boolean;
    }
    namespace SUI {
        const TYPE_QNAME = "0x2::sui::SUI";
        function type(): TypeDescriptor<SUI>;
    }
    namespace builder {
        function transfer(tx: TransactionBlock, args: [
            coin.Coin<sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function transfer(client: SuiClient, args: [
            coin.Coin<sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace table {
    interface Table<T0, T1> {
        id: object_.UID;
        size: bigint;
    }
    namespace Table {
        const TYPE_QNAME = "0x2::table::Table";
        function type<T0, T1>(arg0?: TypeDescriptor<T0>, arg1?: TypeDescriptor<T1>): TypeDescriptor<Table<T0, T1>>;
    }
    namespace builder {
        function add<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function borrow<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function contains<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [table.Table<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function drop<T0 = any, T1 = any>(tx: TransactionBlock, args: [table.Table<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function isEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function length<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function new_<T0 = any, T1 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function add<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function borrow<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function contains<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyEmpty<T0 = any, T1 = any>(client: SuiClient, args: [table.Table<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function drop<T0 = any, T1 = any>(client: SuiClient, args: [table.Table<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function isEmpty<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function new_<T0 = any, T1 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[table.Table<T0, T1>]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T1]>>;
    }
}
export declare namespace table_vec {
    interface TableVec<T0> {
        contents: table.Table<bigint, T0>;
    }
    namespace TableVec {
        const TYPE_QNAME = "0x2::table_vec::TableVec";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TableVec<T0>>;
    }
    namespace builder {
        function borrow<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function borrowMut<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty<T0 = any>(tx: TransactionBlock, args: [table_vec.TableVec<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function drop<T0 = any>(tx: TransactionBlock, args: [table_vec.TableVec<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function empty<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
        function isEmpty<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function length<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function popBack<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function pushBack<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function singleton<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function swap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function swapRemove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function borrow<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function borrowMut<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function destroyEmpty<T0 = any>(client: SuiClient, args: [table_vec.TableVec<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function drop<T0 = any>(client: SuiClient, args: [table_vec.TableVec<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function empty<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[table_vec.TableVec<T0>]>>;
        function isEmpty<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function length<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function popBack<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function pushBack<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function singleton<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[table_vec.TableVec<T0>]>>;
        function swap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function swapRemove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
    }
}
export declare namespace token {
    interface ActionRequest<T0> {
        name: string;
        amount: bigint;
        sender: string;
        recipient: _0x1.option.Option<string>;
        spent_balance: _0x1.option.Option<balance.Balance<T0>>;
        approvals: vec_set.VecSet<_0x1.type_name.TypeName>;
    }
    namespace ActionRequest {
        const TYPE_QNAME = "0x2::token::ActionRequest";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<ActionRequest<T0>>;
    }
    interface RuleKey<T0> {
        is_protected: Boolean;
    }
    namespace RuleKey {
        const TYPE_QNAME = "0x2::token::RuleKey";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<RuleKey<T0>>;
    }
    interface RuleKeyInstance extends TypedEventInstance<RuleKey<any>> {
        data_decoded: RuleKey<any>;
        type_arguments: [string];
    }
    interface Token<T0> {
        id: object_.UID;
        balance: balance.Balance<T0>;
    }
    namespace Token {
        const TYPE_QNAME = "0x2::token::Token";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Token<T0>>;
    }
    interface TokenPolicy<T0> {
        id: object_.UID;
        spent_balance: balance.Balance<T0>;
        rules: vec_map.VecMap<string, vec_set.VecSet<_0x1.type_name.TypeName>>;
    }
    namespace TokenPolicy {
        const TYPE_QNAME = "0x2::token::TokenPolicy";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TokenPolicy<T0>>;
    }
    interface TokenPolicyCap<T0> {
        id: object_.UID;
        for: object_.ID;
    }
    namespace TokenPolicyCap {
        const TYPE_QNAME = "0x2::token::TokenPolicyCap";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TokenPolicyCap<T0>>;
    }
    interface TokenPolicyCreated<T0> {
        id: object_.ID;
        is_mutable: Boolean;
    }
    namespace TokenPolicyCreated {
        const TYPE_QNAME = "0x2::token::TokenPolicyCreated";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TokenPolicyCreated<T0>>;
    }
    interface TokenPolicyCreatedInstance extends TypedEventInstance<TokenPolicyCreated<any>> {
        data_decoded: TokenPolicyCreated<any>;
        type_arguments: [string];
    }
    namespace builder {
        function action<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function addApproval<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function addRuleConfig<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T2 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function addRuleForAction<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function allow<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function amount<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function approvals<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function burn<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.Token<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function confirmRequest<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function confirmRequestMut<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function confirmWithPolicyCap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function confirmWithTreasuryCap<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyZero<T0 = any>(tx: TransactionBlock, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function disallow<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function flush<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function fromCoin<T0 = any>(tx: TransactionBlock, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function fromCoinAction(tx: TransactionBlock, args: []): TransactionArgument & [];
        function hasRuleConfig<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function hasRuleConfigWithType<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument];
        function isAllowed<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function join<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.Token<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function keep<T0 = any>(tx: TransactionBlock, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function mint<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function newPolicy<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function newRequest<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionArgument,
            bigint | TransactionArgument,
            _0x1.option.Option<string> | TransactionArgument,
            _0x1.option.Option<balance.Balance<T0>> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function recipient<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function removeRuleConfig<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function removeRuleForAction<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function ruleConfig<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function ruleConfigMut<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function rules<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function sender<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function sharePolicy<T0 = any>(tx: TransactionBlock, args: [token.TokenPolicy<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function spend<T0 = any>(tx: TransactionBlock, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function spendAction(tx: TransactionBlock, args: []): TransactionArgument & [];
        function spent<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function spentBalance<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function split<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function toCoin<T0 = any>(tx: TransactionBlock, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function toCoinAction(tx: TransactionBlock, args: []): TransactionArgument & [];
        function transfer<T0 = any>(tx: TransactionBlock, args: [
            token.Token<T0> | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function transferAction(tx: TransactionBlock, args: []): TransactionArgument & [];
        function value<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function zero<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
    }
    namespace view {
        function action<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function addApproval<T0 = any, T1 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function addRuleConfig<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T2 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[]>>;
        function addRuleForAction<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function allow<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function amount<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function approvals<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[vec_set.VecSet<_0x1.type_name.TypeName>]>>;
        function burn<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.Token<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function confirmRequest<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[
            string,
            bigint,
            string,
            _0x1.option.Option<string>
        ]>>;
        function confirmRequestMut<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[
            string,
            bigint,
            string,
            _0x1.option.Option<string>
        ]>>;
        function confirmWithPolicyCap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[
            string,
            bigint,
            string,
            _0x1.option.Option<string>
        ]>>;
        function confirmWithTreasuryCap<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.ActionRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[
            string,
            bigint,
            string,
            _0x1.option.Option<string>
        ]>>;
        function destroyZero<T0 = any>(client: SuiClient, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function disallow<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function flush<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function fromCoin<T0 = any>(client: SuiClient, args: [coin.Coin<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.Token<T0>, token.ActionRequest<T0>]>>;
        function fromCoinAction(client: SuiClient, args: []): Promise<TypedDevInspectResults<[string]>>;
        function hasRuleConfig<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function hasRuleConfigWithType<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isAllowed<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function join<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            token.Token<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function keep<T0 = any>(client: SuiClient, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function mint<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.Token<T0>]>>;
        function newPolicy<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.TokenPolicy<T0>, token.TokenPolicyCap<T0>]>>;
        function newRequest<T0 = any>(client: SuiClient, args: [
            string | TransactionArgument,
            bigint | TransactionArgument,
            _0x1.option.Option<string> | TransactionArgument,
            _0x1.option.Option<balance.Balance<T0>> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.ActionRequest<T0>]>>;
        function recipient<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<string>]>>;
        function removeRuleConfig<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[T2]>>;
        function removeRuleForAction<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function ruleConfig<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[string]>>;
        function ruleConfigMut<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[string]>>;
        function rules<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[vec_set.VecSet<_0x1.type_name.TypeName>]>>;
        function sender<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function sharePolicy<T0 = any>(client: SuiClient, args: [token.TokenPolicy<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function spend<T0 = any>(client: SuiClient, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.ActionRequest<T0>]>>;
        function spendAction(client: SuiClient, args: []): Promise<TypedDevInspectResults<[string]>>;
        function spent<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<bigint>]>>;
        function spentBalance<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function split<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.Token<T0>]>>;
        function toCoin<T0 = any>(client: SuiClient, args: [token.Token<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<T0>, token.ActionRequest<T0>]>>;
        function toCoinAction(client: SuiClient, args: []): Promise<TypedDevInspectResults<[string]>>;
        function transfer<T0 = any>(client: SuiClient, args: [
            token.Token<T0> | TransactionArgument,
            string | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.ActionRequest<T0>]>>;
        function transferAction(client: SuiClient, args: []): Promise<TypedDevInspectResults<[string]>>;
        function value<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function zero<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[token.Token<T0>]>>;
    }
}
export declare namespace transfer {
    interface Receiving<T0> {
        id: object_.ID;
        version: bigint;
    }
    namespace Receiving {
        const TYPE_QNAME = "0x2::transfer::Receiving";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<Receiving<T0>>;
    }
    namespace builder {
        function freezeObject<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function freezeObjectImpl<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function publicFreezeObject<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function publicReceive<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            transfer.Receiving<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function publicShareObject<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function publicTransfer<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function receive<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            transfer.Receiving<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function receivingObjectId<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function shareObject<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function shareObjectImpl<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function transfer<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function transferImpl<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function freezeObject<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function freezeObjectImpl<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function publicFreezeObject<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function publicReceive<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            transfer.Receiving<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function publicShareObject<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function publicTransfer<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function receive<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            transfer.Receiving<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function receivingObjectId<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function shareObject<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function shareObjectImpl<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function transfer<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function transferImpl<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument, string | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace transfer_policy {
    interface RuleKey<T0> {
        dummy_field: Boolean;
    }
    namespace RuleKey {
        const TYPE_QNAME = "0x2::transfer_policy::RuleKey";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<RuleKey<T0>>;
    }
    interface RuleKeyInstance extends TypedEventInstance<RuleKey<any>> {
        data_decoded: RuleKey<any>;
        type_arguments: [string];
    }
    interface TransferPolicy<T0> {
        id: object_.UID;
        balance: balance.Balance<sui.SUI>;
        rules: vec_set.VecSet<_0x1.type_name.TypeName>;
    }
    namespace TransferPolicy {
        const TYPE_QNAME = "0x2::transfer_policy::TransferPolicy";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TransferPolicy<T0>>;
    }
    interface TransferPolicyCap<T0> {
        id: object_.UID;
        policy_id: object_.ID;
    }
    namespace TransferPolicyCap {
        const TYPE_QNAME = "0x2::transfer_policy::TransferPolicyCap";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TransferPolicyCap<T0>>;
    }
    interface TransferPolicyCreated<T0> {
        id: object_.ID;
    }
    namespace TransferPolicyCreated {
        const TYPE_QNAME = "0x2::transfer_policy::TransferPolicyCreated";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TransferPolicyCreated<T0>>;
    }
    interface TransferPolicyCreatedInstance extends TypedEventInstance<TransferPolicyCreated<any>> {
        data_decoded: TransferPolicyCreated<any>;
        type_arguments: [string];
    }
    interface TransferPolicyDestroyed<T0> {
        id: object_.ID;
    }
    namespace TransferPolicyDestroyed {
        const TYPE_QNAME = "0x2::transfer_policy::TransferPolicyDestroyed";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TransferPolicyDestroyed<T0>>;
    }
    interface TransferPolicyDestroyedInstance extends TypedEventInstance<TransferPolicyDestroyed<any>> {
        data_decoded: TransferPolicyDestroyed<any>;
        type_arguments: [string];
    }
    interface TransferRequest<T0> {
        item: object_.ID;
        paid: bigint;
        from: object_.ID;
        receipts: vec_set.VecSet<_0x1.type_name.TypeName>;
    }
    namespace TransferRequest {
        const TYPE_QNAME = "0x2::transfer_policy::TransferRequest";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<TransferRequest<T0>>;
    }
    namespace builder {
        function addReceipt<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function addRule<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T2 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function addToBalance<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<sui.SUI> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function confirmRequest<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            transfer_policy.TransferRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function default_<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function destroyAndWithdraw<T0 = any>(tx: TransactionBlock, args: [
            transfer_policy.TransferPolicy<T0> | TransactionArgument,
            transfer_policy.TransferPolicyCap<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function from<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function getRule<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function hasRule<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function item<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function new_<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function newRequest<T0 = any>(tx: TransactionBlock, args: [
            object_.ID | TransactionArgument,
            bigint | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function paid<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function removeRule<T0 = any, T1 = any, T2 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function rules<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function uid<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function uidMutAsOwner<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function withdraw<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function addReceipt<T0 = any, T1 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function addRule<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            T2 | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[]>>;
        function addToBalance<T0 = any, T1 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            coin.Coin<sui.SUI> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function confirmRequest<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            transfer_policy.TransferRequest<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[object_.ID, bigint, object_.ID]>>;
        function destroyAndWithdraw<T0 = any>(client: SuiClient, args: [
            transfer_policy.TransferPolicy<T0> | TransactionArgument,
            transfer_policy.TransferPolicyCap<T0> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<sui.SUI>]>>;
        function from<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function getRule<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            T1 | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[string]>>;
        function hasRule<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function item<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[object_.ID]>>;
        function new_<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[
            transfer_policy.TransferPolicy<T0>,
            transfer_policy.TransferPolicyCap<T0>
        ]>>;
        function newRequest<T0 = any>(client: SuiClient, args: [
            object_.ID | TransactionArgument,
            bigint | TransactionArgument,
            object_.ID | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[transfer_policy.TransferRequest<T0>]>>;
        function paid<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function removeRule<T0 = any, T1 = any, T2 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [
            TypeDescriptor<T0> | string,
            TypeDescriptor<T1> | string,
            TypeDescriptor<T2> | string
        ]): Promise<TypedDevInspectResults<[]>>;
        function rules<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function uid<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function uidMutAsOwner<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function withdraw<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[coin.Coin<sui.SUI>]>>;
    }
}
export declare namespace tx_context {
    interface TxContext {
        sender: string;
        tx_hash: number[];
        epoch: bigint;
        epoch_timestamp_ms: bigint;
        ids_created: bigint;
    }
    namespace TxContext {
        const TYPE_QNAME = "0x2::tx_context::TxContext";
        function type(): TypeDescriptor<TxContext>;
    }
    namespace builder {
        function digest(tx: TransactionBlock, args: []): TransactionArgument & [];
        function epoch(tx: TransactionBlock, args: []): TransactionArgument & [];
        function epochTimestampMs(tx: TransactionBlock, args: []): TransactionArgument & [];
        function freshObjectAddress(tx: TransactionBlock, args: []): TransactionArgument & [];
        function sender(tx: TransactionBlock, args: []): TransactionArgument & [];
    }
    namespace view {
        function digest(client: SuiClient, args: []): Promise<TypedDevInspectResults<[string]>>;
        function epoch(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
        function epochTimestampMs(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
        function freshObjectAddress(client: SuiClient, args: []): Promise<TypedDevInspectResults<[string]>>;
        function sender(client: SuiClient, args: []): Promise<TypedDevInspectResults<[string]>>;
    }
}
export declare namespace types {
    namespace builder {
        function isOneTimeWitness<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function isOneTimeWitness<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace url {
    interface Url {
        url: _0x1.ascii.String;
    }
    namespace Url {
        const TYPE_QNAME = "0x2::url::Url";
        function type(): TypeDescriptor<Url>;
    }
    interface UrlInstance extends TypedEventInstance<Url> {
        data_decoded: Url;
        type_arguments: [];
    }
    namespace builder {
        function innerUrl(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function newUnsafe(tx: TransactionBlock, args: [_0x1.ascii.String | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function newUnsafeFromBytes(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function update(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.ascii.String | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function innerUrl(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x1.ascii.String]>>;
        function newUnsafe(client: SuiClient, args: [_0x1.ascii.String | TransactionArgument]): Promise<TypedDevInspectResults<[url.Url]>>;
        function newUnsafeFromBytes(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[url.Url]>>;
        function update(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x1.ascii.String | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace vdf {
    namespace builder {
        function hashToInput(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function vdfVerify(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function hashToInput(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[number[]]>>;
        function vdfVerify(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
    }
}
export declare namespace vec_map {
    interface Entry<T0, T1> {
        key: T0;
        value: T1;
    }
    namespace Entry {
        const TYPE_QNAME = "0x2::vec_map::Entry";
        function type<T0, T1>(arg0?: TypeDescriptor<T0>, arg1?: TypeDescriptor<T1>): TypeDescriptor<Entry<T0, T1>>;
    }
    interface EntryInstance extends TypedEventInstance<Entry<any, any>> {
        data_decoded: Entry<any, any>;
        type_arguments: [string, string];
    }
    interface VecMap<T0, T1> {
        contents: vec_map.Entry<T0, T1>[];
    }
    namespace VecMap {
        const TYPE_QNAME = "0x2::vec_map::VecMap";
        function type<T0, T1>(arg0?: TypeDescriptor<T0>, arg1?: TypeDescriptor<T1>): TypeDescriptor<VecMap<T0, T1>>;
    }
    interface VecMapInstance extends TypedEventInstance<VecMap<any, any>> {
        data_decoded: VecMap<any, any>;
        type_arguments: [string, string];
    }
    namespace builder {
        function contains<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroyEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [vec_map.VecMap<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function empty<T0 = any, T1 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [];
        function fromKeysValues<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function get<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getEntryByIdx<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getEntryByIdxMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getIdx<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getIdxOpt<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getMut<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function insert<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function intoKeysValues<T0 = any, T1 = any>(tx: TransactionBlock, args: [vec_map.VecMap<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function isEmpty<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function keys<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function pop<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function remove<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function removeEntryByIdx<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function size<T0 = any, T1 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument];
        function tryGet<T0 = any, T1 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function contains<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function destroyEmpty<T0 = any, T1 = any>(client: SuiClient, args: [vec_map.VecMap<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function empty<T0 = any, T1 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[vec_map.VecMap<T0, T1>]>>;
        function fromKeysValues<T0 = any, T1 = any>(client: SuiClient, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[vec_map.VecMap<T0, T1>]>>;
        function get<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function getEntryByIdx<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string, string]>>;
        function getEntryByIdxMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string, string]>>;
        function getIdx<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function getIdxOpt<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<bigint>]>>;
        function getMut<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[string]>>;
        function insert<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument,
            T1 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[]>>;
        function intoKeysValues<T0 = any, T1 = any>(client: SuiClient, args: [vec_map.VecMap<T0, T1> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T0[] | string, T1[] | string]>>;
        function isEmpty<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function keys<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T0[] | string]>>;
        function pop<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T0, T1]>>;
        function remove<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T0, T1]>>;
        function removeEntryByIdx<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[T0, T1]>>;
        function size<T0 = any, T1 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[bigint]>>;
        function tryGet<T0 = any, T1 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string]): Promise<TypedDevInspectResults<[_0x1.option.Option<T1>]>>;
    }
}
export declare namespace vec_set {
    interface VecSet<T0> {
        contents: T0[] | string;
    }
    namespace VecSet {
        const TYPE_QNAME = "0x2::vec_set::VecSet";
        function type<T0>(arg0?: TypeDescriptor<T0>): TypeDescriptor<VecSet<T0>>;
    }
    interface VecSetInstance extends TypedEventInstance<VecSet<any>> {
        data_decoded: VecSet<any>;
        type_arguments: [string];
    }
    namespace builder {
        function contains<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function empty<T0 = any>(tx: TransactionBlock, args: [], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [];
        function fromKeys<T0 = any>(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function insert<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function intoKeys<T0 = any>(tx: TransactionBlock, args: [vec_set.VecSet<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function isEmpty<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function keys<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function remove<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function singleton<T0 = any>(tx: TransactionBlock, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function size<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function contains<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function empty<T0 = any>(client: SuiClient, args: [], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[vec_set.VecSet<T0>]>>;
        function fromKeys<T0 = any>(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[vec_set.VecSet<T0>]>>;
        function insert<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            T0 | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function intoKeys<T0 = any>(client: SuiClient, args: [vec_set.VecSet<T0> | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0[] | string]>>;
        function isEmpty<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[Boolean]>>;
        function keys<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function remove<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function singleton<T0 = any>(client: SuiClient, args: [T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[vec_set.VecSet<T0>]>>;
        function size<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace versioned {
    interface VersionChangeCap {
        versioned_id: object_.ID;
        old_version: bigint;
    }
    namespace VersionChangeCap {
        const TYPE_QNAME = "0x2::versioned::VersionChangeCap";
        function type(): TypeDescriptor<VersionChangeCap>;
    }
    interface Versioned {
        id: object_.UID;
        version: bigint;
    }
    namespace Versioned {
        const TYPE_QNAME = "0x2::versioned::Versioned";
        function type(): TypeDescriptor<Versioned>;
    }
    namespace builder {
        function create<T0 = any>(tx: TransactionBlock, args: [bigint | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function destroy<T0 = any>(tx: TransactionBlock, args: [versioned.Versioned | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function loadValue<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function loadValueMut<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function removeValueForUpgrade<T0 = any>(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [TransactionArgument];
        function upgrade<T0 = any>(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            T0 | TransactionArgument,
            versioned.VersionChangeCap | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function version(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function create<T0 = any>(client: SuiClient, args: [bigint | TransactionArgument, T0 | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[versioned.Versioned]>>;
        function destroy<T0 = any>(client: SuiClient, args: [versioned.Versioned | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0]>>;
        function loadValue<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function loadValueMut<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[string]>>;
        function removeValueForUpgrade<T0 = any>(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[T0, versioned.VersionChangeCap]>>;
        function upgrade<T0 = any>(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            T0 | TransactionArgument,
            versioned.VersionChangeCap | TransactionArgument
        ], typeArguments: [TypeDescriptor<T0> | string]): Promise<TypedDevInspectResults<[]>>;
        function version(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace zklogin_verified_id {
    interface VerifiedID {
        id: object_.UID;
        owner: string;
        key_claim_name: string;
        key_claim_value: string;
        issuer: string;
        audience: string;
    }
    namespace VerifiedID {
        const TYPE_QNAME = "0x2::zklogin_verified_id::VerifiedID";
        function type(): TypeDescriptor<VerifiedID>;
    }
    namespace builder {
        function audience(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function checkZkloginId(tx: TransactionBlock, args: [
            string | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function delete_(tx: TransactionBlock, args: [zklogin_verified_id.VerifiedID | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function issuer(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function keyClaimName(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function keyClaimValue(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function owner(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function verifyZkloginId(tx: TransactionBlock, args: [
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function audience(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function checkZkloginId(client: SuiClient, args: [
            string | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function delete_(client: SuiClient, args: [zklogin_verified_id.VerifiedID | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function issuer(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function keyClaimName(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function keyClaimValue(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function owner(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function verifyZkloginId(client: SuiClient, args: [
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace zklogin_verified_issuer {
    interface VerifiedIssuer {
        id: object_.UID;
        owner: string;
        issuer: string;
    }
    namespace VerifiedIssuer {
        const TYPE_QNAME = "0x2::zklogin_verified_issuer::VerifiedIssuer";
        function type(): TypeDescriptor<VerifiedIssuer>;
    }
    namespace builder {
        function checkZkloginIssuer(tx: TransactionBlock, args: [
            string | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function delete_(tx: TransactionBlock, args: [zklogin_verified_issuer.VerifiedIssuer | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function issuer(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function owner(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function verifyZkloginIssuer(tx: TransactionBlock, args: [bigint | TransactionArgument, string | TransactionArgument]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function checkZkloginIssuer(client: SuiClient, args: [
            string | TransactionArgument,
            bigint | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function delete_(client: SuiClient, args: [zklogin_verified_issuer.VerifiedIssuer | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function issuer(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function owner(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function verifyZkloginIssuer(client: SuiClient, args: [bigint | TransactionArgument, string | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare function loadAllTypes(coder: MoveCoder): void;
//# sourceMappingURL=0x2.d.ts.map