import { TypeDescriptor } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";
import { TypedDevInspectResults } from "@typemove/sui";
import { TransactionBlock, TransactionArgument, TransactionObjectArgument } from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
import * as _0x1 from "./0x1.js";
import * as _0x2 from "./0x2.js";
export declare namespace genesis {
    interface GenesisChainParameters {
        protocol_version: bigint;
        chain_start_timestamp_ms: bigint;
        epoch_duration_ms: bigint;
        stake_subsidy_start_epoch: bigint;
        stake_subsidy_initial_distribution_amount: bigint;
        stake_subsidy_period_length: bigint;
        stake_subsidy_decrease_rate: number;
        max_validator_count: bigint;
        min_validator_joining_stake: bigint;
        validator_low_stake_threshold: bigint;
        validator_very_low_stake_threshold: bigint;
        validator_low_stake_grace_period: bigint;
    }
    namespace GenesisChainParameters {
        const TYPE_QNAME = "0x3::genesis::GenesisChainParameters";
        function type(): TypeDescriptor<GenesisChainParameters>;
    }
    interface GenesisChainParametersInstance extends TypedEventInstance<GenesisChainParameters> {
        data_decoded: GenesisChainParameters;
        type_arguments: [];
    }
    interface GenesisValidatorMetadata {
        name: number[];
        description: number[];
        image_url: number[];
        project_url: number[];
        sui_address: string;
        gas_price: bigint;
        commission_rate: bigint;
        protocol_public_key: number[];
        proof_of_possession: number[];
        network_public_key: number[];
        worker_public_key: number[];
        network_address: number[];
        p2p_address: number[];
        primary_address: number[];
        worker_address: number[];
    }
    namespace GenesisValidatorMetadata {
        const TYPE_QNAME = "0x3::genesis::GenesisValidatorMetadata";
        function type(): TypeDescriptor<GenesisValidatorMetadata>;
    }
    interface GenesisValidatorMetadataInstance extends TypedEventInstance<GenesisValidatorMetadata> {
        data_decoded: GenesisValidatorMetadata;
        type_arguments: [];
    }
    interface TokenAllocation {
        recipient_address: string;
        amount_mist: bigint;
        staked_with_validator: _0x1.option.Option<string>;
    }
    namespace TokenAllocation {
        const TYPE_QNAME = "0x3::genesis::TokenAllocation";
        function type(): TypeDescriptor<TokenAllocation>;
    }
    interface TokenDistributionSchedule {
        stake_subsidy_fund_mist: bigint;
        allocations: genesis.TokenAllocation[];
    }
    namespace TokenDistributionSchedule {
        const TYPE_QNAME = "0x3::genesis::TokenDistributionSchedule";
        function type(): TypeDescriptor<TokenDistributionSchedule>;
    }
    namespace builder { }
    namespace view { }
}
export declare namespace stake_subsidy {
    interface StakeSubsidy {
        balance: _0x2.balance.Balance<_0x2.sui.SUI>;
        distribution_counter: bigint;
        current_distribution_amount: bigint;
        stake_subsidy_period_length: bigint;
        stake_subsidy_decrease_rate: number;
        extra_fields: _0x2.bag.Bag;
    }
    namespace StakeSubsidy {
        const TYPE_QNAME = "0x3::stake_subsidy::StakeSubsidy";
        function type(): TypeDescriptor<StakeSubsidy>;
    }
    namespace builder {
        function advanceEpoch(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function create(tx: TransactionBlock, args: [
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function currentEpochSubsidyAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function advanceEpoch(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function create(client: SuiClient, args: [
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[stake_subsidy.StakeSubsidy]>>;
        function currentEpochSubsidyAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace staking_pool {
    interface PoolTokenExchangeRate {
        sui_amount: bigint;
        pool_token_amount: bigint;
    }
    namespace PoolTokenExchangeRate {
        const TYPE_QNAME = "0x3::staking_pool::PoolTokenExchangeRate";
        function type(): TypeDescriptor<PoolTokenExchangeRate>;
    }
    interface PoolTokenExchangeRateInstance extends TypedEventInstance<PoolTokenExchangeRate> {
        data_decoded: PoolTokenExchangeRate;
        type_arguments: [];
    }
    interface StakedSui {
        id: _0x2.object_.UID;
        pool_id: _0x2.object_.ID;
        stake_activation_epoch: bigint;
        principal: _0x2.balance.Balance<_0x2.sui.SUI>;
    }
    namespace StakedSui {
        const TYPE_QNAME = "0x3::staking_pool::StakedSui";
        function type(): TypeDescriptor<StakedSui>;
    }
    interface StakingPool {
        id: _0x2.object_.UID;
        activation_epoch: _0x1.option.Option<bigint>;
        deactivation_epoch: _0x1.option.Option<bigint>;
        sui_balance: bigint;
        rewards_pool: _0x2.balance.Balance<_0x2.sui.SUI>;
        pool_token_balance: bigint;
        exchange_rates: _0x2.table.Table<bigint, staking_pool.PoolTokenExchangeRate>;
        pending_stake: bigint;
        pending_total_sui_withdraw: bigint;
        pending_pool_token_withdraw: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace StakingPool {
        const TYPE_QNAME = "0x3::staking_pool::StakingPool";
        function type(): TypeDescriptor<StakingPool>;
    }
    namespace builder {
        function activateStakingPool(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function deactivateStakingPool(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function depositRewards(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function exchangeRates(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isEqualStakingMetadata(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isInactive(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isPreactive(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function joinStakedSui(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function new_(tx: TransactionBlock, args: []): TransactionArgument & [];
        function pendingStakeAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function pendingStakeWithdrawAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function poolId(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function poolTokenAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function poolTokenExchangeRateAtEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function processPendingStake(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function processPendingStakesAndWithdraws(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestAddStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestWithdrawStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function split(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function splitStakedSui(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function stakeActivationEpoch(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function stakedSuiAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function suiAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function suiBalance(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function withdrawFromPrincipal(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function activateStakingPool(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function deactivateStakingPool(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function depositRewards(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function exchangeRates(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function isEqualStakingMetadata(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isInactive(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isPreactive(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function joinStakedSui(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function new_(client: SuiClient, args: []): Promise<TypedDevInspectResults<[staking_pool.StakingPool]>>;
        function pendingStakeAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function pendingStakeWithdrawAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function poolId(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x2.object_.ID]>>;
        function poolTokenAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function poolTokenExchangeRateAtEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.PoolTokenExchangeRate]>>;
        function processPendingStake(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function processPendingStakesAndWithdraws(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestAddStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.StakedSui]>>;
        function requestWithdrawStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function split(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.StakedSui]>>;
        function splitStakedSui(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function stakeActivationEpoch(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function stakedSuiAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function suiAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function suiBalance(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function withdrawFromPrincipal(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint, _0x2.balance.Balance<_0x2.sui.SUI>]>>;
    }
}
export declare namespace storage_fund {
    interface StorageFund {
        total_object_storage_rebates: _0x2.balance.Balance<_0x2.sui.SUI>;
        non_refundable_balance: _0x2.balance.Balance<_0x2.sui.SUI>;
    }
    namespace StorageFund {
        const TYPE_QNAME = "0x3::storage_fund::StorageFund";
        function type(): TypeDescriptor<StorageFund>;
    }
    namespace builder {
        function advanceEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function new_(tx: TransactionBlock, args: [_0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function totalBalance(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function totalObjectStorageRebates(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function advanceEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function new_(client: SuiClient, args: [_0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument]): Promise<TypedDevInspectResults<[storage_fund.StorageFund]>>;
        function totalBalance(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function totalObjectStorageRebates(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare namespace sui_system {
    interface SuiSystemState {
        id: _0x2.object_.UID;
        version: bigint;
    }
    namespace SuiSystemState {
        const TYPE_QNAME = "0x3::sui_system::SuiSystemState";
        function type(): TypeDescriptor<SuiSystemState>;
    }
    namespace builder {
        function activeValidatorAddresses(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function create(tx: TransactionBlock, args: [
            _0x2.object_.UID | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            sui_system_state_inner.SystemParameters | TransactionArgument,
            stake_subsidy.StakeSubsidy | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function poolExchangeRates(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function reportValidator(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddStakeMulCoin(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddStakeNonEntry(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddValidator(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestAddValidatorCandidate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestRemoveValidator(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestRemoveValidatorCandidate(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestSetCommissionRate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestSetGasPrice(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestWithdrawStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestWithdrawStakeNonEntry(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function rotateOperationCap(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function setCandidateValidatorCommissionRate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function setCandidateValidatorGasPrice(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function undoReportValidator(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateCandidateValidatorNetworkAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorNetworkPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorP2pAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorPrimaryAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorProtocolPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateCandidateValidatorWorkerAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorWorkerPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorDescription(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorImageUrl(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorName(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochNetworkAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochNetworkPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochP2pAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochPrimaryAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochProtocolPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateValidatorNextEpochWorkerAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochWorkerPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorProjectUrl(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
    }
    namespace view {
        function activeValidatorAddresses(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string[]]>>;
        function create(client: SuiClient, args: [
            _0x2.object_.UID | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            sui_system_state_inner.SystemParameters | TransactionArgument,
            stake_subsidy.StakeSubsidy | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function poolExchangeRates(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function reportValidator(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestAddStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestAddStakeMulCoin(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestAddStakeNonEntry(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.StakedSui]>>;
        function requestAddValidator(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestAddValidatorCandidate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestRemoveValidator(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestRemoveValidatorCandidate(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestSetCommissionRate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestSetGasPrice(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestWithdrawStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestWithdrawStakeNonEntry(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function rotateOperationCap(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function setCandidateValidatorCommissionRate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function setCandidateValidatorGasPrice(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function undoReportValidator(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorNetworkAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorNetworkPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorP2pAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorPrimaryAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorProtocolPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorWorkerAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorWorkerPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorDescription(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorImageUrl(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorName(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochNetworkAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochNetworkPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochP2pAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochPrimaryAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochProtocolPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochWorkerAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochWorkerPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorProjectUrl(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
    }
}
export declare namespace sui_system_state_inner {
    interface SuiSystemStateInner {
        epoch: bigint;
        protocol_version: bigint;
        system_state_version: bigint;
        validators: validator_set.ValidatorSet;
        storage_fund: storage_fund.StorageFund;
        parameters: sui_system_state_inner.SystemParameters;
        reference_gas_price: bigint;
        validator_report_records: _0x2.vec_map.VecMap<string, _0x2.vec_set.VecSet<string>>;
        stake_subsidy: stake_subsidy.StakeSubsidy;
        safe_mode: Boolean;
        safe_mode_storage_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_computation_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_storage_rebates: bigint;
        safe_mode_non_refundable_storage_fee: bigint;
        epoch_start_timestamp_ms: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SuiSystemStateInner {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SuiSystemStateInner";
        function type(): TypeDescriptor<SuiSystemStateInner>;
    }
    interface SuiSystemStateInnerV2 {
        epoch: bigint;
        protocol_version: bigint;
        system_state_version: bigint;
        validators: validator_set.ValidatorSet;
        storage_fund: storage_fund.StorageFund;
        parameters: sui_system_state_inner.SystemParametersV2;
        reference_gas_price: bigint;
        validator_report_records: _0x2.vec_map.VecMap<string, _0x2.vec_set.VecSet<string>>;
        stake_subsidy: stake_subsidy.StakeSubsidy;
        safe_mode: Boolean;
        safe_mode_storage_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_computation_rewards: _0x2.balance.Balance<_0x2.sui.SUI>;
        safe_mode_storage_rebates: bigint;
        safe_mode_non_refundable_storage_fee: bigint;
        epoch_start_timestamp_ms: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SuiSystemStateInnerV2 {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SuiSystemStateInnerV2";
        function type(): TypeDescriptor<SuiSystemStateInnerV2>;
    }
    interface SystemEpochInfoEvent {
        epoch: bigint;
        protocol_version: bigint;
        reference_gas_price: bigint;
        total_stake: bigint;
        storage_fund_reinvestment: bigint;
        storage_charge: bigint;
        storage_rebate: bigint;
        storage_fund_balance: bigint;
        stake_subsidy_amount: bigint;
        total_gas_fees: bigint;
        total_stake_rewards_distributed: bigint;
        leftover_storage_fund_inflow: bigint;
    }
    namespace SystemEpochInfoEvent {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SystemEpochInfoEvent";
        function type(): TypeDescriptor<SystemEpochInfoEvent>;
    }
    interface SystemEpochInfoEventInstance extends TypedEventInstance<SystemEpochInfoEvent> {
        data_decoded: SystemEpochInfoEvent;
        type_arguments: [];
    }
    interface SystemParameters {
        epoch_duration_ms: bigint;
        stake_subsidy_start_epoch: bigint;
        max_validator_count: bigint;
        min_validator_joining_stake: bigint;
        validator_low_stake_threshold: bigint;
        validator_very_low_stake_threshold: bigint;
        validator_low_stake_grace_period: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SystemParameters {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SystemParameters";
        function type(): TypeDescriptor<SystemParameters>;
    }
    interface SystemParametersV2 {
        epoch_duration_ms: bigint;
        stake_subsidy_start_epoch: bigint;
        min_validator_count: bigint;
        max_validator_count: bigint;
        min_validator_joining_stake: bigint;
        validator_low_stake_threshold: bigint;
        validator_very_low_stake_threshold: bigint;
        validator_low_stake_grace_period: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace SystemParametersV2 {
        const TYPE_QNAME = "0x3::sui_system_state_inner::SystemParametersV2";
        function type(): TypeDescriptor<SystemParametersV2>;
    }
    namespace builder {
        function activeValidatorAddresses(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function activeValidatorVotingPowers(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function advanceEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function create(tx: TransactionBlock, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            sui_system_state_inner.SystemParameters | TransactionArgument,
            stake_subsidy.StakeSubsidy | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function createSystemParameters(tx: TransactionBlock, args: [
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function epoch(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function epochStartTimestampMs(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function genesisSystemStateVersion(tx: TransactionBlock, args: []): TransactionArgument & [];
        function getReportersOf(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getStorageFundObjectRebates(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function getStorageFundTotalBalance(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function poolExchangeRates(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function protocolVersion(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function reportValidator(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddStakeMulCoin(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddValidator(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestAddValidatorCandidate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestRemoveValidator(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestRemoveValidatorCandidate(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestSetCommissionRate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestSetGasPrice(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestWithdrawStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function rotateOperationCap(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function setCandidateValidatorCommissionRate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function setCandidateValidatorGasPrice(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function systemStateVersion(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function undoReportValidator(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateCandidateValidatorNetworkAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorNetworkPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorP2pAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorPrimaryAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorProtocolPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateCandidateValidatorWorkerAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateValidatorWorkerPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorDescription(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorImageUrl(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorName(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochNetworkAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochNetworkPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochP2pAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochPrimaryAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochProtocolPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateValidatorNextEpochWorkerAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorNextEpochWorkerPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateValidatorProjectUrl(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function v1ToV2(tx: TransactionBlock, args: [sui_system_state_inner.SuiSystemStateInner | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function validatorStakeAmount(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function validatorStakingPoolId(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function validatorStakingPoolMappings(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function activeValidatorAddresses(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string[]]>>;
        function activeValidatorVotingPowers(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x2.vec_map.VecMap<string, bigint>]>>;
        function advanceEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function create(client: SuiClient, args: [
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            sui_system_state_inner.SystemParameters | TransactionArgument,
            stake_subsidy.StakeSubsidy | TransactionArgument
        ]): Promise<TypedDevInspectResults<[sui_system_state_inner.SuiSystemStateInner]>>;
        function createSystemParameters(client: SuiClient, args: [
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[sui_system_state_inner.SystemParameters]>>;
        function epoch(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function epochStartTimestampMs(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function genesisSystemStateVersion(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
        function getReportersOf(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.vec_set.VecSet<string>]>>;
        function getStorageFundObjectRebates(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function getStorageFundTotalBalance(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function poolExchangeRates(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function protocolVersion(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function reportValidator(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestAddStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.coin.Coin<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.StakedSui]>>;
        function requestAddStakeMulCoin(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            _0x1.option.Option<bigint> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.StakedSui]>>;
        function requestAddValidator(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestAddValidatorCandidate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestRemoveValidator(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestRemoveValidatorCandidate(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestSetCommissionRate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestSetGasPrice(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestWithdrawStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function rotateOperationCap(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function setCandidateValidatorCommissionRate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function setCandidateValidatorGasPrice(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function systemStateVersion(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function undoReportValidator(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorNetworkAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorNetworkPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorP2pAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorPrimaryAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorProtocolPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorWorkerAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateValidatorWorkerPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorDescription(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorImageUrl(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorName(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochNetworkAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochNetworkPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochP2pAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochPrimaryAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochProtocolPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochWorkerAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorNextEpochWorkerPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateValidatorProjectUrl(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function v1ToV2(client: SuiClient, args: [sui_system_state_inner.SuiSystemStateInner | TransactionArgument]): Promise<TypedDevInspectResults<[sui_system_state_inner.SuiSystemStateInnerV2]>>;
        function validatorStakeAmount(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function validatorStakingPoolId(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.object_.ID]>>;
        function validatorStakingPoolMappings(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
    }
}
export declare namespace validator {
    interface StakingRequestEvent {
        pool_id: _0x2.object_.ID;
        validator_address: string;
        staker_address: string;
        epoch: bigint;
        amount: bigint;
    }
    namespace StakingRequestEvent {
        const TYPE_QNAME = "0x3::validator::StakingRequestEvent";
        function type(): TypeDescriptor<StakingRequestEvent>;
    }
    interface StakingRequestEventInstance extends TypedEventInstance<StakingRequestEvent> {
        data_decoded: StakingRequestEvent;
        type_arguments: [];
    }
    interface UnstakingRequestEvent {
        pool_id: _0x2.object_.ID;
        validator_address: string;
        staker_address: string;
        stake_activation_epoch: bigint;
        unstaking_epoch: bigint;
        principal_amount: bigint;
        reward_amount: bigint;
    }
    namespace UnstakingRequestEvent {
        const TYPE_QNAME = "0x3::validator::UnstakingRequestEvent";
        function type(): TypeDescriptor<UnstakingRequestEvent>;
    }
    interface UnstakingRequestEventInstance extends TypedEventInstance<UnstakingRequestEvent> {
        data_decoded: UnstakingRequestEvent;
        type_arguments: [];
    }
    interface Validator {
        metadata: validator.ValidatorMetadata;
        voting_power: bigint;
        operation_cap_id: _0x2.object_.ID;
        gas_price: bigint;
        staking_pool: staking_pool.StakingPool;
        commission_rate: bigint;
        next_epoch_stake: bigint;
        next_epoch_gas_price: bigint;
        next_epoch_commission_rate: bigint;
        extra_fields: _0x2.bag.Bag;
    }
    namespace Validator {
        const TYPE_QNAME = "0x3::validator::Validator";
        function type(): TypeDescriptor<Validator>;
    }
    interface ValidatorMetadata {
        sui_address: string;
        protocol_pubkey_bytes: number[];
        network_pubkey_bytes: number[];
        worker_pubkey_bytes: number[];
        proof_of_possession: number[];
        name: string;
        description: string;
        image_url: _0x2.url.Url;
        project_url: _0x2.url.Url;
        net_address: string;
        p2p_address: string;
        primary_address: string;
        worker_address: string;
        next_epoch_protocol_pubkey_bytes: _0x1.option.Option<number[]>;
        next_epoch_proof_of_possession: _0x1.option.Option<number[]>;
        next_epoch_network_pubkey_bytes: _0x1.option.Option<number[]>;
        next_epoch_worker_pubkey_bytes: _0x1.option.Option<number[]>;
        next_epoch_net_address: _0x1.option.Option<string>;
        next_epoch_p2p_address: _0x1.option.Option<string>;
        next_epoch_primary_address: _0x1.option.Option<string>;
        next_epoch_worker_address: _0x1.option.Option<string>;
        extra_fields: _0x2.bag.Bag;
    }
    namespace ValidatorMetadata {
        const TYPE_QNAME = "0x3::validator::ValidatorMetadata";
        function type(): TypeDescriptor<ValidatorMetadata>;
    }
    namespace builder {
        function activate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function adjustStakeAndGasPrice(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function commissionRate(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function deactivate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function depositStakeRewards(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function description(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function effectuateStagedMetadata(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function gasPrice(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function getStakingPoolRef(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function imageUrl(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function isDuplicate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isPreactive(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function metadata(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function name(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function networkAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function networkPubkeyBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function new_(tx: TransactionBlock, args: [
            string | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function newMetadata(tx: TransactionBlock, args: [
            string | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            _0x2.url.Url | TransactionArgument,
            _0x2.url.Url | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            _0x2.bag.Bag | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function newUnverifiedValidatorOperationCapAndTransfer(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochGasPrice(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochNetworkAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochNetworkPubkeyBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochP2pAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochPrimaryAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochProofOfPossession(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochProtocolPubkeyBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochWorkerAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochWorkerPubkeyBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function operationCapId(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function p2pAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function pendingStakeAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function pendingStakeWithdrawAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function poolTokenExchangeRateAtEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function primaryAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function processPendingStakesAndWithdraws(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function projectUrl(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function proofOfPossession(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function protocolPubkeyBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestAddStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddStakeAtGenesis(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestSetCommissionRate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestSetGasPrice(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            validator_cap.ValidatorOperationCap | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestWithdrawStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function setCandidateCommissionRate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function setCandidateGasPrice(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            validator_cap.ValidatorOperationCap | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function setVotingPower(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function stakeAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function stakingPoolId(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function suiAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function totalStake(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function totalStakeAmount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function updateCandidateNetworkAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateNetworkPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateP2pAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidatePrimaryAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateProtocolPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateCandidateWorkerAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateCandidateWorkerPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateDescription(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateImageUrl(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateName(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateNextEpochNetworkAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateNextEpochNetworkPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateNextEpochP2pAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateNextEpochPrimaryAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateNextEpochProtocolPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function updateNextEpochWorkerAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateNextEpochWorkerPubkey(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function updateProjectUrl(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function validateMetadata(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function validateMetadataBcs(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function votingPower(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function workerAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function workerPubkeyBytes(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function activate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function adjustStakeAndGasPrice(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function commissionRate(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function deactivate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function depositStakeRewards(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function description(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function effectuateStagedMetadata(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function gasPrice(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function getStakingPoolRef(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function imageUrl(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function isDuplicate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isPreactive(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[Boolean]>>;
        function metadata(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function name(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function networkAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function networkPubkeyBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function new_(client: SuiClient, args: [
            string | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[validator.Validator]>>;
        function newMetadata(client: SuiClient, args: [
            string | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            _0x2.url.Url | TransactionArgument,
            _0x2.url.Url | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            string | TransactionArgument,
            _0x2.bag.Bag | TransactionArgument
        ]): Promise<TypedDevInspectResults<[validator.ValidatorMetadata]>>;
        function newUnverifiedValidatorOperationCapAndTransfer(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function nextEpochGasPrice(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function nextEpochNetworkAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function nextEpochNetworkPubkeyBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function nextEpochP2pAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function nextEpochPrimaryAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function nextEpochProofOfPossession(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function nextEpochProtocolPubkeyBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function nextEpochWorkerAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function nextEpochWorkerPubkeyBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function operationCapId(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function p2pAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function pendingStakeAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function pendingStakeWithdrawAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function poolTokenExchangeRateAtEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.PoolTokenExchangeRate]>>;
        function primaryAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function processPendingStakesAndWithdraws(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function projectUrl(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function proofOfPossession(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function protocolPubkeyBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function requestAddStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.StakedSui]>>;
        function requestAddStakeAtGenesis(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestSetCommissionRate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestSetGasPrice(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            validator_cap.ValidatorOperationCap | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestWithdrawStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function setCandidateCommissionRate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function setCandidateGasPrice(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            validator_cap.ValidatorOperationCap | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function setVotingPower(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function stakeAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function stakingPoolId(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[_0x2.object_.ID]>>;
        function suiAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function totalStake(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function totalStakeAmount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function updateCandidateNetworkAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateNetworkPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateP2pAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidatePrimaryAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateProtocolPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateWorkerAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateCandidateWorkerPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateDescription(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateImageUrl(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateName(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateNextEpochNetworkAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateNextEpochNetworkPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateNextEpochP2pAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateNextEpochPrimaryAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateNextEpochProtocolPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateNextEpochWorkerAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateNextEpochWorkerPubkey(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function updateProjectUrl(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            (string | TransactionObjectArgument)[] | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function validateMetadata(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function validateMetadataBcs(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function votingPower(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function workerAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function workerPubkeyBytes(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
    }
}
export declare namespace validator_cap {
    interface UnverifiedValidatorOperationCap {
        id: _0x2.object_.UID;
        authorizer_validator_address: string;
    }
    namespace UnverifiedValidatorOperationCap {
        const TYPE_QNAME = "0x3::validator_cap::UnverifiedValidatorOperationCap";
        function type(): TypeDescriptor<UnverifiedValidatorOperationCap>;
    }
    interface ValidatorOperationCap {
        authorizer_validator_address: string;
    }
    namespace ValidatorOperationCap {
        const TYPE_QNAME = "0x3::validator_cap::ValidatorOperationCap";
        function type(): TypeDescriptor<ValidatorOperationCap>;
    }
    namespace builder {
        function newFromUnverified(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function newUnverifiedValidatorOperationCapAndTransfer(tx: TransactionBlock, args: [string | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function unverifiedOperationCapAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function verifiedOperationCapAddress(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function newFromUnverified(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[validator_cap.ValidatorOperationCap]>>;
        function newUnverifiedValidatorOperationCapAndTransfer(client: SuiClient, args: [string | TransactionArgument]): Promise<TypedDevInspectResults<[_0x2.object_.ID]>>;
        function unverifiedOperationCapAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function verifiedOperationCapAddress(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
    }
}
export declare namespace validator_set {
    interface ValidatorEpochInfoEvent {
        epoch: bigint;
        validator_address: string;
        reference_gas_survey_quote: bigint;
        stake: bigint;
        commission_rate: bigint;
        pool_staking_reward: bigint;
        storage_fund_staking_reward: bigint;
        pool_token_exchange_rate: staking_pool.PoolTokenExchangeRate;
        tallying_rule_reporters: string[];
        tallying_rule_global_score: bigint;
    }
    namespace ValidatorEpochInfoEvent {
        const TYPE_QNAME = "0x3::validator_set::ValidatorEpochInfoEvent";
        function type(): TypeDescriptor<ValidatorEpochInfoEvent>;
    }
    interface ValidatorEpochInfoEventInstance extends TypedEventInstance<ValidatorEpochInfoEvent> {
        data_decoded: ValidatorEpochInfoEvent;
        type_arguments: [];
    }
    interface ValidatorEpochInfoEventV2 {
        epoch: bigint;
        validator_address: string;
        reference_gas_survey_quote: bigint;
        stake: bigint;
        voting_power: bigint;
        commission_rate: bigint;
        pool_staking_reward: bigint;
        storage_fund_staking_reward: bigint;
        pool_token_exchange_rate: staking_pool.PoolTokenExchangeRate;
        tallying_rule_reporters: string[];
        tallying_rule_global_score: bigint;
    }
    namespace ValidatorEpochInfoEventV2 {
        const TYPE_QNAME = "0x3::validator_set::ValidatorEpochInfoEventV2";
        function type(): TypeDescriptor<ValidatorEpochInfoEventV2>;
    }
    interface ValidatorEpochInfoEventV2Instance extends TypedEventInstance<ValidatorEpochInfoEventV2> {
        data_decoded: ValidatorEpochInfoEventV2;
        type_arguments: [];
    }
    interface ValidatorJoinEvent {
        epoch: bigint;
        validator_address: string;
        staking_pool_id: _0x2.object_.ID;
    }
    namespace ValidatorJoinEvent {
        const TYPE_QNAME = "0x3::validator_set::ValidatorJoinEvent";
        function type(): TypeDescriptor<ValidatorJoinEvent>;
    }
    interface ValidatorJoinEventInstance extends TypedEventInstance<ValidatorJoinEvent> {
        data_decoded: ValidatorJoinEvent;
        type_arguments: [];
    }
    interface ValidatorLeaveEvent {
        epoch: bigint;
        validator_address: string;
        staking_pool_id: _0x2.object_.ID;
        is_voluntary: Boolean;
    }
    namespace ValidatorLeaveEvent {
        const TYPE_QNAME = "0x3::validator_set::ValidatorLeaveEvent";
        function type(): TypeDescriptor<ValidatorLeaveEvent>;
    }
    interface ValidatorLeaveEventInstance extends TypedEventInstance<ValidatorLeaveEvent> {
        data_decoded: ValidatorLeaveEvent;
        type_arguments: [];
    }
    interface ValidatorSet {
        total_stake: bigint;
        active_validators: validator.Validator[];
        pending_active_validators: _0x2.table_vec.TableVec<validator.Validator>;
        pending_removals: bigint[];
        staking_pool_mappings: _0x2.table.Table<_0x2.object_.ID, string>;
        inactive_validators: _0x2.table.Table<_0x2.object_.ID, validator_wrapper.ValidatorWrapper>;
        validator_candidates: _0x2.table.Table<string, validator_wrapper.ValidatorWrapper>;
        at_risk_validators: _0x2.vec_map.VecMap<string, bigint>;
        extra_fields: _0x2.bag.Bag;
    }
    namespace ValidatorSet {
        const TYPE_QNAME = "0x3::validator_set::ValidatorSet";
        function type(): TypeDescriptor<ValidatorSet>;
    }
    namespace builder {
        function activeValidatorAddresses(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function activeValidators(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function advanceEpoch(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function assertNoPendingOrActiveDuplicates(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function deriveReferenceGasPrice(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function getActiveOrPendingOrCandidateValidatorRef(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function getActiveValidatorRef(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getPendingValidatorRef(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getValidatorMut(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function getValidatorMutWithCtx(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function getValidatorMutWithCtxIncludingCandidates(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function getValidatorMutWithVerifiedCap(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            Boolean | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function isActiveValidatorBySuiAddress(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isDuplicateValidator(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isInactiveValidator(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.object_.ID | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function isValidatorCandidate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function new_(tx: TransactionBlock, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function nextEpochValidatorCount(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function poolExchangeRates(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestAddStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
        function requestAddValidator(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestAddValidatorCandidate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            validator.Validator | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestRemoveValidator(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestRemoveValidatorCandidate(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function requestSetCommissionRate(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function requestWithdrawStake(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function stakingPoolMappings(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function sumVotingPowerByAddresses(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function totalStake(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function validatorStakeAmount(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function validatorStakingPoolId(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function validatorTotalStakeAmount(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function validatorVotingPower(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): TransactionArgument & [TransactionArgument, TransactionArgument];
        function verifyCap(tx: TransactionBlock, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): TransactionArgument & [
            TransactionArgument,
            TransactionArgument,
            TransactionArgument
        ];
    }
    namespace view {
        function activeValidatorAddresses(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string[]]>>;
        function activeValidators(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function advanceEpoch(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function assertNoPendingOrActiveDuplicates(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function deriveReferenceGasPrice(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function getActiveOrPendingOrCandidateValidatorRef(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function getActiveValidatorRef(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function getPendingValidatorRef(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function getValidatorMut(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function getValidatorMutWithCtx(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function getValidatorMutWithCtxIncludingCandidates(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function getValidatorMutWithVerifiedCap(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            Boolean | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function isActiveValidatorBySuiAddress(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isDuplicateValidator(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isInactiveValidator(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            _0x2.object_.ID | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function isValidatorCandidate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[Boolean]>>;
        function new_(client: SuiClient, args: [(string | TransactionObjectArgument)[] | TransactionArgument]): Promise<TypedDevInspectResults<[validator_set.ValidatorSet]>>;
        function nextEpochValidatorCount(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function poolExchangeRates(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[string]>>;
        function requestAddStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument,
            _0x2.balance.Balance<_0x2.sui.SUI> | TransactionArgument
        ]): Promise<TypedDevInspectResults<[staking_pool.StakedSui]>>;
        function requestAddValidator(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestAddValidatorCandidate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            validator.Validator | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestRemoveValidator(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestRemoveValidatorCandidate(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function requestSetCommissionRate(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            bigint | TransactionArgument
        ]): Promise<TypedDevInspectResults<[]>>;
        function requestWithdrawStake(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            staking_pool.StakedSui | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.balance.Balance<_0x2.sui.SUI>]>>;
        function stakingPoolMappings(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
        function sumVotingPowerByAddresses(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function totalStake(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[bigint]>>;
        function validatorStakeAmount(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function validatorStakingPoolId(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[_0x2.object_.ID]>>;
        function validatorTotalStakeAmount(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function validatorVotingPower(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionArgument
        ]): Promise<TypedDevInspectResults<[bigint]>>;
        function verifyCap(client: SuiClient, args: [
            string | TransactionObjectArgument | TransactionArgument,
            string | TransactionObjectArgument | TransactionArgument,
            number | TransactionArgument
        ]): Promise<TypedDevInspectResults<[validator_cap.ValidatorOperationCap]>>;
    }
}
export declare namespace validator_wrapper {
    interface ValidatorWrapper {
        inner: _0x2.versioned.Versioned;
    }
    namespace ValidatorWrapper {
        const TYPE_QNAME = "0x3::validator_wrapper::ValidatorWrapper";
        function type(): TypeDescriptor<ValidatorWrapper>;
    }
    namespace builder {
        function createV1(tx: TransactionBlock, args: [validator.Validator | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function destroy(tx: TransactionBlock, args: [validator_wrapper.ValidatorWrapper | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function loadValidatorMaybeUpgrade(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
    }
    namespace view {
        function createV1(client: SuiClient, args: [validator.Validator | TransactionArgument]): Promise<TypedDevInspectResults<[validator_wrapper.ValidatorWrapper]>>;
        function destroy(client: SuiClient, args: [validator_wrapper.ValidatorWrapper | TransactionArgument]): Promise<TypedDevInspectResults<[validator.Validator]>>;
        function loadValidatorMaybeUpgrade(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[string]>>;
    }
}
export declare namespace voting_power {
    interface VotingPowerInfo {
        validator_index: bigint;
        voting_power: bigint;
    }
    namespace VotingPowerInfo {
        const TYPE_QNAME = "0x3::voting_power::VotingPowerInfo";
        function type(): TypeDescriptor<VotingPowerInfo>;
    }
    interface VotingPowerInfoV2 {
        validator_index: bigint;
        voting_power: bigint;
        stake: bigint;
    }
    namespace VotingPowerInfoV2 {
        const TYPE_QNAME = "0x3::voting_power::VotingPowerInfoV2";
        function type(): TypeDescriptor<VotingPowerInfoV2>;
    }
    namespace builder {
        function quorumThreshold(tx: TransactionBlock, args: []): TransactionArgument & [];
        function setVotingPower(tx: TransactionBlock, args: [string | TransactionObjectArgument | TransactionArgument]): TransactionArgument & [TransactionArgument];
        function totalVotingPower(tx: TransactionBlock, args: []): TransactionArgument & [];
    }
    namespace view {
        function quorumThreshold(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
        function setVotingPower(client: SuiClient, args: [string | TransactionObjectArgument | TransactionArgument]): Promise<TypedDevInspectResults<[]>>;
        function totalVotingPower(client: SuiClient, args: []): Promise<TypedDevInspectResults<[bigint]>>;
    }
}
export declare function loadAllTypes(coder: MoveCoder): void;
//# sourceMappingURL=0x3.d.ts.map