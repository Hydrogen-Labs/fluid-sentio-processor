/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
/* Generated types for 0x3, original address 0x3 */
import { TypeDescriptor } from "@typemove/move";
import { defaultMoveCoder } from "@typemove/sui";
import { ZERO_ADDRESS, getMoveCoder, } from "@typemove/sui";
import { TransactionBlock, } from "@mysten/sui.js/transactions";
import { transactionArgumentOrObject, transactionArgumentOrPure, transactionArgumentOrVec, } from "@typemove/sui";
import * as _0x1 from "./0x1.js";
import * as _0x2 from "./0x2.js";
export var genesis;
(function (genesis) {
    let GenesisChainParameters;
    (function (GenesisChainParameters) {
        GenesisChainParameters.TYPE_QNAME = "0x3::genesis::GenesisChainParameters";
        const TYPE = new TypeDescriptor(GenesisChainParameters.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        GenesisChainParameters.type = type;
    })(GenesisChainParameters = genesis.GenesisChainParameters || (genesis.GenesisChainParameters = {}));
    let GenesisValidatorMetadata;
    (function (GenesisValidatorMetadata) {
        GenesisValidatorMetadata.TYPE_QNAME = "0x3::genesis::GenesisValidatorMetadata";
        const TYPE = new TypeDescriptor(GenesisValidatorMetadata.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        GenesisValidatorMetadata.type = type;
    })(GenesisValidatorMetadata = genesis.GenesisValidatorMetadata || (genesis.GenesisValidatorMetadata = {}));
    let TokenAllocation;
    (function (TokenAllocation) {
        TokenAllocation.TYPE_QNAME = "0x3::genesis::TokenAllocation";
        const TYPE = new TypeDescriptor(TokenAllocation.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        TokenAllocation.type = type;
    })(TokenAllocation = genesis.TokenAllocation || (genesis.TokenAllocation = {}));
    let TokenDistributionSchedule;
    (function (TokenDistributionSchedule) {
        TokenDistributionSchedule.TYPE_QNAME = "0x3::genesis::TokenDistributionSchedule";
        const TYPE = new TypeDescriptor(TokenDistributionSchedule.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        TokenDistributionSchedule.type = type;
    })(TokenDistributionSchedule = genesis.TokenDistributionSchedule || (genesis.TokenDistributionSchedule = {}));
})(genesis || (genesis = {}));
export var stake_subsidy;
(function (stake_subsidy) {
    let StakeSubsidy;
    (function (StakeSubsidy) {
        StakeSubsidy.TYPE_QNAME = "0x3::stake_subsidy::StakeSubsidy";
        const TYPE = new TypeDescriptor(StakeSubsidy.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        StakeSubsidy.type = type;
    })(StakeSubsidy = stake_subsidy.StakeSubsidy || (stake_subsidy.StakeSubsidy = {}));
    let builder;
    (function (builder) {
        function advanceEpoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::stake_subsidy::advance_epoch",
                arguments: _args,
            });
        }
        builder.advanceEpoch = advanceEpoch;
        function create(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::stake_subsidy::create",
                arguments: _args,
            });
        }
        builder.create = create;
        function currentEpochSubsidyAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::stake_subsidy::current_epoch_subsidy_amount",
                arguments: _args,
            });
        }
        builder.currentEpochSubsidyAmount = currentEpochSubsidyAmount;
    })(builder = stake_subsidy.builder || (stake_subsidy.builder = {}));
    let view;
    (function (view) {
        async function advanceEpoch(client, args) {
            const tx = new TransactionBlock();
            builder.advanceEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.advanceEpoch = advanceEpoch;
        async function create(client, args) {
            const tx = new TransactionBlock();
            builder.create(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.create = create;
        async function currentEpochSubsidyAmount(client, args) {
            const tx = new TransactionBlock();
            builder.currentEpochSubsidyAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.currentEpochSubsidyAmount = currentEpochSubsidyAmount;
    })(view = stake_subsidy.view || (stake_subsidy.view = {}));
})(stake_subsidy || (stake_subsidy = {}));
export var staking_pool;
(function (staking_pool) {
    let PoolTokenExchangeRate;
    (function (PoolTokenExchangeRate) {
        PoolTokenExchangeRate.TYPE_QNAME = "0x3::staking_pool::PoolTokenExchangeRate";
        const TYPE = new TypeDescriptor(PoolTokenExchangeRate.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        PoolTokenExchangeRate.type = type;
    })(PoolTokenExchangeRate = staking_pool.PoolTokenExchangeRate || (staking_pool.PoolTokenExchangeRate = {}));
    let StakedSui;
    (function (StakedSui) {
        StakedSui.TYPE_QNAME = "0x3::staking_pool::StakedSui";
        const TYPE = new TypeDescriptor(StakedSui.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        StakedSui.type = type;
    })(StakedSui = staking_pool.StakedSui || (staking_pool.StakedSui = {}));
    let StakingPool;
    (function (StakingPool) {
        StakingPool.TYPE_QNAME = "0x3::staking_pool::StakingPool";
        const TYPE = new TypeDescriptor(StakingPool.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        StakingPool.type = type;
    })(StakingPool = staking_pool.StakingPool || (staking_pool.StakingPool = {}));
    let builder;
    (function (builder) {
        function activateStakingPool(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::activate_staking_pool",
                arguments: _args,
            });
        }
        builder.activateStakingPool = activateStakingPool;
        function deactivateStakingPool(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::deactivate_staking_pool",
                arguments: _args,
            });
        }
        builder.deactivateStakingPool = deactivateStakingPool;
        function depositRewards(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::deposit_rewards",
                arguments: _args,
            });
        }
        builder.depositRewards = depositRewards;
        function exchangeRates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::exchange_rates",
                arguments: _args,
            });
        }
        builder.exchangeRates = exchangeRates;
        function isEqualStakingMetadata(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::is_equal_staking_metadata",
                arguments: _args,
            });
        }
        builder.isEqualStakingMetadata = isEqualStakingMetadata;
        function isInactive(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::is_inactive",
                arguments: _args,
            });
        }
        builder.isInactive = isInactive;
        function isPreactive(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::is_preactive",
                arguments: _args,
            });
        }
        builder.isPreactive = isPreactive;
        function joinStakedSui(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::join_staked_sui",
                arguments: _args,
            });
        }
        builder.joinStakedSui = joinStakedSui;
        function new_(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function pendingStakeAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::pending_stake_amount",
                arguments: _args,
            });
        }
        builder.pendingStakeAmount = pendingStakeAmount;
        function pendingStakeWithdrawAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::pending_stake_withdraw_amount",
                arguments: _args,
            });
        }
        builder.pendingStakeWithdrawAmount = pendingStakeWithdrawAmount;
        function poolId(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::pool_id",
                arguments: _args,
            });
        }
        builder.poolId = poolId;
        function poolTokenAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::pool_token_amount",
                arguments: _args,
            });
        }
        builder.poolTokenAmount = poolTokenAmount;
        function poolTokenExchangeRateAtEpoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::pool_token_exchange_rate_at_epoch",
                arguments: _args,
            });
        }
        builder.poolTokenExchangeRateAtEpoch = poolTokenExchangeRateAtEpoch;
        function processPendingStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::process_pending_stake",
                arguments: _args,
            });
        }
        builder.processPendingStake = processPendingStake;
        function processPendingStakesAndWithdraws(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::process_pending_stakes_and_withdraws",
                arguments: _args,
            });
        }
        builder.processPendingStakesAndWithdraws = processPendingStakesAndWithdraws;
        function requestAddStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::request_add_stake",
                arguments: _args,
            });
        }
        builder.requestAddStake = requestAddStake;
        function requestWithdrawStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::request_withdraw_stake",
                arguments: _args,
            });
        }
        builder.requestWithdrawStake = requestWithdrawStake;
        function split(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::split",
                arguments: _args,
            });
        }
        builder.split = split;
        function splitStakedSui(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::split_staked_sui",
                arguments: _args,
            });
        }
        builder.splitStakedSui = splitStakedSui;
        function stakeActivationEpoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::stake_activation_epoch",
                arguments: _args,
            });
        }
        builder.stakeActivationEpoch = stakeActivationEpoch;
        function stakedSuiAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::staked_sui_amount",
                arguments: _args,
            });
        }
        builder.stakedSuiAmount = stakedSuiAmount;
        function suiAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::sui_amount",
                arguments: _args,
            });
        }
        builder.suiAmount = suiAmount;
        function suiBalance(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::sui_balance",
                arguments: _args,
            });
        }
        builder.suiBalance = suiBalance;
        function withdrawFromPrincipal(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::staking_pool::withdraw_from_principal",
                arguments: _args,
            });
        }
        builder.withdrawFromPrincipal = withdrawFromPrincipal;
    })(builder = staking_pool.builder || (staking_pool.builder = {}));
    let view;
    (function (view) {
        async function activateStakingPool(client, args) {
            const tx = new TransactionBlock();
            builder.activateStakingPool(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.activateStakingPool = activateStakingPool;
        async function deactivateStakingPool(client, args) {
            const tx = new TransactionBlock();
            builder.deactivateStakingPool(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.deactivateStakingPool = deactivateStakingPool;
        async function depositRewards(client, args) {
            const tx = new TransactionBlock();
            builder.depositRewards(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.depositRewards = depositRewards;
        async function exchangeRates(client, args) {
            const tx = new TransactionBlock();
            builder.exchangeRates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.exchangeRates = exchangeRates;
        async function isEqualStakingMetadata(client, args) {
            const tx = new TransactionBlock();
            builder.isEqualStakingMetadata(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isEqualStakingMetadata = isEqualStakingMetadata;
        async function isInactive(client, args) {
            const tx = new TransactionBlock();
            builder.isInactive(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isInactive = isInactive;
        async function isPreactive(client, args) {
            const tx = new TransactionBlock();
            builder.isPreactive(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isPreactive = isPreactive;
        async function joinStakedSui(client, args) {
            const tx = new TransactionBlock();
            builder.joinStakedSui(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.joinStakedSui = joinStakedSui;
        async function new_(client, args) {
            const tx = new TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function pendingStakeAmount(client, args) {
            const tx = new TransactionBlock();
            builder.pendingStakeAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.pendingStakeAmount = pendingStakeAmount;
        async function pendingStakeWithdrawAmount(client, args) {
            const tx = new TransactionBlock();
            builder.pendingStakeWithdrawAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.pendingStakeWithdrawAmount = pendingStakeWithdrawAmount;
        async function poolId(client, args) {
            const tx = new TransactionBlock();
            builder.poolId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.poolId = poolId;
        async function poolTokenAmount(client, args) {
            const tx = new TransactionBlock();
            builder.poolTokenAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.poolTokenAmount = poolTokenAmount;
        async function poolTokenExchangeRateAtEpoch(client, args) {
            const tx = new TransactionBlock();
            builder.poolTokenExchangeRateAtEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.poolTokenExchangeRateAtEpoch = poolTokenExchangeRateAtEpoch;
        async function processPendingStake(client, args) {
            const tx = new TransactionBlock();
            builder.processPendingStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.processPendingStake = processPendingStake;
        async function processPendingStakesAndWithdraws(client, args) {
            const tx = new TransactionBlock();
            builder.processPendingStakesAndWithdraws(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.processPendingStakesAndWithdraws = processPendingStakesAndWithdraws;
        async function requestAddStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStake = requestAddStake;
        async function requestWithdrawStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestWithdrawStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestWithdrawStake = requestWithdrawStake;
        async function split(client, args) {
            const tx = new TransactionBlock();
            builder.split(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.split = split;
        async function splitStakedSui(client, args) {
            const tx = new TransactionBlock();
            builder.splitStakedSui(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.splitStakedSui = splitStakedSui;
        async function stakeActivationEpoch(client, args) {
            const tx = new TransactionBlock();
            builder.stakeActivationEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.stakeActivationEpoch = stakeActivationEpoch;
        async function stakedSuiAmount(client, args) {
            const tx = new TransactionBlock();
            builder.stakedSuiAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.stakedSuiAmount = stakedSuiAmount;
        async function suiAmount(client, args) {
            const tx = new TransactionBlock();
            builder.suiAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.suiAmount = suiAmount;
        async function suiBalance(client, args) {
            const tx = new TransactionBlock();
            builder.suiBalance(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.suiBalance = suiBalance;
        async function withdrawFromPrincipal(client, args) {
            const tx = new TransactionBlock();
            builder.withdrawFromPrincipal(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.withdrawFromPrincipal = withdrawFromPrincipal;
    })(view = staking_pool.view || (staking_pool.view = {}));
})(staking_pool || (staking_pool = {}));
export var storage_fund;
(function (storage_fund) {
    let StorageFund;
    (function (StorageFund) {
        StorageFund.TYPE_QNAME = "0x3::storage_fund::StorageFund";
        const TYPE = new TypeDescriptor(StorageFund.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        StorageFund.type = type;
    })(StorageFund = storage_fund.StorageFund || (storage_fund.StorageFund = {}));
    let builder;
    (function (builder) {
        function advanceEpoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            _args.push(transactionArgumentOrPure(args[4], tx));
            _args.push(transactionArgumentOrPure(args[5], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::storage_fund::advance_epoch",
                arguments: _args,
            });
        }
        builder.advanceEpoch = advanceEpoch;
        function new_(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::storage_fund::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function totalBalance(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::storage_fund::total_balance",
                arguments: _args,
            });
        }
        builder.totalBalance = totalBalance;
        function totalObjectStorageRebates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::storage_fund::total_object_storage_rebates",
                arguments: _args,
            });
        }
        builder.totalObjectStorageRebates = totalObjectStorageRebates;
    })(builder = storage_fund.builder || (storage_fund.builder = {}));
    let view;
    (function (view) {
        async function advanceEpoch(client, args) {
            const tx = new TransactionBlock();
            builder.advanceEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.advanceEpoch = advanceEpoch;
        async function new_(client, args) {
            const tx = new TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function totalBalance(client, args) {
            const tx = new TransactionBlock();
            builder.totalBalance(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.totalBalance = totalBalance;
        async function totalObjectStorageRebates(client, args) {
            const tx = new TransactionBlock();
            builder.totalObjectStorageRebates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.totalObjectStorageRebates = totalObjectStorageRebates;
    })(view = storage_fund.view || (storage_fund.view = {}));
})(storage_fund || (storage_fund = {}));
export var sui_system;
(function (sui_system) {
    let SuiSystemState;
    (function (SuiSystemState) {
        SuiSystemState.TYPE_QNAME = "0x3::sui_system::SuiSystemState";
        const TYPE = new TypeDescriptor(SuiSystemState.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        SuiSystemState.type = type;
    })(SuiSystemState = sui_system.SuiSystemState || (sui_system.SuiSystemState = {}));
    let builder;
    (function (builder) {
        function activeValidatorAddresses(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::active_validator_addresses",
                arguments: _args,
            });
        }
        builder.activeValidatorAddresses = activeValidatorAddresses;
        function create(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            _args.push(transactionArgumentOrPure(args[4], tx));
            _args.push(transactionArgumentOrPure(args[5], tx));
            _args.push(transactionArgumentOrPure(args[6], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::create",
                arguments: _args,
            });
        }
        builder.create = create;
        function poolExchangeRates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::pool_exchange_rates",
                arguments: _args,
            });
        }
        builder.poolExchangeRates = poolExchangeRates;
        function reportValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::report_validator",
                arguments: _args,
            });
        }
        builder.reportValidator = reportValidator;
        function requestAddStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_add_stake",
                arguments: _args,
            });
        }
        builder.requestAddStake = requestAddStake;
        function requestAddStakeMulCoin(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_add_stake_mul_coin",
                arguments: _args,
            });
        }
        builder.requestAddStakeMulCoin = requestAddStakeMulCoin;
        function requestAddStakeNonEntry(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_add_stake_non_entry",
                arguments: _args,
            });
        }
        builder.requestAddStakeNonEntry = requestAddStakeNonEntry;
        function requestAddValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_add_validator",
                arguments: _args,
            });
        }
        builder.requestAddValidator = requestAddValidator;
        function requestAddValidatorCandidate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            _args.push(transactionArgumentOrVec(args[3], tx));
            _args.push(transactionArgumentOrVec(args[4], tx));
            _args.push(transactionArgumentOrVec(args[5], tx));
            _args.push(transactionArgumentOrVec(args[6], tx));
            _args.push(transactionArgumentOrVec(args[7], tx));
            _args.push(transactionArgumentOrVec(args[8], tx));
            _args.push(transactionArgumentOrVec(args[9], tx));
            _args.push(transactionArgumentOrVec(args[10], tx));
            _args.push(transactionArgumentOrVec(args[11], tx));
            _args.push(transactionArgumentOrVec(args[12], tx));
            _args.push(transactionArgumentOrPure(args[13], tx));
            _args.push(transactionArgumentOrPure(args[14], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_add_validator_candidate",
                arguments: _args,
            });
        }
        builder.requestAddValidatorCandidate = requestAddValidatorCandidate;
        function requestRemoveValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_remove_validator",
                arguments: _args,
            });
        }
        builder.requestRemoveValidator = requestRemoveValidator;
        function requestRemoveValidatorCandidate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_remove_validator_candidate",
                arguments: _args,
            });
        }
        builder.requestRemoveValidatorCandidate = requestRemoveValidatorCandidate;
        function requestSetCommissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_set_commission_rate",
                arguments: _args,
            });
        }
        builder.requestSetCommissionRate = requestSetCommissionRate;
        function requestSetGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_set_gas_price",
                arguments: _args,
            });
        }
        builder.requestSetGasPrice = requestSetGasPrice;
        function requestWithdrawStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_withdraw_stake",
                arguments: _args,
            });
        }
        builder.requestWithdrawStake = requestWithdrawStake;
        function requestWithdrawStakeNonEntry(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::request_withdraw_stake_non_entry",
                arguments: _args,
            });
        }
        builder.requestWithdrawStakeNonEntry = requestWithdrawStakeNonEntry;
        function rotateOperationCap(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::rotate_operation_cap",
                arguments: _args,
            });
        }
        builder.rotateOperationCap = rotateOperationCap;
        function setCandidateValidatorCommissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::set_candidate_validator_commission_rate",
                arguments: _args,
            });
        }
        builder.setCandidateValidatorCommissionRate = setCandidateValidatorCommissionRate;
        function setCandidateValidatorGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::set_candidate_validator_gas_price",
                arguments: _args,
            });
        }
        builder.setCandidateValidatorGasPrice = setCandidateValidatorGasPrice;
        function undoReportValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::undo_report_validator",
                arguments: _args,
            });
        }
        builder.undoReportValidator = undoReportValidator;
        function updateCandidateValidatorNetworkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_candidate_validator_network_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorNetworkAddress = updateCandidateValidatorNetworkAddress;
        function updateCandidateValidatorNetworkPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_candidate_validator_network_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorNetworkPubkey = updateCandidateValidatorNetworkPubkey;
        function updateCandidateValidatorP2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_candidate_validator_p2p_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorP2pAddress = updateCandidateValidatorP2pAddress;
        function updateCandidateValidatorPrimaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_candidate_validator_primary_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorPrimaryAddress = updateCandidateValidatorPrimaryAddress;
        function updateCandidateValidatorProtocolPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_candidate_validator_protocol_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorProtocolPubkey = updateCandidateValidatorProtocolPubkey;
        function updateCandidateValidatorWorkerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_candidate_validator_worker_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorWorkerAddress = updateCandidateValidatorWorkerAddress;
        function updateCandidateValidatorWorkerPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_candidate_validator_worker_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorWorkerPubkey = updateCandidateValidatorWorkerPubkey;
        function updateValidatorDescription(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_description",
                arguments: _args,
            });
        }
        builder.updateValidatorDescription = updateValidatorDescription;
        function updateValidatorImageUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_image_url",
                arguments: _args,
            });
        }
        builder.updateValidatorImageUrl = updateValidatorImageUrl;
        function updateValidatorName(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_name",
                arguments: _args,
            });
        }
        builder.updateValidatorName = updateValidatorName;
        function updateValidatorNextEpochNetworkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_next_epoch_network_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochNetworkAddress = updateValidatorNextEpochNetworkAddress;
        function updateValidatorNextEpochNetworkPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_next_epoch_network_pubkey",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochNetworkPubkey = updateValidatorNextEpochNetworkPubkey;
        function updateValidatorNextEpochP2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_next_epoch_p2p_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochP2pAddress = updateValidatorNextEpochP2pAddress;
        function updateValidatorNextEpochPrimaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_next_epoch_primary_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochPrimaryAddress = updateValidatorNextEpochPrimaryAddress;
        function updateValidatorNextEpochProtocolPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_next_epoch_protocol_pubkey",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochProtocolPubkey = updateValidatorNextEpochProtocolPubkey;
        function updateValidatorNextEpochWorkerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_next_epoch_worker_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochWorkerAddress = updateValidatorNextEpochWorkerAddress;
        function updateValidatorNextEpochWorkerPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_next_epoch_worker_pubkey",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochWorkerPubkey = updateValidatorNextEpochWorkerPubkey;
        function updateValidatorProjectUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system::update_validator_project_url",
                arguments: _args,
            });
        }
        builder.updateValidatorProjectUrl = updateValidatorProjectUrl;
    })(builder = sui_system.builder || (sui_system.builder = {}));
    let view;
    (function (view) {
        async function activeValidatorAddresses(client, args) {
            const tx = new TransactionBlock();
            builder.activeValidatorAddresses(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.activeValidatorAddresses = activeValidatorAddresses;
        async function create(client, args) {
            const tx = new TransactionBlock();
            builder.create(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.create = create;
        async function poolExchangeRates(client, args) {
            const tx = new TransactionBlock();
            builder.poolExchangeRates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.poolExchangeRates = poolExchangeRates;
        async function reportValidator(client, args) {
            const tx = new TransactionBlock();
            builder.reportValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.reportValidator = reportValidator;
        async function requestAddStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStake = requestAddStake;
        async function requestAddStakeMulCoin(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStakeMulCoin(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStakeMulCoin = requestAddStakeMulCoin;
        async function requestAddStakeNonEntry(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStakeNonEntry(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStakeNonEntry = requestAddStakeNonEntry;
        async function requestAddValidator(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddValidator = requestAddValidator;
        async function requestAddValidatorCandidate(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddValidatorCandidate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddValidatorCandidate = requestAddValidatorCandidate;
        async function requestRemoveValidator(client, args) {
            const tx = new TransactionBlock();
            builder.requestRemoveValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestRemoveValidator = requestRemoveValidator;
        async function requestRemoveValidatorCandidate(client, args) {
            const tx = new TransactionBlock();
            builder.requestRemoveValidatorCandidate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestRemoveValidatorCandidate = requestRemoveValidatorCandidate;
        async function requestSetCommissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.requestSetCommissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestSetCommissionRate = requestSetCommissionRate;
        async function requestSetGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.requestSetGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestSetGasPrice = requestSetGasPrice;
        async function requestWithdrawStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestWithdrawStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestWithdrawStake = requestWithdrawStake;
        async function requestWithdrawStakeNonEntry(client, args) {
            const tx = new TransactionBlock();
            builder.requestWithdrawStakeNonEntry(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestWithdrawStakeNonEntry = requestWithdrawStakeNonEntry;
        async function rotateOperationCap(client, args) {
            const tx = new TransactionBlock();
            builder.rotateOperationCap(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.rotateOperationCap = rotateOperationCap;
        async function setCandidateValidatorCommissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.setCandidateValidatorCommissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setCandidateValidatorCommissionRate = setCandidateValidatorCommissionRate;
        async function setCandidateValidatorGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.setCandidateValidatorGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setCandidateValidatorGasPrice = setCandidateValidatorGasPrice;
        async function undoReportValidator(client, args) {
            const tx = new TransactionBlock();
            builder.undoReportValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.undoReportValidator = undoReportValidator;
        async function updateCandidateValidatorNetworkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorNetworkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorNetworkAddress = updateCandidateValidatorNetworkAddress;
        async function updateCandidateValidatorNetworkPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorNetworkPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorNetworkPubkey = updateCandidateValidatorNetworkPubkey;
        async function updateCandidateValidatorP2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorP2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorP2pAddress = updateCandidateValidatorP2pAddress;
        async function updateCandidateValidatorPrimaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorPrimaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorPrimaryAddress = updateCandidateValidatorPrimaryAddress;
        async function updateCandidateValidatorProtocolPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorProtocolPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorProtocolPubkey = updateCandidateValidatorProtocolPubkey;
        async function updateCandidateValidatorWorkerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorWorkerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorWorkerAddress = updateCandidateValidatorWorkerAddress;
        async function updateCandidateValidatorWorkerPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorWorkerPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorWorkerPubkey = updateCandidateValidatorWorkerPubkey;
        async function updateValidatorDescription(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorDescription(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorDescription = updateValidatorDescription;
        async function updateValidatorImageUrl(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorImageUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorImageUrl = updateValidatorImageUrl;
        async function updateValidatorName(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorName(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorName = updateValidatorName;
        async function updateValidatorNextEpochNetworkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochNetworkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochNetworkAddress = updateValidatorNextEpochNetworkAddress;
        async function updateValidatorNextEpochNetworkPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochNetworkPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochNetworkPubkey = updateValidatorNextEpochNetworkPubkey;
        async function updateValidatorNextEpochP2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochP2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochP2pAddress = updateValidatorNextEpochP2pAddress;
        async function updateValidatorNextEpochPrimaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochPrimaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochPrimaryAddress = updateValidatorNextEpochPrimaryAddress;
        async function updateValidatorNextEpochProtocolPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochProtocolPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochProtocolPubkey = updateValidatorNextEpochProtocolPubkey;
        async function updateValidatorNextEpochWorkerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochWorkerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochWorkerAddress = updateValidatorNextEpochWorkerAddress;
        async function updateValidatorNextEpochWorkerPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochWorkerPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochWorkerPubkey = updateValidatorNextEpochWorkerPubkey;
        async function updateValidatorProjectUrl(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorProjectUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorProjectUrl = updateValidatorProjectUrl;
    })(view = sui_system.view || (sui_system.view = {}));
})(sui_system || (sui_system = {}));
export var sui_system_state_inner;
(function (sui_system_state_inner) {
    let SuiSystemStateInner;
    (function (SuiSystemStateInner) {
        SuiSystemStateInner.TYPE_QNAME = "0x3::sui_system_state_inner::SuiSystemStateInner";
        const TYPE = new TypeDescriptor(SuiSystemStateInner.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        SuiSystemStateInner.type = type;
    })(SuiSystemStateInner = sui_system_state_inner.SuiSystemStateInner || (sui_system_state_inner.SuiSystemStateInner = {}));
    let SuiSystemStateInnerV2;
    (function (SuiSystemStateInnerV2) {
        SuiSystemStateInnerV2.TYPE_QNAME = "0x3::sui_system_state_inner::SuiSystemStateInnerV2";
        const TYPE = new TypeDescriptor(SuiSystemStateInnerV2.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        SuiSystemStateInnerV2.type = type;
    })(SuiSystemStateInnerV2 = sui_system_state_inner.SuiSystemStateInnerV2 || (sui_system_state_inner.SuiSystemStateInnerV2 = {}));
    let SystemEpochInfoEvent;
    (function (SystemEpochInfoEvent) {
        SystemEpochInfoEvent.TYPE_QNAME = "0x3::sui_system_state_inner::SystemEpochInfoEvent";
        const TYPE = new TypeDescriptor(SystemEpochInfoEvent.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        SystemEpochInfoEvent.type = type;
    })(SystemEpochInfoEvent = sui_system_state_inner.SystemEpochInfoEvent || (sui_system_state_inner.SystemEpochInfoEvent = {}));
    let SystemParameters;
    (function (SystemParameters) {
        SystemParameters.TYPE_QNAME = "0x3::sui_system_state_inner::SystemParameters";
        const TYPE = new TypeDescriptor(SystemParameters.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        SystemParameters.type = type;
    })(SystemParameters = sui_system_state_inner.SystemParameters || (sui_system_state_inner.SystemParameters = {}));
    let SystemParametersV2;
    (function (SystemParametersV2) {
        SystemParametersV2.TYPE_QNAME = "0x3::sui_system_state_inner::SystemParametersV2";
        const TYPE = new TypeDescriptor(SystemParametersV2.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        SystemParametersV2.type = type;
    })(SystemParametersV2 = sui_system_state_inner.SystemParametersV2 || (sui_system_state_inner.SystemParametersV2 = {}));
    let builder;
    (function (builder) {
        function activeValidatorAddresses(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::active_validator_addresses",
                arguments: _args,
            });
        }
        builder.activeValidatorAddresses = activeValidatorAddresses;
        function activeValidatorVotingPowers(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::active_validator_voting_powers",
                arguments: _args,
            });
        }
        builder.activeValidatorVotingPowers = activeValidatorVotingPowers;
        function advanceEpoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            _args.push(transactionArgumentOrPure(args[4], tx));
            _args.push(transactionArgumentOrPure(args[5], tx));
            _args.push(transactionArgumentOrPure(args[6], tx));
            _args.push(transactionArgumentOrPure(args[7], tx));
            _args.push(transactionArgumentOrPure(args[8], tx));
            _args.push(transactionArgumentOrPure(args[9], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::advance_epoch",
                arguments: _args,
            });
        }
        builder.advanceEpoch = advanceEpoch;
        function create(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrVec(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            _args.push(transactionArgumentOrPure(args[4], tx));
            _args.push(transactionArgumentOrPure(args[5], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::create",
                arguments: _args,
            });
        }
        builder.create = create;
        function createSystemParameters(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            _args.push(transactionArgumentOrPure(args[4], tx));
            _args.push(transactionArgumentOrPure(args[5], tx));
            _args.push(transactionArgumentOrPure(args[6], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::create_system_parameters",
                arguments: _args,
            });
        }
        builder.createSystemParameters = createSystemParameters;
        function epoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::epoch",
                arguments: _args,
            });
        }
        builder.epoch = epoch;
        function epochStartTimestampMs(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::epoch_start_timestamp_ms",
                arguments: _args,
            });
        }
        builder.epochStartTimestampMs = epochStartTimestampMs;
        function genesisSystemStateVersion(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::genesis_system_state_version",
                arguments: _args,
            });
        }
        builder.genesisSystemStateVersion = genesisSystemStateVersion;
        function getReportersOf(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::get_reporters_of",
                arguments: _args,
            });
        }
        builder.getReportersOf = getReportersOf;
        function getStorageFundObjectRebates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::get_storage_fund_object_rebates",
                arguments: _args,
            });
        }
        builder.getStorageFundObjectRebates = getStorageFundObjectRebates;
        function getStorageFundTotalBalance(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::get_storage_fund_total_balance",
                arguments: _args,
            });
        }
        builder.getStorageFundTotalBalance = getStorageFundTotalBalance;
        function poolExchangeRates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::pool_exchange_rates",
                arguments: _args,
            });
        }
        builder.poolExchangeRates = poolExchangeRates;
        function protocolVersion(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::protocol_version",
                arguments: _args,
            });
        }
        builder.protocolVersion = protocolVersion;
        function reportValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::report_validator",
                arguments: _args,
            });
        }
        builder.reportValidator = reportValidator;
        function requestAddStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_add_stake",
                arguments: _args,
            });
        }
        builder.requestAddStake = requestAddStake;
        function requestAddStakeMulCoin(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            _args.push(transactionArgumentOrPure(args[3], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_add_stake_mul_coin",
                arguments: _args,
            });
        }
        builder.requestAddStakeMulCoin = requestAddStakeMulCoin;
        function requestAddValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_add_validator",
                arguments: _args,
            });
        }
        builder.requestAddValidator = requestAddValidator;
        function requestAddValidatorCandidate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            _args.push(transactionArgumentOrVec(args[3], tx));
            _args.push(transactionArgumentOrVec(args[4], tx));
            _args.push(transactionArgumentOrVec(args[5], tx));
            _args.push(transactionArgumentOrVec(args[6], tx));
            _args.push(transactionArgumentOrVec(args[7], tx));
            _args.push(transactionArgumentOrVec(args[8], tx));
            _args.push(transactionArgumentOrVec(args[9], tx));
            _args.push(transactionArgumentOrVec(args[10], tx));
            _args.push(transactionArgumentOrVec(args[11], tx));
            _args.push(transactionArgumentOrVec(args[12], tx));
            _args.push(transactionArgumentOrPure(args[13], tx));
            _args.push(transactionArgumentOrPure(args[14], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_add_validator_candidate",
                arguments: _args,
            });
        }
        builder.requestAddValidatorCandidate = requestAddValidatorCandidate;
        function requestRemoveValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_remove_validator",
                arguments: _args,
            });
        }
        builder.requestRemoveValidator = requestRemoveValidator;
        function requestRemoveValidatorCandidate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_remove_validator_candidate",
                arguments: _args,
            });
        }
        builder.requestRemoveValidatorCandidate = requestRemoveValidatorCandidate;
        function requestSetCommissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_set_commission_rate",
                arguments: _args,
            });
        }
        builder.requestSetCommissionRate = requestSetCommissionRate;
        function requestSetGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_set_gas_price",
                arguments: _args,
            });
        }
        builder.requestSetGasPrice = requestSetGasPrice;
        function requestWithdrawStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::request_withdraw_stake",
                arguments: _args,
            });
        }
        builder.requestWithdrawStake = requestWithdrawStake;
        function rotateOperationCap(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::rotate_operation_cap",
                arguments: _args,
            });
        }
        builder.rotateOperationCap = rotateOperationCap;
        function setCandidateValidatorCommissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::set_candidate_validator_commission_rate",
                arguments: _args,
            });
        }
        builder.setCandidateValidatorCommissionRate = setCandidateValidatorCommissionRate;
        function setCandidateValidatorGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::set_candidate_validator_gas_price",
                arguments: _args,
            });
        }
        builder.setCandidateValidatorGasPrice = setCandidateValidatorGasPrice;
        function systemStateVersion(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::system_state_version",
                arguments: _args,
            });
        }
        builder.systemStateVersion = systemStateVersion;
        function undoReportValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::undo_report_validator",
                arguments: _args,
            });
        }
        builder.undoReportValidator = undoReportValidator;
        function updateCandidateValidatorNetworkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_candidate_validator_network_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorNetworkAddress = updateCandidateValidatorNetworkAddress;
        function updateCandidateValidatorNetworkPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_candidate_validator_network_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorNetworkPubkey = updateCandidateValidatorNetworkPubkey;
        function updateCandidateValidatorP2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_candidate_validator_p2p_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorP2pAddress = updateCandidateValidatorP2pAddress;
        function updateCandidateValidatorPrimaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_candidate_validator_primary_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorPrimaryAddress = updateCandidateValidatorPrimaryAddress;
        function updateCandidateValidatorProtocolPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_candidate_validator_protocol_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorProtocolPubkey = updateCandidateValidatorProtocolPubkey;
        function updateCandidateValidatorWorkerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_candidate_validator_worker_address",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorWorkerAddress = updateCandidateValidatorWorkerAddress;
        function updateCandidateValidatorWorkerPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_candidate_validator_worker_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateValidatorWorkerPubkey = updateCandidateValidatorWorkerPubkey;
        function updateValidatorDescription(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_description",
                arguments: _args,
            });
        }
        builder.updateValidatorDescription = updateValidatorDescription;
        function updateValidatorImageUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_image_url",
                arguments: _args,
            });
        }
        builder.updateValidatorImageUrl = updateValidatorImageUrl;
        function updateValidatorName(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_name",
                arguments: _args,
            });
        }
        builder.updateValidatorName = updateValidatorName;
        function updateValidatorNextEpochNetworkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_next_epoch_network_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochNetworkAddress = updateValidatorNextEpochNetworkAddress;
        function updateValidatorNextEpochNetworkPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_next_epoch_network_pubkey",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochNetworkPubkey = updateValidatorNextEpochNetworkPubkey;
        function updateValidatorNextEpochP2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_next_epoch_p2p_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochP2pAddress = updateValidatorNextEpochP2pAddress;
        function updateValidatorNextEpochPrimaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_next_epoch_primary_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochPrimaryAddress = updateValidatorNextEpochPrimaryAddress;
        function updateValidatorNextEpochProtocolPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_next_epoch_protocol_pubkey",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochProtocolPubkey = updateValidatorNextEpochProtocolPubkey;
        function updateValidatorNextEpochWorkerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_next_epoch_worker_address",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochWorkerAddress = updateValidatorNextEpochWorkerAddress;
        function updateValidatorNextEpochWorkerPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_next_epoch_worker_pubkey",
                arguments: _args,
            });
        }
        builder.updateValidatorNextEpochWorkerPubkey = updateValidatorNextEpochWorkerPubkey;
        function updateValidatorProjectUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::update_validator_project_url",
                arguments: _args,
            });
        }
        builder.updateValidatorProjectUrl = updateValidatorProjectUrl;
        function v1ToV2(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::v1_to_v2",
                arguments: _args,
            });
        }
        builder.v1ToV2 = v1ToV2;
        function validatorStakeAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::validator_stake_amount",
                arguments: _args,
            });
        }
        builder.validatorStakeAmount = validatorStakeAmount;
        function validatorStakingPoolId(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::validator_staking_pool_id",
                arguments: _args,
            });
        }
        builder.validatorStakingPoolId = validatorStakingPoolId;
        function validatorStakingPoolMappings(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::sui_system_state_inner::validator_staking_pool_mappings",
                arguments: _args,
            });
        }
        builder.validatorStakingPoolMappings = validatorStakingPoolMappings;
    })(builder = sui_system_state_inner.builder || (sui_system_state_inner.builder = {}));
    let view;
    (function (view) {
        async function activeValidatorAddresses(client, args) {
            const tx = new TransactionBlock();
            builder.activeValidatorAddresses(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.activeValidatorAddresses = activeValidatorAddresses;
        async function activeValidatorVotingPowers(client, args) {
            const tx = new TransactionBlock();
            builder.activeValidatorVotingPowers(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.activeValidatorVotingPowers = activeValidatorVotingPowers;
        async function advanceEpoch(client, args) {
            const tx = new TransactionBlock();
            builder.advanceEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.advanceEpoch = advanceEpoch;
        async function create(client, args) {
            const tx = new TransactionBlock();
            builder.create(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.create = create;
        async function createSystemParameters(client, args) {
            const tx = new TransactionBlock();
            builder.createSystemParameters(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.createSystemParameters = createSystemParameters;
        async function epoch(client, args) {
            const tx = new TransactionBlock();
            builder.epoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.epoch = epoch;
        async function epochStartTimestampMs(client, args) {
            const tx = new TransactionBlock();
            builder.epochStartTimestampMs(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.epochStartTimestampMs = epochStartTimestampMs;
        async function genesisSystemStateVersion(client, args) {
            const tx = new TransactionBlock();
            builder.genesisSystemStateVersion(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.genesisSystemStateVersion = genesisSystemStateVersion;
        async function getReportersOf(client, args) {
            const tx = new TransactionBlock();
            builder.getReportersOf(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getReportersOf = getReportersOf;
        async function getStorageFundObjectRebates(client, args) {
            const tx = new TransactionBlock();
            builder.getStorageFundObjectRebates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getStorageFundObjectRebates = getStorageFundObjectRebates;
        async function getStorageFundTotalBalance(client, args) {
            const tx = new TransactionBlock();
            builder.getStorageFundTotalBalance(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getStorageFundTotalBalance = getStorageFundTotalBalance;
        async function poolExchangeRates(client, args) {
            const tx = new TransactionBlock();
            builder.poolExchangeRates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.poolExchangeRates = poolExchangeRates;
        async function protocolVersion(client, args) {
            const tx = new TransactionBlock();
            builder.protocolVersion(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.protocolVersion = protocolVersion;
        async function reportValidator(client, args) {
            const tx = new TransactionBlock();
            builder.reportValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.reportValidator = reportValidator;
        async function requestAddStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStake = requestAddStake;
        async function requestAddStakeMulCoin(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStakeMulCoin(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStakeMulCoin = requestAddStakeMulCoin;
        async function requestAddValidator(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddValidator = requestAddValidator;
        async function requestAddValidatorCandidate(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddValidatorCandidate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddValidatorCandidate = requestAddValidatorCandidate;
        async function requestRemoveValidator(client, args) {
            const tx = new TransactionBlock();
            builder.requestRemoveValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestRemoveValidator = requestRemoveValidator;
        async function requestRemoveValidatorCandidate(client, args) {
            const tx = new TransactionBlock();
            builder.requestRemoveValidatorCandidate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestRemoveValidatorCandidate = requestRemoveValidatorCandidate;
        async function requestSetCommissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.requestSetCommissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestSetCommissionRate = requestSetCommissionRate;
        async function requestSetGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.requestSetGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestSetGasPrice = requestSetGasPrice;
        async function requestWithdrawStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestWithdrawStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestWithdrawStake = requestWithdrawStake;
        async function rotateOperationCap(client, args) {
            const tx = new TransactionBlock();
            builder.rotateOperationCap(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.rotateOperationCap = rotateOperationCap;
        async function setCandidateValidatorCommissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.setCandidateValidatorCommissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setCandidateValidatorCommissionRate = setCandidateValidatorCommissionRate;
        async function setCandidateValidatorGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.setCandidateValidatorGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setCandidateValidatorGasPrice = setCandidateValidatorGasPrice;
        async function systemStateVersion(client, args) {
            const tx = new TransactionBlock();
            builder.systemStateVersion(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.systemStateVersion = systemStateVersion;
        async function undoReportValidator(client, args) {
            const tx = new TransactionBlock();
            builder.undoReportValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.undoReportValidator = undoReportValidator;
        async function updateCandidateValidatorNetworkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorNetworkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorNetworkAddress = updateCandidateValidatorNetworkAddress;
        async function updateCandidateValidatorNetworkPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorNetworkPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorNetworkPubkey = updateCandidateValidatorNetworkPubkey;
        async function updateCandidateValidatorP2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorP2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorP2pAddress = updateCandidateValidatorP2pAddress;
        async function updateCandidateValidatorPrimaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorPrimaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorPrimaryAddress = updateCandidateValidatorPrimaryAddress;
        async function updateCandidateValidatorProtocolPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorProtocolPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorProtocolPubkey = updateCandidateValidatorProtocolPubkey;
        async function updateCandidateValidatorWorkerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorWorkerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorWorkerAddress = updateCandidateValidatorWorkerAddress;
        async function updateCandidateValidatorWorkerPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateValidatorWorkerPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateValidatorWorkerPubkey = updateCandidateValidatorWorkerPubkey;
        async function updateValidatorDescription(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorDescription(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorDescription = updateValidatorDescription;
        async function updateValidatorImageUrl(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorImageUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorImageUrl = updateValidatorImageUrl;
        async function updateValidatorName(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorName(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorName = updateValidatorName;
        async function updateValidatorNextEpochNetworkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochNetworkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochNetworkAddress = updateValidatorNextEpochNetworkAddress;
        async function updateValidatorNextEpochNetworkPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochNetworkPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochNetworkPubkey = updateValidatorNextEpochNetworkPubkey;
        async function updateValidatorNextEpochP2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochP2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochP2pAddress = updateValidatorNextEpochP2pAddress;
        async function updateValidatorNextEpochPrimaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochPrimaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochPrimaryAddress = updateValidatorNextEpochPrimaryAddress;
        async function updateValidatorNextEpochProtocolPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochProtocolPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochProtocolPubkey = updateValidatorNextEpochProtocolPubkey;
        async function updateValidatorNextEpochWorkerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochWorkerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochWorkerAddress = updateValidatorNextEpochWorkerAddress;
        async function updateValidatorNextEpochWorkerPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorNextEpochWorkerPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorNextEpochWorkerPubkey = updateValidatorNextEpochWorkerPubkey;
        async function updateValidatorProjectUrl(client, args) {
            const tx = new TransactionBlock();
            builder.updateValidatorProjectUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateValidatorProjectUrl = updateValidatorProjectUrl;
        async function v1ToV2(client, args) {
            const tx = new TransactionBlock();
            builder.v1ToV2(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.v1ToV2 = v1ToV2;
        async function validatorStakeAmount(client, args) {
            const tx = new TransactionBlock();
            builder.validatorStakeAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validatorStakeAmount = validatorStakeAmount;
        async function validatorStakingPoolId(client, args) {
            const tx = new TransactionBlock();
            builder.validatorStakingPoolId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validatorStakingPoolId = validatorStakingPoolId;
        async function validatorStakingPoolMappings(client, args) {
            const tx = new TransactionBlock();
            builder.validatorStakingPoolMappings(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validatorStakingPoolMappings = validatorStakingPoolMappings;
    })(view = sui_system_state_inner.view || (sui_system_state_inner.view = {}));
})(sui_system_state_inner || (sui_system_state_inner = {}));
export var validator;
(function (validator) {
    let StakingRequestEvent;
    (function (StakingRequestEvent) {
        StakingRequestEvent.TYPE_QNAME = "0x3::validator::StakingRequestEvent";
        const TYPE = new TypeDescriptor(StakingRequestEvent.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        StakingRequestEvent.type = type;
    })(StakingRequestEvent = validator.StakingRequestEvent || (validator.StakingRequestEvent = {}));
    let UnstakingRequestEvent;
    (function (UnstakingRequestEvent) {
        UnstakingRequestEvent.TYPE_QNAME = "0x3::validator::UnstakingRequestEvent";
        const TYPE = new TypeDescriptor(UnstakingRequestEvent.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        UnstakingRequestEvent.type = type;
    })(UnstakingRequestEvent = validator.UnstakingRequestEvent || (validator.UnstakingRequestEvent = {}));
    let Validator;
    (function (Validator) {
        Validator.TYPE_QNAME = "0x3::validator::Validator";
        const TYPE = new TypeDescriptor(Validator.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        Validator.type = type;
    })(Validator = validator.Validator || (validator.Validator = {}));
    let ValidatorMetadata;
    (function (ValidatorMetadata) {
        ValidatorMetadata.TYPE_QNAME = "0x3::validator::ValidatorMetadata";
        const TYPE = new TypeDescriptor(ValidatorMetadata.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorMetadata.type = type;
    })(ValidatorMetadata = validator.ValidatorMetadata || (validator.ValidatorMetadata = {}));
    let builder;
    (function (builder) {
        function activate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::activate",
                arguments: _args,
            });
        }
        builder.activate = activate;
        function adjustStakeAndGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::adjust_stake_and_gas_price",
                arguments: _args,
            });
        }
        builder.adjustStakeAndGasPrice = adjustStakeAndGasPrice;
        function commissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::commission_rate",
                arguments: _args,
            });
        }
        builder.commissionRate = commissionRate;
        function deactivate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::deactivate",
                arguments: _args,
            });
        }
        builder.deactivate = deactivate;
        function depositStakeRewards(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::deposit_stake_rewards",
                arguments: _args,
            });
        }
        builder.depositStakeRewards = depositStakeRewards;
        function description(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::description",
                arguments: _args,
            });
        }
        builder.description = description;
        function effectuateStagedMetadata(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::effectuate_staged_metadata",
                arguments: _args,
            });
        }
        builder.effectuateStagedMetadata = effectuateStagedMetadata;
        function gasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::gas_price",
                arguments: _args,
            });
        }
        builder.gasPrice = gasPrice;
        function getStakingPoolRef(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::get_staking_pool_ref",
                arguments: _args,
            });
        }
        builder.getStakingPoolRef = getStakingPoolRef;
        function imageUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::image_url",
                arguments: _args,
            });
        }
        builder.imageUrl = imageUrl;
        function isDuplicate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::is_duplicate",
                arguments: _args,
            });
        }
        builder.isDuplicate = isDuplicate;
        function isPreactive(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::is_preactive",
                arguments: _args,
            });
        }
        builder.isPreactive = isPreactive;
        function metadata(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::metadata",
                arguments: _args,
            });
        }
        builder.metadata = metadata;
        function name(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::name",
                arguments: _args,
            });
        }
        builder.name = name;
        function networkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::network_address",
                arguments: _args,
            });
        }
        builder.networkAddress = networkAddress;
        function networkPubkeyBytes(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::network_pubkey_bytes",
                arguments: _args,
            });
        }
        builder.networkPubkeyBytes = networkPubkeyBytes;
        function new_(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            _args.push(transactionArgumentOrVec(args[3], tx));
            _args.push(transactionArgumentOrVec(args[4], tx));
            _args.push(transactionArgumentOrVec(args[5], tx));
            _args.push(transactionArgumentOrVec(args[6], tx));
            _args.push(transactionArgumentOrVec(args[7], tx));
            _args.push(transactionArgumentOrVec(args[8], tx));
            _args.push(transactionArgumentOrVec(args[9], tx));
            _args.push(transactionArgumentOrVec(args[10], tx));
            _args.push(transactionArgumentOrVec(args[11], tx));
            _args.push(transactionArgumentOrVec(args[12], tx));
            _args.push(transactionArgumentOrPure(args[13], tx));
            _args.push(transactionArgumentOrPure(args[14], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function newMetadata(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            _args.push(transactionArgumentOrVec(args[3], tx));
            _args.push(transactionArgumentOrVec(args[4], tx));
            _args.push(transactionArgumentOrPure(args[5], tx));
            _args.push(transactionArgumentOrPure(args[6], tx));
            _args.push(transactionArgumentOrPure(args[7], tx));
            _args.push(transactionArgumentOrPure(args[8], tx));
            _args.push(transactionArgumentOrPure(args[9], tx));
            _args.push(transactionArgumentOrPure(args[10], tx));
            _args.push(transactionArgumentOrPure(args[11], tx));
            _args.push(transactionArgumentOrPure(args[12], tx));
            _args.push(transactionArgumentOrPure(args[13], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::new_metadata",
                arguments: _args,
            });
        }
        builder.newMetadata = newMetadata;
        function newUnverifiedValidatorOperationCapAndTransfer(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::new_unverified_validator_operation_cap_and_transfer",
                arguments: _args,
            });
        }
        builder.newUnverifiedValidatorOperationCapAndTransfer = newUnverifiedValidatorOperationCapAndTransfer;
        function nextEpochGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_gas_price",
                arguments: _args,
            });
        }
        builder.nextEpochGasPrice = nextEpochGasPrice;
        function nextEpochNetworkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_network_address",
                arguments: _args,
            });
        }
        builder.nextEpochNetworkAddress = nextEpochNetworkAddress;
        function nextEpochNetworkPubkeyBytes(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_network_pubkey_bytes",
                arguments: _args,
            });
        }
        builder.nextEpochNetworkPubkeyBytes = nextEpochNetworkPubkeyBytes;
        function nextEpochP2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_p2p_address",
                arguments: _args,
            });
        }
        builder.nextEpochP2pAddress = nextEpochP2pAddress;
        function nextEpochPrimaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_primary_address",
                arguments: _args,
            });
        }
        builder.nextEpochPrimaryAddress = nextEpochPrimaryAddress;
        function nextEpochProofOfPossession(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_proof_of_possession",
                arguments: _args,
            });
        }
        builder.nextEpochProofOfPossession = nextEpochProofOfPossession;
        function nextEpochProtocolPubkeyBytes(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_protocol_pubkey_bytes",
                arguments: _args,
            });
        }
        builder.nextEpochProtocolPubkeyBytes = nextEpochProtocolPubkeyBytes;
        function nextEpochWorkerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_worker_address",
                arguments: _args,
            });
        }
        builder.nextEpochWorkerAddress = nextEpochWorkerAddress;
        function nextEpochWorkerPubkeyBytes(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::next_epoch_worker_pubkey_bytes",
                arguments: _args,
            });
        }
        builder.nextEpochWorkerPubkeyBytes = nextEpochWorkerPubkeyBytes;
        function operationCapId(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::operation_cap_id",
                arguments: _args,
            });
        }
        builder.operationCapId = operationCapId;
        function p2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::p2p_address",
                arguments: _args,
            });
        }
        builder.p2pAddress = p2pAddress;
        function pendingStakeAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::pending_stake_amount",
                arguments: _args,
            });
        }
        builder.pendingStakeAmount = pendingStakeAmount;
        function pendingStakeWithdrawAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::pending_stake_withdraw_amount",
                arguments: _args,
            });
        }
        builder.pendingStakeWithdrawAmount = pendingStakeWithdrawAmount;
        function poolTokenExchangeRateAtEpoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::pool_token_exchange_rate_at_epoch",
                arguments: _args,
            });
        }
        builder.poolTokenExchangeRateAtEpoch = poolTokenExchangeRateAtEpoch;
        function primaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::primary_address",
                arguments: _args,
            });
        }
        builder.primaryAddress = primaryAddress;
        function processPendingStakesAndWithdraws(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::process_pending_stakes_and_withdraws",
                arguments: _args,
            });
        }
        builder.processPendingStakesAndWithdraws = processPendingStakesAndWithdraws;
        function projectUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::project_url",
                arguments: _args,
            });
        }
        builder.projectUrl = projectUrl;
        function proofOfPossession(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::proof_of_possession",
                arguments: _args,
            });
        }
        builder.proofOfPossession = proofOfPossession;
        function protocolPubkeyBytes(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::protocol_pubkey_bytes",
                arguments: _args,
            });
        }
        builder.protocolPubkeyBytes = protocolPubkeyBytes;
        function requestAddStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::request_add_stake",
                arguments: _args,
            });
        }
        builder.requestAddStake = requestAddStake;
        function requestAddStakeAtGenesis(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::request_add_stake_at_genesis",
                arguments: _args,
            });
        }
        builder.requestAddStakeAtGenesis = requestAddStakeAtGenesis;
        function requestSetCommissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::request_set_commission_rate",
                arguments: _args,
            });
        }
        builder.requestSetCommissionRate = requestSetCommissionRate;
        function requestSetGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::request_set_gas_price",
                arguments: _args,
            });
        }
        builder.requestSetGasPrice = requestSetGasPrice;
        function requestWithdrawStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::request_withdraw_stake",
                arguments: _args,
            });
        }
        builder.requestWithdrawStake = requestWithdrawStake;
        function setCandidateCommissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::set_candidate_commission_rate",
                arguments: _args,
            });
        }
        builder.setCandidateCommissionRate = setCandidateCommissionRate;
        function setCandidateGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::set_candidate_gas_price",
                arguments: _args,
            });
        }
        builder.setCandidateGasPrice = setCandidateGasPrice;
        function setVotingPower(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::set_voting_power",
                arguments: _args,
            });
        }
        builder.setVotingPower = setVotingPower;
        function stakeAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::stake_amount",
                arguments: _args,
            });
        }
        builder.stakeAmount = stakeAmount;
        function stakingPoolId(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::staking_pool_id",
                arguments: _args,
            });
        }
        builder.stakingPoolId = stakingPoolId;
        function suiAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::sui_address",
                arguments: _args,
            });
        }
        builder.suiAddress = suiAddress;
        function totalStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::total_stake",
                arguments: _args,
            });
        }
        builder.totalStake = totalStake;
        function totalStakeAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::total_stake_amount",
                arguments: _args,
            });
        }
        builder.totalStakeAmount = totalStakeAmount;
        function updateCandidateNetworkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_candidate_network_address",
                arguments: _args,
            });
        }
        builder.updateCandidateNetworkAddress = updateCandidateNetworkAddress;
        function updateCandidateNetworkPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_candidate_network_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateNetworkPubkey = updateCandidateNetworkPubkey;
        function updateCandidateP2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_candidate_p2p_address",
                arguments: _args,
            });
        }
        builder.updateCandidateP2pAddress = updateCandidateP2pAddress;
        function updateCandidatePrimaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_candidate_primary_address",
                arguments: _args,
            });
        }
        builder.updateCandidatePrimaryAddress = updateCandidatePrimaryAddress;
        function updateCandidateProtocolPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_candidate_protocol_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateProtocolPubkey = updateCandidateProtocolPubkey;
        function updateCandidateWorkerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_candidate_worker_address",
                arguments: _args,
            });
        }
        builder.updateCandidateWorkerAddress = updateCandidateWorkerAddress;
        function updateCandidateWorkerPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_candidate_worker_pubkey",
                arguments: _args,
            });
        }
        builder.updateCandidateWorkerPubkey = updateCandidateWorkerPubkey;
        function updateDescription(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_description",
                arguments: _args,
            });
        }
        builder.updateDescription = updateDescription;
        function updateImageUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_image_url",
                arguments: _args,
            });
        }
        builder.updateImageUrl = updateImageUrl;
        function updateName(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_name",
                arguments: _args,
            });
        }
        builder.updateName = updateName;
        function updateNextEpochNetworkAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_next_epoch_network_address",
                arguments: _args,
            });
        }
        builder.updateNextEpochNetworkAddress = updateNextEpochNetworkAddress;
        function updateNextEpochNetworkPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_next_epoch_network_pubkey",
                arguments: _args,
            });
        }
        builder.updateNextEpochNetworkPubkey = updateNextEpochNetworkPubkey;
        function updateNextEpochP2pAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_next_epoch_p2p_address",
                arguments: _args,
            });
        }
        builder.updateNextEpochP2pAddress = updateNextEpochP2pAddress;
        function updateNextEpochPrimaryAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_next_epoch_primary_address",
                arguments: _args,
            });
        }
        builder.updateNextEpochPrimaryAddress = updateNextEpochPrimaryAddress;
        function updateNextEpochProtocolPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            _args.push(transactionArgumentOrVec(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_next_epoch_protocol_pubkey",
                arguments: _args,
            });
        }
        builder.updateNextEpochProtocolPubkey = updateNextEpochProtocolPubkey;
        function updateNextEpochWorkerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_next_epoch_worker_address",
                arguments: _args,
            });
        }
        builder.updateNextEpochWorkerAddress = updateNextEpochWorkerAddress;
        function updateNextEpochWorkerPubkey(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_next_epoch_worker_pubkey",
                arguments: _args,
            });
        }
        builder.updateNextEpochWorkerPubkey = updateNextEpochWorkerPubkey;
        function updateProjectUrl(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrVec(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::update_project_url",
                arguments: _args,
            });
        }
        builder.updateProjectUrl = updateProjectUrl;
        function validateMetadata(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::validate_metadata",
                arguments: _args,
            });
        }
        builder.validateMetadata = validateMetadata;
        function validateMetadataBcs(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrVec(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::validate_metadata_bcs",
                arguments: _args,
            });
        }
        builder.validateMetadataBcs = validateMetadataBcs;
        function votingPower(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::voting_power",
                arguments: _args,
            });
        }
        builder.votingPower = votingPower;
        function workerAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::worker_address",
                arguments: _args,
            });
        }
        builder.workerAddress = workerAddress;
        function workerPubkeyBytes(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator::worker_pubkey_bytes",
                arguments: _args,
            });
        }
        builder.workerPubkeyBytes = workerPubkeyBytes;
    })(builder = validator.builder || (validator.builder = {}));
    let view;
    (function (view) {
        async function activate(client, args) {
            const tx = new TransactionBlock();
            builder.activate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.activate = activate;
        async function adjustStakeAndGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.adjustStakeAndGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.adjustStakeAndGasPrice = adjustStakeAndGasPrice;
        async function commissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.commissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.commissionRate = commissionRate;
        async function deactivate(client, args) {
            const tx = new TransactionBlock();
            builder.deactivate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.deactivate = deactivate;
        async function depositStakeRewards(client, args) {
            const tx = new TransactionBlock();
            builder.depositStakeRewards(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.depositStakeRewards = depositStakeRewards;
        async function description(client, args) {
            const tx = new TransactionBlock();
            builder.description(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.description = description;
        async function effectuateStagedMetadata(client, args) {
            const tx = new TransactionBlock();
            builder.effectuateStagedMetadata(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.effectuateStagedMetadata = effectuateStagedMetadata;
        async function gasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.gasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.gasPrice = gasPrice;
        async function getStakingPoolRef(client, args) {
            const tx = new TransactionBlock();
            builder.getStakingPoolRef(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getStakingPoolRef = getStakingPoolRef;
        async function imageUrl(client, args) {
            const tx = new TransactionBlock();
            builder.imageUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.imageUrl = imageUrl;
        async function isDuplicate(client, args) {
            const tx = new TransactionBlock();
            builder.isDuplicate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isDuplicate = isDuplicate;
        async function isPreactive(client, args) {
            const tx = new TransactionBlock();
            builder.isPreactive(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isPreactive = isPreactive;
        async function metadata(client, args) {
            const tx = new TransactionBlock();
            builder.metadata(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.metadata = metadata;
        async function name(client, args) {
            const tx = new TransactionBlock();
            builder.name(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.name = name;
        async function networkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.networkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.networkAddress = networkAddress;
        async function networkPubkeyBytes(client, args) {
            const tx = new TransactionBlock();
            builder.networkPubkeyBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.networkPubkeyBytes = networkPubkeyBytes;
        async function new_(client, args) {
            const tx = new TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function newMetadata(client, args) {
            const tx = new TransactionBlock();
            builder.newMetadata(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.newMetadata = newMetadata;
        async function newUnverifiedValidatorOperationCapAndTransfer(client, args) {
            const tx = new TransactionBlock();
            builder.newUnverifiedValidatorOperationCapAndTransfer(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.newUnverifiedValidatorOperationCapAndTransfer = newUnverifiedValidatorOperationCapAndTransfer;
        async function nextEpochGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochGasPrice = nextEpochGasPrice;
        async function nextEpochNetworkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochNetworkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochNetworkAddress = nextEpochNetworkAddress;
        async function nextEpochNetworkPubkeyBytes(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochNetworkPubkeyBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochNetworkPubkeyBytes = nextEpochNetworkPubkeyBytes;
        async function nextEpochP2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochP2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochP2pAddress = nextEpochP2pAddress;
        async function nextEpochPrimaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochPrimaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochPrimaryAddress = nextEpochPrimaryAddress;
        async function nextEpochProofOfPossession(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochProofOfPossession(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochProofOfPossession = nextEpochProofOfPossession;
        async function nextEpochProtocolPubkeyBytes(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochProtocolPubkeyBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochProtocolPubkeyBytes = nextEpochProtocolPubkeyBytes;
        async function nextEpochWorkerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochWorkerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochWorkerAddress = nextEpochWorkerAddress;
        async function nextEpochWorkerPubkeyBytes(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochWorkerPubkeyBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochWorkerPubkeyBytes = nextEpochWorkerPubkeyBytes;
        async function operationCapId(client, args) {
            const tx = new TransactionBlock();
            builder.operationCapId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.operationCapId = operationCapId;
        async function p2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.p2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.p2pAddress = p2pAddress;
        async function pendingStakeAmount(client, args) {
            const tx = new TransactionBlock();
            builder.pendingStakeAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.pendingStakeAmount = pendingStakeAmount;
        async function pendingStakeWithdrawAmount(client, args) {
            const tx = new TransactionBlock();
            builder.pendingStakeWithdrawAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.pendingStakeWithdrawAmount = pendingStakeWithdrawAmount;
        async function poolTokenExchangeRateAtEpoch(client, args) {
            const tx = new TransactionBlock();
            builder.poolTokenExchangeRateAtEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.poolTokenExchangeRateAtEpoch = poolTokenExchangeRateAtEpoch;
        async function primaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.primaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.primaryAddress = primaryAddress;
        async function processPendingStakesAndWithdraws(client, args) {
            const tx = new TransactionBlock();
            builder.processPendingStakesAndWithdraws(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.processPendingStakesAndWithdraws = processPendingStakesAndWithdraws;
        async function projectUrl(client, args) {
            const tx = new TransactionBlock();
            builder.projectUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.projectUrl = projectUrl;
        async function proofOfPossession(client, args) {
            const tx = new TransactionBlock();
            builder.proofOfPossession(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.proofOfPossession = proofOfPossession;
        async function protocolPubkeyBytes(client, args) {
            const tx = new TransactionBlock();
            builder.protocolPubkeyBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.protocolPubkeyBytes = protocolPubkeyBytes;
        async function requestAddStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStake = requestAddStake;
        async function requestAddStakeAtGenesis(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStakeAtGenesis(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStakeAtGenesis = requestAddStakeAtGenesis;
        async function requestSetCommissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.requestSetCommissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestSetCommissionRate = requestSetCommissionRate;
        async function requestSetGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.requestSetGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestSetGasPrice = requestSetGasPrice;
        async function requestWithdrawStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestWithdrawStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestWithdrawStake = requestWithdrawStake;
        async function setCandidateCommissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.setCandidateCommissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setCandidateCommissionRate = setCandidateCommissionRate;
        async function setCandidateGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.setCandidateGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setCandidateGasPrice = setCandidateGasPrice;
        async function setVotingPower(client, args) {
            const tx = new TransactionBlock();
            builder.setVotingPower(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setVotingPower = setVotingPower;
        async function stakeAmount(client, args) {
            const tx = new TransactionBlock();
            builder.stakeAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.stakeAmount = stakeAmount;
        async function stakingPoolId(client, args) {
            const tx = new TransactionBlock();
            builder.stakingPoolId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.stakingPoolId = stakingPoolId;
        async function suiAddress(client, args) {
            const tx = new TransactionBlock();
            builder.suiAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.suiAddress = suiAddress;
        async function totalStake(client, args) {
            const tx = new TransactionBlock();
            builder.totalStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.totalStake = totalStake;
        async function totalStakeAmount(client, args) {
            const tx = new TransactionBlock();
            builder.totalStakeAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.totalStakeAmount = totalStakeAmount;
        async function updateCandidateNetworkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateNetworkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateNetworkAddress = updateCandidateNetworkAddress;
        async function updateCandidateNetworkPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateNetworkPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateNetworkPubkey = updateCandidateNetworkPubkey;
        async function updateCandidateP2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateP2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateP2pAddress = updateCandidateP2pAddress;
        async function updateCandidatePrimaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidatePrimaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidatePrimaryAddress = updateCandidatePrimaryAddress;
        async function updateCandidateProtocolPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateProtocolPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateProtocolPubkey = updateCandidateProtocolPubkey;
        async function updateCandidateWorkerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateWorkerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateWorkerAddress = updateCandidateWorkerAddress;
        async function updateCandidateWorkerPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateCandidateWorkerPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateCandidateWorkerPubkey = updateCandidateWorkerPubkey;
        async function updateDescription(client, args) {
            const tx = new TransactionBlock();
            builder.updateDescription(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateDescription = updateDescription;
        async function updateImageUrl(client, args) {
            const tx = new TransactionBlock();
            builder.updateImageUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateImageUrl = updateImageUrl;
        async function updateName(client, args) {
            const tx = new TransactionBlock();
            builder.updateName(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateName = updateName;
        async function updateNextEpochNetworkAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateNextEpochNetworkAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateNextEpochNetworkAddress = updateNextEpochNetworkAddress;
        async function updateNextEpochNetworkPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateNextEpochNetworkPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateNextEpochNetworkPubkey = updateNextEpochNetworkPubkey;
        async function updateNextEpochP2pAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateNextEpochP2pAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateNextEpochP2pAddress = updateNextEpochP2pAddress;
        async function updateNextEpochPrimaryAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateNextEpochPrimaryAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateNextEpochPrimaryAddress = updateNextEpochPrimaryAddress;
        async function updateNextEpochProtocolPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateNextEpochProtocolPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateNextEpochProtocolPubkey = updateNextEpochProtocolPubkey;
        async function updateNextEpochWorkerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.updateNextEpochWorkerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateNextEpochWorkerAddress = updateNextEpochWorkerAddress;
        async function updateNextEpochWorkerPubkey(client, args) {
            const tx = new TransactionBlock();
            builder.updateNextEpochWorkerPubkey(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateNextEpochWorkerPubkey = updateNextEpochWorkerPubkey;
        async function updateProjectUrl(client, args) {
            const tx = new TransactionBlock();
            builder.updateProjectUrl(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.updateProjectUrl = updateProjectUrl;
        async function validateMetadata(client, args) {
            const tx = new TransactionBlock();
            builder.validateMetadata(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validateMetadata = validateMetadata;
        async function validateMetadataBcs(client, args) {
            const tx = new TransactionBlock();
            builder.validateMetadataBcs(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validateMetadataBcs = validateMetadataBcs;
        async function votingPower(client, args) {
            const tx = new TransactionBlock();
            builder.votingPower(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.votingPower = votingPower;
        async function workerAddress(client, args) {
            const tx = new TransactionBlock();
            builder.workerAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.workerAddress = workerAddress;
        async function workerPubkeyBytes(client, args) {
            const tx = new TransactionBlock();
            builder.workerPubkeyBytes(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.workerPubkeyBytes = workerPubkeyBytes;
    })(view = validator.view || (validator.view = {}));
})(validator || (validator = {}));
export var validator_cap;
(function (validator_cap) {
    let UnverifiedValidatorOperationCap;
    (function (UnverifiedValidatorOperationCap) {
        UnverifiedValidatorOperationCap.TYPE_QNAME = "0x3::validator_cap::UnverifiedValidatorOperationCap";
        const TYPE = new TypeDescriptor(UnverifiedValidatorOperationCap.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        UnverifiedValidatorOperationCap.type = type;
    })(UnverifiedValidatorOperationCap = validator_cap.UnverifiedValidatorOperationCap || (validator_cap.UnverifiedValidatorOperationCap = {}));
    let ValidatorOperationCap;
    (function (ValidatorOperationCap) {
        ValidatorOperationCap.TYPE_QNAME = "0x3::validator_cap::ValidatorOperationCap";
        const TYPE = new TypeDescriptor(ValidatorOperationCap.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorOperationCap.type = type;
    })(ValidatorOperationCap = validator_cap.ValidatorOperationCap || (validator_cap.ValidatorOperationCap = {}));
    let builder;
    (function (builder) {
        function newFromUnverified(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_cap::new_from_unverified",
                arguments: _args,
            });
        }
        builder.newFromUnverified = newFromUnverified;
        function newUnverifiedValidatorOperationCapAndTransfer(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_cap::new_unverified_validator_operation_cap_and_transfer",
                arguments: _args,
            });
        }
        builder.newUnverifiedValidatorOperationCapAndTransfer = newUnverifiedValidatorOperationCapAndTransfer;
        function unverifiedOperationCapAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_cap::unverified_operation_cap_address",
                arguments: _args,
            });
        }
        builder.unverifiedOperationCapAddress = unverifiedOperationCapAddress;
        function verifiedOperationCapAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_cap::verified_operation_cap_address",
                arguments: _args,
            });
        }
        builder.verifiedOperationCapAddress = verifiedOperationCapAddress;
    })(builder = validator_cap.builder || (validator_cap.builder = {}));
    let view;
    (function (view) {
        async function newFromUnverified(client, args) {
            const tx = new TransactionBlock();
            builder.newFromUnverified(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.newFromUnverified = newFromUnverified;
        async function newUnverifiedValidatorOperationCapAndTransfer(client, args) {
            const tx = new TransactionBlock();
            builder.newUnverifiedValidatorOperationCapAndTransfer(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.newUnverifiedValidatorOperationCapAndTransfer = newUnverifiedValidatorOperationCapAndTransfer;
        async function unverifiedOperationCapAddress(client, args) {
            const tx = new TransactionBlock();
            builder.unverifiedOperationCapAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.unverifiedOperationCapAddress = unverifiedOperationCapAddress;
        async function verifiedOperationCapAddress(client, args) {
            const tx = new TransactionBlock();
            builder.verifiedOperationCapAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.verifiedOperationCapAddress = verifiedOperationCapAddress;
    })(view = validator_cap.view || (validator_cap.view = {}));
})(validator_cap || (validator_cap = {}));
export var validator_set;
(function (validator_set) {
    let ValidatorEpochInfoEvent;
    (function (ValidatorEpochInfoEvent) {
        ValidatorEpochInfoEvent.TYPE_QNAME = "0x3::validator_set::ValidatorEpochInfoEvent";
        const TYPE = new TypeDescriptor(ValidatorEpochInfoEvent.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorEpochInfoEvent.type = type;
    })(ValidatorEpochInfoEvent = validator_set.ValidatorEpochInfoEvent || (validator_set.ValidatorEpochInfoEvent = {}));
    let ValidatorEpochInfoEventV2;
    (function (ValidatorEpochInfoEventV2) {
        ValidatorEpochInfoEventV2.TYPE_QNAME = "0x3::validator_set::ValidatorEpochInfoEventV2";
        const TYPE = new TypeDescriptor(ValidatorEpochInfoEventV2.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorEpochInfoEventV2.type = type;
    })(ValidatorEpochInfoEventV2 = validator_set.ValidatorEpochInfoEventV2 || (validator_set.ValidatorEpochInfoEventV2 = {}));
    let ValidatorJoinEvent;
    (function (ValidatorJoinEvent) {
        ValidatorJoinEvent.TYPE_QNAME = "0x3::validator_set::ValidatorJoinEvent";
        const TYPE = new TypeDescriptor(ValidatorJoinEvent.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorJoinEvent.type = type;
    })(ValidatorJoinEvent = validator_set.ValidatorJoinEvent || (validator_set.ValidatorJoinEvent = {}));
    let ValidatorLeaveEvent;
    (function (ValidatorLeaveEvent) {
        ValidatorLeaveEvent.TYPE_QNAME = "0x3::validator_set::ValidatorLeaveEvent";
        const TYPE = new TypeDescriptor(ValidatorLeaveEvent.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorLeaveEvent.type = type;
    })(ValidatorLeaveEvent = validator_set.ValidatorLeaveEvent || (validator_set.ValidatorLeaveEvent = {}));
    let ValidatorSet;
    (function (ValidatorSet) {
        ValidatorSet.TYPE_QNAME = "0x3::validator_set::ValidatorSet";
        const TYPE = new TypeDescriptor(ValidatorSet.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorSet.type = type;
    })(ValidatorSet = validator_set.ValidatorSet || (validator_set.ValidatorSet = {}));
    let builder;
    (function (builder) {
        function activeValidatorAddresses(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::active_validator_addresses",
                arguments: _args,
            });
        }
        builder.activeValidatorAddresses = activeValidatorAddresses;
        function activeValidators(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::active_validators",
                arguments: _args,
            });
        }
        builder.activeValidators = activeValidators;
        function advanceEpoch(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrObject(args[2], tx));
            _args.push(transactionArgumentOrObject(args[3], tx));
            _args.push(transactionArgumentOrPure(args[4], tx));
            _args.push(transactionArgumentOrPure(args[5], tx));
            _args.push(transactionArgumentOrPure(args[6], tx));
            _args.push(transactionArgumentOrPure(args[7], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::advance_epoch",
                arguments: _args,
            });
        }
        builder.advanceEpoch = advanceEpoch;
        function assertNoPendingOrActiveDuplicates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::assert_no_pending_or_active_duplicates",
                arguments: _args,
            });
        }
        builder.assertNoPendingOrActiveDuplicates = assertNoPendingOrActiveDuplicates;
        function deriveReferenceGasPrice(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::derive_reference_gas_price",
                arguments: _args,
            });
        }
        builder.deriveReferenceGasPrice = deriveReferenceGasPrice;
        function getActiveOrPendingOrCandidateValidatorRef(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::get_active_or_pending_or_candidate_validator_ref",
                arguments: _args,
            });
        }
        builder.getActiveOrPendingOrCandidateValidatorRef = getActiveOrPendingOrCandidateValidatorRef;
        function getActiveValidatorRef(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::get_active_validator_ref",
                arguments: _args,
            });
        }
        builder.getActiveValidatorRef = getActiveValidatorRef;
        function getPendingValidatorRef(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::get_pending_validator_ref",
                arguments: _args,
            });
        }
        builder.getPendingValidatorRef = getPendingValidatorRef;
        function getValidatorMut(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::get_validator_mut",
                arguments: _args,
            });
        }
        builder.getValidatorMut = getValidatorMut;
        function getValidatorMutWithCtx(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::get_validator_mut_with_ctx",
                arguments: _args,
            });
        }
        builder.getValidatorMutWithCtx = getValidatorMutWithCtx;
        function getValidatorMutWithCtxIncludingCandidates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::get_validator_mut_with_ctx_including_candidates",
                arguments: _args,
            });
        }
        builder.getValidatorMutWithCtxIncludingCandidates = getValidatorMutWithCtxIncludingCandidates;
        function getValidatorMutWithVerifiedCap(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::get_validator_mut_with_verified_cap",
                arguments: _args,
            });
        }
        builder.getValidatorMutWithVerifiedCap = getValidatorMutWithVerifiedCap;
        function isActiveValidatorBySuiAddress(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::is_active_validator_by_sui_address",
                arguments: _args,
            });
        }
        builder.isActiveValidatorBySuiAddress = isActiveValidatorBySuiAddress;
        function isDuplicateValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::is_duplicate_validator",
                arguments: _args,
            });
        }
        builder.isDuplicateValidator = isDuplicateValidator;
        function isInactiveValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::is_inactive_validator",
                arguments: _args,
            });
        }
        builder.isInactiveValidator = isInactiveValidator;
        function isValidatorCandidate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::is_validator_candidate",
                arguments: _args,
            });
        }
        builder.isValidatorCandidate = isValidatorCandidate;
        function new_(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrVec(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::new",
                arguments: _args,
            });
        }
        builder.new_ = new_;
        function nextEpochValidatorCount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::next_epoch_validator_count",
                arguments: _args,
            });
        }
        builder.nextEpochValidatorCount = nextEpochValidatorCount;
        function poolExchangeRates(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::pool_exchange_rates",
                arguments: _args,
            });
        }
        builder.poolExchangeRates = poolExchangeRates;
        function requestAddStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::request_add_stake",
                arguments: _args,
            });
        }
        builder.requestAddStake = requestAddStake;
        function requestAddValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::request_add_validator",
                arguments: _args,
            });
        }
        builder.requestAddValidator = requestAddValidator;
        function requestAddValidatorCandidate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::request_add_validator_candidate",
                arguments: _args,
            });
        }
        builder.requestAddValidatorCandidate = requestAddValidatorCandidate;
        function requestRemoveValidator(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::request_remove_validator",
                arguments: _args,
            });
        }
        builder.requestRemoveValidator = requestRemoveValidator;
        function requestRemoveValidatorCandidate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::request_remove_validator_candidate",
                arguments: _args,
            });
        }
        builder.requestRemoveValidatorCandidate = requestRemoveValidatorCandidate;
        function requestSetCommissionRate(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::request_set_commission_rate",
                arguments: _args,
            });
        }
        builder.requestSetCommissionRate = requestSetCommissionRate;
        function requestWithdrawStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::request_withdraw_stake",
                arguments: _args,
            });
        }
        builder.requestWithdrawStake = requestWithdrawStake;
        function stakingPoolMappings(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::staking_pool_mappings",
                arguments: _args,
            });
        }
        builder.stakingPoolMappings = stakingPoolMappings;
        function sumVotingPowerByAddresses(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::sum_voting_power_by_addresses",
                arguments: _args,
            });
        }
        builder.sumVotingPowerByAddresses = sumVotingPowerByAddresses;
        function totalStake(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::total_stake",
                arguments: _args,
            });
        }
        builder.totalStake = totalStake;
        function validatorStakeAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::validator_stake_amount",
                arguments: _args,
            });
        }
        builder.validatorStakeAmount = validatorStakeAmount;
        function validatorStakingPoolId(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::validator_staking_pool_id",
                arguments: _args,
            });
        }
        builder.validatorStakingPoolId = validatorStakingPoolId;
        function validatorTotalStakeAmount(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::validator_total_stake_amount",
                arguments: _args,
            });
        }
        builder.validatorTotalStakeAmount = validatorTotalStakeAmount;
        function validatorVotingPower(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrPure(args[1], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::validator_voting_power",
                arguments: _args,
            });
        }
        builder.validatorVotingPower = validatorVotingPower;
        function verifyCap(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            _args.push(transactionArgumentOrObject(args[1], tx));
            _args.push(transactionArgumentOrPure(args[2], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_set::verify_cap",
                arguments: _args,
            });
        }
        builder.verifyCap = verifyCap;
    })(builder = validator_set.builder || (validator_set.builder = {}));
    let view;
    (function (view) {
        async function activeValidatorAddresses(client, args) {
            const tx = new TransactionBlock();
            builder.activeValidatorAddresses(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.activeValidatorAddresses = activeValidatorAddresses;
        async function activeValidators(client, args) {
            const tx = new TransactionBlock();
            builder.activeValidators(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.activeValidators = activeValidators;
        async function advanceEpoch(client, args) {
            const tx = new TransactionBlock();
            builder.advanceEpoch(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.advanceEpoch = advanceEpoch;
        async function assertNoPendingOrActiveDuplicates(client, args) {
            const tx = new TransactionBlock();
            builder.assertNoPendingOrActiveDuplicates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.assertNoPendingOrActiveDuplicates = assertNoPendingOrActiveDuplicates;
        async function deriveReferenceGasPrice(client, args) {
            const tx = new TransactionBlock();
            builder.deriveReferenceGasPrice(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.deriveReferenceGasPrice = deriveReferenceGasPrice;
        async function getActiveOrPendingOrCandidateValidatorRef(client, args) {
            const tx = new TransactionBlock();
            builder.getActiveOrPendingOrCandidateValidatorRef(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getActiveOrPendingOrCandidateValidatorRef = getActiveOrPendingOrCandidateValidatorRef;
        async function getActiveValidatorRef(client, args) {
            const tx = new TransactionBlock();
            builder.getActiveValidatorRef(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getActiveValidatorRef = getActiveValidatorRef;
        async function getPendingValidatorRef(client, args) {
            const tx = new TransactionBlock();
            builder.getPendingValidatorRef(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getPendingValidatorRef = getPendingValidatorRef;
        async function getValidatorMut(client, args) {
            const tx = new TransactionBlock();
            builder.getValidatorMut(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getValidatorMut = getValidatorMut;
        async function getValidatorMutWithCtx(client, args) {
            const tx = new TransactionBlock();
            builder.getValidatorMutWithCtx(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getValidatorMutWithCtx = getValidatorMutWithCtx;
        async function getValidatorMutWithCtxIncludingCandidates(client, args) {
            const tx = new TransactionBlock();
            builder.getValidatorMutWithCtxIncludingCandidates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getValidatorMutWithCtxIncludingCandidates = getValidatorMutWithCtxIncludingCandidates;
        async function getValidatorMutWithVerifiedCap(client, args) {
            const tx = new TransactionBlock();
            builder.getValidatorMutWithVerifiedCap(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.getValidatorMutWithVerifiedCap = getValidatorMutWithVerifiedCap;
        async function isActiveValidatorBySuiAddress(client, args) {
            const tx = new TransactionBlock();
            builder.isActiveValidatorBySuiAddress(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isActiveValidatorBySuiAddress = isActiveValidatorBySuiAddress;
        async function isDuplicateValidator(client, args) {
            const tx = new TransactionBlock();
            builder.isDuplicateValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isDuplicateValidator = isDuplicateValidator;
        async function isInactiveValidator(client, args) {
            const tx = new TransactionBlock();
            builder.isInactiveValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isInactiveValidator = isInactiveValidator;
        async function isValidatorCandidate(client, args) {
            const tx = new TransactionBlock();
            builder.isValidatorCandidate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.isValidatorCandidate = isValidatorCandidate;
        async function new_(client, args) {
            const tx = new TransactionBlock();
            builder.new_(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.new_ = new_;
        async function nextEpochValidatorCount(client, args) {
            const tx = new TransactionBlock();
            builder.nextEpochValidatorCount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.nextEpochValidatorCount = nextEpochValidatorCount;
        async function poolExchangeRates(client, args) {
            const tx = new TransactionBlock();
            builder.poolExchangeRates(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.poolExchangeRates = poolExchangeRates;
        async function requestAddStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddStake = requestAddStake;
        async function requestAddValidator(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddValidator = requestAddValidator;
        async function requestAddValidatorCandidate(client, args) {
            const tx = new TransactionBlock();
            builder.requestAddValidatorCandidate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestAddValidatorCandidate = requestAddValidatorCandidate;
        async function requestRemoveValidator(client, args) {
            const tx = new TransactionBlock();
            builder.requestRemoveValidator(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestRemoveValidator = requestRemoveValidator;
        async function requestRemoveValidatorCandidate(client, args) {
            const tx = new TransactionBlock();
            builder.requestRemoveValidatorCandidate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestRemoveValidatorCandidate = requestRemoveValidatorCandidate;
        async function requestSetCommissionRate(client, args) {
            const tx = new TransactionBlock();
            builder.requestSetCommissionRate(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestSetCommissionRate = requestSetCommissionRate;
        async function requestWithdrawStake(client, args) {
            const tx = new TransactionBlock();
            builder.requestWithdrawStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.requestWithdrawStake = requestWithdrawStake;
        async function stakingPoolMappings(client, args) {
            const tx = new TransactionBlock();
            builder.stakingPoolMappings(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.stakingPoolMappings = stakingPoolMappings;
        async function sumVotingPowerByAddresses(client, args) {
            const tx = new TransactionBlock();
            builder.sumVotingPowerByAddresses(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.sumVotingPowerByAddresses = sumVotingPowerByAddresses;
        async function totalStake(client, args) {
            const tx = new TransactionBlock();
            builder.totalStake(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.totalStake = totalStake;
        async function validatorStakeAmount(client, args) {
            const tx = new TransactionBlock();
            builder.validatorStakeAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validatorStakeAmount = validatorStakeAmount;
        async function validatorStakingPoolId(client, args) {
            const tx = new TransactionBlock();
            builder.validatorStakingPoolId(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validatorStakingPoolId = validatorStakingPoolId;
        async function validatorTotalStakeAmount(client, args) {
            const tx = new TransactionBlock();
            builder.validatorTotalStakeAmount(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validatorTotalStakeAmount = validatorTotalStakeAmount;
        async function validatorVotingPower(client, args) {
            const tx = new TransactionBlock();
            builder.validatorVotingPower(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.validatorVotingPower = validatorVotingPower;
        async function verifyCap(client, args) {
            const tx = new TransactionBlock();
            builder.verifyCap(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.verifyCap = verifyCap;
    })(view = validator_set.view || (validator_set.view = {}));
})(validator_set || (validator_set = {}));
export var validator_wrapper;
(function (validator_wrapper) {
    let ValidatorWrapper;
    (function (ValidatorWrapper) {
        ValidatorWrapper.TYPE_QNAME = "0x3::validator_wrapper::ValidatorWrapper";
        const TYPE = new TypeDescriptor(ValidatorWrapper.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        ValidatorWrapper.type = type;
    })(ValidatorWrapper = validator_wrapper.ValidatorWrapper || (validator_wrapper.ValidatorWrapper = {}));
    let builder;
    (function (builder) {
        function createV1(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_wrapper::create_v1",
                arguments: _args,
            });
        }
        builder.createV1 = createV1;
        function destroy(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrPure(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_wrapper::destroy",
                arguments: _args,
            });
        }
        builder.destroy = destroy;
        function loadValidatorMaybeUpgrade(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::validator_wrapper::load_validator_maybe_upgrade",
                arguments: _args,
            });
        }
        builder.loadValidatorMaybeUpgrade = loadValidatorMaybeUpgrade;
    })(builder = validator_wrapper.builder || (validator_wrapper.builder = {}));
    let view;
    (function (view) {
        async function createV1(client, args) {
            const tx = new TransactionBlock();
            builder.createV1(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.createV1 = createV1;
        async function destroy(client, args) {
            const tx = new TransactionBlock();
            builder.destroy(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.destroy = destroy;
        async function loadValidatorMaybeUpgrade(client, args) {
            const tx = new TransactionBlock();
            builder.loadValidatorMaybeUpgrade(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.loadValidatorMaybeUpgrade = loadValidatorMaybeUpgrade;
    })(view = validator_wrapper.view || (validator_wrapper.view = {}));
})(validator_wrapper || (validator_wrapper = {}));
export var voting_power;
(function (voting_power) {
    let VotingPowerInfo;
    (function (VotingPowerInfo) {
        VotingPowerInfo.TYPE_QNAME = "0x3::voting_power::VotingPowerInfo";
        const TYPE = new TypeDescriptor(VotingPowerInfo.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        VotingPowerInfo.type = type;
    })(VotingPowerInfo = voting_power.VotingPowerInfo || (voting_power.VotingPowerInfo = {}));
    let VotingPowerInfoV2;
    (function (VotingPowerInfoV2) {
        VotingPowerInfoV2.TYPE_QNAME = "0x3::voting_power::VotingPowerInfoV2";
        const TYPE = new TypeDescriptor(VotingPowerInfoV2.TYPE_QNAME);
        function type() {
            return TYPE.apply();
        }
        VotingPowerInfoV2.type = type;
    })(VotingPowerInfoV2 = voting_power.VotingPowerInfoV2 || (voting_power.VotingPowerInfoV2 = {}));
    let builder;
    (function (builder) {
        function quorumThreshold(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::voting_power::quorum_threshold",
                arguments: _args,
            });
        }
        builder.quorumThreshold = quorumThreshold;
        function setVotingPower(tx, args) {
            const _args = [];
            _args.push(transactionArgumentOrObject(args[0], tx));
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::voting_power::set_voting_power",
                arguments: _args,
            });
        }
        builder.setVotingPower = setVotingPower;
        function totalVotingPower(tx, args) {
            const _args = [];
            // @ts-ignore
            return tx.moveCall({
                target: "0x3::voting_power::total_voting_power",
                arguments: _args,
            });
        }
        builder.totalVotingPower = totalVotingPower;
    })(builder = voting_power.builder || (voting_power.builder = {}));
    let view;
    (function (view) {
        async function quorumThreshold(client, args) {
            const tx = new TransactionBlock();
            builder.quorumThreshold(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.quorumThreshold = quorumThreshold;
        async function setVotingPower(client, args) {
            const tx = new TransactionBlock();
            builder.setVotingPower(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.setVotingPower = setVotingPower;
        async function totalVotingPower(client, args) {
            const tx = new TransactionBlock();
            builder.totalVotingPower(tx, args);
            const inspectRes = await client.devInspectTransactionBlock({
                transactionBlock: tx,
                sender: ZERO_ADDRESS,
            });
            return (await getMoveCoder(client)).decodeDevInspectResult(inspectRes);
        }
        view.totalVotingPower = totalVotingPower;
    })(view = voting_power.view || (voting_power.view = {}));
})(voting_power || (voting_power = {}));
const MODULES = JSON.parse('{"genesis":{"fileFormatVersion":6,"address":"0x3","name":"genesis","friends":[],"structs":{"GenesisChainParameters":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"protocol_version","type":"U64"},{"name":"chain_start_timestamp_ms","type":"U64"},{"name":"epoch_duration_ms","type":"U64"},{"name":"stake_subsidy_start_epoch","type":"U64"},{"name":"stake_subsidy_initial_distribution_amount","type":"U64"},{"name":"stake_subsidy_period_length","type":"U64"},{"name":"stake_subsidy_decrease_rate","type":"U16"},{"name":"max_validator_count","type":"U64"},{"name":"min_validator_joining_stake","type":"U64"},{"name":"validator_low_stake_threshold","type":"U64"},{"name":"validator_very_low_stake_threshold","type":"U64"},{"name":"validator_low_stake_grace_period","type":"U64"}]},"GenesisValidatorMetadata":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"name","type":{"Vector":"U8"}},{"name":"description","type":{"Vector":"U8"}},{"name":"image_url","type":{"Vector":"U8"}},{"name":"project_url","type":{"Vector":"U8"}},{"name":"sui_address","type":"Address"},{"name":"gas_price","type":"U64"},{"name":"commission_rate","type":"U64"},{"name":"protocol_public_key","type":{"Vector":"U8"}},{"name":"proof_of_possession","type":{"Vector":"U8"}},{"name":"network_public_key","type":{"Vector":"U8"}},{"name":"worker_public_key","type":{"Vector":"U8"}},{"name":"network_address","type":{"Vector":"U8"}},{"name":"p2p_address","type":{"Vector":"U8"}},{"name":"primary_address","type":{"Vector":"U8"}},{"name":"worker_address","type":{"Vector":"U8"}}]},"TokenAllocation":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"recipient_address","type":"Address"},{"name":"amount_mist","type":"U64"},{"name":"staked_with_validator","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}}]},"TokenDistributionSchedule":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"stake_subsidy_fund_mist","type":"U64"},{"name":"allocations","type":{"Vector":{"Struct":{"address":"0x3","module":"genesis","name":"TokenAllocation","typeArguments":[]}}}}]}},"exposedFunctions":{}},"stake_subsidy":{"fileFormatVersion":6,"address":"0x3","name":"stake_subsidy","friends":[{"address":"0x3","name":"genesis"},{"address":"0x3","name":"sui_system_state_inner"}],"structs":{"StakeSubsidy":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"distribution_counter","type":"U64"},{"name":"current_distribution_amount","type":"U64"},{"name":"stake_subsidy_period_length","type":"U64"},{"name":"stake_subsidy_decrease_rate","type":"U16"},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]}},"exposedFunctions":{"advance_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"stake_subsidy","name":"StakeSubsidy","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"U64","U64","U16",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"stake_subsidy","name":"StakeSubsidy","typeArguments":[]}}]},"current_epoch_subsidy_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"stake_subsidy","name":"StakeSubsidy","typeArguments":[]}}}],"return":["U64"]}}},"staking_pool":{"fileFormatVersion":6,"address":"0x3","name":"staking_pool","friends":[{"address":"0x3","name":"validator"},{"address":"0x3","name":"validator_set"}],"structs":{"PoolTokenExchangeRate":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"sui_amount","type":"U64"},{"name":"pool_token_amount","type":"U64"}]},"StakedSui":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"stake_activation_epoch","type":"U64"},{"name":"principal","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}}]},"StakingPool":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"activation_epoch","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}},{"name":"deactivation_epoch","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}},{"name":"sui_balance","type":"U64"},{"name":"rewards_pool","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"pool_token_balance","type":"U64"},{"name":"exchange_rates","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}]}}},{"name":"pending_stake","type":"U64"},{"name":"pending_total_sui_withdraw","type":"U64"},{"name":"pending_pool_token_withdraw","type":"U64"},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]}},"exposedFunctions":{"activate_staking_pool":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},"U64"],"return":[]},"deactivate_staking_pool":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},"U64"],"return":[]},"deposit_rewards":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[]},"exchange_rates":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}]}}}]},"is_equal_staking_metadata":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}}],"return":["Bool"]},"is_inactive":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}],"return":["Bool"]},"is_preactive":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}],"return":["Bool"]},"join_staked_sui":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}],"return":[]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}]},"pending_stake_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}],"return":["U64"]},"pending_stake_withdraw_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}],"return":["U64"]},"pool_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"pool_token_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}}],"return":["U64"]},"pool_token_exchange_rate_at_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}]},"process_pending_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}],"return":[]},"process_pending_stakes_and_withdraws":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_add_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}]},"request_withdraw_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"split":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}]},"split_staked_sui":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"stake_activation_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}}],"return":["U64"]},"staked_sui_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}}],"return":["U64"]},"sui_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}}],"return":["U64"]},"sui_balance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}],"return":["U64"]},"withdraw_from_principal":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}],"return":["U64",{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]}}},"storage_fund":{"fileFormatVersion":6,"address":"0x3","name":"storage_fund","friends":[{"address":"0x3","name":"sui_system_state_inner"}],"structs":{"StorageFund":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"total_object_storage_rebates","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"non_refundable_balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}}]}},"exposedFunctions":{"advance_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"storage_fund","name":"StorageFund","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"U64","U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[{"Struct":{"address":"0x3","module":"storage_fund","name":"StorageFund","typeArguments":[]}}]},"total_balance":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"storage_fund","name":"StorageFund","typeArguments":[]}}}],"return":["U64"]},"total_object_storage_rebates":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"storage_fund","name":"StorageFund","typeArguments":[]}}}],"return":["U64"]}}},"sui_system":{"fileFormatVersion":6,"address":"0x3","name":"sui_system","friends":[{"address":"0x3","name":"genesis"}],"structs":{"SuiSystemState":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"version","type":"U64"}]}},"exposedFunctions":{"active_validator_addresses":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"U64","U64",{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SystemParameters","typeArguments":[]}},{"Struct":{"address":"0x3","module":"stake_subsidy","name":"StakeSubsidy","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"pool_exchange_rates":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}]}}}]},"report_validator":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"Address"],"return":[]},"request_add_stake":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_add_stake_mul_coin":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_add_stake_non_entry":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}]},"request_add_validator":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_add_validator_candidate":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_remove_validator":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_remove_validator_candidate":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_set_commission_rate":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_set_gas_price":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"U64"],"return":[]},"request_withdraw_stake":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_withdraw_stake_non_entry":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"rotate_operation_cap":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"set_candidate_validator_commission_rate":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"set_candidate_validator_gas_price":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"U64"],"return":[]},"undo_report_validator":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"Address"],"return":[]},"update_candidate_validator_network_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_network_pubkey":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_p2p_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_primary_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_protocol_pubkey":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_worker_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_worker_pubkey":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_description":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_image_url":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_name":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_network_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_network_pubkey":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_p2p_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_primary_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_protocol_pubkey":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_worker_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_worker_pubkey":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_project_url":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system","name":"SuiSystemState","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"sui_system_state_inner":{"fileFormatVersion":6,"address":"0x3","name":"sui_system_state_inner","friends":[{"address":"0x3","name":"genesis"},{"address":"0x3","name":"sui_system"}],"structs":{"SuiSystemStateInner":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"protocol_version","type":"U64"},{"name":"system_state_version","type":"U64"},{"name":"validators","type":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"name":"storage_fund","type":{"Struct":{"address":"0x3","module":"storage_fund","name":"StorageFund","typeArguments":[]}}},{"name":"parameters","type":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SystemParameters","typeArguments":[]}}},{"name":"reference_gas_price","type":"U64"},{"name":"validator_report_records","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address",{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}]}}},{"name":"stake_subsidy","type":{"Struct":{"address":"0x3","module":"stake_subsidy","name":"StakeSubsidy","typeArguments":[]}}},{"name":"safe_mode","type":"Bool"},{"name":"safe_mode_storage_rewards","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"safe_mode_computation_rewards","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"safe_mode_storage_rebates","type":"U64"},{"name":"safe_mode_non_refundable_storage_fee","type":"U64"},{"name":"epoch_start_timestamp_ms","type":"U64"},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"SuiSystemStateInnerV2":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"protocol_version","type":"U64"},{"name":"system_state_version","type":"U64"},{"name":"validators","type":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"name":"storage_fund","type":{"Struct":{"address":"0x3","module":"storage_fund","name":"StorageFund","typeArguments":[]}}},{"name":"parameters","type":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SystemParametersV2","typeArguments":[]}}},{"name":"reference_gas_price","type":"U64"},{"name":"validator_report_records","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address",{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}]}}},{"name":"stake_subsidy","type":{"Struct":{"address":"0x3","module":"stake_subsidy","name":"StakeSubsidy","typeArguments":[]}}},{"name":"safe_mode","type":"Bool"},{"name":"safe_mode_storage_rewards","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"safe_mode_computation_rewards","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"name":"safe_mode_storage_rebates","type":"U64"},{"name":"safe_mode_non_refundable_storage_fee","type":"U64"},{"name":"epoch_start_timestamp_ms","type":"U64"},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"SystemEpochInfoEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"protocol_version","type":"U64"},{"name":"reference_gas_price","type":"U64"},{"name":"total_stake","type":"U64"},{"name":"storage_fund_reinvestment","type":"U64"},{"name":"storage_charge","type":"U64"},{"name":"storage_rebate","type":"U64"},{"name":"storage_fund_balance","type":"U64"},{"name":"stake_subsidy_amount","type":"U64"},{"name":"total_gas_fees","type":"U64"},{"name":"total_stake_rewards_distributed","type":"U64"},{"name":"leftover_storage_fund_inflow","type":"U64"}]},"SystemParameters":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"epoch_duration_ms","type":"U64"},{"name":"stake_subsidy_start_epoch","type":"U64"},{"name":"max_validator_count","type":"U64"},{"name":"min_validator_joining_stake","type":"U64"},{"name":"validator_low_stake_threshold","type":"U64"},{"name":"validator_very_low_stake_threshold","type":"U64"},{"name":"validator_low_stake_grace_period","type":"U64"},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"SystemParametersV2":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"epoch_duration_ms","type":"U64"},{"name":"stake_subsidy_start_epoch","type":"U64"},{"name":"min_validator_count","type":"U64"},{"name":"max_validator_count","type":"U64"},{"name":"min_validator_joining_stake","type":"U64"},{"name":"validator_low_stake_threshold","type":"U64"},{"name":"validator_very_low_stake_threshold","type":"U64"},{"name":"validator_low_stake_grace_period","type":"U64"},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]}},"exposedFunctions":{"active_validator_addresses":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"active_validator_voting_powers":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}]},"advance_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},"U64","U64",{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"U64","U64","U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"create":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"U64","U64",{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SystemParameters","typeArguments":[]}},{"Struct":{"address":"0x3","module":"stake_subsidy","name":"StakeSubsidy","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInner","typeArguments":[]}}]},"create_system_parameters":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64","U64","U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SystemParameters","typeArguments":[]}}]},"epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":["U64"]},"epoch_start_timestamp_ms":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":["U64"]},"genesis_system_state_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"get_reporters_of":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},"Address"],"return":[{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}]},"get_storage_fund_object_rebates":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":["U64"]},"get_storage_fund_total_balance":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":["U64"]},"pool_exchange_rates":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}]}}}]},"protocol_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":["U64"]},"report_validator":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"Address"],"return":[]},"request_add_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}]},"request_add_stake_mul_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}]},"request_add_validator":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_add_validator_candidate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_remove_validator":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_remove_validator_candidate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_set_commission_rate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_set_gas_price":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"U64"],"return":[]},"request_withdraw_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"rotate_operation_cap":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"set_candidate_validator_commission_rate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"set_candidate_validator_gas_price":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"U64"],"return":[]},"system_state_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":["U64"]},"undo_report_validator":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"Address"],"return":[]},"update_candidate_validator_network_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_network_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_p2p_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_primary_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_protocol_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_worker_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_candidate_validator_worker_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_description":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_image_url":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_name":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_network_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_network_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_p2p_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_primary_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_protocol_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_worker_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_next_epoch_worker_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_validator_project_url":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"v1_to_v2":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInner","typeArguments":[]}}],"return":[{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}]},"validator_stake_amount":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},"Address"],"return":["U64"]},"validator_staking_pool_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}},"Address"],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"validator_staking_pool_mappings":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"sui_system_state_inner","name":"SuiSystemStateInnerV2","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"Address"]}}}]}}},"validator":{"fileFormatVersion":6,"address":"0x3","name":"validator","friends":[{"address":"0x3","name":"genesis"},{"address":"0x3","name":"sui_system_state_inner"},{"address":"0x3","name":"validator_set"},{"address":"0x3","name":"voting_power"}],"structs":{"StakingRequestEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"validator_address","type":"Address"},{"name":"staker_address","type":"Address"},{"name":"epoch","type":"U64"},{"name":"amount","type":"U64"}]},"UnstakingRequestEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"validator_address","type":"Address"},{"name":"staker_address","type":"Address"},{"name":"stake_activation_epoch","type":"U64"},{"name":"unstaking_epoch","type":"U64"},{"name":"principal_amount","type":"U64"},{"name":"reward_amount","type":"U64"}]},"Validator":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"metadata","type":{"Struct":{"address":"0x3","module":"validator","name":"ValidatorMetadata","typeArguments":[]}}},{"name":"voting_power","type":"U64"},{"name":"operation_cap_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"gas_price","type":"U64"},{"name":"staking_pool","type":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}},{"name":"commission_rate","type":"U64"},{"name":"next_epoch_stake","type":"U64"},{"name":"next_epoch_gas_price","type":"U64"},{"name":"next_epoch_commission_rate","type":"U64"},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"ValidatorMetadata":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"sui_address","type":"Address"},{"name":"protocol_pubkey_bytes","type":{"Vector":"U8"}},{"name":"network_pubkey_bytes","type":{"Vector":"U8"}},{"name":"worker_pubkey_bytes","type":{"Vector":"U8"}},{"name":"proof_of_possession","type":{"Vector":"U8"}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"description","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"image_url","type":{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}},{"name":"project_url","type":{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}},{"name":"net_address","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"p2p_address","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"primary_address","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"worker_address","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"next_epoch_protocol_pubkey_bytes","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}},{"name":"next_epoch_proof_of_possession","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}},{"name":"next_epoch_network_pubkey_bytes","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}},{"name":"next_epoch_worker_pubkey_bytes","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}},{"name":"next_epoch_net_address","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"name":"next_epoch_p2p_address","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"name":"next_epoch_primary_address","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"name":"next_epoch_worker_address","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]}},"exposedFunctions":{"activate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},"U64"],"return":[]},"adjust_stake_and_gas_price":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[]},"commission_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"deactivate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},"U64"],"return":[]},"deposit_stake_rewards":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}],"return":[]},"description":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"effectuate_staged_metadata":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[]},"gas_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"get_staking_pool_ref":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x3","module":"staking_pool","name":"StakingPool","typeArguments":[]}}}]},"image_url":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}}]},"is_duplicate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["Bool"]},"is_preactive":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["Bool"]},"metadata":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"ValidatorMetadata","typeArguments":[]}}}]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"network_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"network_pubkey_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Vector":"U8"}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address",{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}]},"new_metadata":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address",{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}},{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}],"return":[{"Struct":{"address":"0x3","module":"validator","name":"ValidatorMetadata","typeArguments":[]}}]},"new_unverified_validator_operation_cap_and_transfer":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"next_epoch_gas_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"next_epoch_network_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}}]},"next_epoch_network_pubkey_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}}]},"next_epoch_p2p_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}}]},"next_epoch_primary_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}}]},"next_epoch_proof_of_possession":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}}]},"next_epoch_protocol_pubkey_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}}]},"next_epoch_worker_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}}]},"next_epoch_worker_pubkey_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}}]},"operation_cap_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"p2p_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"pending_stake_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"pending_stake_withdraw_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"pool_token_exchange_rate_at_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}]},"primary_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"process_pending_stakes_and_withdraws":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"project_url":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}}]},"proof_of_possession":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Vector":"U8"}}]},"protocol_pubkey_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Vector":"U8"}}]},"request_add_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}]},"request_add_stake_at_genesis":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_set_commission_rate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},"U64"],"return":[]},"request_set_gas_price":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"validator_cap","name":"ValidatorOperationCap","typeArguments":[]}},"U64"],"return":[]},"request_withdraw_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"set_candidate_commission_rate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},"U64"],"return":[]},"set_candidate_gas_price":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"validator_cap","name":"ValidatorOperationCap","typeArguments":[]}},"U64"],"return":[]},"set_voting_power":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},"U64"],"return":[]},"stake_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"staking_pool_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"sui_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["Address"]},"total_stake":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"total_stake_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"update_candidate_network_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_candidate_network_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_candidate_p2p_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_candidate_primary_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_candidate_protocol_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"}],"return":[]},"update_candidate_worker_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_candidate_worker_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_description":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_image_url":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_name":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_next_epoch_network_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_next_epoch_network_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_next_epoch_p2p_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_next_epoch_primary_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_next_epoch_protocol_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"}],"return":[]},"update_next_epoch_worker_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_next_epoch_worker_pubkey":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"update_project_url":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"Vector":"U8"}],"return":[]},"validate_metadata":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"ValidatorMetadata","typeArguments":[]}}}],"return":[]},"validate_metadata_bcs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"}],"return":[]},"voting_power":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["U64"]},"worker_address":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"worker_pubkey_bytes":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[{"Reference":{"Vector":"U8"}}]}}},"validator_cap":{"fileFormatVersion":6,"address":"0x3","name":"validator_cap","friends":[{"address":"0x3","name":"sui_system_state_inner"},{"address":"0x3","name":"validator"},{"address":"0x3","name":"validator_set"}],"structs":{"UnverifiedValidatorOperationCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"authorizer_validator_address","type":"Address"}]},"ValidatorOperationCap":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"authorizer_validator_address","type":"Address"}]}},"exposedFunctions":{"new_from_unverified":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"validator_cap","name":"ValidatorOperationCap","typeArguments":[]}}]},"new_unverified_validator_operation_cap_and_transfer":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"unverified_operation_cap_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}}],"return":[{"Reference":"Address"}]},"verified_operation_cap_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"ValidatorOperationCap","typeArguments":[]}}}],"return":[{"Reference":"Address"}]}}},"validator_set":{"fileFormatVersion":6,"address":"0x3","name":"validator_set","friends":[{"address":"0x3","name":"genesis"},{"address":"0x3","name":"sui_system_state_inner"}],"structs":{"ValidatorEpochInfoEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"validator_address","type":"Address"},{"name":"reference_gas_survey_quote","type":"U64"},{"name":"stake","type":"U64"},{"name":"commission_rate","type":"U64"},{"name":"pool_staking_reward","type":"U64"},{"name":"storage_fund_staking_reward","type":"U64"},{"name":"pool_token_exchange_rate","type":{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}},{"name":"tallying_rule_reporters","type":{"Vector":"Address"}},{"name":"tallying_rule_global_score","type":"U64"}]},"ValidatorEpochInfoEventV2":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"validator_address","type":"Address"},{"name":"reference_gas_survey_quote","type":"U64"},{"name":"stake","type":"U64"},{"name":"voting_power","type":"U64"},{"name":"commission_rate","type":"U64"},{"name":"pool_staking_reward","type":"U64"},{"name":"storage_fund_staking_reward","type":"U64"},{"name":"pool_token_exchange_rate","type":{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}},{"name":"tallying_rule_reporters","type":{"Vector":"Address"}},{"name":"tallying_rule_global_score","type":"U64"}]},"ValidatorJoinEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"validator_address","type":"Address"},{"name":"staking_pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"ValidatorLeaveEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"epoch","type":"U64"},{"name":"validator_address","type":"Address"},{"name":"staking_pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"is_voluntary","type":"Bool"}]},"ValidatorSet":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"total_stake","type":"U64"},{"name":"active_validators","type":{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}},{"name":"pending_active_validators","type":{"Struct":{"address":"0x2","module":"table_vec","name":"TableVec","typeArguments":[{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}]}}},{"name":"pending_removals","type":{"Vector":"U64"}},{"name":"staking_pool_mappings","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"Address"]}}},{"name":"inactive_validators","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x3","module":"validator_wrapper","name":"ValidatorWrapper","typeArguments":[]}}]}}},{"name":"validator_candidates","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["Address",{"Struct":{"address":"0x3","module":"validator_wrapper","name":"ValidatorWrapper","typeArguments":[]}}]}}},{"name":"at_risk_validators","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}},{"name":"extra_fields","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]}},"exposedFunctions":{"active_validator_addresses":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"active_validators":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}}],"return":[{"Reference":{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}}]},"advance_epoch":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address",{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}]}}},"U64","U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"assert_no_pending_or_active_duplicates":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":[]},"derive_reference_gas_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}}],"return":["U64"]},"get_active_or_pending_or_candidate_validator_ref":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address","U8"],"return":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]},"get_active_validator_ref":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]},"get_pending_validator_ref":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":[{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]},"get_validator_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}},"Address"],"return":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]},"get_validator_mut_with_ctx":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]},"get_validator_mut_with_ctx_including_candidates":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]},"get_validator_mut_with_verified_cap":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"ValidatorOperationCap","typeArguments":[]}}},"Bool"],"return":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]},"is_active_validator_by_sui_address":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":["Bool"]},"is_duplicate_validator":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}},{"Reference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}],"return":["Bool"]},"is_inactive_validator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"is_validator_candidate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":["Bool"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}]},"next_epoch_validator_count":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}}],"return":["U64"]},"pool_exchange_rates":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"Struct":{"address":"0x3","module":"staking_pool","name":"PoolTokenExchangeRate","typeArguments":[]}}]}}}]},"request_add_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address",{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}}]},"request_add_validator":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_add_validator_candidate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_remove_validator":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_remove_validator_candidate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_set_commission_rate":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"request_withdraw_stake":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Struct":{"address":"0x3","module":"staking_pool","name":"StakedSui","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"Struct":{"address":"0x2","module":"sui","name":"SUI","typeArguments":[]}}]}}]},"staking_pool_mappings":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"Address"]}}}]},"sum_voting_power_by_addresses":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}},{"Reference":{"Vector":"Address"}}],"return":["U64"]},"total_stake":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}}],"return":["U64"]},"validator_stake_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":["U64"]},"validator_staking_pool_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"validator_total_stake_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":["U64"]},"validator_voting_power":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},"Address"],"return":["U64"]},"verify_cap":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_set","name":"ValidatorSet","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x3","module":"validator_cap","name":"UnverifiedValidatorOperationCap","typeArguments":[]}}},"U8"],"return":[{"Struct":{"address":"0x3","module":"validator_cap","name":"ValidatorOperationCap","typeArguments":[]}}]}}},"validator_wrapper":{"fileFormatVersion":6,"address":"0x3","name":"validator_wrapper","friends":[{"address":"0x3","name":"validator_set"}],"structs":{"ValidatorWrapper":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"inner","type":{"Struct":{"address":"0x2","module":"versioned","name":"Versioned","typeArguments":[]}}}]}},"exposedFunctions":{"create_v1":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x3","module":"validator_wrapper","name":"ValidatorWrapper","typeArguments":[]}}]},"destroy":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x3","module":"validator_wrapper","name":"ValidatorWrapper","typeArguments":[]}}],"return":[{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}]},"load_validator_maybe_upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator_wrapper","name":"ValidatorWrapper","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}]}}},"voting_power":{"fileFormatVersion":6,"address":"0x3","name":"voting_power","friends":[{"address":"0x3","name":"validator_set"}],"structs":{"VotingPowerInfo":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"validator_index","type":"U64"},{"name":"voting_power","type":"U64"}]},"VotingPowerInfoV2":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"validator_index","type":"U64"},{"name":"voting_power","type":"U64"},{"name":"stake","type":"U64"}]}},"exposedFunctions":{"quorum_threshold":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"set_voting_power":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Vector":{"Struct":{"address":"0x3","module":"validator","name":"Validator","typeArguments":[]}}}}],"return":[]},"total_voting_power":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]}}}}');
export function loadAllTypes(coder) {
    _0x1.loadAllTypes(coder);
    _0x2.loadAllTypes(coder);
    for (const m of Object.values(MODULES)) {
        coder.load(m, "0x3");
    }
}
loadAllTypes(defaultMoveCoder());
//# sourceMappingURL=0x3.js.map