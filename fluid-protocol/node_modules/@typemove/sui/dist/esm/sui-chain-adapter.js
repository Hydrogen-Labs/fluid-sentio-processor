import { toInternalModule } from './to-internal.js';
import { ChainAdapter, moduleQname, SPLITTER } from '@typemove/move';
import { SuiClient } from '@mysten/sui.js/client';
export class SuiChainAdapter extends ChainAdapter {
    async getChainId() {
        return this.client.getChainIdentifier();
    }
    // static INSTANCE = new SuiChainAdapter()
    client;
    constructor(client) {
        super();
        this.client = client;
    }
    async fetchModule(account, module
    // network: SuiNetwork
    ) {
        return await this.client.getNormalizedMoveModule({ package: account, module });
    }
    async fetchModules(account
    // network: SuiNetwork
    ) {
        const modules = await this.client.getNormalizedMoveModulesByPackage({
            package: account
        });
        return Object.values(modules);
    }
    getMeaningfulFunctionParams(params) {
        return params;
        // if (params.length === 0) {
        //   return params
        // }
        // return params.slice(0, params.length - 1)
    }
    toInternalModules(modules) {
        return Object.values(modules).map(toInternalModule);
    }
    getAllEventStructs(modules) {
        const eventMap = new Map();
        for (const module of modules) {
            const qname = moduleQname(module);
            for (const struct of module.structs) {
                const abilities = new Set(struct.abilities);
                if (abilities.has('Drop') && abilities.has('Copy')) {
                    eventMap.set(qname + SPLITTER + struct.name, struct);
                }
            }
        }
        return eventMap;
    }
    getType(base) {
        return base.type;
    }
    getData(val) {
        // if (val.parsedJson) {
        //   return val.parsedJson as any
        // }
        if (val === undefined) {
            throw Error('val is undefined');
        }
        if ('parsedJson' in val) {
            return val.parsedJson;
        }
        // if (SuiParsedData.is(val)) {
        //   return val.fields as any
        // }
        if (val.dataType === 'moveObject') {
            return val.fields;
        }
        // if (SuiMoveObject.is(val)) {
        //   return val.fields as any
        // }
        // This may not be perfect, just think everything has
        if ('fields' in val) {
            if ('type' in val && Object.keys(val).length === 2) {
                return val.fields;
            }
        }
        return val;
    }
}
// function getRpcEndpoint(network: SuiNetwork): string {
//   switch (network) {
//     case SuiNetwork.TEST_NET:
//       return 'https://fullnode.testnet.sui.io/'
//   }
//   return 'https://fullnode.mainnet.sui.io/'
// }
function getRpcClient(endpoint) {
    return new SuiClient({ url: endpoint });
}
//# sourceMappingURL=sui-chain-adapter.js.map