/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5, original address 0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  TransactionBlock,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrPure,
  transactionArgumentOrVec,
} from "@typemove/sui";

import { _0x2 } from "@typemove/sui/builtin";
import { _0x1 } from "@typemove/sui/builtin";

export namespace oracle {
  export interface Key<T0> {
    id: _0x2.object_.UID;
    for: _0x2.object_.ID;
  }

  export namespace Key {
    export const TYPE_QNAME =
      "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5::oracle::Key";

    const TYPE = new TypeDescriptor<Key<any>>(Key.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Key<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface Oracle<T0> {
    id: _0x2.object_.UID;
    decimal: bigint;
    price: bigint;
    twap_price_1h: bigint;
    ts_ms: bigint;
    epoch: bigint;
  }

  export namespace Oracle {
    export const TYPE_QNAME =
      "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5::oracle::Oracle";

    const TYPE = new TypeDescriptor<Oracle<any>>(Oracle.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Oracle<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface PriceEvent {
    token: _0x1.ascii.String;
    price: bigint;
    ts_ms: bigint;
    epoch: bigint;
  }

  export namespace PriceEvent {
    export const TYPE_QNAME =
      "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5::oracle::PriceEvent";

    const TYPE = new TypeDescriptor<PriceEvent>(PriceEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<PriceEvent> {
      return TYPE.apply();
    }
  }

  export interface PriceEventInstance extends TypedEventInstance<PriceEvent> {
    data_decoded: PriceEvent;
    type_arguments: [];
  }

  export namespace builder {
    export function copyKey<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5::oracle::copy_key",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function getOracle<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5::oracle::get_oracle",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newOracle<T0 = any>(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5::oracle::new_oracle",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function update<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5::oracle::update",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function copyKey<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.copyKey(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function getOracle<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.getOracle(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function newOracle<T0 = any>(
      client: SuiClient,
      args: [bigint | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.newOracle(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function update<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.update(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '[{"fileFormatVersion":6,"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","name":"oracle","friends":[],"structs":{"Key":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"for","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Oracle":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"decimal","type":"U64"},{"name":"price","type":"U64"},{"name":"twap_price_1h","type":"U64"},{"name":"ts_ms","type":"U64"},{"name":"epoch","type":"U64"}]},"PriceEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"token","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"price","type":"U64"},{"name":"ts_ms","type":"U64"},{"name":"epoch","type":"U64"}]}},"exposedFunctions":{"copy_key":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Key","typeArguments":[{"TypeParameter":0}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"get_oracle":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64","U64","U64","U64"]},"new_oracle":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":["U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Key","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}}]',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5",
    );
  }
}

loadAllTypes(defaultMoveCoder());
