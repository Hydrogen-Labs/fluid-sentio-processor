/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2, original address 0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  TransactionBlock,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrPure,
  transactionArgumentOrVec,
} from "@typemove/sui";

import { _0x2 } from "@typemove/sui/builtin";
import { _0x1 } from "@typemove/sui/builtin";
import * as _0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5 from "./0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5.js";

export namespace authority {
  export interface Authority<T0> {
    whitelist: _0x2.linked_table.LinkedTable<string, Boolean>;
  }

  export namespace Authority {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::Authority";

    const TYPE = new TypeDescriptor<Authority<any>>(Authority.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Authority<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function addAuthorizedUser<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::add_authorized_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyEmpty<T0 = any>(
      tx: TransactionBlock,
      args: [authority.Authority<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::destroy_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new_<T0 = any>(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function removeAll<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::remove_all",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function removeAuthorizedUser<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::remove_authorized_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function verify<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::verify",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function whitelist<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::authority::whitelist",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addAuthorizedUser<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addAuthorizedUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroyEmpty<T0 = any>(
      client: SuiClient,
      args: [authority.Authority<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroyEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function new_<T0 = any>(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[authority.Authority<T0>]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [authority.Authority<T0>]
      >(inspectRes);
    }
    export async function removeAll<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string[]]>> {
      const tx = new TransactionBlock();
      builder.removeAll(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string[]]>(
        inspectRes,
      );
    }
    export async function removeAuthorizedUser<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeAuthorizedUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function verify<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.verify(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function whitelist<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string[]]>> {
      const tx = new TransactionBlock();
      builder.whitelist(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string[]]>(
        inspectRes,
      );
    }
  }
}

export namespace dutch {
  export interface Auction<T0, T1> {
    start_ts_ms: bigint;
    end_ts_ms: bigint;
    price_config: dutch.PriceConfig;
    bid_index: bigint;
    bids: _0x2.table.Table<bigint, dutch.Bid<T1>>;
    ownerships: _0x2.table.Table<string, bigint[]>;
    total_bid_size: bigint;
    able_to_remove_bid: Boolean;
  }

  export namespace Auction {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::Auction";

    const TYPE = new TypeDescriptor<Auction<any, any>>(Auction.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Auction<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface Bid<T0> {
    price: bigint;
    size: bigint;
    ts_ms: bigint;
    balance: _0x2.balance.Balance<T0>;
    bidder: string;
  }

  export namespace Bid {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::Bid";

    const TYPE = new TypeDescriptor<Bid<any>>(Bid.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Bid<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface CloseAuction<T0> {
    signer: string;
  }

  export namespace CloseAuction {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::CloseAuction";

    const TYPE = new TypeDescriptor<CloseAuction<any>>(CloseAuction.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CloseAuction<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface CloseAuctionInstance
    extends TypedEventInstance<CloseAuction<any>> {
    data_decoded: CloseAuction<any>;
    type_arguments: [string];
  }

  export interface Delivery<T0> {
    signer: string;
    bid_index: bigint;
    delivery_price: bigint;
    size: bigint;
  }

  export namespace Delivery {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::Delivery";

    const TYPE = new TypeDescriptor<Delivery<any>>(Delivery.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Delivery<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface DeliveryInstance extends TypedEventInstance<Delivery<any>> {
    data_decoded: Delivery<any>;
    type_arguments: [string];
  }

  export interface NewBid<T0> {
    signer: string;
    bid_index: bigint;
    price: bigint;
    size: bigint;
    balance: bigint;
    ts_ms: bigint;
  }

  export namespace NewBid {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::NewBid";

    const TYPE = new TypeDescriptor<NewBid<any>>(NewBid.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<NewBid<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface NewBidInstance extends TypedEventInstance<NewBid<any>> {
    data_decoded: NewBid<any>;
    type_arguments: [string];
  }

  export interface PriceConfig {
    decay_speed: bigint;
    initial_price: bigint;
    final_price: bigint;
  }

  export namespace PriceConfig {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::PriceConfig";

    const TYPE = new TypeDescriptor<PriceConfig>(PriceConfig.TYPE_QNAME);

    export function type(): TypeDescriptor<PriceConfig> {
      return TYPE.apply();
    }
  }

  export interface RemoveBid<T0> {
    signer: string;
    bid_index: bigint;
    balance: bigint;
    ts_ms: bigint;
  }

  export namespace RemoveBid {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::RemoveBid";

    const TYPE = new TypeDescriptor<RemoveBid<any>>(RemoveBid.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<RemoveBid<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface RemoveBidInstance
    extends TypedEventInstance<RemoveBid<any>> {
    data_decoded: RemoveBid<any>;
    type_arguments: [string];
  }

  export interface UpdateRemoveBidAbility<T0> {
    signer: string;
    previous_setting: Boolean;
    current_setting: Boolean;
  }

  export namespace UpdateRemoveBidAbility {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::UpdateRemoveBidAbility";

    const TYPE = new TypeDescriptor<UpdateRemoveBidAbility<any>>(
      UpdateRemoveBidAbility.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<UpdateRemoveBidAbility<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface UpdateRemoveBidAbilityInstance
    extends TypedEventInstance<UpdateRemoveBidAbility<any>> {
    data_decoded: UpdateRemoveBidAbility<any>;
    type_arguments: [string];
  }

  export namespace builder {
    export function close<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        dutch.Auction<T0, T1> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::close",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function delivery<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        dutch.Auction<T0, T1> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::delivery",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getAuctionBids<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::get_auction_bids",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getAuctionPeriod<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::get_auction_period",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getBidIndex<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::get_bid_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getDecayedPrice<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::get_decayed_price",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getOwnerships<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::get_ownerships",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getUserBidInfo<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::get_user_bid_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function new_<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        Boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function newBid<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::new_bid",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function removeBid<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::remove_bid",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function totalBidSize<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::total_bid_size",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function updateRemoveBidAbility<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        Boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::dutch::update_remove_bid_ability",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function close<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        dutch.Auction<T0, T1> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.close(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function delivery<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        dutch.Auction<T0, T1> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.balance.Balance<T1>,
          _0x2.vec_map.VecMap<string, bigint>,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.delivery(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.balance.Balance<T1>,
          _0x2.vec_map.VecMap<string, bigint>,
          bigint,
          bigint,
          bigint,
          bigint,
          bigint,
        ]
      >(inspectRes);
    }
    export async function getAuctionBids<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.getAuctionBids(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function getAuctionPeriod<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.getAuctionPeriod(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getBidIndex<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getBidIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getDecayedPrice<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getDecayedPrice(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getOwnerships<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.getOwnerships(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function getUserBidInfo<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<[bigint, bigint, bigint, bigint, string]>
    > {
      const tx = new TransactionBlock();
      builder.getUserBidInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint, string]
      >(inspectRes);
    }
    export async function new_<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        Boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[dutch.Auction<T0, T1>]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [dutch.Auction<T0, T1>]
      >(inspectRes);
    }
    export async function newBid<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<
      TypedDevInspectResults<[bigint, bigint, bigint, bigint, bigint, string]>
    > {
      const tx = new TransactionBlock();
      builder.newBid(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint, bigint, string]
      >(inspectRes);
    }
    export async function removeBid<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeBid(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function totalBidSize<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.totalBidSize(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function updateRemoveBidAbility<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        Boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.updateRemoveBidAbility(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace i64 {
  export interface I64 {
    bits: bigint;
  }

  export namespace I64 {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::I64";

    const TYPE = new TypeDescriptor<I64>(I64.TYPE_QNAME);

    export function type(): TypeDescriptor<I64> {
      return TYPE.apply();
    }
  }

  export interface I64Instance extends TypedEventInstance<I64> {
    data_decoded: I64;
    type_arguments: [];
  }

  export namespace builder {
    export function abs(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::abs",
        arguments: _args,
      });
    }
    export function add(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::add",
        arguments: _args,
      });
    }
    export function asU64(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::as_u64",
        arguments: _args,
      });
    }
    export function compare(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::compare",
        arguments: _args,
      });
    }
    export function div(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::div",
        arguments: _args,
      });
    }
    export function from(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::from",
        arguments: _args,
      });
    }
    export function isNeg(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::is_neg",
        arguments: _args,
      });
    }
    export function isZero(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::is_zero",
        arguments: _args,
      });
    }
    export function mul(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::mul",
        arguments: _args,
      });
    }
    export function neg(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::neg",
        arguments: _args,
      });
    }
    export function negFrom(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::neg_from",
        arguments: _args,
      });
    }
    export function sub(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::sub",
        arguments: _args,
      });
    }
    export function zero(
      tx: TransactionBlock,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::i64::zero",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function abs(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.abs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function add(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function asU64(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.asU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function compare(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new TransactionBlock();
      builder.compare(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function div(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.div(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function from(
      client: SuiClient,
      args: [bigint | TransactionArgument],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.from(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function isNeg(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isNeg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function isZero(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isZero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function mul(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.mul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function neg(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.neg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function negFrom(
      client: SuiClient,
      args: [bigint | TransactionArgument],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.negFrom(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function sub(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.sub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function zero(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new TransactionBlock();
      builder.zero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
  }
}

export namespace linked_list {
  export interface LinkedList<T0, T1> {
    id: _0x2.object_.ID;
    first: _0x1.option.Option<T0>;
    last: _0x1.option.Option<T0>;
    length: bigint;
  }

  export namespace LinkedList {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::LinkedList";

    const TYPE = new TypeDescriptor<LinkedList<any, any>>(
      LinkedList.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<LinkedList<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface Node<T0, T1> {
    value: T1;
    prev: _0x1.option.Option<T0>;
    next: _0x1.option.Option<T0>;
    exists: Boolean;
  }

  export namespace Node {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::Node";

    const TYPE = new TypeDescriptor<Node<any, any>>(Node.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Node<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface NodeInstance extends TypedEventInstance<Node<any, any>> {
    data_decoded: Node<any, any>;
    type_arguments: [string, string];
  }

  export namespace builder {
    export function borrow<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowMut<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::borrow_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function chain<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::chain",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function contains<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::contains",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function delete_<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::delete",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function first<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::first",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isEmpty<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::is_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function last<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::last",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function length<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::length",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function new_<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [_0x2.object_.ID | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function newNode<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        T1 | TransactionArgument,
        _0x1.option.Option<T0> | TransactionArgument,
        _0x1.option.Option<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::new_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function next<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::next",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function popBack<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::pop_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function popFront<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::pop_front",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function popNode<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::pop_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function prepareNode<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::prepare_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function prev<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::prev",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function pushBack<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::push_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function pushFront<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::push_front",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function pushNode<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        linked_list.Node<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::push_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function putBack<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::put_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function putFront<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::put_front",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function putNode<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        linked_list.Node<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::put_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function remove<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::remove",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function takeBack<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::take_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function takeFront<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::take_front",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function takeNode<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::linked_list::take_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function borrow<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.borrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMut<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.borrowMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function chain<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.chain(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function contains<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.contains(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function delete_<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new TransactionBlock();
      builder.delete_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
    export async function first<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new TransactionBlock();
      builder.first(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
    export async function isEmpty<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function last<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new TransactionBlock();
      builder.last(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
    export async function length<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.length(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function new_<T0 = any, T1 = any>(
      client: SuiClient,
      args: [_0x2.object_.ID | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[linked_list.LinkedList<T0, T1>]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [linked_list.LinkedList<T0, T1>]
      >(inspectRes);
    }
    export async function newNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        T1 | TransactionArgument,
        _0x1.option.Option<T0> | TransactionArgument,
        _0x1.option.Option<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[linked_list.Node<T0, T1>]>> {
      const tx = new TransactionBlock();
      builder.newNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [linked_list.Node<T0, T1>]
      >(inspectRes);
    }
    export async function next<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new TransactionBlock();
      builder.next(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
    export async function popBack<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T0, T1]>> {
      const tx = new TransactionBlock();
      builder.popBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0, T1]>(
        inspectRes,
      );
    }
    export async function popFront<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T0, T1]>> {
      const tx = new TransactionBlock();
      builder.popFront(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0, T1]>(
        inspectRes,
      );
    }
    export async function popNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new TransactionBlock();
      builder.popNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
    export async function prepareNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.prepareNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function prev<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new TransactionBlock();
      builder.prev(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
    export async function pushBack<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.pushBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function pushFront<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.pushFront(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function pushNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        linked_list.Node<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.pushNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function putBack<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T1>]>> {
      const tx = new TransactionBlock();
      builder.putBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T1>]
      >(inspectRes);
    }
    export async function putFront<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T1>]>> {
      const tx = new TransactionBlock();
      builder.putFront(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T1>]
      >(inspectRes);
    }
    export async function putNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        linked_list.Node<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T1>]>> {
      const tx = new TransactionBlock();
      builder.putNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T1>]
      >(inspectRes);
    }
    export async function remove<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new TransactionBlock();
      builder.remove(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
    export async function takeBack<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T0, T1]>> {
      const tx = new TransactionBlock();
      builder.takeBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0, T1]>(
        inspectRes,
      );
    }
    export async function takeFront<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T0, T1]>> {
      const tx = new TransactionBlock();
      builder.takeFront(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0, T1]>(
        inspectRes,
      );
    }
    export async function takeNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new TransactionBlock();
      builder.takeNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
  }
}

export namespace multiple_collateral {
  export namespace builder {}
  export namespace view {}
}

export namespace single_collateral {
  export interface AddAuthorizedUser {
    signer: string;
    users: string[];
  }

  export namespace AddAuthorizedUser {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::AddAuthorizedUser";

    const TYPE = new TypeDescriptor<AddAuthorizedUser>(
      AddAuthorizedUser.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<AddAuthorizedUser> {
      return TYPE.apply();
    }
  }

  export interface AddAuthorizedUserInstance
    extends TypedEventInstance<AddAuthorizedUser> {
    data_decoded: AddAuthorizedUser;
    type_arguments: [];
  }

  export interface AddPortfolioVaultAuthorizedUser<T0, T1, T2> {
    signer: string;
    index: bigint;
    users: string[];
    is_manager: Boolean;
  }

  export namespace AddPortfolioVaultAuthorizedUser {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::AddPortfolioVaultAuthorizedUser";

    const TYPE = new TypeDescriptor<
      AddPortfolioVaultAuthorizedUser<any, any, any>
    >(AddPortfolioVaultAuthorizedUser.TYPE_QNAME);

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<AddPortfolioVaultAuthorizedUser<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface AddPortfolioVaultAuthorizedUserInstance
    extends TypedEventInstance<AddPortfolioVaultAuthorizedUser<any, any, any>> {
    data_decoded: AddPortfolioVaultAuthorizedUser<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface Claim<T0> {
    signer: string;
    index: bigint;
    amount: bigint;
    fee: bigint;
  }

  export namespace Claim {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Claim";

    const TYPE = new TypeDescriptor<Claim<any>>(Claim.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Claim<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface ClaimInstance extends TypedEventInstance<Claim<any>> {
    data_decoded: Claim<any>;
    type_arguments: [string];
  }

  export interface ClaimAndHarvest<T0, T1> {
    signer: string;
    index: bigint;
  }

  export namespace ClaimAndHarvest {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::ClaimAndHarvest";

    const TYPE = new TypeDescriptor<ClaimAndHarvest<any, any>>(
      ClaimAndHarvest.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<ClaimAndHarvest<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface ClaimAndHarvestInstance
    extends TypedEventInstance<ClaimAndHarvest<any, any>> {
    data_decoded: ClaimAndHarvest<any, any>;
    type_arguments: [string, string];
  }

  export interface Close<T0, T1, T2> {
    signer: string;
    index: bigint;
  }

  export namespace Close {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Close";

    const TYPE = new TypeDescriptor<Close<any, any, any>>(Close.TYPE_QNAME);

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<Close<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface CloseInstance
    extends TypedEventInstance<Close<any, any, any>> {
    data_decoded: Close<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface Compound<T0> {
    signer: string;
    index: bigint;
    amount: bigint;
  }

  export namespace Compound {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Compound";

    const TYPE = new TypeDescriptor<Compound<any>>(Compound.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Compound<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface CompoundInstance extends TypedEventInstance<Compound<any>> {
    data_decoded: Compound<any>;
    type_arguments: [string];
  }

  export interface Config {
    option_type: bigint;
    period: number;
    activation_ts_ms: bigint;
    expiration_ts_ms: bigint;
    d_token_decimal: bigint;
    b_token_decimal: bigint;
    o_token_decimal: bigint;
    lot_size: bigint;
    capacity: bigint;
    leverage: bigint;
    has_next: Boolean;
    active_vault_config: single_collateral.VaultConfig;
    warmup_vault_config: single_collateral.VaultConfig;
    upcoming_vault_config: single_collateral.VaultConfig;
  }

  export namespace Config {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Config";

    const TYPE = new TypeDescriptor<Config>(Config.TYPE_QNAME);

    export function type(): TypeDescriptor<Config> {
      return TYPE.apply();
    }
  }

  export interface ConfigInstance extends TypedEventInstance<Config> {
    data_decoded: Config;
    type_arguments: [];
  }

  export interface Delivery<T0, T1, T2> {
    signer: string;
    index: bigint;
    round: bigint;
    payoff_configs: single_collateral.PayoffConfig[];
    max_size: bigint;
    delivery_price: bigint;
    delivery_size: bigint;
    premium_value: bigint;
    refund_shares: bigint;
    fee_per_unit: bigint;
    accumulated_fee: bigint;
  }

  export namespace Delivery {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Delivery";

    const TYPE = new TypeDescriptor<Delivery<any, any, any>>(
      Delivery.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<Delivery<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface DeliveryInstance
    extends TypedEventInstance<Delivery<any, any, any>> {
    data_decoded: Delivery<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface DeliveryInfo {
    round: bigint;
    price: bigint;
    size: bigint;
    premium: bigint;
    ts_ms: bigint;
  }

  export namespace DeliveryInfo {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::DeliveryInfo";

    const TYPE = new TypeDescriptor<DeliveryInfo>(DeliveryInfo.TYPE_QNAME);

    export function type(): TypeDescriptor<DeliveryInfo> {
      return TYPE.apply();
    }
  }

  export interface DeliveryInfoInstance
    extends TypedEventInstance<DeliveryInfo> {
    data_decoded: DeliveryInfo;
    type_arguments: [];
  }

  export interface Deposit<T0> {
    signer: string;
    index: bigint;
    amount: bigint;
  }

  export namespace Deposit {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Deposit";

    const TYPE = new TypeDescriptor<Deposit<any>>(Deposit.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Deposit<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface DepositInstance extends TypedEventInstance<Deposit<any>> {
    data_decoded: Deposit<any>;
    type_arguments: [string];
  }

  export interface Evolution<T0, T1, T2> {
    signer: string;
    index: bigint;
  }

  export namespace Evolution {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Evolution";

    const TYPE = new TypeDescriptor<Evolution<any, any, any>>(
      Evolution.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<Evolution<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface EvolutionInstance
    extends TypedEventInstance<Evolution<any, any, any>> {
    data_decoded: Evolution<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface GetUserStatusResult {
    active: bigint;
    deactivating: bigint;
    inactive: bigint;
    warmup: bigint;
    bidder: bigint;
    premium: bigint;
    performance_fee: bigint;
  }

  export namespace GetUserStatusResult {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::GetUserStatusResult";

    const TYPE = new TypeDescriptor<GetUserStatusResult>(
      GetUserStatusResult.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<GetUserStatusResult> {
      return TYPE.apply();
    }
  }

  export interface GetUserStatusResultInstance
    extends TypedEventInstance<GetUserStatusResult> {
    data_decoded: GetUserStatusResult;
    type_arguments: [];
  }

  export interface Harvest<T0> {
    signer: string;
    index: bigint;
    share: bigint;
    amount: bigint;
  }

  export namespace Harvest {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Harvest";

    const TYPE = new TypeDescriptor<Harvest<any>>(Harvest.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Harvest<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface HarvestInstance extends TypedEventInstance<Harvest<any>> {
    data_decoded: Harvest<any>;
    type_arguments: [string];
  }

  export interface Info {
    index: bigint;
    creator: string;
    create_ts_ms: bigint;
    round: bigint;
    delivery_info: _0x1.option.Option<single_collateral.DeliveryInfo>;
  }

  export namespace Info {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Info";

    const TYPE = new TypeDescriptor<Info>(Info.TYPE_QNAME);

    export function type(): TypeDescriptor<Info> {
      return TYPE.apply();
    }
  }

  export interface InfoInstance extends TypedEventInstance<Info> {
    data_decoded: Info;
    type_arguments: [];
  }

  export interface ManagerCap {
    id: _0x2.object_.UID;
  }

  export namespace ManagerCap {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::ManagerCap";

    const TYPE = new TypeDescriptor<ManagerCap>(ManagerCap.TYPE_QNAME);

    export function type(): TypeDescriptor<ManagerCap> {
      return TYPE.apply();
    }
  }

  export interface NewAuction {
    signer: string;
    index: bigint;
    start_ts_ms: bigint;
    end_ts_ms: bigint;
    decay_speed: bigint;
    initial_price: bigint;
    final_price: bigint;
    able_to_remove_bid: Boolean;
  }

  export namespace NewAuction {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::NewAuction";

    const TYPE = new TypeDescriptor<NewAuction>(NewAuction.TYPE_QNAME);

    export function type(): TypeDescriptor<NewAuction> {
      return TYPE.apply();
    }
  }

  export interface NewAuctionInstance extends TypedEventInstance<NewAuction> {
    data_decoded: NewAuction;
    type_arguments: [];
  }

  export interface NewBid<T0, T1> {
    signer: string;
    index: bigint;
    bid_index: bigint;
    price: bigint;
    size: bigint;
    coin_value: bigint;
    ts_ms: bigint;
  }

  export namespace NewBid {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::NewBid";

    const TYPE = new TypeDescriptor<NewBid<any, any>>(NewBid.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<NewBid<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface NewBidInstance extends TypedEventInstance<NewBid<any, any>> {
    data_decoded: NewBid<any, any>;
    type_arguments: [string, string];
  }

  export interface NewManager {
    signer: string;
    users: string[];
  }

  export namespace NewManager {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::NewManager";

    const TYPE = new TypeDescriptor<NewManager>(NewManager.TYPE_QNAME);

    export function type(): TypeDescriptor<NewManager> {
      return TYPE.apply();
    }
  }

  export interface NewManagerInstance extends TypedEventInstance<NewManager> {
    data_decoded: NewManager;
    type_arguments: [];
  }

  export interface NewPortfolioVault<T0, T1, T2> {
    signer: string;
    index: bigint;
    info: single_collateral.Info;
    config: single_collateral.Config;
    is_manager: Boolean;
  }

  export namespace NewPortfolioVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::NewPortfolioVault";

    const TYPE = new TypeDescriptor<NewPortfolioVault<any, any, any>>(
      NewPortfolioVault.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<NewPortfolioVault<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface NewPortfolioVaultInstance
    extends TypedEventInstance<NewPortfolioVault<any, any, any>> {
    data_decoded: NewPortfolioVault<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface PayoffConfig {
    strike_pct: bigint;
    weight: bigint;
    is_buyer: Boolean;
    strike: _0x1.option.Option<bigint>;
  }

  export namespace PayoffConfig {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::PayoffConfig";

    const TYPE = new TypeDescriptor<PayoffConfig>(PayoffConfig.TYPE_QNAME);

    export function type(): TypeDescriptor<PayoffConfig> {
      return TYPE.apply();
    }
  }

  export interface PayoffConfigInstance
    extends TypedEventInstance<PayoffConfig> {
    data_decoded: PayoffConfig;
    type_arguments: [];
  }

  export interface PortfolioVault<T0, T1, T2> {
    info: single_collateral.Info;
    config: single_collateral.Config;
    deposit_vault: vault.DepositVault<single_collateral.ManagerCap, T0>;
    bid_vault: vault.BidVault<single_collateral.ManagerCap, T1>;
    auction: _0x1.option.Option<
      dutch.Auction<single_collateral.ManagerCap, T1>
    >;
    authority: authority.Authority<single_collateral.ManagerCap>;
  }

  export namespace PortfolioVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::PortfolioVault";

    const TYPE = new TypeDescriptor<PortfolioVault<any, any, any>>(
      PortfolioVault.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<PortfolioVault<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface Registry {
    id: _0x2.object_.UID;
    num_of_vault: bigint;
    authority: authority.Authority<single_collateral.ManagerCap>;
    restrict_activation_time_period: single_collateral.RestrictActivationTimePeriod;
    user_share_registry: vault.UserShareRegistry;
  }

  export namespace Registry {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Registry";

    const TYPE = new TypeDescriptor<Registry>(Registry.TYPE_QNAME);

    export function type(): TypeDescriptor<Registry> {
      return TYPE.apply();
    }
  }

  export interface RemoveAuthorizedUser {
    signer: string;
    users: string[];
  }

  export namespace RemoveAuthorizedUser {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::RemoveAuthorizedUser";

    const TYPE = new TypeDescriptor<RemoveAuthorizedUser>(
      RemoveAuthorizedUser.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RemoveAuthorizedUser> {
      return TYPE.apply();
    }
  }

  export interface RemoveAuthorizedUserInstance
    extends TypedEventInstance<RemoveAuthorizedUser> {
    data_decoded: RemoveAuthorizedUser;
    type_arguments: [];
  }

  export interface RemoveManager {
    signer: string;
  }

  export namespace RemoveManager {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::RemoveManager";

    const TYPE = new TypeDescriptor<RemoveManager>(RemoveManager.TYPE_QNAME);

    export function type(): TypeDescriptor<RemoveManager> {
      return TYPE.apply();
    }
  }

  export interface RemoveManagerInstance
    extends TypedEventInstance<RemoveManager> {
    data_decoded: RemoveManager;
    type_arguments: [];
  }

  export interface RemovePortfolioVaultAuthorizedUser<T0, T1, T2> {
    signer: string;
    index: bigint;
    users: string[];
    is_manager: Boolean;
  }

  export namespace RemovePortfolioVaultAuthorizedUser {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::RemovePortfolioVaultAuthorizedUser";

    const TYPE = new TypeDescriptor<
      RemovePortfolioVaultAuthorizedUser<any, any, any>
    >(RemovePortfolioVaultAuthorizedUser.TYPE_QNAME);

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<RemovePortfolioVaultAuthorizedUser<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface RemovePortfolioVaultAuthorizedUserInstance
    extends TypedEventInstance<
      RemovePortfolioVaultAuthorizedUser<any, any, any>
    > {
    data_decoded: RemovePortfolioVaultAuthorizedUser<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface RestrictActivationTimePeriod {
    from_ts_ms: bigint;
    to_ts_ms: bigint;
  }

  export namespace RestrictActivationTimePeriod {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::RestrictActivationTimePeriod";

    const TYPE = new TypeDescriptor<RestrictActivationTimePeriod>(
      RestrictActivationTimePeriod.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RestrictActivationTimePeriod> {
      return TYPE.apply();
    }
  }

  export interface Settle<T0, T1, T2> {
    signer: string;
    index: bigint;
    price: bigint;
    delivery_size: bigint;
    portfolio_payoff: bigint;
    portfolio_payoff_is_neg: Boolean;
    original_premium: bigint;
    portfolio_final_payoff: bigint;
    portfolio_final_payoff_is_neg: Boolean;
    total_balance: bigint;
    share_price: bigint;
    performance_fee: bigint;
    activation_ts_ms: bigint;
    expiration_ts_ms: bigint;
  }

  export namespace Settle {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Settle";

    const TYPE = new TypeDescriptor<Settle<any, any, any>>(Settle.TYPE_QNAME);

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<Settle<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface SettleInstance
    extends TypedEventInstance<Settle<any, any, any>> {
    data_decoded: Settle<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface TerminateAuction<T0, T1, T2> {
    signer: string;
    index: bigint;
  }

  export namespace TerminateAuction {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::TerminateAuction";

    const TYPE = new TypeDescriptor<TerminateAuction<any, any, any>>(
      TerminateAuction.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<TerminateAuction<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface TerminateAuctionInstance
    extends TypedEventInstance<TerminateAuction<any, any, any>> {
    data_decoded: TerminateAuction<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface TerminateVault<T0, T1, T2> {
    signer: string;
    index: bigint;
  }

  export namespace TerminateVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::TerminateVault";

    const TYPE = new TypeDescriptor<TerminateVault<any, any, any>>(
      TerminateVault.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<TerminateVault<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface TerminateVaultInstance
    extends TypedEventInstance<TerminateVault<any, any, any>> {
    data_decoded: TerminateVault<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface Unsubscribe<T0> {
    signer: string;
    index: bigint;
    amount: bigint;
  }

  export namespace Unsubscribe {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Unsubscribe";

    const TYPE = new TypeDescriptor<Unsubscribe<any>>(Unsubscribe.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Unsubscribe<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface UnsubscribeInstance
    extends TypedEventInstance<Unsubscribe<any>> {
    data_decoded: Unsubscribe<any>;
    type_arguments: [string];
  }

  export interface UpdateActiveVaultConfig<T0, T1, T2> {
    signer: string;
    index: bigint;
    previous: single_collateral.VaultConfig;
    current: single_collateral.VaultConfig;
  }

  export namespace UpdateActiveVaultConfig {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::UpdateActiveVaultConfig";

    const TYPE = new TypeDescriptor<UpdateActiveVaultConfig<any, any, any>>(
      UpdateActiveVaultConfig.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<UpdateActiveVaultConfig<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface UpdateActiveVaultConfigInstance
    extends TypedEventInstance<UpdateActiveVaultConfig<any, any, any>> {
    data_decoded: UpdateActiveVaultConfig<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface UpdateCapacity<T0, T1, T2> {
    signer: string;
    index: bigint;
    previous: bigint;
    current: bigint;
    is_manager: Boolean;
  }

  export namespace UpdateCapacity {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::UpdateCapacity";

    const TYPE = new TypeDescriptor<UpdateCapacity<any, any, any>>(
      UpdateCapacity.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<UpdateCapacity<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface UpdateCapacityInstance
    extends TypedEventInstance<UpdateCapacity<any, any, any>> {
    data_decoded: UpdateCapacity<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface UpdateRestrictActivationTimePeriod {
    signer: string;
    previous_from_ts_ms: bigint;
    previous_to_ts_ms: bigint;
    current_from_ts_ms: bigint;
    current_to_ts_ms: bigint;
  }

  export namespace UpdateRestrictActivationTimePeriod {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::UpdateRestrictActivationTimePeriod";

    const TYPE = new TypeDescriptor<UpdateRestrictActivationTimePeriod>(
      UpdateRestrictActivationTimePeriod.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateRestrictActivationTimePeriod> {
      return TYPE.apply();
    }
  }

  export interface UpdateRestrictActivationTimePeriodInstance
    extends TypedEventInstance<UpdateRestrictActivationTimePeriod> {
    data_decoded: UpdateRestrictActivationTimePeriod;
    type_arguments: [];
  }

  export interface UpdateUpcomingVaultConfig<T0, T1, T2> {
    signer: string;
    index: bigint;
    previous: single_collateral.VaultConfig;
    current: single_collateral.VaultConfig;
    is_manager: Boolean;
  }

  export namespace UpdateUpcomingVaultConfig {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::UpdateUpcomingVaultConfig";

    const TYPE = new TypeDescriptor<UpdateUpcomingVaultConfig<any, any, any>>(
      UpdateUpcomingVaultConfig.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<UpdateUpcomingVaultConfig<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface UpdateUpcomingVaultConfigInstance
    extends TypedEventInstance<UpdateUpcomingVaultConfig<any, any, any>> {
    data_decoded: UpdateUpcomingVaultConfig<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface UpdateWarmupVaultConfig<T0, T1, T2> {
    signer: string;
    index: bigint;
    previous: single_collateral.VaultConfig;
    current: single_collateral.VaultConfig;
    is_manager: Boolean;
  }

  export namespace UpdateWarmupVaultConfig {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::UpdateWarmupVaultConfig";

    const TYPE = new TypeDescriptor<UpdateWarmupVaultConfig<any, any, any>>(
      UpdateWarmupVaultConfig.TYPE_QNAME,
    );

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<UpdateWarmupVaultConfig<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface UpdateWarmupVaultConfigInstance
    extends TypedEventInstance<UpdateWarmupVaultConfig<any, any, any>> {
    data_decoded: UpdateWarmupVaultConfig<any, any, any>;
    type_arguments: [string, string, string];
  }

  export interface VaultConfig {
    payoff_configs: single_collateral.PayoffConfig[];
    strike_increment: bigint;
    decay_speed: bigint;
    initial_price: bigint;
    final_price: bigint;
    auction_duration_in_ms: bigint;
  }

  export namespace VaultConfig {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::VaultConfig";

    const TYPE = new TypeDescriptor<VaultConfig>(VaultConfig.TYPE_QNAME);

    export function type(): TypeDescriptor<VaultConfig> {
      return TYPE.apply();
    }
  }

  export interface VaultConfigInstance extends TypedEventInstance<VaultConfig> {
    data_decoded: VaultConfig;
    type_arguments: [];
  }

  export interface VaultTsMs {
    activation_ts_ms: bigint;
    expiration_ts_ms: bigint;
  }

  export namespace VaultTsMs {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::VaultTsMs";

    const TYPE = new TypeDescriptor<VaultTsMs>(VaultTsMs.TYPE_QNAME);

    export function type(): TypeDescriptor<VaultTsMs> {
      return TYPE.apply();
    }
  }

  export interface VaultTsMsInstance extends TypedEventInstance<VaultTsMs> {
    data_decoded: VaultTsMs;
    type_arguments: [];
  }

  export interface Withdraw<T0> {
    signer: string;
    index: bigint;
    amount: bigint;
  }

  export namespace Withdraw {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::Withdraw";

    const TYPE = new TypeDescriptor<Withdraw<any>>(Withdraw.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Withdraw<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface WithdrawInstance extends TypedEventInstance<Withdraw<any>> {
    data_decoded: Withdraw<any>;
    type_arguments: [string];
  }

  export namespace builder {
    export function addAuthorizedUser(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::add_authorized_user",
        arguments: _args,
      });
    }
    export function addPortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::add_portfolio_vault_authorized_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function authorizedAddPortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::authorized_add_portfolio_vault_authorized_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function authorizedDelivery<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::authorized_delivery",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function authorizedNewPortfolioVault<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        Boolean | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));
      _args.push(transactionArgumentOrPure(args[18], tx));
      _args.push(transactionArgumentOrPure(args[19], tx));
      _args.push(transactionArgumentOrPure(args[20], tx));
      _args.push(transactionArgumentOrVec(args[21], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::authorized_new_portfolio_vault",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function authorizedRemovePortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::authorized_remove_portfolio_vault_authorized_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function authorizedUpdateCapacity<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::authorized_update_capacity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function authorizedUpdateUpcomingVaultConfig<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::authorized_update_upcoming_vault_config",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function authorizedUpdateWarmupVaultConfig<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::authorized_update_warmup_vault_config",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function claim<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::claim",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function claimAndHarvest<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::claim_and_harvest",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function close<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::close",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function compound<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::compound",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function delivery<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::delivery",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function deposit<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::deposit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function evolution<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::evolution",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getAuctionMaxSize<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::get_auction_max_size",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getMaxLossPerUnit<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::get_max_loss_per_unit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getUserStatus<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::get_user_status",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function harvest<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::harvest",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function newAuction<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::new_auction",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function newBid<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::new_bid",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function newManager(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::new_manager",
        arguments: _args,
      });
    }
    export function newPortfolioVault<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        Boolean | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrVec(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));
      _args.push(transactionArgumentOrPure(args[18], tx));
      _args.push(transactionArgumentOrPure(args[19], tx));
      _args.push(transactionArgumentOrPure(args[20], tx));
      _args.push(transactionArgumentOrPure(args[21], tx));
      _args.push(transactionArgumentOrVec(args[22], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::new_portfolio_vault",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function removeAuthorizedUser(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::remove_authorized_user",
        arguments: _args,
      });
    }
    export function removeManager(
      tx: TransactionBlock,
      args: [single_collateral.ManagerCap | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::remove_manager",
        arguments: _args,
      });
    }
    export function removePortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::remove_portfolio_vault_authorized_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function terminateAuction<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::terminate_auction",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function terminateVault<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::terminate_vault",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function unsubscribe<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::unsubscribe",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateActiveVaultConfig<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::update_active_vault_config",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateCapacity<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::update_capacity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateRestrictActivationTimePeriod(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::update_restrict_activation_time_period",
        arguments: _args,
      });
    }
    export function updateUpcomingVaultConfig<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::update_upcoming_vault_config",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateWarmupVaultConfig<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::update_warmup_vault_config",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function withdraw<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::single_collateral::withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addAuthorizedUser(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addAuthorizedUser(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addPortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addPortfolioVaultAuthorizedUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function authorizedAddPortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.authorizedAddPortfolioVaultAuthorizedUser(
        tx,
        args,
        typeArguments,
      );
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function authorizedDelivery<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.authorizedDelivery(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function authorizedNewPortfolioVault<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        Boolean | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.authorizedNewPortfolioVault(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function authorizedRemovePortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.authorizedRemovePortfolioVaultAuthorizedUser(
        tx,
        args,
        typeArguments,
      );
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function authorizedUpdateCapacity<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.authorizedUpdateCapacity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function authorizedUpdateUpcomingVaultConfig<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.authorizedUpdateUpcomingVaultConfig(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function authorizedUpdateWarmupVaultConfig<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.authorizedUpdateWarmupVaultConfig(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function claim<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.claim(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function claimAndHarvest<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.claimAndHarvest(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function close<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.close(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function compound<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.compound(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function delivery<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.delivery(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deposit<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.deposit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function evolution<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.evolution(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function getAuctionMaxSize<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getAuctionMaxSize(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getMaxLossPerUnit<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getMaxLossPerUnit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getUserStatus<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<
      TypedDevInspectResults<[single_collateral.GetUserStatusResult]>
    > {
      const tx = new TransactionBlock();
      builder.getUserStatus(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [single_collateral.GetUserStatusResult]
      >(inspectRes);
    }
    export async function harvest<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.harvest(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newAuction<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.newAuction(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newBid<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.newBid(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newManager(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.newManager(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newPortfolioVault<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        Boolean | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.newPortfolioVault(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeAuthorizedUser(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeAuthorizedUser(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeManager(
      client: SuiClient,
      args: [single_collateral.ManagerCap | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeManager(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removePortfolioVaultAuthorizedUser<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removePortfolioVaultAuthorizedUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function terminateAuction<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.terminateAuction(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function terminateVault<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.terminateVault(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function unsubscribe<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.unsubscribe(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateActiveVaultConfig<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.updateActiveVaultConfig(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateCapacity<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.updateCapacity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateRestrictActivationTimePeriod(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.updateRestrictActivationTimePeriod(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateUpcomingVaultConfig<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.updateUpcomingVaultConfig(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateWarmupVaultConfig<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.updateWarmupVaultConfig(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function withdraw<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.withdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace utils {
  export namespace builder {
    export function extractBalance<T0 = any>(
      tx: TransactionBlock,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::utils::extract_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function getDateFromTs(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::utils::get_date_from_ts",
        arguments: _args,
      });
    }
    export function matchTypes<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::utils::match_types",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function multiplier(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::utils::multiplier",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function extractBalance<T0 = any>(
      client: SuiClient,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.balance.Balance<T0>]>> {
      const tx = new TransactionBlock();
      builder.extractBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.balance.Balance<T0>]
      >(inspectRes);
    }
    export async function getDateFromTs(
      client: SuiClient,
      args: [bigint | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.getDateFromTs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function matchTypes<T0 = any, T1 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.matchTypes(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function multiplier(
      client: SuiClient,
      args: [bigint | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.multiplier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace vault {
  export interface Activate<T0, T1> {
    signer: string;
    amount: bigint;
    has_next: Boolean;
  }

  export namespace Activate {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Activate";

    const TYPE = new TypeDescriptor<Activate<any, any>>(Activate.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Activate<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface ActivateInstance
    extends TypedEventInstance<Activate<any, any>> {
    data_decoded: Activate<any, any>;
    type_arguments: [string, string];
  }

  export interface BidVault<T0, T1> {
    bidder_sub_vault: vault.SubVault<T1>;
    premium_sub_vault: vault.SubVault<T1>;
    performance_fee_sub_vault: vault.SubVault<T1>;
  }

  export namespace BidVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::BidVault";

    const TYPE = new TypeDescriptor<BidVault<any, any>>(BidVault.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<BidVault<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface Claim<T0, T1> {
    signer: string;
    user_amount: bigint;
    claim_fee_amount: bigint;
  }

  export namespace Claim {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Claim";

    const TYPE = new TypeDescriptor<Claim<any, any>>(Claim.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Claim<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface ClaimInstance extends TypedEventInstance<Claim<any, any>> {
    data_decoded: Claim<any, any>;
    type_arguments: [string, string];
  }

  export interface CloseBidVault<T0, T1> {
    signer: string;
    bidder_sub_vault_receipt: _0x2.vec_map.VecMap<string, bigint>;
    premium_sub_vault_receipt: _0x2.vec_map.VecMap<string, bigint>;
    performance_fee_sub_vault_receipt: _0x2.vec_map.VecMap<string, bigint>;
  }

  export namespace CloseBidVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::CloseBidVault";

    const TYPE = new TypeDescriptor<CloseBidVault<any, any>>(
      CloseBidVault.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<CloseBidVault<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface CloseBidVaultInstance
    extends TypedEventInstance<CloseBidVault<any, any>> {
    data_decoded: CloseBidVault<any, any>;
    type_arguments: [string, string];
  }

  export interface CloseDepositVault<T0, T1> {
    signer: string;
    active_sub_vault_receipt: _0x2.vec_map.VecMap<string, bigint>;
    deactivating_sub_vault_receipt: _0x2.vec_map.VecMap<string, bigint>;
    inactive_sub_vault_receipt: _0x2.vec_map.VecMap<string, bigint>;
    warmup_sub_vault_receipt: _0x2.vec_map.VecMap<string, bigint>;
  }

  export namespace CloseDepositVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::CloseDepositVault";

    const TYPE = new TypeDescriptor<CloseDepositVault<any, any>>(
      CloseDepositVault.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<CloseDepositVault<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface CloseDepositVaultInstance
    extends TypedEventInstance<CloseDepositVault<any, any>> {
    data_decoded: CloseDepositVault<any, any>;
    type_arguments: [string, string];
  }

  export interface Compound<T0, T1> {
    signer: string;
    amount: bigint;
  }

  export namespace Compound {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Compound";

    const TYPE = new TypeDescriptor<Compound<any, any>>(Compound.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Compound<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface CompoundInstance
    extends TypedEventInstance<Compound<any, any>> {
    data_decoded: Compound<any, any>;
    type_arguments: [string, string];
  }

  export interface Delivery<T0, T1> {
    signer: string;
    premium: bigint;
    performance_fee: bigint;
  }

  export namespace Delivery {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Delivery";

    const TYPE = new TypeDescriptor<Delivery<any, any>>(Delivery.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Delivery<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface DeliveryInstance
    extends TypedEventInstance<Delivery<any, any>> {
    data_decoded: Delivery<any, any>;
    type_arguments: [string, string];
  }

  export interface DeliveryMultiple<T0, T1, T2, T3> {
    signer: string;
    premium: bigint;
    performance_fee: bigint;
  }

  export namespace DeliveryMultiple {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::DeliveryMultiple";

    const TYPE = new TypeDescriptor<DeliveryMultiple<any, any, any, any>>(
      DeliveryMultiple.TYPE_QNAME,
    );

    export function type<T0, T1, T2, T3>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
      arg3: TypeDescriptor<T3> = ANY_TYPE,
    ): TypeDescriptor<DeliveryMultiple<T0, T1, T2, T3>> {
      return TYPE.apply(arg0, arg1, arg2, arg3);
    }
  }

  export interface DeliveryMultipleInstance
    extends TypedEventInstance<DeliveryMultiple<any, any, any, any>> {
    data_decoded: DeliveryMultiple<any, any, any, any>;
    type_arguments: [string, string, string, string];
  }

  export interface Deposit<T0, T1> {
    signer: string;
    amount: bigint;
  }

  export namespace Deposit {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Deposit";

    const TYPE = new TypeDescriptor<Deposit<any, any>>(Deposit.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Deposit<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface DepositInstance
    extends TypedEventInstance<Deposit<any, any>> {
    data_decoded: Deposit<any, any>;
    type_arguments: [string, string];
  }

  export interface DepositVault<T0, T1> {
    active_sub_vault: vault.SubVault<T1>;
    deactivating_sub_vault: vault.SubVault<T1>;
    inactive_sub_vault: vault.SubVault<T1>;
    warmup_sub_vault: vault.SubVault<T1>;
    has_next: Boolean;
  }

  export namespace DepositVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::DepositVault";

    const TYPE = new TypeDescriptor<DepositVault<any, any>>(
      DepositVault.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<DepositVault<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface Harvest<T0, T1> {
    signer: string;
    share: bigint;
    amount: bigint;
  }

  export namespace Harvest {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Harvest";

    const TYPE = new TypeDescriptor<Harvest<any, any>>(Harvest.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Harvest<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface HarvestInstance
    extends TypedEventInstance<Harvest<any, any>> {
    data_decoded: Harvest<any, any>;
    type_arguments: [string, string];
  }

  export interface NewBidVault<T0, T1> {
    signer: string;
  }

  export namespace NewBidVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::NewBidVault";

    const TYPE = new TypeDescriptor<NewBidVault<any, any>>(
      NewBidVault.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<NewBidVault<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface NewBidVaultInstance
    extends TypedEventInstance<NewBidVault<any, any>> {
    data_decoded: NewBidVault<any, any>;
    type_arguments: [string, string];
  }

  export interface NewDepositVault<T0, T1> {
    signer: string;
  }

  export namespace NewDepositVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::NewDepositVault";

    const TYPE = new TypeDescriptor<NewDepositVault<any, any>>(
      NewDepositVault.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<NewDepositVault<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface NewDepositVaultInstance
    extends TypedEventInstance<NewDepositVault<any, any>> {
    data_decoded: NewDepositVault<any, any>;
    type_arguments: [string, string];
  }

  export interface Refund<T0, T1> {
    signer: string;
    amount: bigint;
    deactivating: bigint;
    active: bigint;
  }

  export namespace Refund {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Refund";

    const TYPE = new TypeDescriptor<Refund<any, any>>(Refund.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Refund<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface RefundInstance extends TypedEventInstance<Refund<any, any>> {
    data_decoded: Refund<any, any>;
    type_arguments: [string, string];
  }

  export interface Settle<T0, T1> {
    signer: string;
    settled_share_price: bigint;
    share_price_decimal: bigint;
    spot_price: bigint;
    spot_price_decimal: bigint;
  }

  export namespace Settle {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Settle";

    const TYPE = new TypeDescriptor<Settle<any, any>>(Settle.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Settle<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface SettleInstance extends TypedEventInstance<Settle<any, any>> {
    data_decoded: Settle<any, any>;
    type_arguments: [string, string];
  }

  export interface SettleMultiple<T0, T1, T2, T3> {
    signer: string;
    settled_share_price_token: bigint;
    settled_share_price_usd: bigint;
    share_price_decimal: bigint;
    spot_price: bigint;
    spot_price_decimal: bigint;
  }

  export namespace SettleMultiple {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::SettleMultiple";

    const TYPE = new TypeDescriptor<SettleMultiple<any, any, any, any>>(
      SettleMultiple.TYPE_QNAME,
    );

    export function type<T0, T1, T2, T3>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
      arg3: TypeDescriptor<T3> = ANY_TYPE,
    ): TypeDescriptor<SettleMultiple<T0, T1, T2, T3>> {
      return TYPE.apply(arg0, arg1, arg2, arg3);
    }
  }

  export interface SettleMultipleInstance
    extends TypedEventInstance<SettleMultiple<any, any, any, any>> {
    data_decoded: SettleMultiple<any, any, any, any>;
    type_arguments: [string, string, string, string];
  }

  export interface SubVault<T0> {
    index: bigint;
    tag: bigint;
    balance: _0x2.balance.Balance<T0>;
    share_supply: bigint;
    user_shares: linked_list.LinkedList<vault.UserShareKey, bigint>;
  }

  export namespace SubVault {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::SubVault";

    const TYPE = new TypeDescriptor<SubVault<any>>(SubVault.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<SubVault<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface Unsubscribe<T0, T1> {
    signer: string;
    amount: bigint;
  }

  export namespace Unsubscribe {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Unsubscribe";

    const TYPE = new TypeDescriptor<Unsubscribe<any, any>>(
      Unsubscribe.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Unsubscribe<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface UnsubscribeInstance
    extends TypedEventInstance<Unsubscribe<any, any>> {
    data_decoded: Unsubscribe<any, any>;
    type_arguments: [string, string];
  }

  export interface UserShareKey {
    index: bigint;
    tag: bigint;
    user: string;
  }

  export namespace UserShareKey {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::UserShareKey";

    const TYPE = new TypeDescriptor<UserShareKey>(UserShareKey.TYPE_QNAME);

    export function type(): TypeDescriptor<UserShareKey> {
      return TYPE.apply();
    }
  }

  export interface UserShareKeyInstance
    extends TypedEventInstance<UserShareKey> {
    data_decoded: UserShareKey;
    type_arguments: [];
  }

  export interface UserShareRegistry {
    id: _0x2.object_.UID;
  }

  export namespace UserShareRegistry {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::UserShareRegistry";

    const TYPE = new TypeDescriptor<UserShareRegistry>(
      UserShareRegistry.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UserShareRegistry> {
      return TYPE.apply();
    }
  }

  export interface Withdraw<T0, T1> {
    signer: string;
    amount: bigint;
  }

  export namespace Withdraw {
    export const TYPE_QNAME =
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::Withdraw";

    const TYPE = new TypeDescriptor<Withdraw<any, any>>(Withdraw.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Withdraw<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface WithdrawInstance
    extends TypedEventInstance<Withdraw<any, any>> {
    data_decoded: Withdraw<any, any>;
    type_arguments: [string, string];
  }

  export namespace builder {
    export function activate<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        Boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::activate",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function activeBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::active_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function activeShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::active_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function activeUserShares<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::active_user_shares",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function bidderBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::bidder_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function bidderShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::bidder_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function bidderShares<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::bidder_shares",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function claim<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::claim",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function closeBidVault<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        vault.BidVault<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::close_bid_vault",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function closeDepositVault<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        vault.DepositVault<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::close_deposit_vault",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function compound<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::compound",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function deactivatingBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::deactivating_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function deactivatingShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::deactivating_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function deactivatingUserShares<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::deactivating_user_shares",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function delivery<T0 = any, T1 = any, T2 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.balance.Balance<T2> | TransactionArgument,
        _0x2.vec_map.VecMap<string, bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::delivery",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function deliveryMultiple<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.balance.Balance<T2> | TransactionArgument,
        _0x2.vec_map.VecMap<string, bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::delivery_multiple",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function deposit<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::deposit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getActiveUserShare<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_active_user_share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getBidVaultBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_bid_vault_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getBidVaultShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_bid_vault_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getBidderUserShare<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_bidder_user_share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getDeactivatingUserShare<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_deactivating_user_share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getDepositVaultBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_deposit_vault_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getDepositVaultShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_deposit_vault_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getInactiveUserShare<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_inactive_user_share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getPerformanceFeeUserShare<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_performance_fee_user_share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getPremiumUserShare<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_premium_user_share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getWarmupUserShare<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::get_warmup_user_share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function harvest<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::harvest",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function hasNext<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::has_next",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function inactiveBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::inactive_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function inactiveShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::inactive_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function inactiveUserShares<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::inactive_user_shares",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isActiveUser<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::is_active_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isDeactivatingUser<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::is_deactivating_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isInactiveUser<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::is_inactive_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isWarmupUser<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::is_warmup_user",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function newBidVault<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::new_bid_vault",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function newDepositVault<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::new_deposit_vault",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function newUserShareRegistry(
      tx: TransactionBlock,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::new_user_share_registry",
        arguments: _args,
      });
    }
    export function performanceFeeBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::performance_fee_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function performanceFeeShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::performance_fee_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function performanceFeeShares<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::performance_fee_shares",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function premiumBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::premium_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function premiumShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::premium_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function premiumShares<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::premium_shares",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function refund<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::refund",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function settleFund<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::settle_fund",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function settleFundMultiple<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));
      _args.push(transactionArgumentOrPure(args[11], tx));
      _args.push(transactionArgumentOrPure(args[12], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::settle_fund_multiple",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function unsubscribe<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::unsubscribe",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function userShareRegistryUid(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::user_share_registry_uid",
        arguments: _args,
      });
    }
    export function warmupBalance<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::warmup_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function warmupShareSupply<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::warmup_share_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function warmupUserShares<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::warmup_user_shares",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function withdraw<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2::vault::withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function activate<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        Boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.activate(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function activeBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.activeBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function activeShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.activeShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function activeUserShares<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.activeUserShares(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function bidderBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.bidderBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function bidderShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.bidderShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function bidderShares<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.bidderShares(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function claim<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.claim(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function closeBidVault<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        vault.BidVault<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.closeBidVault(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
        ]
      >(inspectRes);
    }
    export async function closeDepositVault<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        vault.DepositVault<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.closeDepositVault(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
          _0x2.vec_map.VecMap<string, bigint>,
        ]
      >(inspectRes);
    }
    export async function compound<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.compound(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function deactivatingBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.deactivatingBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function deactivatingShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.deactivatingShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function deactivatingUserShares<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.deactivatingUserShares(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function delivery<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.balance.Balance<T2> | TransactionArgument,
        _0x2.vec_map.VecMap<string, bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.delivery(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deliveryMultiple<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.balance.Balance<T2> | TransactionArgument,
        _0x2.vec_map.VecMap<string, bigint> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.deliveryMultiple(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deposit<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.deposit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getActiveUserShare<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getActiveUserShare(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getBidVaultBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.getBidVaultBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getBidVaultShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.getBidVaultShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getBidderUserShare<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getBidderUserShare(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getDeactivatingUserShare<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getDeactivatingUserShare(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getDepositVaultBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.getDepositVaultBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function getDepositVaultShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.getDepositVaultShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function getInactiveUserShare<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getInactiveUserShare(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPerformanceFeeUserShare<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getPerformanceFeeUserShare(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPremiumUserShare<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getPremiumUserShare(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getWarmupUserShare<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.getWarmupUserShare(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function harvest<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new TransactionBlock();
      builder.harvest(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function hasNext<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.hasNext(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function inactiveBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.inactiveBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function inactiveShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.inactiveShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function inactiveUserShares<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.inactiveUserShares(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function isActiveUser<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isActiveUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function isDeactivatingUser<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isDeactivatingUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function isInactiveUser<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isInactiveUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function isWarmupUser<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isWarmupUser(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function newBidVault<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[vault.BidVault<T0, T1>]>> {
      const tx = new TransactionBlock();
      builder.newBidVault(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [vault.BidVault<T0, T1>]
      >(inspectRes);
    }
    export async function newDepositVault<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[vault.DepositVault<T0, T1>]>> {
      const tx = new TransactionBlock();
      builder.newDepositVault(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [vault.DepositVault<T0, T1>]
      >(inspectRes);
    }
    export async function newUserShareRegistry(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[vault.UserShareRegistry]>> {
      const tx = new TransactionBlock();
      builder.newUserShareRegistry(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [vault.UserShareRegistry]
      >(inspectRes);
    }
    export async function performanceFeeBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.performanceFeeBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function performanceFeeShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.performanceFeeShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function performanceFeeShares<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.performanceFeeShares(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function premiumBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.premiumBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function premiumShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.premiumShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function premiumShares<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.premiumShares(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function refund<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.refund(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function settleFund<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.settleFund(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function settleFundMultiple<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.settleFundMultiple(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function unsubscribe<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.unsubscribe(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function userShareRegistryUid(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.userShareRegistryUid(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function warmupBalance<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.warmupBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function warmupShareSupply<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.warmupShareSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function warmupUserShares<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.warmupUserShares(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function withdraw<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.withdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"authority":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"authority","friends":[],"structs":{"Authority":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"whitelist","type":{"Struct":{"address":"0x2","module":"linked_table","name":"LinkedTable","typeArguments":["Address","Bool"]}}}]}},"exposedFunctions":{"add_authorized_user":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"TypeParameter":0}]}}]},"remove_all":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"Address"}]},"remove_authorized_user":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"TypeParameter":0}]}}},"Address"],"return":[]},"verify":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"whitelist":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"Address"}]}}},"dutch":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"dutch","friends":[],"structs":{"Auction":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"start_ts_ms","type":"U64"},{"name":"end_ts_ms","type":"U64"},{"name":"price_config","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"PriceConfig","typeArguments":[]}}},{"name":"bid_index","type":"U64"},{"name":"bids","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Bid","typeArguments":[{"TypeParameter":1}]}}]}}},{"name":"ownerships","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["Address",{"Vector":"U64"}]}}},{"name":"total_bid_size","type":"U64"},{"name":"able_to_remove_bid","type":"Bool"}]},"Bid":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"price","type":"U64"},{"name":"size","type":"U64"},{"name":"ts_ms","type":"U64"},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"bidder","type":"Address"}]},"CloseAuction":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"}]},"Delivery":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"bid_index","type":"U64"},{"name":"delivery_price","type":"U64"},{"name":"size","type":"U64"}]},"NewBid":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"bid_index","type":"U64"},{"name":"price","type":"U64"},{"name":"size","type":"U64"},{"name":"balance","type":"U64"},{"name":"ts_ms","type":"U64"}]},"PriceConfig":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"decay_speed","type":"U64"},{"name":"initial_price","type":"U64"},{"name":"final_price","type":"U64"}]},"RemoveBid":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"bid_index","type":"U64"},{"name":"balance","type":"U64"},{"name":"ts_ms","type":"U64"}]},"UpdateRemoveBidAbility":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"previous_setting","type":"Bool"},{"name":"current_setting","type":"Bool"}]}},"exposedFunctions":{"close":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"delivery":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}},"U64","U64","U64",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},"U64","U64","U64","U64","U64"]},"get_auction_bids":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["U64",{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Bid","typeArguments":[{"TypeParameter":1}]}}]}}}]},"get_auction_period":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64","U64"]},"get_bid_index":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"get_decayed_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U64"]},"get_ownerships":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["Address",{"Vector":"U64"}]}}}]},"get_user_bid_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64"],"return":["U64","U64","U64","U64","Address"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U64","U64","U64","U64","U64","Bool",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"new_bid":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64","U64","U64","U64",{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64","U64","U64","U64","U64","Address"]},"remove_bid":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"total_bid_size":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"update_remove_bid_ability":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Bool",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"i64":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"i64","friends":[],"structs":{"I64":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bits","type":"U64"}]}},"exposedFunctions":{"abs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"as_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":["U64"]},"compare":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":["U8"]},"div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"is_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":["Bool"]},"is_zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":["Bool"]},"mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"neg_from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"i64","name":"I64","typeArguments":[]}}]}}},"linked_list":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"linked_list","friends":[],"structs":{"LinkedList":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false},{"constraints":{"abilities":["Store"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"first","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"last","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"length","type":"U64"}]},"Node":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false},{"constraints":{"abilities":["Store"]},"isPhantom":false}],"fields":[{"name":"value","type":{"TypeParameter":1}},{"name":"prev","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"next","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"exists","type":"Bool"}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"chain":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":["Bool"]},"delete":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"first":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"last":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"new_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"TypeParameter":1},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"next":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]},"pop_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"pop_front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"pop_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"prepare_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"prev":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]},"push_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"push_front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"push_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"put_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":1}]}}]},"put_front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":1}]}}]},"put_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":1}]}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Copy","Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"take_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"take_front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"TypeParameter":0},{"TypeParameter":1}]},"take_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]}}},"multiple_collateral":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"multiple_collateral","friends":[],"structs":{},"exposedFunctions":{}},"single_collateral":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"single_collateral","friends":[],"structs":{"AddAuthorizedUser":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"signer","type":"Address"},{"name":"users","type":{"Vector":"Address"}}]},"AddPortfolioVaultAuthorizedUser":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"users","type":{"Vector":"Address"}},{"name":"is_manager","type":"Bool"}]},"Claim":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"amount","type":"U64"},{"name":"fee","type":"U64"}]},"ClaimAndHarvest":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"}]},"Close":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"}]},"Compound":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"amount","type":"U64"}]},"Config":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"option_type","type":"U64"},{"name":"period","type":"U8"},{"name":"activation_ts_ms","type":"U64"},{"name":"expiration_ts_ms","type":"U64"},{"name":"d_token_decimal","type":"U64"},{"name":"b_token_decimal","type":"U64"},{"name":"o_token_decimal","type":"U64"},{"name":"lot_size","type":"U64"},{"name":"capacity","type":"U64"},{"name":"leverage","type":"U64"},{"name":"has_next","type":"Bool"},{"name":"active_vault_config","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}},{"name":"warmup_vault_config","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}},{"name":"upcoming_vault_config","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}}]},"Delivery":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"round","type":"U64"},{"name":"payoff_configs","type":{"Vector":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"PayoffConfig","typeArguments":[]}}}},{"name":"max_size","type":"U64"},{"name":"delivery_price","type":"U64"},{"name":"delivery_size","type":"U64"},{"name":"premium_value","type":"U64"},{"name":"refund_shares","type":"U64"},{"name":"fee_per_unit","type":"U64"},{"name":"accumulated_fee","type":"U64"}]},"DeliveryInfo":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"round","type":"U64"},{"name":"price","type":"U64"},{"name":"size","type":"U64"},{"name":"premium","type":"U64"},{"name":"ts_ms","type":"U64"}]},"Deposit":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"amount","type":"U64"}]},"Evolution":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"}]},"GetUserStatusResult":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"active","type":"U64"},{"name":"deactivating","type":"U64"},{"name":"inactive","type":"U64"},{"name":"warmup","type":"U64"},{"name":"bidder","type":"U64"},{"name":"premium","type":"U64"},{"name":"performance_fee","type":"U64"}]},"Harvest":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"share","type":"U64"},{"name":"amount","type":"U64"}]},"Info":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"index","type":"U64"},{"name":"creator","type":"Address"},{"name":"create_ts_ms","type":"U64"},{"name":"round","type":"U64"},{"name":"delivery_info","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"DeliveryInfo","typeArguments":[]}}]}}}]},"ManagerCap":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"NewAuction":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"start_ts_ms","type":"U64"},{"name":"end_ts_ms","type":"U64"},{"name":"decay_speed","type":"U64"},{"name":"initial_price","type":"U64"},{"name":"final_price","type":"U64"},{"name":"able_to_remove_bid","type":"Bool"}]},"NewBid":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"bid_index","type":"U64"},{"name":"price","type":"U64"},{"name":"size","type":"U64"},{"name":"coin_value","type":"U64"},{"name":"ts_ms","type":"U64"}]},"NewManager":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"signer","type":"Address"},{"name":"users","type":{"Vector":"Address"}}]},"NewPortfolioVault":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"info","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Info","typeArguments":[]}}},{"name":"config","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Config","typeArguments":[]}}},{"name":"is_manager","type":"Bool"}]},"PayoffConfig":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"strike_pct","type":"U64"},{"name":"weight","type":"U64"},{"name":"is_buyer","type":"Bool"},{"name":"strike","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}}]},"PortfolioVault":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"info","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Info","typeArguments":[]}}},{"name":"config","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Config","typeArguments":[]}}},{"name":"deposit_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}},{"TypeParameter":0}]}}},{"name":"bid_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}},{"TypeParameter":1}]}}},{"name":"auction","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"dutch","name":"Auction","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}},{"TypeParameter":1}]}}]}}},{"name":"authority","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}]}}}]},"Registry":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"num_of_vault","type":"U64"},{"name":"authority","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"authority","name":"Authority","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}]}}},{"name":"restrict_activation_time_period","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"RestrictActivationTimePeriod","typeArguments":[]}}},{"name":"user_share_registry","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}}]},"RemoveAuthorizedUser":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"signer","type":"Address"},{"name":"users","type":{"Vector":"Address"}}]},"RemoveManager":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"signer","type":"Address"}]},"RemovePortfolioVaultAuthorizedUser":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"users","type":{"Vector":"Address"}},{"name":"is_manager","type":"Bool"}]},"RestrictActivationTimePeriod":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"from_ts_ms","type":"U64"},{"name":"to_ts_ms","type":"U64"}]},"Settle":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"price","type":"U64"},{"name":"delivery_size","type":"U64"},{"name":"portfolio_payoff","type":"U64"},{"name":"portfolio_payoff_is_neg","type":"Bool"},{"name":"original_premium","type":"U64"},{"name":"portfolio_final_payoff","type":"U64"},{"name":"portfolio_final_payoff_is_neg","type":"Bool"},{"name":"total_balance","type":"U64"},{"name":"share_price","type":"U64"},{"name":"performance_fee","type":"U64"},{"name":"activation_ts_ms","type":"U64"},{"name":"expiration_ts_ms","type":"U64"}]},"TerminateAuction":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"}]},"TerminateVault":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"}]},"Unsubscribe":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"amount","type":"U64"}]},"UpdateActiveVaultConfig":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"previous","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}},{"name":"current","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}}]},"UpdateCapacity":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"previous","type":"U64"},{"name":"current","type":"U64"},{"name":"is_manager","type":"Bool"}]},"UpdateRestrictActivationTimePeriod":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"signer","type":"Address"},{"name":"previous_from_ts_ms","type":"U64"},{"name":"previous_to_ts_ms","type":"U64"},{"name":"current_from_ts_ms","type":"U64"},{"name":"current_to_ts_ms","type":"U64"}]},"UpdateUpcomingVaultConfig":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"previous","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}},{"name":"current","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}},{"name":"is_manager","type":"Bool"}]},"UpdateWarmupVaultConfig":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"previous","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}},{"name":"current","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"VaultConfig","typeArguments":[]}}},{"name":"is_manager","type":"Bool"}]},"VaultConfig":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"payoff_configs","type":{"Vector":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"PayoffConfig","typeArguments":[]}}}},{"name":"strike_increment","type":"U64"},{"name":"decay_speed","type":"U64"},{"name":"initial_price","type":"U64"},{"name":"final_price","type":"U64"},{"name":"auction_duration_in_ms","type":"U64"}]},"VaultTsMs":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"activation_ts_ms","type":"U64"},{"name":"expiration_ts_ms","type":"U64"}]},"Withdraw":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"index","type":"U64"},{"name":"amount","type":"U64"}]}},"exposedFunctions":{"add_authorized_user":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},{"Vector":"Address"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"add_portfolio_vault_authorized_user":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Vector":"Address"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"authorized_add_portfolio_vault_authorized_user":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"authorized_delivery":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"authorized_new_portfolio_vault":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},"U64","U8","U64","U64","U64","U64","U64","U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"Bool"},"U64","U64","U64","U64","U64","U64","U64","Bool",{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"authorized_remove_portfolio_vault_authorized_user":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"authorized_update_capacity":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"authorized_update_upcoming_vault_config":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"Bool"},"U64","U64","U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"authorized_update_warmup_vault_config":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","U64","U64","U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"claim":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"claim_and_harvest":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"close":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"compound":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"delivery":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deposit":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"evolution":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"get_auction_max_size":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}}],"return":["U64"]},"get_max_loss_per_unit":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}}],"return":["U64"]},"get_user_status":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","Address"],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"GetUserStatusResult","typeArguments":[]}}]},"harvest":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new_auction":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","U64",{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new_bid":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5","module":"oracle","name":"Oracle","typeArguments":[{"TypeParameter":2}]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new_manager":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new_portfolio_vault":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},"U64","U8","U64","U64","U64","U64","U64","U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"Bool"},"U64","U64","U64","U64","U64","U64","U64","Bool",{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"remove_authorized_user":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},{"Vector":"Address"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"remove_manager":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"remove_portfolio_vault_authorized_user":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Vector":"Address"},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"terminate_auction":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"terminate_vault":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"unsubscribe":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_active_vault_config":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","U64","U64","U64","U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_capacity":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_restrict_activation_time_period":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_upcoming_vault_config":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"Bool"},"U64","U64","U64","U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_warmup_vault_config":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"ManagerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64","U64","U64","U64","U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"withdraw":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"single_collateral","name":"Registry","typeArguments":[]}}},"U64",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"utils":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"utils","friends":[],"structs":{},"exposedFunctions":{"extract_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]},"get_date_from_ts":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":["U64","U64","U64"]},"match_types":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[],"return":["Bool"]},"multiplier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":["U64"]}}},"vault":{"fileFormatVersion":6,"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","name":"vault","friends":[],"structs":{"Activate":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"amount","type":"U64"},{"name":"has_next","type":"Bool"}]},"BidVault":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"bidder_sub_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"SubVault","typeArguments":[{"TypeParameter":1}]}}},{"name":"premium_sub_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"SubVault","typeArguments":[{"TypeParameter":1}]}}},{"name":"performance_fee_sub_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"SubVault","typeArguments":[{"TypeParameter":1}]}}}]},"Claim":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"user_amount","type":"U64"},{"name":"claim_fee_amount","type":"U64"}]},"CloseBidVault":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"bidder_sub_vault_receipt","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}},{"name":"premium_sub_vault_receipt","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}},{"name":"performance_fee_sub_vault_receipt","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}}]},"CloseDepositVault":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"active_sub_vault_receipt","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}},{"name":"deactivating_sub_vault_receipt","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}},{"name":"inactive_sub_vault_receipt","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}},{"name":"warmup_sub_vault_receipt","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}}]},"Compound":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"amount","type":"U64"}]},"Delivery":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"premium","type":"U64"},{"name":"performance_fee","type":"U64"}]},"DeliveryMultiple":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"premium","type":"U64"},{"name":"performance_fee","type":"U64"}]},"Deposit":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"amount","type":"U64"}]},"DepositVault":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"active_sub_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"SubVault","typeArguments":[{"TypeParameter":1}]}}},{"name":"deactivating_sub_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"SubVault","typeArguments":[{"TypeParameter":1}]}}},{"name":"inactive_sub_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"SubVault","typeArguments":[{"TypeParameter":1}]}}},{"name":"warmup_sub_vault","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"SubVault","typeArguments":[{"TypeParameter":1}]}}},{"name":"has_next","type":"Bool"}]},"Harvest":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"share","type":"U64"},{"name":"amount","type":"U64"}]},"NewBidVault":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"}]},"NewDepositVault":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"}]},"Refund":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"amount","type":"U64"},{"name":"deactivating","type":"U64"},{"name":"active","type":"U64"}]},"Settle":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"settled_share_price","type":"U64"},{"name":"share_price_decimal","type":"U64"},{"name":"spot_price","type":"U64"},{"name":"spot_price_decimal","type":"U64"}]},"SettleMultiple":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"settled_share_price_token","type":"U64"},{"name":"settled_share_price_usd","type":"U64"},{"name":"share_price_decimal","type":"U64"},{"name":"spot_price","type":"U64"},{"name":"spot_price_decimal","type":"U64"}]},"SubVault":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"index","type":"U64"},{"name":"tag","type":"U64"},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"share_supply","type":"U64"},{"name":"user_shares","type":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"Unsubscribe":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"amount","type":"U64"}]},"UserShareKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"index","type":"U64"},{"name":"tag","type":"U64"},{"name":"user","type":"Address"}]},"UserShareRegistry":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"Withdraw":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"signer","type":"Address"},{"name":"amount","type":"U64"}]}},"exposedFunctions":{"activate":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Bool",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"active_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"active_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"active_user_shares":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"bidder_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"bidder_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"bidder_shares":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"claim":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64","U64"]},"close_bid_vault":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}]},"close_deposit_vault":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}}]},"compound":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"deactivating_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"deactivating_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"deactivating_user_shares":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"delivery":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":2}]}}},"U64",{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"delivery_multiple":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":2}]}}},"U64",{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address","U64"]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deposit":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},"U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"get_active_user_share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["U64"]},"get_bid_vault_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64","U64"]},"get_bid_vault_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64","U64"]},"get_bidder_user_share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["U64"]},"get_deactivating_user_share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["U64"]},"get_deposit_vault_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64","U64","U64","U64"]},"get_deposit_vault_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64","U64","U64","U64"]},"get_inactive_user_share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["U64"]},"get_performance_fee_user_share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["U64"]},"get_premium_user_share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["U64"]},"get_warmup_user_share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["U64"]},"harvest":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64","U64"]},"has_next":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"inactive_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"inactive_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"inactive_user_shares":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"is_active_user":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["Bool"]},"is_deactivating_user":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["Bool"]},"is_inactive_user":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["Bool"]},"is_warmup_user":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Address"],"return":["Bool"]},"new_bid_vault":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U64",{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"new_deposit_vault":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U64",{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"new_user_share_registry":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}]},"performance_fee_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"performance_fee_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"performance_fee_shares":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"premium_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"premium_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"premium_shares":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"refund":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"settle_fund":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":2}]}}},"U64","U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"settle_fund_multiple":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"TypeParameter":0}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"BidVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":2}]}}},"U64","U64","U64","U64","U64","U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"unsubscribe":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"user_share_registry_uid":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"warmup_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"warmup_share_supply":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"warmup_user_shares":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"linked_list","name":"LinkedList","typeArguments":[{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareKey","typeArguments":[]}},"U64"]}}}]},"withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"UserShareRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2","module":"vault","name":"DepositVault","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  _0x1e2b124f746a339b3cf99b9f969393a96594519aafb1d06517aacfeeae20e7a5.loadAllTypes(
    coder,
  );
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0xebaa2ad3eacc230f309cd933958cc52684df0a41ae7ac214d186b80f830867d2",
    );
  }
}

loadAllTypes(defaultMoveCoder());
